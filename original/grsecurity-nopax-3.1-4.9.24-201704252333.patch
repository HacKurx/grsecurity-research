diff --git a/Documentation/dontdiff b/Documentation/dontdiff
index faaa4ffac1d8..607c6a0f3454 100644
--- a/Documentation/dontdiff
+++ b/Documentation/dontdiff
@@ -229,6 +229,8 @@ r200_reg_safe.h
 r300_reg_safe.h
 r420_reg_safe.h
 r600_reg_safe.h
+randomize_layout_hash.h
+randomize_layout_seed.h
 realmode.lds
 realmode.relocs
 recordmcount
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 44e08f4e7aa1..fdf60423fb17 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -1436,6 +1436,12 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 			[KNL] Should the hard-lockup detector generate
 			backtraces on all cpus.
 			Format: <integer>
+	grsec_proc_gid= [GRKERNSEC_PROC_USERGROUP] Chooses GID to
+			ignore grsecurity's /proc restrictions
+
+	grsec_sysfs_restrict= Format: 0 | 1
+			Default: 1
+			Disables GRKERNSEC_SYSFS_RESTRICT if enabled in config
 
 	hashdist=	[KNL,NUMA] Large hashes allocated during boot
 			are distributed across NUMA nodes.  Defaults on
diff --git a/Documentation/sysctl/kernel.txt b/Documentation/sysctl/kernel.txt
index ffab8b5caa60..b8fcd6113d88 100644
--- a/Documentation/sysctl/kernel.txt
+++ b/Documentation/sysctl/kernel.txt
@@ -42,6 +42,7 @@ show up in /proc/sys/kernel:
 - kptr_restrict
 - kstack_depth_to_print       [ X86 only ]
 - l2cr                        [ PPC only ]
+- modify_ldt                  [ X86 only ]
 - modprobe                    ==> Documentation/debugging-modules.txt
 - modules_disabled
 - msg_next_id		      [ sysv ipc ]
@@ -409,6 +410,20 @@ This flag controls the L2 cache of G3 processor boards. If
 
 ==============================================================
 
+modify_ldt: (X86 only)
+
+Enables (1) or disables (0) the modify_ldt syscall. Modifying the LDT
+(Local Descriptor Table) may be needed to run a 16-bit or segmented code
+such as Dosemu or Wine. This is done via a system call which is not needed
+to run portable applications, and which can sometimes be abused to exploit
+some weaknesses of the architecture, opening new vulnerabilities.
+
+This sysctl allows one to increase the system's security by disabling the
+system call, or to restore compatibility with specific applications when it
+was already disabled.
+
+==============================================================
+
 modules_disabled:
 
 A toggle value indicating if modules are allowed to be loaded
diff --git a/Makefile b/Makefile
index 7f59c8d364eb..435d3558eacb 100644
--- a/Makefile
+++ b/Makefile
@@ -912,7 +912,7 @@ export mod_sign_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ grsecurity/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
@@ -1278,7 +1278,8 @@ MRPROPER_FILES += .config .config.old .version .old_version \
 		  x509.genkey extra_certificates signing_key.x509.keyid	\
 		  signing_key.x509.signer vmlinux-gdb.py \
 		  scripts/gcc-plugins/size_overflow_plugin/e_*.h \
-		  scripts/gcc-plugins/size_overflow_plugin/disable.h
+		  scripts/gcc-plugins/size_overflow_plugin/disable.h \
+		  scripts/gcc-plugins/randomize_layout_seed.h
 
 # clean - Delete most, but leave enough to build external modules
 #
diff --git a/arch/Kconfig b/arch/Kconfig
index 6918a376a9e6..41791813059c 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -759,7 +759,8 @@ config HAVE_ARCH_VMAP_STACK
 config VMAP_STACK
 	default y
 	bool "Use a virtually-mapped stack"
-	depends on HAVE_ARCH_VMAP_STACK && !KASAN && BROKEN_SECURITY
+	depends on HAVE_ARCH_VMAP_STACK && !KASAN
+	depends on !GRKERNSEC_KSTACKOVERFLOW
 	---help---
 	  Enable this if you want the use virtually-mapped kernel stacks
 	  with guard pages.  This causes kernel stack overflows to be
diff --git a/arch/alpha/include/asm/cache.h b/arch/alpha/include/asm/cache.h
index ad368a93a46a..fbe0f2514a1b 100644
--- a/arch/alpha/include/asm/cache.h
+++ b/arch/alpha/include/asm/cache.h
@@ -4,19 +4,19 @@
 #ifndef __ARCH_ALPHA_CACHE_H
 #define __ARCH_ALPHA_CACHE_H
 
+#include <linux/const.h>
 
 /* Bytes per L1 (data) cache line. */
 #if defined(CONFIG_ALPHA_GENERIC) || defined(CONFIG_ALPHA_EV6)
-# define L1_CACHE_BYTES     64
 # define L1_CACHE_SHIFT     6
 #else
 /* Both EV4 and EV5 are write-through, read-allocate,
    direct-mapped, physical.
 */
-# define L1_CACHE_BYTES     32
 # define L1_CACHE_SHIFT     5
 #endif
 
+#define L1_CACHE_BYTES     (_AC(1,UL) << L1_CACHE_SHIFT)
 #define SMP_CACHE_BYTES    L1_CACHE_BYTES
 
 #endif
diff --git a/arch/alpha/kernel/osf_sys.c b/arch/alpha/kernel/osf_sys.c
index 509dc3a70662..ced8233e712d 100644
--- a/arch/alpha/kernel/osf_sys.c
+++ b/arch/alpha/kernel/osf_sys.c
@@ -1300,10 +1300,11 @@ SYSCALL_DEFINE1(old_adjtimex, struct timex32 __user *, txc_p)
    generic version except that we know how to honor ADDR_LIMIT_32BIT.  */
 
 static unsigned long
-arch_get_unmapped_area_1(unsigned long addr, unsigned long len,
-		         unsigned long limit)
+arch_get_unmapped_area_1(struct file *filp, unsigned long addr, unsigned long len,
+		         unsigned long limit, unsigned long flags)
 {
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(current->mm, filp, flags);
 
 	info.flags = 0;
 	info.length = len;
@@ -1311,6 +1312,7 @@ arch_get_unmapped_area_1(unsigned long addr, unsigned long len,
 	info.high_limit = limit;
 	info.align_mask = 0;
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	return vm_unmapped_area(&info);
 }
 
@@ -1348,19 +1350,19 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 #endif
 
 	if (addr) {
-		addr = arch_get_unmapped_area_1 (PAGE_ALIGN(addr), len, limit);
+		addr = arch_get_unmapped_area_1 (filp, PAGE_ALIGN(addr), len, limit, flags);
 		if (addr != (unsigned long) -ENOMEM)
 			return addr;
 	}
 
 	/* Next, try allocating at TASK_UNMAPPED_BASE.  */
-	addr = arch_get_unmapped_area_1 (PAGE_ALIGN(current->mm->mmap_base), len, limit);
+	addr = arch_get_unmapped_area_1 (filp, PAGE_ALIGN(current->mm->mmap_base), len, limit, flags);
 
 	if (addr != (unsigned long) -ENOMEM)
 		return addr;
 
 	/* Finally, try allocating in low memory.  */
-	addr = arch_get_unmapped_area_1 (PAGE_SIZE, len, limit);
+	addr = arch_get_unmapped_area_1 (filp, PAGE_SIZE, len, limit, flags);
 
 	return addr;
 }
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index cde2b4cbd9d9..0bb4d4fde306 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1622,6 +1622,7 @@ config AEABI
 config OABI_COMPAT
 	bool "Allow old ABI binaries to run with this kernel (EXPERIMENTAL)"
 	depends on AEABI && !THUMB2_KERNEL
+	depends on !GRKERNSEC
 	help
 	  This option preserves the old syscall interface along with the
 	  new (ARM EABI) one. It also provides a compatibility layer to
@@ -2022,6 +2023,7 @@ config KEXEC
 	depends on (!SMP || PM_SLEEP_SMP)
 	depends on !CPU_V7M
 	select KEXEC_CORE
+	depends on !GRKERNSEC_KMEM
 	help
 	  kexec is a system call that implements the ability to shutdown your
 	  current kernel, and to start another kernel.  It is like a reboot
diff --git a/arch/arm/Kconfig.debug b/arch/arm/Kconfig.debug
index d83f7c369e51..a6aba4c83267 100644
--- a/arch/arm/Kconfig.debug
+++ b/arch/arm/Kconfig.debug
@@ -7,6 +7,7 @@ config ARM_PTDUMP
 	depends on DEBUG_KERNEL
 	depends on MMU
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	---help---
 	  Say Y here if you want to show the kernel pagetable layout in a
 	  debugfs file. This information is only useful for kernel developers
diff --git a/arch/arm/include/asm/cacheflush.h b/arch/arm/include/asm/cacheflush.h
index 382bad360cb7..e66fb83774b3 100644
--- a/arch/arm/include/asm/cacheflush.h
+++ b/arch/arm/include/asm/cacheflush.h
@@ -116,7 +116,7 @@ struct cpu_cache_fns {
 	void (*dma_unmap_area)(const void *, size_t, int);
 
 	void (*dma_flush_range)(const void *, const void *);
-} __no_const;
+} __no_const __no_randomize_layout;
 
 /*
  * Select the calling method
diff --git a/arch/arm/include/asm/thread_info.h b/arch/arm/include/asm/thread_info.h
index 236a60e6a58a..a552c1d752db 100644
--- a/arch/arm/include/asm/thread_info.h
+++ b/arch/arm/include/asm/thread_info.h
@@ -146,6 +146,10 @@ extern int vfp_restore_user_hwstate(struct user_vfp __user *,
 #define TIF_SYSCALL_AUDIT	5	/* syscall auditing active */
 #define TIF_SYSCALL_TRACEPOINT	6	/* syscall tracepoint instrumentation */
 #define TIF_SECCOMP		7	/* seccomp syscall filtering active */
+/* within 8 bits of TIF_SYSCALL_TRACE
+ *  to meet flexible second operand requirements
+ */
+#define TIF_GRSEC_SETXID	8
 
 #define TIF_NOHZ		12	/* in adaptive nohz mode */
 #define TIF_USING_IWMMXT	17
@@ -161,10 +165,11 @@ extern int vfp_restore_user_hwstate(struct user_vfp __user *,
 #define _TIF_SYSCALL_TRACEPOINT	(1 << TIF_SYSCALL_TRACEPOINT)
 #define _TIF_SECCOMP		(1 << TIF_SECCOMP)
 #define _TIF_USING_IWMMXT	(1 << TIF_USING_IWMMXT)
+#define _TIF_GRSEC_SETXID	(1 << TIF_GRSEC_SETXID)
 
 /* Checks for any syscall work in entry-common.S */
 #define _TIF_SYSCALL_WORK (_TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT | \
-			   _TIF_SYSCALL_TRACEPOINT | _TIF_SECCOMP)
+			   _TIF_SYSCALL_TRACEPOINT | _TIF_SECCOMP | _TIF_GRSEC_SETXID)
 
 /*
  * Change these and you break ASM code in entry-common.S
diff --git a/arch/arm/kernel/entry-common.S b/arch/arm/kernel/entry-common.S
index d5f4b186a6f7..c47cdf5d9fbc 100644
--- a/arch/arm/kernel/entry-common.S
+++ b/arch/arm/kernel/entry-common.S
@@ -64,7 +64,9 @@ ret_fast_syscall:
  UNWIND(.cantunwind	)
 	disable_irq_notrace			@ disable interrupts
 	ldr	r1, [tsk, #TI_FLAGS]		@ re-check for syscall tracing
-	tst	r1, #_TIF_SYSCALL_WORK | _TIF_WORK_MASK
+	tst	r1, #_TIF_SYSCALL_WORK
+	bne	fast_work_pending
+	tst	r1, #_TIF_WORK_MASK
 	bne	fast_work_pending
 
 	/* perform architecture specific actions before user return */
@@ -90,7 +92,9 @@ ret_fast_syscall:
 	str	r0, [sp, #S_R0 + S_OFF]!	@ save returned r0
 	disable_irq_notrace			@ disable interrupts
 	ldr	r1, [tsk, #TI_FLAGS]		@ re-check for syscall tracing
-	tst	r1, #_TIF_SYSCALL_WORK | _TIF_WORK_MASK
+	tst	r1, #_TIF_SYSCALL_WORK
+	bne	__sys_trace_return_nosave
+	tst	r1, #_TIF_WORK_MASK
 	beq	no_work_pending
  UNWIND(.fnend		)
 ENDPROC(ret_fast_syscall)
diff --git a/arch/arm/kernel/process.c b/arch/arm/kernel/process.c
index 43f9298656c5..042c26e5f224 100644
--- a/arch/arm/kernel/process.c
+++ b/arch/arm/kernel/process.c
@@ -118,8 +118,8 @@ void __show_regs(struct pt_regs *regs)
 
 	show_regs_print_info(KERN_DEFAULT);
 
-	print_symbol("PC is at %s\n", instruction_pointer(regs));
-	print_symbol("LR is at %s\n", regs->ARM_lr);
+	printk("PC is at %pA\n", (void *)instruction_pointer(regs));
+	printk("LR is at %pA\n", (void *)regs->ARM_lr);
 	printk("pc : [<%08lx>]    lr : [<%08lx>]    psr: %08lx\n"
 	       "sp : %08lx  ip : %08lx  fp : %08lx\n",
 		regs->ARM_pc, regs->ARM_lr, regs->ARM_cpsr,
diff --git a/arch/arm/kernel/ptrace.c b/arch/arm/kernel/ptrace.c
index ae738a6319f6..ee4d46fe3e22 100644
--- a/arch/arm/kernel/ptrace.c
+++ b/arch/arm/kernel/ptrace.c
@@ -928,10 +928,19 @@ static void tracehook_report_syscall(struct pt_regs *regs,
 	regs->ARM_ip = ip;
 }
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+extern void gr_delayed_cred_worker(void);
+#endif
+
 asmlinkage int syscall_trace_enter(struct pt_regs *regs, int scno)
 {
 	current_thread_info()->syscall = scno;
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	if (test_thread_flag(TIF_SYSCALL_TRACE))
 		tracehook_report_syscall(regs, PTRACE_SYSCALL_ENTER);
 
diff --git a/arch/arm/kernel/traps.c b/arch/arm/kernel/traps.c
index 9688ec0c6ef4..dd072c025e66 100644
--- a/arch/arm/kernel/traps.c
+++ b/arch/arm/kernel/traps.c
@@ -65,7 +65,7 @@ static void dump_mem(const char *, const char *, unsigned long, unsigned long);
 void dump_backtrace_entry(unsigned long where, unsigned long from, unsigned long frame)
 {
 #ifdef CONFIG_KALLSYMS
-	printk("[<%08lx>] (%ps) from [<%08lx>] (%pS)\n", where, (void *)where, from, (void *)from);
+	printk("[<%08lx>] (%pA) from [<%08lx>] (%pA)\n", where, (void *)where, from, (void *)from);
 #else
 	printk("Function entered at [<%08lx>] from [<%08lx>]\n", where, from);
 #endif
@@ -287,6 +287,8 @@ static arch_spinlock_t die_lock = __ARCH_SPIN_LOCK_UNLOCKED;
 static int die_owner = -1;
 static unsigned int die_nest_count;
 
+extern void gr_handle_kernel_exploit(void);
+
 static unsigned long oops_begin(void)
 {
 	int cpu;
@@ -329,6 +331,9 @@ static void oops_end(unsigned long flags, struct pt_regs *regs, int signr)
 		panic("Fatal exception in interrupt");
 	if (panic_on_oops)
 		panic("Fatal exception");
+
+	gr_handle_kernel_exploit();
+
 	if (signr)
 		do_exit(signr);
 }
diff --git a/arch/arm/mm/Kconfig b/arch/arm/mm/Kconfig
index 368d01d6bba9..9111dcc934b1 100644
--- a/arch/arm/mm/Kconfig
+++ b/arch/arm/mm/Kconfig
@@ -815,7 +815,7 @@ config NEED_KUSER_HELPERS
 
 config KUSER_HELPERS
 	bool "Enable kuser helpers in vector page" if !NEED_KUSER_HELPERS
-	depends on MMU && !(CPU_V6 || CPU_V6K || CPU_V7)
+	depends on MMU && (!(CPU_V6 || CPU_V6K || CPU_V7) || GRKERNSEC_OLD_ARM_USERLAND)
 	default y
 	help
 	  Warning: disabling this option may break user programs.
@@ -844,7 +844,7 @@ config KUSER_HELPERS
 
 config VDSO
 	bool "Enable VDSO for acceleration of some system calls"
-	depends on AEABI && MMU && CPU_V7
+	depends on AEABI && MMU && CPU_V7 && !PAX_KERNEXEC && !PAX_MEMORY_UDEREF
 	default y if ARM_ARCH_TIMER
 	select GENERIC_TIME_VSYSCALL
 	help
diff --git a/arch/arm/mm/fault.c b/arch/arm/mm/fault.c
index cb0ccaf1c1cd..1aae1cbe7f27 100644
--- a/arch/arm/mm/fault.c
+++ b/arch/arm/mm/fault.c
@@ -140,9 +140,14 @@ __do_kernel_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr,
 		return;
 
 #ifdef CONFIG_PAX_MEMORY_UDEREF
-	if (addr < TASK_SIZE)
-		printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to access userland memory at %08lx\n", current->comm, task_pid_nr(current),
-				from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()), addr);
+	if (addr < TASK_SIZE) {
+		if (current->signal->curr_ip)
+			printk(KERN_EMERG "PAX: From %pI4: %s:%d, uid/euid: %u/%u, attempted to access userland memory at %08lx\n", &current->signal->curr_ip, current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()), addr);
+		else
+			printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to access userland memory at %08lx\n", current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()), addr);
+	}
 #endif
 
 #ifdef CONFIG_PAX_KERNEXEC
@@ -150,8 +155,12 @@ __do_kernel_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr,
 	    (((unsigned long)_stext <= addr && addr < init_mm.end_code) ||
 	     (MODULES_VADDR <= addr && addr < MODULES_END)))
 	{
-		printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to modify kernel code\n", current->comm, task_pid_nr(current),
-				from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()));
+		if (current->signal->curr_ip)
+			printk(KERN_EMERG "PAX: From %pI4: %s:%d, uid/euid: %u/%u, attempted to modify kernel code\n", &current->signal->curr_ip, current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()));
+		else
+			printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to modify kernel code\n", current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()));
 	}
 #endif
 
@@ -600,8 +609,12 @@ do_DataAbort(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 
 #ifdef CONFIG_PAX_MEMORY_UDEREF
 	if (addr < TASK_SIZE && is_domain_fault(fsr)) {
-		printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to access userland memory at %08lx\n", current->comm, task_pid_nr(current),
-				from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()), addr);
+		if (current->signal->curr_ip)
+			printk(KERN_EMERG "PAX: From %pI4: %s:%d, uid/euid: %u/%u, attempted to access userland memory at %08lx\n", &current->signal->curr_ip, current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()), addr);
+		else
+			printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to access userland memory at %08lx\n", current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()), addr);
 		goto die;
 	}
 #endif
@@ -710,11 +723,14 @@ do_PrefetchAbort(unsigned long addr, unsigned int ifsr, struct pt_regs *regs)
 
 #if defined(CONFIG_PAX_KERNEXEC) || defined(CONFIG_PAX_MEMORY_UDEREF)
 	else if (is_domain_fault(ifsr) || is_xn_fault(ifsr)) {
-		printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to execute %s memory at %08lx\n",
-				current->comm, task_pid_nr(current),
-				from_kuid_munged(&init_user_ns, current_uid()),
-				from_kuid_munged(&init_user_ns, current_euid()),
-				pc >= TASK_SIZE ? "non-executable kernel" : "userland", pc);
+		if (current->signal->curr_ip)
+			printk(KERN_EMERG "PAX: From %pI4: %s:%d, uid/euid: %u/%u, attempted to execute %s memory at %08lx\n", &current->signal->curr_ip, current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()),
+					pc >= TASK_SIZE ? "non-executable kernel" : "userland", pc);
+		else
+			printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to execute %s memory at %08lx\n", current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()),
+					pc >= TASK_SIZE ? "non-executable kernel" : "userland", pc);
 		goto die;
 	}
 #endif
diff --git a/arch/arm/mm/mmap.c b/arch/arm/mm/mmap.c
index 1681a1900a4e..8aad9f8657b4 100644
--- a/arch/arm/mm/mmap.c
+++ b/arch/arm/mm/mmap.c
@@ -59,6 +59,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	struct vm_area_struct *vma;
 	int do_align = 0;
 	int aliasing = cache_is_vipt_aliasing();
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 	struct vm_unmapped_area_info info;
 
 	/*
@@ -92,7 +93,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -102,6 +103,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	info.high_limit = TASK_SIZE;
 	info.align_mask = do_align ? (PAGE_MASK & (SHMLBA - 1)) : 0;
 	info.align_offset = pgoff << PAGE_SHIFT;
+	info.threadstack_offset = offset;
 	return vm_unmapped_area(&info);
 }
 
@@ -115,6 +117,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	unsigned long addr = addr0;
 	int do_align = 0;
 	int aliasing = cache_is_vipt_aliasing();
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 	struct vm_unmapped_area_info info;
 
 	/*
@@ -146,7 +149,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 		else
 			addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -156,6 +159,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	info.high_limit = mm->mmap_base;
 	info.align_mask = do_align ? (PAGE_MASK & (SHMLBA - 1)) : 0;
 	info.align_offset = pgoff << PAGE_SHIFT;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 	/*
diff --git a/arch/arm/net/bpf_jit_32.c b/arch/arm/net/bpf_jit_32.c
index 0843291ec6b9..2db6d9995251 100644
--- a/arch/arm/net/bpf_jit_32.c
+++ b/arch/arm/net/bpf_jit_32.c
@@ -73,54 +73,38 @@ struct jit_ctx {
 #endif
 };
 
+#ifdef CONFIG_GRKERNSEC_BPF_HARDEN
+int bpf_jit_enable __read_only;
+#else
 int bpf_jit_enable __read_mostly;
+#endif
 
-static inline int call_neg_helper(struct sk_buff *skb, int offset, void *ret,
-		      unsigned int size)
-{
-	void *ptr = bpf_internal_load_pointer_neg_helper(skb, offset, size);
-
-	if (!ptr)
-		return -EFAULT;
-	memcpy(ret, ptr, size);
-	return 0;
-}
-
-static u64 jit_get_skb_b(struct sk_buff *skb, int offset)
+static u64 jit_get_skb_b(struct sk_buff *skb, unsigned offset)
 {
 	u8 ret;
 	int err;
 
-	if (offset < 0)
-		err = call_neg_helper(skb, offset, &ret, 1);
-	else
-		err = skb_copy_bits(skb, offset, &ret, 1);
+	err = skb_copy_bits(skb, offset, &ret, 1);
 
 	return (u64)err << 32 | ret;
 }
 
-static u64 jit_get_skb_h(struct sk_buff *skb, int offset)
+static u64 jit_get_skb_h(struct sk_buff *skb, unsigned offset)
 {
 	u16 ret;
 	int err;
 
-	if (offset < 0)
-		err = call_neg_helper(skb, offset, &ret, 2);
-	else
-		err = skb_copy_bits(skb, offset, &ret, 2);
+	err = skb_copy_bits(skb, offset, &ret, 2);
 
 	return (u64)err << 32 | ntohs(ret);
 }
 
-static u64 jit_get_skb_w(struct sk_buff *skb, int offset)
+static u64 jit_get_skb_w(struct sk_buff *skb, unsigned offset)
 {
 	u32 ret;
 	int err;
 
-	if (offset < 0)
-		err = call_neg_helper(skb, offset, &ret, 4);
-	else
-		err = skb_copy_bits(skb, offset, &ret, 4);
+	err = skb_copy_bits(skb, offset, &ret, 4);
 
 	return (u64)err << 32 | ntohl(ret);
 }
@@ -557,6 +541,9 @@ static int build_body(struct jit_ctx *ctx)
 		case BPF_LD | BPF_B | BPF_ABS:
 			load_order = 0;
 load:
+			/* the interpreter will deal with the negative K */
+			if ((int)k < 0)
+				return -ENOTSUPP;
 			emit_mov_i(r_off, k, ctx);
 load_common:
 			ctx->seen |= SEEN_DATA | SEEN_CALL;
@@ -571,18 +558,6 @@ static int build_body(struct jit_ctx *ctx)
 				condt = ARM_COND_HI;
 			}
 
-			/*
-			 * test for negative offset, only if we are
-			 * currently scheduled to take the fast
-			 * path. this will update the flags so that
-			 * the slowpath instruction are ignored if the
-			 * offset is negative.
-			 *
-			 * for loard_order == 0 the HI condition will
-			 * make loads at offset 0 take the slow path too.
-			 */
-			_emit(condt, ARM_CMP_I(r_off, 0), ctx);
-
 			_emit(condt, ARM_ADD_R(r_scratch, r_off, r_skb_data),
 			      ctx);
 
diff --git a/arch/arm64/Kconfig.debug b/arch/arm64/Kconfig.debug
index b661fe742615..6d124fc0785f 100644
--- a/arch/arm64/Kconfig.debug
+++ b/arch/arm64/Kconfig.debug
@@ -6,6 +6,7 @@ config ARM64_PTDUMP
 	bool "Export kernel pagetable layout to userspace via debugfs"
 	depends on DEBUG_KERNEL
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
         help
 	  Say Y here if you want to show the kernel pagetable layout in a
 	  debugfs file. This information is only useful for kernel developers
diff --git a/arch/arm64/include/asm/atomic.h b/arch/arm64/include/asm/atomic.h
index efc792c2b7da..86eb6849cbdd 100644
--- a/arch/arm64/include/asm/atomic.h
+++ b/arch/arm64/include/asm/atomic.h
@@ -130,6 +130,8 @@
 #define __atomic_add_unless(v, a, u)	___atomic_add_unless(v, a, u,)
 #define atomic_andnot			atomic_andnot
 
+#define atomic_inc_return_unchecked_relaxed(v)	atomic_add_return_relaxed(1, (v))
+
 /*
  * 64-bit atomic operations.
  */
diff --git a/arch/arm64/include/asm/cache.h b/arch/arm64/include/asm/cache.h
index edb5819ee76d..9ef38c255893 100644
--- a/arch/arm64/include/asm/cache.h
+++ b/arch/arm64/include/asm/cache.h
@@ -20,6 +20,8 @@
 
 #include <asm/cachetype.h>
 
+#include <linux/const.h>
+
 #define L1_CACHE_SHIFT		7
 #define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
diff --git a/arch/arm64/include/asm/pgtable.h b/arch/arm64/include/asm/pgtable.h
index 8663d5b962d5..d8b49ffdb58c 100644
--- a/arch/arm64/include/asm/pgtable.h
+++ b/arch/arm64/include/asm/pgtable.h
@@ -23,6 +23,9 @@
 #include <asm/pgtable-hwdef.h>
 #include <asm/pgtable-prot.h>
 
+#define ktla_ktva(addr)		(addr)
+#define ktva_ktla(addr)		(addr)
+
 /*
  * VMALLOC range.
  *
diff --git a/arch/avr32/include/asm/cache.h b/arch/avr32/include/asm/cache.h
index c3a58a189a91..78fbf54a9aa3 100644
--- a/arch/avr32/include/asm/cache.h
+++ b/arch/avr32/include/asm/cache.h
@@ -1,8 +1,10 @@
 #ifndef __ASM_AVR32_CACHE_H
 #define __ASM_AVR32_CACHE_H
 
+#include <linux/const.h>
+
 #define L1_CACHE_SHIFT 5
-#define L1_CACHE_BYTES (1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES (_AC(1,UL) << L1_CACHE_SHIFT)
 
 /*
  * Memory returned by kmalloc() may be used for DMA, so we must make
diff --git a/arch/blackfin/Kconfig.debug b/arch/blackfin/Kconfig.debug
index f3337ee03621..15b6f8d7b6f5 100644
--- a/arch/blackfin/Kconfig.debug
+++ b/arch/blackfin/Kconfig.debug
@@ -18,6 +18,7 @@ config DEBUG_VERBOSE
 config DEBUG_MMRS
 	tristate "Generate Blackfin MMR tree"
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	help
 	  Create a tree of Blackfin MMRs via the debugfs tree.  If
 	  you enable this, you will find all MMRs laid out in the
diff --git a/arch/blackfin/include/asm/cache.h b/arch/blackfin/include/asm/cache.h
index 568885a2c286..f8008df2eff8 100644
--- a/arch/blackfin/include/asm/cache.h
+++ b/arch/blackfin/include/asm/cache.h
@@ -7,6 +7,7 @@
 #ifndef __ARCH_BLACKFIN_CACHE_H
 #define __ARCH_BLACKFIN_CACHE_H
 
+#include <linux/const.h>
 #include <linux/linkage.h>	/* for asmlinkage */
 
 /*
@@ -14,7 +15,7 @@
  * Blackfin loads 32 bytes for cache
  */
 #define L1_CACHE_SHIFT	5
-#define L1_CACHE_BYTES	(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES	(_AC(1,UL) << L1_CACHE_SHIFT)
 #define SMP_CACHE_BYTES	L1_CACHE_BYTES
 
 #define ARCH_DMA_MINALIGN	L1_CACHE_BYTES
diff --git a/arch/cris/include/arch-v10/arch/cache.h b/arch/cris/include/arch-v10/arch/cache.h
index aea27184d2d2..3639a60b765f 100644
--- a/arch/cris/include/arch-v10/arch/cache.h
+++ b/arch/cris/include/arch-v10/arch/cache.h
@@ -1,8 +1,9 @@
 #ifndef _ASM_ARCH_CACHE_H
 #define _ASM_ARCH_CACHE_H
 
+#include <linux/const.h>
 /* Etrax 100LX have 32-byte cache-lines. */
-#define L1_CACHE_BYTES 32
 #define L1_CACHE_SHIFT 5
+#define L1_CACHE_BYTES (_AC(1,UL) << L1_CACHE_SHIFT)
 
 #endif /* _ASM_ARCH_CACHE_H */
diff --git a/arch/cris/include/arch-v32/arch/cache.h b/arch/cris/include/arch-v32/arch/cache.h
index 7caf25d58e6b..ee65ac530f62 100644
--- a/arch/cris/include/arch-v32/arch/cache.h
+++ b/arch/cris/include/arch-v32/arch/cache.h
@@ -1,11 +1,12 @@
 #ifndef _ASM_CRIS_ARCH_CACHE_H
 #define _ASM_CRIS_ARCH_CACHE_H
 
+#include <linux/const.h>
 #include <arch/hwregs/dma.h>
 
 /* A cache-line is 32 bytes. */
-#define L1_CACHE_BYTES 32
 #define L1_CACHE_SHIFT 5
+#define L1_CACHE_BYTES (_AC(1,UL) << L1_CACHE_SHIFT)
 
 #define __read_mostly __attribute__((__section__(".data..read_mostly")))
 
diff --git a/arch/frv/include/asm/cache.h b/arch/frv/include/asm/cache.h
index 2797163b8f4f..c2a401df9dc6 100644
--- a/arch/frv/include/asm/cache.h
+++ b/arch/frv/include/asm/cache.h
@@ -12,10 +12,11 @@
 #ifndef __ASM_CACHE_H
 #define __ASM_CACHE_H
 
+#include <linux/const.h>
 
 /* bytes per L1 cache line */
 #define L1_CACHE_SHIFT		(CONFIG_FRV_L1_CACHE_SHIFT)
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #define __cacheline_aligned	__attribute__((aligned(L1_CACHE_BYTES)))
 #define ____cacheline_aligned	__attribute__((aligned(L1_CACHE_BYTES)))
diff --git a/arch/frv/mm/elf-fdpic.c b/arch/frv/mm/elf-fdpic.c
index d4aa10656de3..4cf23f5973fb 100644
--- a/arch/frv/mm/elf-fdpic.c
+++ b/arch/frv/mm/elf-fdpic.c
@@ -61,6 +61,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsi
 {
 	struct vm_area_struct *vma;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(current->mm, filp, flags);
 
 	if (len > TASK_SIZE)
 		return -ENOMEM;
@@ -73,7 +74,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsi
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(current->mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			goto success;
 	}
 
@@ -84,6 +85,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsi
 	info.high_limit = (current->mm->start_stack - 0x00200000);
 	info.align_mask = 0;
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 	if (!(addr & ~PAGE_MASK))
 		goto success;
diff --git a/arch/hexagon/include/asm/cache.h b/arch/hexagon/include/asm/cache.h
index 69952c184207..4fa2908f2624 100644
--- a/arch/hexagon/include/asm/cache.h
+++ b/arch/hexagon/include/asm/cache.h
@@ -21,9 +21,11 @@
 #ifndef __ASM_CACHE_H
 #define __ASM_CACHE_H
 
+#include <linux/const.h>
+
 /* Bytes per L1 cache line */
-#define L1_CACHE_SHIFT		(5)
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_SHIFT		5
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #define ARCH_DMA_MINALIGN	L1_CACHE_BYTES
 
diff --git a/arch/ia64/Kconfig b/arch/ia64/Kconfig
index 18ca6a9ce566..77b0e0d0ba46 100644
--- a/arch/ia64/Kconfig
+++ b/arch/ia64/Kconfig
@@ -519,6 +519,7 @@ config KEXEC
 	bool "kexec system call"
 	depends on !IA64_HP_SIM && (!SMP || HOTPLUG_CPU)
 	select KEXEC_CORE
+	depends on !GRKERNSEC_KMEM
 	help
 	  kexec is a system call that implements the ability to shutdown your
 	  current kernel, and to start another kernel.  It is like a reboot
diff --git a/arch/ia64/include/asm/cache.h b/arch/ia64/include/asm/cache.h
index 988254a7d349..e1ee8855a064 100644
--- a/arch/ia64/include/asm/cache.h
+++ b/arch/ia64/include/asm/cache.h
@@ -1,6 +1,7 @@
 #ifndef _ASM_IA64_CACHE_H
 #define _ASM_IA64_CACHE_H
 
+#include <linux/const.h>
 
 /*
  * Copyright (C) 1998-2000 Hewlett-Packard Co
@@ -9,7 +10,7 @@
 
 /* Bytes per L1 (data) cache line.  */
 #define L1_CACHE_SHIFT		CONFIG_IA64_L1_CACHE_SHIFT
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #ifdef CONFIG_SMP
 # define SMP_CACHE_SHIFT	L1_CACHE_SHIFT
diff --git a/arch/ia64/kernel/sys_ia64.c b/arch/ia64/kernel/sys_ia64.c
index eabf77d660bd..65180b2a292f 100644
--- a/arch/ia64/kernel/sys_ia64.c
+++ b/arch/ia64/kernel/sys_ia64.c
@@ -28,6 +28,7 @@ arch_get_unmapped_area (struct file *filp, unsigned long addr, unsigned long len
 	unsigned long align_mask = 0;
 	struct mm_struct *mm = current->mm;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 
 	if (len > RGN_MAP_LIMIT)
 		return -ENOMEM;
@@ -68,6 +69,7 @@ arch_get_unmapped_area (struct file *filp, unsigned long addr, unsigned long len
 	info.high_limit = TASK_SIZE;
 	info.align_mask = align_mask;
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	return vm_unmapped_area(&info);
 }
 
diff --git a/arch/ia64/mm/hugetlbpage.c b/arch/ia64/mm/hugetlbpage.c
index 85de86d36fdf..db7f6b87705b 100644
--- a/arch/ia64/mm/hugetlbpage.c
+++ b/arch/ia64/mm/hugetlbpage.c
@@ -138,6 +138,7 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr, u
 		unsigned long pgoff, unsigned long flags)
 {
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(current->mm, file, flags);
 
 	if (len > RGN_MAP_LIMIT)
 		return -ENOMEM;
@@ -161,6 +162,7 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr, u
 	info.high_limit = HPAGE_REGION_BASE + RGN_MAP_LIMIT;
 	info.align_mask = PAGE_MASK & (HPAGE_SIZE - 1);
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	return vm_unmapped_area(&info);
 }
 
diff --git a/arch/m32r/include/asm/cache.h b/arch/m32r/include/asm/cache.h
index 40b3ee98193d..8c2c112b9d4f 100644
--- a/arch/m32r/include/asm/cache.h
+++ b/arch/m32r/include/asm/cache.h
@@ -1,8 +1,10 @@
 #ifndef _ASM_M32R_CACHE_H
 #define _ASM_M32R_CACHE_H
 
+#include <linux/const.h>
+
 /* L1 cache line size */
 #define L1_CACHE_SHIFT		4
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #endif  /* _ASM_M32R_CACHE_H */
diff --git a/arch/m68k/include/asm/cache.h b/arch/m68k/include/asm/cache.h
index 0395c51e46a6..5f2603124864 100644
--- a/arch/m68k/include/asm/cache.h
+++ b/arch/m68k/include/asm/cache.h
@@ -4,9 +4,11 @@
 #ifndef __ARCH_M68K_CACHE_H
 #define __ARCH_M68K_CACHE_H
 
+#include <linux/const.h>
+
 /* bytes per L1 cache line */
 #define        L1_CACHE_SHIFT  4
-#define        L1_CACHE_BYTES  (1<< L1_CACHE_SHIFT)
+#define        L1_CACHE_BYTES  (_AC(1,UL) << L1_CACHE_SHIFT)
 
 #define ARCH_DMA_MINALIGN	L1_CACHE_BYTES
 
diff --git a/arch/m68k/kernel/time.c b/arch/m68k/kernel/time.c
index 4e5aa2f4f522..172c46953cb2 100644
--- a/arch/m68k/kernel/time.c
+++ b/arch/m68k/kernel/time.c
@@ -107,6 +107,7 @@ static int rtc_ioctl(struct device *dev, unsigned int cmd, unsigned long arg)
 
 	switch (cmd) {
 	case RTC_PLL_GET:
+		memset(&pll, 0, sizeof(pll));
 		if (!mach_get_rtc_pll || mach_get_rtc_pll(&pll))
 			return -EINVAL;
 		return copy_to_user(argp, &pll, sizeof pll) ? -EFAULT : 0;
diff --git a/arch/metag/mm/hugetlbpage.c b/arch/metag/mm/hugetlbpage.c
index db1b7da91e4f..8e13684818fe 100644
--- a/arch/metag/mm/hugetlbpage.c
+++ b/arch/metag/mm/hugetlbpage.c
@@ -189,6 +189,7 @@ hugetlb_get_unmapped_area_new_pmd(unsigned long len)
 	info.high_limit = TASK_SIZE;
 	info.align_mask = PAGE_MASK & HUGEPT_MASK;
 	info.align_offset = 0;
+	info.threadstack_offset = 0;
 	return vm_unmapped_area(&info);
 }
 
diff --git a/arch/microblaze/include/asm/cache.h b/arch/microblaze/include/asm/cache.h
index 4efe96a036f7..60e869982417 100644
--- a/arch/microblaze/include/asm/cache.h
+++ b/arch/microblaze/include/asm/cache.h
@@ -13,11 +13,12 @@
 #ifndef _ASM_MICROBLAZE_CACHE_H
 #define _ASM_MICROBLAZE_CACHE_H
 
+#include <linux/const.h>
 #include <asm/registers.h>
 
 #define L1_CACHE_SHIFT 5
 /* word-granular cache in microblaze */
-#define L1_CACHE_BYTES	(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES	(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #define SMP_CACHE_BYTES	L1_CACHE_BYTES
 
diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 348b46510c1d..93c4de688879 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -2813,6 +2813,7 @@ source "kernel/Kconfig.preempt"
 config KEXEC
 	bool "Kexec system call"
 	select KEXEC_CORE
+	depends on !GRKERNSEC_KMEM
 	help
 	  kexec is a system call that implements the ability to shutdown your
 	  current kernel, and to start another kernel.  It is like a reboot
diff --git a/arch/mips/include/asm/thread_info.h b/arch/mips/include/asm/thread_info.h
index e309d8fcb516..20eefecfa44d 100644
--- a/arch/mips/include/asm/thread_info.h
+++ b/arch/mips/include/asm/thread_info.h
@@ -101,6 +101,9 @@ static inline struct thread_info *current_thread_info(void)
 #define TIF_NOTIFY_RESUME	5	/* callback before returning to user */
 #define TIF_UPROBE		6	/* breakpointed or singlestepping */
 #define TIF_RESTORE_SIGMASK	9	/* restore signal mask in do_signal() */
+/* li takes a 32bit immediate */
+#define TIF_GRSEC_SETXID	10	/* update credentials on syscall entry/exit */
+
 #define TIF_USEDFPU		16	/* FPU was used by this task this quantum (SMP) */
 #define TIF_MEMDIE		18	/* is terminating due to OOM killer */
 #define TIF_NOHZ		19	/* in adaptive nohz mode */
@@ -137,14 +140,16 @@ static inline struct thread_info *current_thread_info(void)
 #define _TIF_USEDMSA		(1<<TIF_USEDMSA)
 #define _TIF_MSA_CTX_LIVE	(1<<TIF_MSA_CTX_LIVE)
 #define _TIF_SYSCALL_TRACEPOINT	(1<<TIF_SYSCALL_TRACEPOINT)
+#define _TIF_GRSEC_SETXID	(1<<TIF_GRSEC_SETXID)
 
 #define _TIF_WORK_SYSCALL_ENTRY	(_TIF_NOHZ | _TIF_SYSCALL_TRACE |	\
 				 _TIF_SYSCALL_AUDIT | \
-				 _TIF_SYSCALL_TRACEPOINT | _TIF_SECCOMP)
+				 _TIF_SYSCALL_TRACEPOINT | _TIF_SECCOMP | \
+				 _TIF_GRSEC_SETXID)
 
 /* work to do in syscall_trace_leave() */
 #define _TIF_WORK_SYSCALL_EXIT	(_TIF_NOHZ | _TIF_SYSCALL_TRACE |	\
-				 _TIF_SYSCALL_AUDIT | _TIF_SYSCALL_TRACEPOINT)
+				 _TIF_SYSCALL_AUDIT | _TIF_SYSCALL_TRACEPOINT | _TIF_GRSEC_SETXID)
 
 /* work to do on interrupt/exception return */
 #define _TIF_WORK_MASK		\
@@ -153,7 +158,7 @@ static inline struct thread_info *current_thread_info(void)
 /* work to do on any return to u-space */
 #define _TIF_ALLWORK_MASK	(_TIF_NOHZ | _TIF_WORK_MASK |		\
 				 _TIF_WORK_SYSCALL_EXIT |		\
-				 _TIF_SYSCALL_TRACEPOINT)
+				 _TIF_SYSCALL_TRACEPOINT | _TIF_GRSEC_SETXID)
 
 /*
  * We stash processor id into a COP0 register to retrieve it fast
diff --git a/arch/mips/kernel/irq.c b/arch/mips/kernel/irq.c
index 2a030afa2d9c..1e272b77ba63 100644
--- a/arch/mips/kernel/irq.c
+++ b/arch/mips/kernel/irq.c
@@ -72,6 +72,8 @@ void __init init_IRQ(void)
 }
 
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
+
+extern void gr_handle_kernel_exploit(void);
 static inline void check_stack_overflow(void)
 {
 	unsigned long sp;
@@ -87,6 +89,7 @@ static inline void check_stack_overflow(void)
 		printk("do_IRQ: stack overflow: %ld\n",
 		       sp - sizeof(struct thread_info));
 		dump_stack();
+		gr_handle_kernel_exploit();
 	}
 }
 #else
diff --git a/arch/mips/kernel/ptrace.c b/arch/mips/kernel/ptrace.c
index bf83dc1eecfb..775bed8c7c0e 100644
--- a/arch/mips/kernel/ptrace.c
+++ b/arch/mips/kernel/ptrace.c
@@ -883,6 +883,10 @@ long arch_ptrace(struct task_struct *child, long request,
 	return ret;
 }
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+extern void gr_delayed_cred_worker(void);
+#endif
+
 /*
  * Notification of system call entry/exit
  * - triggered by current->work.syscall_trace
@@ -900,6 +904,11 @@ asmlinkage long syscall_trace_enter(struct pt_regs *regs, long syscall)
 	if (secure_computing(NULL) == -1)
 		return -1;
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	if (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT)))
 		trace_sys_enter(regs, regs->regs[2]);
 
diff --git a/arch/mips/mm/mmap.c b/arch/mips/mm/mmap.c
index 03521c34e7e8..66bb13d7abc4 100644
--- a/arch/mips/mm/mmap.c
+++ b/arch/mips/mm/mmap.c
@@ -59,6 +59,7 @@ static unsigned long arch_get_unmapped_area_common(struct file *filp,
 	struct vm_area_struct *vma;
 	unsigned long addr = addr0;
 	int do_color_align;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 	struct vm_unmapped_area_info info;
 
 	if (unlikely(len > TASK_SIZE))
@@ -96,13 +97,14 @@ static unsigned long arch_get_unmapped_area_common(struct file *filp,
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
 	info.length = len;
 	info.align_mask = do_color_align ? (PAGE_MASK & shm_align_mask) : 0;
 	info.align_offset = pgoff << PAGE_SHIFT;
+	info.threadstack_offset = offset;
 
 	if (dir == DOWN) {
 		info.flags = VM_UNMAPPED_AREA_TOPDOWN;
diff --git a/arch/mn10300/proc-mn103e010/include/proc/cache.h b/arch/mn10300/proc-mn103e010/include/proc/cache.h
index 967d144f307e..db12197e6185 100644
--- a/arch/mn10300/proc-mn103e010/include/proc/cache.h
+++ b/arch/mn10300/proc-mn103e010/include/proc/cache.h
@@ -11,12 +11,14 @@
 #ifndef _ASM_PROC_CACHE_H
 #define _ASM_PROC_CACHE_H
 
+#include <linux/const.h>
+
 /* L1 cache */
 
 #define L1_CACHE_NWAYS		4	/* number of ways in caches */
 #define L1_CACHE_NENTRIES	256	/* number of entries in each way */
-#define L1_CACHE_BYTES		16	/* bytes per entry */
 #define L1_CACHE_SHIFT		4	/* shift for bytes per entry */
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)	/* bytes per entry */
 #define L1_CACHE_WAYDISP	0x1000	/* displacement of one way from the next */
 
 #define L1_CACHE_TAG_VALID	0x00000001	/* cache tag valid bit */
diff --git a/arch/mn10300/proc-mn2ws0050/include/proc/cache.h b/arch/mn10300/proc-mn2ws0050/include/proc/cache.h
index bcb5df2d892f..84fabd26cbf8 100644
--- a/arch/mn10300/proc-mn2ws0050/include/proc/cache.h
+++ b/arch/mn10300/proc-mn2ws0050/include/proc/cache.h
@@ -16,13 +16,15 @@
 #ifndef _ASM_PROC_CACHE_H
 #define _ASM_PROC_CACHE_H
 
+#include <linux/const.h>
+
 /*
  * L1 cache
  */
 #define L1_CACHE_NWAYS		4		/* number of ways in caches */
 #define L1_CACHE_NENTRIES	128		/* number of entries in each way */
-#define L1_CACHE_BYTES		32		/* bytes per entry */
 #define L1_CACHE_SHIFT		5		/* shift for bytes per entry */
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)	/* bytes per entry */
 #define L1_CACHE_WAYDISP	0x1000		/* distance from one way to the next */
 
 #define L1_CACHE_TAG_VALID	0x00000001	/* cache tag valid bit */
diff --git a/arch/openrisc/include/asm/cache.h b/arch/openrisc/include/asm/cache.h
index 5f55da9cbfd5..7ce943743d38 100644
--- a/arch/openrisc/include/asm/cache.h
+++ b/arch/openrisc/include/asm/cache.h
@@ -19,13 +19,15 @@
 #ifndef __ASM_OPENRISC_CACHE_H
 #define __ASM_OPENRISC_CACHE_H
 
+#include <linux/const.h>
+
 /* FIXME: How can we replace these with values from the CPU...
  * they shouldn't be hard-coded!
  */
 
 #define __ro_after_init __read_mostly
 
-#define L1_CACHE_BYTES 16
 #define L1_CACHE_SHIFT 4
+#define L1_CACHE_BYTES (_AC(1,UL) << L1_CACHE_SHIFT)
 
 #endif /* __ASM_OPENRISC_CACHE_H */
diff --git a/arch/parisc/include/asm/cache.h b/arch/parisc/include/asm/cache.h
index df0f52bd18b4..810699b6deaf 100644
--- a/arch/parisc/include/asm/cache.h
+++ b/arch/parisc/include/asm/cache.h
@@ -5,6 +5,7 @@
 #ifndef __ARCH_PARISC_CACHE_H
 #define __ARCH_PARISC_CACHE_H
 
+#include <linux/const.h>
 
 /*
  * PA 2.0 processors have 64 and 128-byte L2 cachelines; PA 1.1 processors
@@ -14,6 +15,8 @@
 #define L1_CACHE_BYTES 16
 #define L1_CACHE_SHIFT 4
 
+#define L1_CACHE_BYTES (_AC(1,UL) << L1_CACHE_SHIFT)
+
 #ifndef __ASSEMBLY__
 
 #define SMP_CACHE_BYTES L1_CACHE_BYTES
diff --git a/arch/parisc/kernel/sys_parisc.c b/arch/parisc/kernel/sys_parisc.c
index 324314a87e78..5b3199e0ef54 100644
--- a/arch/parisc/kernel/sys_parisc.c
+++ b/arch/parisc/kernel/sys_parisc.c
@@ -92,6 +92,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	unsigned long task_size = TASK_SIZE;
 	int do_color_align, last_mmap;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(current->mm, filp, flags);
 
 	if (len > task_size)
 		return -ENOMEM;
@@ -131,6 +132,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	info.high_limit = mmap_upper_limit();
 	info.align_mask = last_mmap ? (PAGE_MASK & (SHM_COLOUR - 1)) : 0;
 	info.align_offset = shared_align_offset(last_mmap, pgoff);
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 found_addr:
@@ -150,6 +152,7 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
 	unsigned long addr = addr0;
 	int do_color_align, last_mmap;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(current->mm, filp, flags);
 
 #ifdef CONFIG_64BIT
 	/* This should only ever run for 32-bit processes.  */
@@ -195,6 +198,7 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
 	info.high_limit = mm->mmap_base;
 	info.align_mask = last_mmap ? (PAGE_MASK & (SHM_COLOUR - 1)) : 0;
 	info.align_offset = shared_align_offset(last_mmap, pgoff);
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 	if (!(addr & ~PAGE_MASK))
 		goto found_addr;
diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index 6cef42e71a14..3cfec12d0344 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -442,6 +442,7 @@ config KEXEC
 	bool "kexec system call"
 	depends on (PPC_BOOK3S || FSL_BOOKE || (44x && !SMP)) || PPC_BOOK3E
 	select KEXEC_CORE
+	depends on !GRKERNSEC_KMEM
 	help
 	  kexec is a system call that implements the ability to shutdown your
 	  current kernel, and to start another kernel.  It is like a reboot
diff --git a/arch/powerpc/include/asm/thread_info.h b/arch/powerpc/include/asm/thread_info.h
index 87e4b2d8dcd4..c36239071ffe 100644
--- a/arch/powerpc/include/asm/thread_info.h
+++ b/arch/powerpc/include/asm/thread_info.h
@@ -107,6 +107,8 @@ static inline struct thread_info *current_thread_info(void)
 #if defined(CONFIG_PPC64)
 #define TIF_ELF2ABI		18	/* function descriptors must die! */
 #endif
+/* mask must be expressable within 16 bits to satisfy 'andi' instruction reqs */
+#define TIF_GRSEC_SETXID	6	/* update credentials on syscall entry/exit */
 
 /* as above, but as bit values */
 #define _TIF_SYSCALL_TRACE	(1<<TIF_SYSCALL_TRACE)
@@ -125,9 +127,10 @@ static inline struct thread_info *current_thread_info(void)
 #define _TIF_SYSCALL_TRACEPOINT	(1<<TIF_SYSCALL_TRACEPOINT)
 #define _TIF_EMULATE_STACK_STORE	(1<<TIF_EMULATE_STACK_STORE)
 #define _TIF_NOHZ		(1<<TIF_NOHZ)
+#define _TIF_GRSEC_SETXID	(1<<TIF_GRSEC_SETXID)
 #define _TIF_SYSCALL_DOTRACE	(_TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT | \
 				 _TIF_SECCOMP | _TIF_SYSCALL_TRACEPOINT | \
-				 _TIF_NOHZ)
+				 _TIF_NOHZ | _TIF_GRSEC_SETXID)
 
 #define _TIF_USER_WORK_MASK	(_TIF_SIGPENDING | _TIF_NEED_RESCHED | \
 				 _TIF_NOTIFY_RESUME | _TIF_UPROBE | \
diff --git a/arch/powerpc/kernel/Makefile b/arch/powerpc/kernel/Makefile
index adb52d101133..a1841acd5fe9 100644
--- a/arch/powerpc/kernel/Makefile
+++ b/arch/powerpc/kernel/Makefile
@@ -31,6 +31,8 @@ CFLAGS_REMOVE_ftrace.o = -mno-sched-epilog $(CC_FLAGS_FTRACE)
 CFLAGS_REMOVE_time.o = -mno-sched-epilog $(CC_FLAGS_FTRACE)
 endif
 
+CFLAGS_REMOVE_prom_init.o += $(LATENT_ENTROPY_PLUGIN_CFLAGS)
+
 obj-y				:= cputable.o ptrace.o syscalls.o \
 				   irq.o align.o signal_32.o pmc.o vdso.o \
 				   process.o systbl.o idle.o \
diff --git a/arch/powerpc/kernel/irq.c b/arch/powerpc/kernel/irq.c
index 3c05c311e35e..a8e68883349a 100644
--- a/arch/powerpc/kernel/irq.c
+++ b/arch/powerpc/kernel/irq.c
@@ -482,6 +482,8 @@ void migrate_irqs(void)
 }
 #endif
 
+extern void gr_handle_kernel_exploit(void);
+
 static inline void check_stack_overflow(void)
 {
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
@@ -494,6 +496,7 @@ static inline void check_stack_overflow(void)
 		pr_err("do_IRQ: stack overflow: %ld\n",
 			sp - sizeof(struct thread_info));
 		dump_stack();
+		gr_handle_kernel_exploit();
 	}
 #endif
 }
diff --git a/arch/powerpc/kernel/process.c b/arch/powerpc/kernel/process.c
index 55781636c0c8..2514bbcbaeb7 100644
--- a/arch/powerpc/kernel/process.c
+++ b/arch/powerpc/kernel/process.c
@@ -1375,8 +1375,8 @@ void show_regs(struct pt_regs * regs)
 	 * Lookup NIP late so we have the best change of getting the
 	 * above info out without failing
 	 */
-	printk("NIP ["REG"] %pS\n", regs->nip, (void *)regs->nip);
-	printk("LR ["REG"] %pS\n", regs->link, (void *)regs->link);
+	printk("NIP ["REG"] %pA\n", regs->nip, (void *)regs->nip);
+	printk("LR ["REG"] %pA\n", regs->link, (void *)regs->link);
 #endif
 	show_stack(current, (unsigned long *) regs->gpr[1]);
 	if (!user_mode(regs))
@@ -1897,10 +1897,10 @@ void show_stack(struct task_struct *tsk, unsigned long *stack)
 		newsp = stack[0];
 		ip = stack[STACK_FRAME_LR_SAVE];
 		if (!firstframe || ip != lr) {
-			printk("["REG"] ["REG"] %pS", sp, ip, (void *)ip);
+			printk("["REG"] ["REG"] %pA", sp, ip, (void *)ip);
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
 			if ((ip == rth) && curr_frame >= 0) {
-				pr_cont(" (%pS)",
+				pr_cont(" (%pA)",
 				       (void *)current->ret_stack[curr_frame].ret);
 				curr_frame--;
 			}
@@ -1920,7 +1920,7 @@ void show_stack(struct task_struct *tsk, unsigned long *stack)
 			struct pt_regs *regs = (struct pt_regs *)
 				(sp + STACK_FRAME_OVERHEAD);
 			lr = regs->link;
-			printk("--- interrupt: %lx at %pS\n    LR = %pS\n",
+			printk("--- interrupt: %lx at %pA\n    LR = %pA\n",
 			       regs->trap, (void *)regs->nip, (void *)lr);
 			firstframe = 1;
 		}
diff --git a/arch/powerpc/kernel/ptrace.c b/arch/powerpc/kernel/ptrace.c
index de7043fc523d..98047fb5c178 100644
--- a/arch/powerpc/kernel/ptrace.c
+++ b/arch/powerpc/kernel/ptrace.c
@@ -3169,6 +3169,10 @@ static int do_seccomp(struct pt_regs *regs)
 static inline int do_seccomp(struct pt_regs *regs) { return 0; }
 #endif /* CONFIG_SECCOMP */
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+extern void gr_delayed_cred_worker(void);
+#endif
+
 /**
  * do_syscall_trace_enter() - Do syscall tracing on kernel entry.
  * @regs: the pt_regs of the task to trace (current)
@@ -3192,6 +3196,11 @@ long do_syscall_trace_enter(struct pt_regs *regs)
 {
 	user_exit();
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	/*
 	 * The tracer may decide to abort the syscall, if so tracehook
 	 * will return !0. Note that the tracer may also just change
@@ -3210,6 +3219,7 @@ long do_syscall_trace_enter(struct pt_regs *regs)
 	if (regs->gpr[0] >= NR_syscalls)
 		goto skip;
 
+
 	if (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT)))
 		trace_sys_enter(regs, regs->gpr[0]);
 
@@ -3241,6 +3251,11 @@ void do_syscall_trace_leave(struct pt_regs *regs)
 {
 	int step;
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	audit_syscall_exit(regs);
 
 	if (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT)))
diff --git a/arch/powerpc/kernel/traps.c b/arch/powerpc/kernel/traps.c
index 5ec2f86c2b4a..9d940854d60f 100644
--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -147,6 +147,8 @@ static unsigned long oops_begin(struct pt_regs *regs)
 }
 NOKPROBE_SYMBOL(oops_begin);
 
+extern void gr_handle_kernel_exploit(void);
+
 static void oops_end(unsigned long flags, struct pt_regs *regs,
 			       int signr)
 {
@@ -196,6 +198,9 @@ static void oops_end(unsigned long flags, struct pt_regs *regs,
 		panic("Fatal exception in interrupt");
 	if (panic_on_oops)
 		panic("Fatal exception");
+
+	gr_handle_kernel_exploit();
+
 	do_exit(signr);
 }
 NOKPROBE_SYMBOL(oops_end);
diff --git a/arch/powerpc/mm/slice.c b/arch/powerpc/mm/slice.c
index 17a3d7e89190..7c7c59b1bebb 100644
--- a/arch/powerpc/mm/slice.c
+++ b/arch/powerpc/mm/slice.c
@@ -105,7 +105,7 @@ static int slice_area_is_free(struct mm_struct *mm, unsigned long addr,
 	if ((mm->task_size - len) < addr)
 		return 0;
 	vma = find_vma(mm, addr);
-	return check_heap_stack_gap(vma, addr, len);
+	return check_heap_stack_gap(vma, addr, len, 0);
 }
 
 static int slice_low_has_vma(struct mm_struct *mm, unsigned long slice)
diff --git a/arch/s390/Kconfig.debug b/arch/s390/Kconfig.debug
index 26c5d5beb4be..a308c28f4e8f 100644
--- a/arch/s390/Kconfig.debug
+++ b/arch/s390/Kconfig.debug
@@ -9,6 +9,7 @@ config S390_PTDUMP
 	bool "Export kernel pagetable layout to userspace via debugfs"
 	depends on DEBUG_KERNEL
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	---help---
 	  Say Y here if you want to show the kernel pagetable layout in a
 	  debugfs file. This information is only useful for kernel developers
diff --git a/arch/s390/include/asm/cache.h b/arch/s390/include/asm/cache.h
index 05219a5e0b2f..032f5f046959 100644
--- a/arch/s390/include/asm/cache.h
+++ b/arch/s390/include/asm/cache.h
@@ -9,8 +9,10 @@
 #ifndef __ARCH_S390_CACHE_H
 #define __ARCH_S390_CACHE_H
 
-#define L1_CACHE_BYTES     256
+#include <linux/const.h>
+
 #define L1_CACHE_SHIFT     8
+#define L1_CACHE_BYTES     (_AC(1,UL) << L1_CACHE_SHIFT)
 #define NET_SKB_PAD	   32
 
 #define __read_mostly __section(.data..read_mostly)
diff --git a/arch/score/include/asm/cache.h b/arch/score/include/asm/cache.h
index ae3d59f2d2c4..f65f0751c98b 100644
--- a/arch/score/include/asm/cache.h
+++ b/arch/score/include/asm/cache.h
@@ -1,7 +1,9 @@
 #ifndef _ASM_SCORE_CACHE_H
 #define _ASM_SCORE_CACHE_H
 
+#include <linux/const.h>
+
 #define L1_CACHE_SHIFT		4
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #endif /* _ASM_SCORE_CACHE_H */
diff --git a/arch/sh/include/asm/cache.h b/arch/sh/include/asm/cache.h
index ef9e555aafba..331bd29e75dc 100644
--- a/arch/sh/include/asm/cache.h
+++ b/arch/sh/include/asm/cache.h
@@ -9,10 +9,11 @@
 #define __ASM_SH_CACHE_H
 #ifdef __KERNEL__
 
+#include <linux/const.h>
 #include <linux/init.h>
 #include <cpu/cache.h>
 
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #define __read_mostly __attribute__((__section__(".data..read_mostly")))
 
diff --git a/arch/sh/mm/mmap.c b/arch/sh/mm/mmap.c
index 419c33846f9d..d44b5923315c 100644
--- a/arch/sh/mm/mmap.c
+++ b/arch/sh/mm/mmap.c
@@ -36,6 +36,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
 	int do_colour_align;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 	struct vm_unmapped_area_info info;
 
 	if (flags & MAP_FIXED) {
@@ -66,7 +67,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr,
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -88,6 +89,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	struct mm_struct *mm = current->mm;
 	unsigned long addr = addr0;
 	int do_colour_align;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 	struct vm_unmapped_area_info info;
 
 	if (flags & MAP_FIXED) {
@@ -119,7 +121,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
diff --git a/arch/sparc/include/asm/thread_info_64.h b/arch/sparc/include/asm/thread_info_64.h
index 5772c150cdfd..493ce8222471 100644
--- a/arch/sparc/include/asm/thread_info_64.h
+++ b/arch/sparc/include/asm/thread_info_64.h
@@ -182,12 +182,13 @@ register struct thread_info *current_thread_info_reg asm("g6");
 #define TIF_NEED_RESCHED	3	/* rescheduling necessary */
 /* flag bit 4 is available */
 #define TIF_UNALIGNED		5	/* allowed to do unaligned accesses */
-/* flag bit 6 is available */
+#define TIF_GRSEC_SETXID	6	/* update credentials on syscall entry/exit */
 #define TIF_32BIT		7	/* 32-bit binary */
 #define TIF_NOHZ		8	/* in adaptive nohz mode */
 #define TIF_SECCOMP		9	/* secure computing */
 #define TIF_SYSCALL_AUDIT	10	/* syscall auditing active */
 #define TIF_SYSCALL_TRACEPOINT	11	/* syscall tracepoint instrumentation */
+
 /* NOTE: Thread flags >= 12 should be ones we have no interest
  *       in using in assembly, else we can't use the mask as
  *       an immediate value in instructions such as andcc.
@@ -207,12 +208,17 @@ register struct thread_info *current_thread_info_reg asm("g6");
 #define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)
 #define _TIF_SYSCALL_TRACEPOINT	(1<<TIF_SYSCALL_TRACEPOINT)
 #define _TIF_POLLING_NRFLAG	(1<<TIF_POLLING_NRFLAG)
+#define _TIF_GRSEC_SETXID	(1<<TIF_GRSEC_SETXID)
 
 #define _TIF_USER_WORK_MASK	((0xff << TI_FLAG_WSAVED_SHIFT) | \
 				 _TIF_DO_NOTIFY_RESUME_MASK | \
 				 _TIF_NEED_RESCHED)
 #define _TIF_DO_NOTIFY_RESUME_MASK	(_TIF_NOTIFY_RESUME | _TIF_SIGPENDING)
 
+#define _TIF_WORK_SYSCALL		\
+	(_TIF_SYSCALL_TRACE | _TIF_SECCOMP | _TIF_SYSCALL_AUDIT | \
+	 _TIF_SYSCALL_TRACEPOINT | _TIF_NOHZ | _TIF_GRSEC_SETXID)
+
 #define is_32bit_task()	(test_thread_flag(TIF_32BIT))
 
 /*
diff --git a/arch/sparc/kernel/process_32.c b/arch/sparc/kernel/process_32.c
index b7780a5bef11..28315f023dad 100644
--- a/arch/sparc/kernel/process_32.c
+++ b/arch/sparc/kernel/process_32.c
@@ -123,14 +123,14 @@ void show_regs(struct pt_regs *r)
 
         printk("PSR: %08lx PC: %08lx NPC: %08lx Y: %08lx    %s\n",
 	       r->psr, r->pc, r->npc, r->y, print_tainted());
-	printk("PC: <%pS>\n", (void *) r->pc);
+	printk("PC: <%pA>\n", (void *) r->pc);
 	printk("%%G: %08lx %08lx  %08lx %08lx  %08lx %08lx  %08lx %08lx\n",
 	       r->u_regs[0], r->u_regs[1], r->u_regs[2], r->u_regs[3],
 	       r->u_regs[4], r->u_regs[5], r->u_regs[6], r->u_regs[7]);
 	printk("%%O: %08lx %08lx  %08lx %08lx  %08lx %08lx  %08lx %08lx\n",
 	       r->u_regs[8], r->u_regs[9], r->u_regs[10], r->u_regs[11],
 	       r->u_regs[12], r->u_regs[13], r->u_regs[14], r->u_regs[15]);
-	printk("RPC: <%pS>\n", (void *) r->u_regs[15]);
+	printk("RPC: <%pA>\n", (void *) r->u_regs[15]);
 
 	printk("%%L: %08lx %08lx  %08lx %08lx  %08lx %08lx  %08lx %08lx\n",
 	       rw->locals[0], rw->locals[1], rw->locals[2], rw->locals[3],
@@ -167,7 +167,7 @@ void show_stack(struct task_struct *tsk, unsigned long *_ksp)
 		rw = (struct reg_window32 *) fp;
 		pc = rw->ins[7];
 		printk("[%08lx : ", pc);
-		printk("%pS ] ", (void *) pc);
+		printk("%pA ] ", (void *) pc);
 		fp = rw->ins[6];
 	} while (++count < 16);
 	printk("\n");
diff --git a/arch/sparc/kernel/process_64.c b/arch/sparc/kernel/process_64.c
index 47ff5588e521..2333c8a4cbb5 100644
--- a/arch/sparc/kernel/process_64.c
+++ b/arch/sparc/kernel/process_64.c
@@ -161,7 +161,7 @@ static void show_regwindow(struct pt_regs *regs)
 	printk("i4: %016lx i5: %016lx i6: %016lx i7: %016lx\n",
 	       rwk->ins[4], rwk->ins[5], rwk->ins[6], rwk->ins[7]);
 	if (regs->tstate & TSTATE_PRIV)
-		printk("I7: <%pS>\n", (void *) rwk->ins[7]);
+		printk("I7: <%pA>\n", (void *) rwk->ins[7]);
 }
 
 void show_regs(struct pt_regs *regs)
@@ -170,7 +170,7 @@ void show_regs(struct pt_regs *regs)
 
 	printk("TSTATE: %016lx TPC: %016lx TNPC: %016lx Y: %08x    %s\n", regs->tstate,
 	       regs->tpc, regs->tnpc, regs->y, print_tainted());
-	printk("TPC: <%pS>\n", (void *) regs->tpc);
+	printk("TPC: <%pA>\n", (void *) regs->tpc);
 	printk("g0: %016lx g1: %016lx g2: %016lx g3: %016lx\n",
 	       regs->u_regs[0], regs->u_regs[1], regs->u_regs[2],
 	       regs->u_regs[3]);
@@ -183,7 +183,7 @@ void show_regs(struct pt_regs *regs)
 	printk("o4: %016lx o5: %016lx sp: %016lx ret_pc: %016lx\n",
 	       regs->u_regs[12], regs->u_regs[13], regs->u_regs[14],
 	       regs->u_regs[15]);
-	printk("RPC: <%pS>\n", (void *) regs->u_regs[15]);
+	printk("RPC: <%pA>\n", (void *) regs->u_regs[15]);
 	show_regwindow(regs);
 	show_stack(current, (unsigned long *) regs->u_regs[UREG_FP]);
 }
@@ -278,7 +278,7 @@ void arch_trigger_cpumask_backtrace(const cpumask_t *mask, bool exclude_self)
 		       ((tp && tp->task) ? tp->task->pid : -1));
 
 		if (gp->tstate & TSTATE_PRIV) {
-			printk("             TPC[%pS] O7[%pS] I7[%pS] RPC[%pS]\n",
+			printk("             TPC[%pA] O7[%pA] I7[%pA] RPC[%pA]\n",
 			       (void *) gp->tpc,
 			       (void *) gp->o7,
 			       (void *) gp->i7,
diff --git a/arch/sparc/kernel/ptrace_64.c b/arch/sparc/kernel/ptrace_64.c
index 7037ca3b4328..070b51b4cc44 100644
--- a/arch/sparc/kernel/ptrace_64.c
+++ b/arch/sparc/kernel/ptrace_64.c
@@ -1068,6 +1068,10 @@ long arch_ptrace(struct task_struct *child, long request,
 	return ret;
 }
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+extern void gr_delayed_cred_worker(void);
+#endif
+
 asmlinkage int syscall_trace_enter(struct pt_regs *regs)
 {
 	int ret = 0;
@@ -1078,6 +1082,11 @@ asmlinkage int syscall_trace_enter(struct pt_regs *regs)
 	if (test_thread_flag(TIF_NOHZ))
 		user_exit();
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	if (test_thread_flag(TIF_SYSCALL_TRACE))
 		ret = tracehook_report_syscall_entry(regs);
 
@@ -1096,6 +1105,11 @@ asmlinkage void syscall_trace_leave(struct pt_regs *regs)
 	if (test_thread_flag(TIF_NOHZ))
 		user_exit();
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	audit_syscall_exit(regs);
 
 	if (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT)))
diff --git a/arch/sparc/kernel/sys_sparc_64.c b/arch/sparc/kernel/sys_sparc_64.c
index 06c40239036f..3f17a966f6ca 100644
--- a/arch/sparc/kernel/sys_sparc_64.c
+++ b/arch/sparc/kernel/sys_sparc_64.c
@@ -89,6 +89,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsi
 	struct vm_area_struct * vma;
 	unsigned long task_size = TASK_SIZE;
 	int do_color_align;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 	struct vm_unmapped_area_info info;
 
 	if (flags & MAP_FIXED) {
@@ -121,7 +122,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsi
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -131,6 +132,7 @@ unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsi
 	info.high_limit = min(task_size, VA_EXCLUDE_START);
 	info.align_mask = do_color_align ? (PAGE_MASK & (SHMLBA - 1)) : 0;
 	info.align_offset = pgoff << PAGE_SHIFT;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 	if ((addr & ~PAGE_MASK) && task_size > VA_EXCLUDE_END) {
@@ -159,6 +161,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	unsigned long task_size = STACK_TOP32;
 	unsigned long addr = addr0;
 	int do_color_align;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 	struct vm_unmapped_area_info info;
 
 	/* This should only ever run for 32-bit processes.  */
@@ -193,7 +196,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -203,6 +206,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	info.high_limit = mm->mmap_base;
 	info.align_mask = do_color_align ? (PAGE_MASK & (SHMLBA - 1)) : 0;
 	info.align_offset = pgoff << PAGE_SHIFT;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 	/*
diff --git a/arch/sparc/kernel/syscalls.S b/arch/sparc/kernel/syscalls.S
index c4a1b5c40e4e..c5e0ef330375 100644
--- a/arch/sparc/kernel/syscalls.S
+++ b/arch/sparc/kernel/syscalls.S
@@ -62,7 +62,7 @@ sys32_rt_sigreturn:
 #endif
 	.align	32
 1:	ldx	[%g6 + TI_FLAGS], %l5
-	andcc	%l5, (_TIF_SYSCALL_TRACE|_TIF_SECCOMP|_TIF_SYSCALL_AUDIT|_TIF_SYSCALL_TRACEPOINT|_TIF_NOHZ), %g0
+	andcc	%l5, _TIF_WORK_SYSCALL, %g0
 	be,pt	%icc, rtrap
 	 nop
 	call	syscall_trace_leave
@@ -230,7 +230,7 @@ linux_sparc_syscall32:
 
 	srl	%i3, 0, %o3				! IEU0
 	srl	%i2, 0, %o2				! IEU0	Group
-	andcc	%l0, (_TIF_SYSCALL_TRACE|_TIF_SECCOMP|_TIF_SYSCALL_AUDIT|_TIF_SYSCALL_TRACEPOINT|_TIF_NOHZ), %g0
+	andcc	%l0, _TIF_WORK_SYSCALL, %g0
 	bne,pn	%icc, linux_syscall_trace32		! CTI
 	 mov	%i0, %l5				! IEU1
 5:	call	%l7					! CTI	Group brk forced
@@ -254,7 +254,7 @@ linux_sparc_syscall:
 
 	mov	%i3, %o3				! IEU1
 	mov	%i4, %o4				! IEU0	Group
-	andcc	%l0, (_TIF_SYSCALL_TRACE|_TIF_SECCOMP|_TIF_SYSCALL_AUDIT|_TIF_SYSCALL_TRACEPOINT|_TIF_NOHZ), %g0
+	andcc	%l0, _TIF_WORK_SYSCALL, %g0
 	bne,pn	%icc, linux_syscall_trace		! CTI	Group
 	 mov	%i0, %l5				! IEU0
 2:	call	%l7					! CTI	Group brk forced
@@ -269,7 +269,7 @@ ret_sys_call:
 
 	cmp	%o0, -ERESTART_RESTARTBLOCK
 	bgeu,pn	%xcc, 1f
-	 andcc	%l0, (_TIF_SYSCALL_TRACE|_TIF_SECCOMP|_TIF_SYSCALL_AUDIT|_TIF_SYSCALL_TRACEPOINT|_TIF_NOHZ), %g0
+	 andcc	%l0, _TIF_WORK_SYSCALL, %g0
 	ldx	[%sp + PTREGS_OFF + PT_V9_TNPC], %l1 ! pc = npc
 
 2:
diff --git a/arch/sparc/kernel/traps_32.c b/arch/sparc/kernel/traps_32.c
index 4f21df7d4f13..0a374da5c397 100644
--- a/arch/sparc/kernel/traps_32.c
+++ b/arch/sparc/kernel/traps_32.c
@@ -44,6 +44,8 @@ static void instruction_dump(unsigned long *pc)
 #define __SAVE __asm__ __volatile__("save %sp, -0x40, %sp\n\t")
 #define __RESTORE __asm__ __volatile__("restore %g0, %g0, %g0\n\t")
 
+extern void gr_handle_kernel_exploit(void);
+
 void __noreturn die_if_kernel(char *str, struct pt_regs *regs)
 {
 	static int die_counter;
@@ -76,15 +78,17 @@ void __noreturn die_if_kernel(char *str, struct pt_regs *regs)
 		      count++ < 30				&&
                       (((unsigned long) rw) >= PAGE_OFFSET)	&&
 		      !(((unsigned long) rw) & 0x7)) {
-			printk("Caller[%08lx]: %pS\n", rw->ins[7],
+			printk("Caller[%08lx]: %pA\n", rw->ins[7],
 			       (void *) rw->ins[7]);
 			rw = (struct reg_window32 *)rw->ins[6];
 		}
 	}
 	printk("Instruction DUMP:");
 	instruction_dump ((unsigned long *) regs->pc);
-	if(regs->psr & PSR_PS)
+	if(regs->psr & PSR_PS) {
+		gr_handle_kernel_exploit();
 		do_exit(SIGKILL);
+	}
 	do_exit(SIGSEGV);
 }
 
diff --git a/arch/sparc/kernel/traps_64.c b/arch/sparc/kernel/traps_64.c
index 7468c69e0e74..4a360da347af 100644
--- a/arch/sparc/kernel/traps_64.c
+++ b/arch/sparc/kernel/traps_64.c
@@ -79,7 +79,7 @@ static void dump_tl1_traplog(struct tl1_traplog *p)
 		       i + 1,
 		       p->trapstack[i].tstate, p->trapstack[i].tpc,
 		       p->trapstack[i].tnpc, p->trapstack[i].tt);
-		printk("TRAPLOG: TPC<%pS>\n", (void *) p->trapstack[i].tpc);
+		printk("TRAPLOG: TPC<%pA>\n", (void *) p->trapstack[i].tpc);
 	}
 }
 
@@ -1162,7 +1162,7 @@ static void cheetah_log_errors(struct pt_regs *regs, struct cheetah_err_info *in
 	       regs->tpc, regs->tnpc, regs->u_regs[UREG_I7], regs->tstate);
 	printk("%s" "ERROR(%d): ",
 	       (recoverable ? KERN_WARNING : KERN_CRIT), smp_processor_id());
-	printk("TPC<%pS>\n", (void *) regs->tpc);
+	printk("TPC<%pA>\n", (void *) regs->tpc);
 	printk("%s" "ERROR(%d): M_SYND(%lx),  E_SYND(%lx)%s%s\n",
 	       (recoverable ? KERN_WARNING : KERN_CRIT), smp_processor_id(),
 	       (afsr & CHAFSR_M_SYNDROME) >> CHAFSR_M_SYNDROME_SHIFT,
@@ -1769,7 +1769,7 @@ void cheetah_plus_parity_error(int type, struct pt_regs *regs)
 		       smp_processor_id(),
 		       (type & 0x1) ? 'I' : 'D',
 		       regs->tpc);
-		printk(KERN_EMERG "TPC<%pS>\n", (void *) regs->tpc);
+		printk(KERN_EMERG "TPC<%pA>\n", (void *) regs->tpc);
 		panic("Irrecoverable Cheetah+ parity error.");
 	}
 
@@ -1777,7 +1777,7 @@ void cheetah_plus_parity_error(int type, struct pt_regs *regs)
 	       smp_processor_id(),
 	       (type & 0x1) ? 'I' : 'D',
 	       regs->tpc);
-	printk(KERN_WARNING "TPC<%pS>\n", (void *) regs->tpc);
+	printk(KERN_WARNING "TPC<%pA>\n", (void *) regs->tpc);
 }
 
 struct sun4v_error_entry {
@@ -2131,9 +2131,9 @@ void sun4v_itlb_error_report(struct pt_regs *regs, int tl)
 
 	printk(KERN_EMERG "SUN4V-ITLB: Error at TPC[%lx], tl %d\n",
 	       regs->tpc, tl);
-	printk(KERN_EMERG "SUN4V-ITLB: TPC<%pS>\n", (void *) regs->tpc);
+	printk(KERN_EMERG "SUN4V-ITLB: TPC<%pA>\n", (void *) regs->tpc);
 	printk(KERN_EMERG "SUN4V-ITLB: O7[%lx]\n", regs->u_regs[UREG_I7]);
-	printk(KERN_EMERG "SUN4V-ITLB: O7<%pS>\n",
+	printk(KERN_EMERG "SUN4V-ITLB: O7<%pA>\n",
 	       (void *) regs->u_regs[UREG_I7]);
 	printk(KERN_EMERG "SUN4V-ITLB: vaddr[%lx] ctx[%lx] "
 	       "pte[%lx] error[%lx]\n",
@@ -2154,9 +2154,9 @@ void sun4v_dtlb_error_report(struct pt_regs *regs, int tl)
 
 	printk(KERN_EMERG "SUN4V-DTLB: Error at TPC[%lx], tl %d\n",
 	       regs->tpc, tl);
-	printk(KERN_EMERG "SUN4V-DTLB: TPC<%pS>\n", (void *) regs->tpc);
+	printk(KERN_EMERG "SUN4V-DTLB: TPC<%pA>\n", (void *) regs->tpc);
 	printk(KERN_EMERG "SUN4V-DTLB: O7[%lx]\n", regs->u_regs[UREG_I7]);
-	printk(KERN_EMERG "SUN4V-DTLB: O7<%pS>\n",
+	printk(KERN_EMERG "SUN4V-DTLB: O7<%pA>\n",
 	       (void *) regs->u_regs[UREG_I7]);
 	printk(KERN_EMERG "SUN4V-DTLB: vaddr[%lx] ctx[%lx] "
 	       "pte[%lx] error[%lx]\n",
@@ -2373,13 +2373,13 @@ void show_stack(struct task_struct *tsk, unsigned long *_ksp)
 			fp = (unsigned long)sf->fp + STACK_BIAS;
 		}
 
-		printk(" [%016lx] %pS\n", pc, (void *) pc);
+		printk(" [%016lx] %pA\n", pc, (void *) pc);
 #ifdef CONFIG_FUNCTION_GRAPH_TRACER
 		if ((pc + 8UL) == (unsigned long) &return_to_handler) {
 			int index = tsk->curr_ret_stack;
 			if (tsk->ret_stack && index >= graph) {
 				pc = tsk->ret_stack[index - graph].ret;
-				printk(" [%016lx] %pS\n", pc, (void *) pc);
+				printk(" [%016lx] %pA\n", pc, (void *) pc);
 				graph++;
 			}
 		}
@@ -2397,6 +2397,8 @@ static inline struct reg_window *kernel_stack_up(struct reg_window *rw)
 	return (struct reg_window *) (fp + STACK_BIAS);
 }
 
+extern void gr_handle_kernel_exploit(void);
+
 void __noreturn die_if_kernel(char *str, struct pt_regs *regs)
 {
 	static int die_counter;
@@ -2425,7 +2427,7 @@ void __noreturn die_if_kernel(char *str, struct pt_regs *regs)
 		while (rw &&
 		       count++ < 30 &&
 		       kstack_valid(tp, (unsigned long) rw)) {
-			printk("Caller[%016lx]: %pS\n", rw->ins[7],
+			printk("Caller[%016lx]: %pA\n", rw->ins[7],
 			       (void *) rw->ins[7]);
 
 			rw = kernel_stack_up(rw);
@@ -2440,8 +2442,10 @@ void __noreturn die_if_kernel(char *str, struct pt_regs *regs)
 	}
 	if (panic_on_oops)
 		panic("Fatal exception");
-	if (regs->tstate & TSTATE_PRIV)
+	if (regs->tstate & TSTATE_PRIV) {
+		gr_handle_kernel_exploit();
 		do_exit(SIGKILL);
+	}
 	do_exit(SIGSEGV);
 }
 EXPORT_SYMBOL(die_if_kernel);
diff --git a/arch/sparc/kernel/unaligned_64.c b/arch/sparc/kernel/unaligned_64.c
index 52c00d90d4b4..6f8aa4e3a9e2 100644
--- a/arch/sparc/kernel/unaligned_64.c
+++ b/arch/sparc/kernel/unaligned_64.c
@@ -297,7 +297,7 @@ static void log_unaligned(struct pt_regs *regs)
 	static DEFINE_RATELIMIT_STATE(ratelimit, 5 * HZ, 5);
 
 	if (__ratelimit(&ratelimit)) {
-		printk("Kernel unaligned access at TPC[%lx] %pS\n",
+		printk("Kernel unaligned access at TPC[%lx] %pA\n",
 		       regs->tpc, (void *) regs->tpc);
 	}
 }
diff --git a/arch/sparc/mm/fault_64.c b/arch/sparc/mm/fault_64.c
index 58a1d4917785..845c1135150d 100644
--- a/arch/sparc/mm/fault_64.c
+++ b/arch/sparc/mm/fault_64.c
@@ -79,7 +79,7 @@ static void __kprobes bad_kernel_pc(struct pt_regs *regs, unsigned long vaddr)
 	printk(KERN_CRIT "OOPS: Bogus kernel PC [%016lx] in fault handler\n",
 	       regs->tpc);
 	printk(KERN_CRIT "OOPS: RPC [%016lx]\n", regs->u_regs[15]);
-	printk("OOPS: RPC <%pS>\n", (void *) regs->u_regs[15]);
+	printk("OOPS: RPC <%pA>\n", (void *) regs->u_regs[15]);
 	printk(KERN_CRIT "OOPS: Fault was to vaddr[%lx]\n", vaddr);
 	dump_stack();
 	unhandled_fault(regs->tpc, current, regs);
diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c
index 0072d68d58e5..f26345c45ddc 100644
--- a/arch/sparc/mm/hugetlbpage.c
+++ b/arch/sparc/mm/hugetlbpage.c
@@ -26,7 +26,8 @@ static unsigned long hugetlb_get_unmapped_area_bottomup(struct file *filp,
 							unsigned long addr,
 							unsigned long len,
 							unsigned long pgoff,
-							unsigned long flags)
+							unsigned long flags,
+							unsigned long offset)
 {
 	struct mm_struct *mm = current->mm;
 	unsigned long task_size = TASK_SIZE;
@@ -41,6 +42,7 @@ static unsigned long hugetlb_get_unmapped_area_bottomup(struct file *filp,
 	info.high_limit = min(task_size, VA_EXCLUDE_START);
 	info.align_mask = PAGE_MASK & ~HPAGE_MASK;
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 	if ((addr & ~PAGE_MASK) && task_size > VA_EXCLUDE_END) {
@@ -63,7 +65,8 @@ static unsigned long
 hugetlb_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 				  unsigned long len,
 				  unsigned long pgoff,
-				  unsigned long flags)
+				  unsigned long flags,
+				  unsigned long offset)
 {
 	struct mm_struct *mm = current->mm;
 	unsigned long addr = addr0;
@@ -78,6 +81,7 @@ hugetlb_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	info.high_limit = mm->mmap_base;
 	info.align_mask = PAGE_MASK & ~HPAGE_MASK;
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 	/*
@@ -110,6 +114,7 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
 	unsigned long task_size = TASK_SIZE;
+	unsigned long offset = gr_rand_threadstack_offset(mm, file, flags);
 
 	if (test_thread_flag(TIF_32BIT))
 		task_size = STACK_TOP32;
@@ -132,15 +137,15 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,
 	if (addr) {
 		addr = ALIGN(addr, HPAGE_SIZE);
 		vma = find_vma(mm, addr);
-		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 	if (mm->get_unmapped_area == arch_get_unmapped_area)
 		return hugetlb_get_unmapped_area_bottomup(file, addr, len,
-				pgoff, flags);
+				pgoff, flags, offset);
 	else
 		return hugetlb_get_unmapped_area_topdown(file, addr, len,
-				pgoff, flags);
+				pgoff, flags, offset);
 }
 
 pte_t *huge_pte_alloc(struct mm_struct *mm,
diff --git a/arch/tile/Kconfig b/arch/tile/Kconfig
index 4583c0320059..5e074bb8a93c 100644
--- a/arch/tile/Kconfig
+++ b/arch/tile/Kconfig
@@ -192,6 +192,7 @@ source "kernel/Kconfig.hz"
 config KEXEC
 	bool "kexec system call"
 	select KEXEC_CORE
+	depends on !GRKERNSEC_KMEM
 	---help---
 	  kexec is a system call that implements the ability to shutdown your
 	  current kernel, and to start another kernel.  It is like a reboot
diff --git a/arch/tile/include/asm/cache.h b/arch/tile/include/asm/cache.h
index 4810e48dbbbf..08b733bd680b 100644
--- a/arch/tile/include/asm/cache.h
+++ b/arch/tile/include/asm/cache.h
@@ -15,11 +15,12 @@
 #ifndef _ASM_TILE_CACHE_H
 #define _ASM_TILE_CACHE_H
 
+#include <linux/const.h>
 #include <arch/chip.h>
 
 /* bytes per L1 data cache line */
 #define L1_CACHE_SHIFT		CHIP_L1D_LOG_LINE_SIZE()
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 /* bytes per L2 cache line */
 #define L2_CACHE_SHIFT		CHIP_L2_LOG_LINE_SIZE()
diff --git a/arch/tile/mm/hugetlbpage.c b/arch/tile/mm/hugetlbpage.c
index 77ceaa343fce..3630dea008fe 100644
--- a/arch/tile/mm/hugetlbpage.c
+++ b/arch/tile/mm/hugetlbpage.c
@@ -174,6 +174,7 @@ static unsigned long hugetlb_get_unmapped_area_bottomup(struct file *file,
 	info.high_limit = TASK_SIZE;
 	info.align_mask = PAGE_MASK & ~huge_page_mask(h);
 	info.align_offset = 0;
+	info.threadstack_offset = 0;
 	return vm_unmapped_area(&info);
 }
 
@@ -191,6 +192,7 @@ static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,
 	info.high_limit = current->mm->mmap_base;
 	info.align_mask = PAGE_MASK & ~huge_page_mask(h);
 	info.align_offset = 0;
+	info.threadstack_offset = 0;
 	addr = vm_unmapped_area(&info);
 
 	/*
diff --git a/arch/unicore32/include/asm/cache.h b/arch/unicore32/include/asm/cache.h
index ad8f795d86ca..2c7eec6355b6 100644
--- a/arch/unicore32/include/asm/cache.h
+++ b/arch/unicore32/include/asm/cache.h
@@ -12,8 +12,10 @@
 #ifndef __UNICORE_CACHE_H__
 #define __UNICORE_CACHE_H__
 
-#define L1_CACHE_SHIFT		(5)
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#include <linux/const.h>
+
+#define L1_CACHE_SHIFT		5
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 /*
  * Memory returned by kmalloc() may be used for DMA, so we must make
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 6fd9109002c6..1775eac0acb1 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -692,6 +692,7 @@ config SCHED_OMIT_FRAME_POINTER
 
 menuconfig HYPERVISOR_GUEST
 	bool "Linux guest support"
+	depends on !GRKERNSEC_CONFIG_AUTO || GRKERNSEC_CONFIG_VIRT_GUEST || (GRKERNSEC_CONFIG_VIRT_HOST && GRKERNSEC_CONFIG_VIRT_XEN)
 	---help---
 	  Say Y here to enable options for running Linux under various hyper-
 	  visors. This option enables basic hypervisor detection and platform
@@ -1092,6 +1093,7 @@ config VM86
 
 config X86_16BIT
 	bool "Enable support for 16-bit segments" if EXPERT
+	depends on !GRKERNSEC
 	default y
 	depends on MODIFY_LDT_SYSCALL
 	---help---
@@ -1246,6 +1248,7 @@ choice
 
 config NOHIGHMEM
 	bool "off"
+	depends on !(PAX_PAGEEXEC && PAX_ENABLE_PAE)
 	---help---
 	  Linux can use up to 64 Gigabytes of physical memory on x86 systems.
 	  However, the address space of 32-bit x86 processors is only 4
@@ -1282,6 +1285,7 @@ config NOHIGHMEM
 
 config HIGHMEM4G
 	bool "4GB"
+	depends on !(PAX_PAGEEXEC && PAX_ENABLE_PAE)
 	---help---
 	  Select this if you have a 32-bit processor and between 1 and 4
 	  gigabytes of physical RAM.
@@ -1808,6 +1812,7 @@ source kernel/Kconfig.hz
 config KEXEC
 	bool "kexec system call"
 	select KEXEC_CORE
+	depends on !GRKERNSEC_KMEM
 	---help---
 	  kexec is a system call that implements the ability to shutdown your
 	  current kernel, and to start another kernel.  It is like a reboot
@@ -2217,6 +2222,22 @@ config MODIFY_LDT_SYSCALL
 
 	  Saying 'N' here may make sense for embedded or server kernels.
 
+config DEFAULT_MODIFY_LDT_SYSCALL
+	bool "Allow userspace to modify the LDT by default"
+	default y
+
+	---help---
+	  Modifying the LDT (Local Descriptor Table) may be needed to run a
+	  16-bit or segmented code such as Dosemu or Wine. This is done via
+	  a system call which is not needed to run portable applications,
+	  and which can sometimes be abused to exploit some weaknesses of
+	  the architecture, opening new vulnerabilities.
+
+	  For this reason this option allows one to enable or disable the
+	  feature at runtime. It is recommended to say 'N' here to leave
+	  the system protected, and to enable it at runtime only if needed
+	  by setting the sys.kernel.modify_ldt sysctl.
+
 source "kernel/livepatch/Kconfig"
 
 endmenu
diff --git a/arch/x86/Kconfig.debug b/arch/x86/Kconfig.debug
index 3e2dd82efb5a..1a5c1ab1d57e 100644
--- a/arch/x86/Kconfig.debug
+++ b/arch/x86/Kconfig.debug
@@ -55,6 +55,7 @@ config X86_PTDUMP
 	tristate "Export kernel pagetable layout to userspace via debugfs"
 	depends on DEBUG_KERNEL
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	select X86_PTDUMP_CORE
 	---help---
 	  Say Y here if you want to show the kernel pagetable layout in a
@@ -354,6 +355,7 @@ config X86_DEBUG_FPU
 config PUNIT_ATOM_DEBUG
 	tristate "ATOM Punit debug driver"
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	select IOSF_MBI
 	---help---
 	  This is a debug driver, which gets the power states
diff --git a/arch/x86/entry/common.c b/arch/x86/entry/common.c
index 079ce742468c..486d4bfcb773 100644
--- a/arch/x86/entry/common.c
+++ b/arch/x86/entry/common.c
@@ -71,6 +71,10 @@ static void do_audit_syscall_entry(struct pt_regs *regs, u32 arch)
 	}
 }
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+extern void gr_delayed_cred_worker(void);
+#endif
+
 /*
  * Returns the syscall nr to run (which should match regs->orig_ax) or -1
  * to skip the syscall.
@@ -89,6 +93,11 @@ static long syscall_trace_enter(struct pt_regs *regs)
 
 	work = ACCESS_ONCE(ti->flags) & _TIF_WORK_SYSCALL_ENTRY;
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	if (unlikely(work & _TIF_SYSCALL_EMU))
 		emulated = true;
 
@@ -268,6 +277,11 @@ __visible inline void syscall_return_slowpath(struct pt_regs *regs)
 	    WARN(irqs_disabled(), "syscall %ld left IRQs disabled", regs->orig_ax))
 		local_irq_enable();
 
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (unlikely(test_and_clear_thread_flag(TIF_GRSEC_SETXID)))
+		gr_delayed_cred_worker();
+#endif
+
 	/*
 	 * First do one-time work.  If these work items are enabled, we
 	 * want to run them exactly once per syscall exit with IRQs on.
diff --git a/arch/x86/entry/entry_32.S b/arch/x86/entry/entry_32.S
index 24fdfbac9264..d684e0fdb4f2 100644
--- a/arch/x86/entry/entry_32.S
+++ b/arch/x86/entry/entry_32.S
@@ -257,7 +257,7 @@ ENTRY(pax_erase_kstack)
 
 	GET_CURRENT(%ebp)
 	mov TASK_lowest_stack(%ebp), %edi
-	mov $0xB4DD00D5, %eax
+	mov $-0xBEEF, %eax
 	std
 
 1:	mov %edi, %ecx
diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index 803eccf0d472..d3f0e593fbe6 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -401,7 +401,7 @@ ENTRY(pax_erase_kstack)
 
 	GET_CURRENT(%r11)
 	mov	TASK_lowest_stack(%r11), %rdi
-	mov	$0xB4DD00D5BADBABE5, %rax
+	mov	$-0xBEEF, %rax
 	std
 
 1:	mov	%edi, %ecx
diff --git a/arch/x86/ia32/ia32_aout.c b/arch/x86/ia32/ia32_aout.c
index cb26f18d43af..4f43f2399f6b 100644
--- a/arch/x86/ia32/ia32_aout.c
+++ b/arch/x86/ia32/ia32_aout.c
@@ -153,6 +153,8 @@ static int aout_core_dump(struct coredump_params *cprm)
 	unsigned long dump_start, dump_size;
 	struct user32 dump;
 
+	memset(&dump, 0, sizeof(dump));
+
 	fs = get_fs();
 	set_fs(KERNEL_DS);
 	has_dumped = 1;
diff --git a/arch/x86/include/asm/floppy.h b/arch/x86/include/asm/floppy.h
index 1c7eefe32502..d0e4702883b9 100644
--- a/arch/x86/include/asm/floppy.h
+++ b/arch/x86/include/asm/floppy.h
@@ -229,18 +229,18 @@ static struct fd_routine_l {
 	int (*_dma_setup)(char *addr, unsigned long size, int mode, int io);
 } fd_routine[] = {
 	{
-		request_dma,
-		free_dma,
-		get_dma_residue,
-		dma_mem_alloc,
-		hard_dma_setup
+		._request_dma = request_dma,
+		._free_dma = free_dma,
+		._get_dma_residue = get_dma_residue,
+		._dma_mem_alloc = dma_mem_alloc,
+		._dma_setup = hard_dma_setup
 	},
 	{
-		vdma_request_dma,
-		vdma_nop,
-		vdma_get_dma_residue,
-		vdma_mem_alloc,
-		vdma_dma_setup
+		._request_dma = vdma_request_dma,
+		._free_dma = vdma_nop,
+		._get_dma_residue = vdma_get_dma_residue,
+		._dma_mem_alloc = vdma_mem_alloc,
+		._dma_setup = vdma_dma_setup
 	}
 };
 
diff --git a/arch/x86/include/asm/fpu/types.h b/arch/x86/include/asm/fpu/types.h
index 4ae5fd68d543..e32babddda6c 100644
--- a/arch/x86/include/asm/fpu/types.h
+++ b/arch/x86/include/asm/fpu/types.h
@@ -276,6 +276,39 @@ union fpregs_state {
  */
 struct fpu {
 	/*
+	 * @state:
+	 *
+	 * In-memory copy of all FPU registers that we save/restore
+	 * over context switches. If the task is using the FPU then
+	 * the registers in the FPU are more recent than this state
+	 * copy. If the task context-switches away then they get
+	 * saved here and represent the FPU state.
+	 *
+	 * After context switches there may be a (short) time period
+	 * during which the in-FPU hardware registers are unchanged
+	 * and still perfectly match this state, if the tasks
+	 * scheduled afterwards are not using the FPU.
+	 *
+	 * This is the 'lazy restore' window of optimization, which
+	 * we track though 'fpu_fpregs_owner_ctx' and 'fpu->last_cpu'.
+	 *
+	 * We detect whether a subsequent task uses the FPU via setting
+	 * CR0::TS to 1, which causes any FPU use to raise a #NM fault.
+	 *
+	 * During this window, if the task gets scheduled again, we
+	 * might be able to skip having to do a restore from this
+	 * memory buffer to the hardware registers - at the cost of
+	 * incurring the overhead of #NM fault traps.
+	 *
+	 * Note that on modern CPUs that support the XSAVEOPT (or other
+	 * optimized XSAVE instructions), we don't use #NM traps anymore,
+	 * as the hardware can track whether FPU registers need saving
+	 * or not. On such CPUs we activate the non-lazy ('eagerfpu')
+	 * logic, which unconditionally saves/restores all FPU state
+	 * across context switches. (if FPU state exists.)
+	 */
+	union fpregs_state		*state;
+	/*
 	 * @last_cpu:
 	 *
 	 * Records the last CPU on which this context was loaded into
@@ -332,42 +365,6 @@ struct fpu {
 	 * deal with bursty apps that only use the FPU for a short time:
 	 */
 	unsigned char			counter;
-	/*
-	 * @state:
-	 *
-	 * In-memory copy of all FPU registers that we save/restore
-	 * over context switches. If the task is using the FPU then
-	 * the registers in the FPU are more recent than this state
-	 * copy. If the task context-switches away then they get
-	 * saved here and represent the FPU state.
-	 *
-	 * After context switches there may be a (short) time period
-	 * during which the in-FPU hardware registers are unchanged
-	 * and still perfectly match this state, if the tasks
-	 * scheduled afterwards are not using the FPU.
-	 *
-	 * This is the 'lazy restore' window of optimization, which
-	 * we track though 'fpu_fpregs_owner_ctx' and 'fpu->last_cpu'.
-	 *
-	 * We detect whether a subsequent task uses the FPU via setting
-	 * CR0::TS to 1, which causes any FPU use to raise a #NM fault.
-	 *
-	 * During this window, if the task gets scheduled again, we
-	 * might be able to skip having to do a restore from this
-	 * memory buffer to the hardware registers - at the cost of
-	 * incurring the overhead of #NM fault traps.
-	 *
-	 * Note that on modern CPUs that support the XSAVEOPT (or other
-	 * optimized XSAVE instructions), we don't use #NM traps anymore,
-	 * as the hardware can track whether FPU registers need saving
-	 * or not. On such CPUs we activate the non-lazy ('eagerfpu')
-	 * logic, which unconditionally saves/restores all FPU state
-	 * across context switches. (if FPU state exists.)
-	 */
-	union fpregs_state		*state;
-	/*
-	 * WARNING: 'state' is dynamically-sized.
-	 */
 };
 
 #endif /* _ASM_X86_FPU_H */
diff --git a/arch/x86/include/asm/io.h b/arch/x86/include/asm/io.h
index 45ed2fe949dc..08f3231179cc 100644
--- a/arch/x86/include/asm/io.h
+++ b/arch/x86/include/asm/io.h
@@ -116,7 +116,7 @@ build_mmio_write(writeq, "q", unsigned long, "r", :"memory")
  *	this function
  */
 
-static inline phys_addr_t virt_to_phys(volatile void *address)
+static inline phys_addr_t __intentional_overflow(-1) virt_to_phys(volatile void *address)
 {
 	return __pa(address);
 }
diff --git a/arch/x86/include/asm/irqflags.h b/arch/x86/include/asm/irqflags.h
index 844b04f5e2e9..90e119ce41a5 100644
--- a/arch/x86/include/asm/irqflags.h
+++ b/arch/x86/include/asm/irqflags.h
@@ -27,13 +27,17 @@ static inline asmlinkage unsigned long native_save_fl(void)
 		     : /* no input */
 		     : "memory");
 
+#if !defined(CONFIG_GRKERNSEC_CONFIG_VIRT_HOST) || !defined(CONFIG_GRKERNSEC_CONFIG_VIRT_VIRTUALBOX)
 	BUG_ON(flags & X86_EFLAGS_AC);
+#endif
 	return flags;
 }
 
 static inline void native_restore_fl(unsigned long flags)
 {
+#if !defined(CONFIG_GRKERNSEC_CONFIG_VIRT_HOST) || !defined(CONFIG_GRKERNSEC_CONFIG_VIRT_VIRTUALBOX)
 	BUG_ON(flags & X86_EFLAGS_AC);
+#endif
 	asm volatile("push %0 ; popf"
 		     : /* no output */
 		     :"g" (flags)
diff --git a/arch/x86/include/asm/page.h b/arch/x86/include/asm/page.h
index 68efb7f87bf9..bbcf5e67ed4f 100644
--- a/arch/x86/include/asm/page.h
+++ b/arch/x86/include/asm/page.h
@@ -67,11 +67,21 @@ static inline void copy_user_page(void *to, void *from, unsigned long vaddr,
  * virt_to_page(kaddr) returns a valid pointer if and only if
  * virt_addr_valid(kaddr) returns true.
  */
-#define virt_to_page(kaddr)	pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)
 #define pfn_to_kaddr(pfn)      __va((pfn) << PAGE_SHIFT)
 extern bool __virt_addr_valid(unsigned long kaddr);
 #define virt_addr_valid(kaddr)	__virt_addr_valid((unsigned long) (kaddr))
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+#define virt_to_page(kaddr)	\
+	({ \
+		const void *__kaddr = (const void *)(kaddr); \
+		BUG_ON(!virt_addr_valid(__kaddr)); \
+		pfn_to_page(__pa(__kaddr) >> PAGE_SHIFT); \
+	})
+#else
+#define virt_to_page(kaddr)	pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)
+#endif
+
 #endif	/* __ASSEMBLY__ */
 
 #include <asm-generic/memory_model.h>
diff --git a/arch/x86/include/asm/page_64.h b/arch/x86/include/asm/page_64.h
index cb419e73e16b..2c3570f2f839 100644
--- a/arch/x86/include/asm/page_64.h
+++ b/arch/x86/include/asm/page_64.h
@@ -9,7 +9,7 @@
 extern unsigned long max_pfn;
 extern const unsigned long phys_base;
 
-static inline unsigned long __intentional_overflow(-1) __phys_addr_nodebug(unsigned long x)
+static __always_inline unsigned long __intentional_overflow(-1) __phys_addr_nodebug(unsigned long x)
 {
 	unsigned long y = x - __START_KERNEL_map;
 
diff --git a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h
index 00213208aa8e..3e5329ec3d21 100644
--- a/arch/x86/include/asm/paravirt_types.h
+++ b/arch/x86/include/asm/paravirt_types.h
@@ -99,7 +99,7 @@ struct pv_init_ops {
 	 */
 	unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,
 			  unsigned long addr, unsigned len);
-} __no_const;
+} __no_const __no_randomize_layout;
 
 
 struct pv_lazy_ops {
@@ -107,12 +107,12 @@ struct pv_lazy_ops {
 	void (*enter)(void);
 	void (*leave)(void);
 	void (*flush)(void);
-} __no_const;
+} __no_const __no_randomize_layout;
 
 struct pv_time_ops {
 	unsigned long long (*sched_clock)(void);
 	unsigned long long (*steal_clock)(int cpu);
-} __rap_hash __no_const;
+} __rap_hash __no_const __no_randomize_layout;
 
 struct pv_cpu_ops {
 	/* hooks for various privileged instructions */
@@ -193,7 +193,7 @@ struct pv_cpu_ops {
 
 	void (*start_context_switch)(struct task_struct *prev);
 	void (*end_context_switch)(struct task_struct *next);
-} __rap_hash __no_const;
+} __rap_hash __no_const __no_randomize_layout;
 
 struct pv_irq_ops {
 	/*
@@ -216,7 +216,7 @@ struct pv_irq_ops {
 #ifdef CONFIG_X86_64
 	void (*adjust_exception_frame)(void);
 #endif
-} __rap_hash;
+} __rap_hash __no_randomize_layout;
 
 struct pv_mmu_ops {
 	unsigned long (*read_cr2)(void);
@@ -318,7 +318,7 @@ struct pv_mmu_ops {
 	unsigned long (*pax_close_kernel)(void);
 #endif
 
-} __rap_hash;
+} __rap_hash __no_randomize_layout;
 
 struct arch_spinlock;
 #ifdef CONFIG_SMP
@@ -333,11 +333,14 @@ struct pv_lock_ops {
 
 	void (*wait)(u8 *ptr, u8 val);
 	void (*kick)(int cpu);
-} __rap_hash;
+} __rap_hash __no_randomize_layout;
 
 /* This contains all the paravirt structures: we get a convenient
  * number for each function using the offset which we use to indicate
- * what to patch. */
+ * what to patch.
+ * shouldn't be randomized due to the "NEAT TRICK" in paravirt.c
+ */
+
 struct paravirt_patch_template {
 	struct pv_init_ops pv_init_ops;
 	struct pv_time_ops pv_time_ops;
@@ -345,7 +348,7 @@ struct paravirt_patch_template {
 	struct pv_irq_ops pv_irq_ops;
 	struct pv_mmu_ops pv_mmu_ops;
 	struct pv_lock_ops pv_lock_ops;
-};
+} __no_randomize_layout;
 
 extern struct pv_info pv_info;
 extern struct pv_init_ops pv_init_ops;
diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h
index 12544be44fc2..0ad5d22ee0d5 100644
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@ -136,7 +136,7 @@ struct cpuinfo_x86 {
 	/* Index into per_cpu list: */
 	u16			cpu_index;
 	u32			microcode;
-};
+} __randomize_layout;
 
 #define X86_VENDOR_INTEL	0
 #define X86_VENDOR_CYRIX	1
@@ -343,6 +343,7 @@ DECLARE_PER_CPU_FIRST(union irq_stack_union, irq_stack_union) __visible;
 DECLARE_INIT_PER_CPU(irq_stack_union);
 
 DECLARE_PER_CPU(char *, irq_stack_ptr);
+DECLARE_PER_CPU(char *, irq_stack_ptr_lowmem);
 DECLARE_PER_CPU(unsigned int, irq_count);
 extern asmlinkage void ignore_sysret(void);
 #else	/* X86_64 */
@@ -436,7 +437,7 @@ struct thread_struct {
 
 	unsigned int		sig_on_uaccess_err:1;
 	unsigned int		uaccess_err:1;	/* uaccess failed */
-};
+} __randomize_layout;
 
 /*
  * Thread-synchronous status.
diff --git a/arch/x86/include/asm/thread_info.h b/arch/x86/include/asm/thread_info.h
index 73523ec03eda..1b4909d8e4b0 100644
--- a/arch/x86/include/asm/thread_info.h
+++ b/arch/x86/include/asm/thread_info.h
@@ -99,6 +99,7 @@ struct thread_info {
 #define TIF_SYSCALL_TRACEPOINT	28	/* syscall tracepoint instrumentation */
 #define TIF_ADDR32		29	/* 32-bit address space on 64 bits */
 #define TIF_X32			30	/* 32-bit native x86-64 binary */
+#define TIF_GRSEC_SETXID	31	/* update credentials on syscall entry/exit */
 
 #define _TIF_SYSCALL_TRACE	(1 << TIF_SYSCALL_TRACE)
 #define _TIF_NOTIFY_RESUME	(1 << TIF_NOTIFY_RESUME)
@@ -121,6 +122,7 @@ struct thread_info {
 #define _TIF_SYSCALL_TRACEPOINT	(1 << TIF_SYSCALL_TRACEPOINT)
 #define _TIF_ADDR32		(1 << TIF_ADDR32)
 #define _TIF_X32		(1 << TIF_X32)
+#define _TIF_GRSEC_SETXID	(1 << TIF_GRSEC_SETXID)
 
 /*
  * work to do in syscall_trace_enter().  Also includes TIF_NOHZ for
@@ -129,12 +131,12 @@ struct thread_info {
 #define _TIF_WORK_SYSCALL_ENTRY	\
 	(_TIF_SYSCALL_TRACE | _TIF_SYSCALL_EMU | _TIF_SYSCALL_AUDIT |	\
 	 _TIF_SECCOMP | _TIF_SYSCALL_TRACEPOINT |	\
-	 _TIF_NOHZ)
+	 _TIF_NOHZ | _TIF_GRSEC_SETXID)
 
 /* work to do on any return to user space */
 #define _TIF_ALLWORK_MASK						\
 	((0x0000FFFF & ~_TIF_SECCOMP) | _TIF_SYSCALL_TRACEPOINT |	\
-	_TIF_NOHZ)
+	_TIF_NOHZ | _TIF_GRSEC_SETXID)
 
 /* flags to check in __switch_to() */
 #define _TIF_WORK_CTXSW							\
diff --git a/arch/x86/include/asm/traps.h b/arch/x86/include/asm/traps.h
index 895d81288050..0ad067b4531d 100644
--- a/arch/x86/include/asm/traps.h
+++ b/arch/x86/include/asm/traps.h
@@ -129,7 +129,7 @@ extern void ist_exit(struct pt_regs *regs);
 extern void ist_begin_non_atomic(struct pt_regs *regs);
 extern void ist_end_non_atomic(void);
 
-#ifdef CONFIG_VMAP_STACK
+#if defined(CONFIG_VMAP_STACK) || defined(CONFIG_GRKERNSEC_KSTACKOVERFLOW)
 void __noreturn handle_stack_overflow(const char *message,
 				      struct pt_regs *regs,
 				      unsigned long fault_address);
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index 4870ac891553..9eeb03bc4194 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -1381,6 +1381,8 @@ EXPORT_PER_CPU_SYMBOL(current_task);
 
 DEFINE_PER_CPU(char *, irq_stack_ptr) =
 	init_per_cpu_var(irq_stack_union.irq_stack) + IRQ_STACK_SIZE;
+DEFINE_PER_CPU(char *, irq_stack_ptr_lowmem) =
+	init_per_cpu_var(irq_stack_union.irq_stack) + IRQ_STACK_SIZE;
 
 DEFINE_PER_CPU(unsigned int, irq_count) __visible = -1;
 
diff --git a/arch/x86/kernel/dumpstack.c b/arch/x86/kernel/dumpstack.c
index 85f854b98a9d..78ddb7ecdaf5 100644
--- a/arch/x86/kernel/dumpstack.c
+++ b/arch/x86/kernel/dumpstack.c
@@ -2,6 +2,9 @@
  *  Copyright (C) 1991, 1992  Linus Torvalds
  *  Copyright (C) 2000, 2001, 2002 Andi Kleen, SuSE Labs
  */
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+#define __INCLUDED_BY_HIDESYM 1
+#endif
 #include <linux/kallsyms.h>
 #include <linux/kprobes.h>
 #include <linux/uaccess.h>
@@ -53,7 +56,7 @@ static void printk_stack_address(unsigned long address, int reliable,
 
 void printk_address(unsigned long address)
 {
-	pr_cont(" [<%p>] %pS\n", (void *)address, (void *)address);
+	pr_cont(" [<%p>] %pA\n", (void *)address, (void *)address);
 }
 
 void show_trace_log_lvl(struct task_struct *task, struct pt_regs *regs,
@@ -202,6 +205,7 @@ EXPORT_SYMBOL_GPL(oops_begin);
 NOKPROBE_SYMBOL(oops_begin);
 
 void __noreturn rewind_stack_do_exit(int signr);
+extern void gr_handle_kernel_exploit(void);
 
 void oops_end(unsigned long flags, struct pt_regs *regs, int signr)
 {
@@ -225,6 +229,8 @@ void oops_end(unsigned long flags, struct pt_regs *regs, int signr)
 	if (panic_on_oops)
 		panic("Fatal exception");
 
+	gr_handle_kernel_exploit();
+
 	/*
 	 * We're not going to return, but we might be on an IST stack or
 	 * have very little stack space left.  Rewind the stack and kill
diff --git a/arch/x86/kernel/dumpstack_32.c b/arch/x86/kernel/dumpstack_32.c
index 7cfef2210e0e..ca545b8e21c2 100644
--- a/arch/x86/kernel/dumpstack_32.c
+++ b/arch/x86/kernel/dumpstack_32.c
@@ -15,6 +15,7 @@
 #include <linux/nmi.h>
 
 #include <asm/stacktrace.h>
+#include <asm/desc.h>
 
 void stack_type_str(enum stack_type type, const char **begin, const char **end)
 {
diff --git a/arch/x86/kernel/ioport.c b/arch/x86/kernel/ioport.c
index 18515bca3e99..367e6ce63f9f 100644
--- a/arch/x86/kernel/ioport.c
+++ b/arch/x86/kernel/ioport.c
@@ -6,6 +6,7 @@
 #include <linux/sched.h>
 #include <linux/kernel.h>
 #include <linux/capability.h>
+#include <linux/security.h>
 #include <linux/errno.h>
 #include <linux/types.h>
 #include <linux/ioport.h>
@@ -30,6 +31,12 @@ SYSCALL_DEFINE3(ioperm, unsigned long, from, unsigned long, num, int, turn_on)
 		return -EINVAL;
 	if (turn_on && !capable(CAP_SYS_RAWIO))
 		return -EPERM;
+#ifdef CONFIG_GRKERNSEC_IO
+	if (turn_on && grsec_disable_privio) {
+		gr_handle_ioperm();
+		return -ENODEV;
+	}
+#endif
 
 	/*
 	 * If it's the first ioperm() call in this thread's lifetime, set the
@@ -110,6 +117,12 @@ SYSCALL_DEFINE1(iopl, unsigned int, level)
 	if (level > old) {
 		if (!capable(CAP_SYS_RAWIO))
 			return -EPERM;
+#ifdef CONFIG_GRKERNSEC_IO
+		if (grsec_disable_privio) {
+			gr_handle_iopl();
+			return -ENODEV;
+		}
+#endif
 	}
 	regs->flags = (regs->flags & ~X86_EFLAGS_IOPL) |
 		(level << X86_EFLAGS_IOPL_BIT);
diff --git a/arch/x86/kernel/irq_32.c b/arch/x86/kernel/irq_32.c
index 2c8d0c12f292..65b5e986fe7b 100644
--- a/arch/x86/kernel/irq_32.c
+++ b/arch/x86/kernel/irq_32.c
@@ -22,6 +22,8 @@
 
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
 
+extern void gr_handle_kernel_exploit(void);
+
 int sysctl_panic_on_stackoverflow __read_mostly;
 
 /* Debugging check for stack overflow: is there less than 1KB free? */
@@ -39,6 +41,7 @@ static asmlinkage void print_stack_overflow(void)
 {
 	printk(KERN_WARNING "low stack detected by irq handler\n");
 	dump_stack();
+	gr_handle_kernel_exploit();
 	if (sysctl_panic_on_stackoverflow)
 		panic("low stack detected by irq handler - check messages\n");
 }
diff --git a/arch/x86/kernel/irq_64.c b/arch/x86/kernel/irq_64.c
index 9ebd0b0e73d9..685de4ae632c 100644
--- a/arch/x86/kernel/irq_64.c
+++ b/arch/x86/kernel/irq_64.c
@@ -19,6 +19,8 @@
 #include <asm/idle.h>
 #include <asm/apic.h>
 
+extern void gr_handle_kernel_exploit(void);
+
 int sysctl_panic_on_stackoverflow;
 
 /*
@@ -44,9 +46,8 @@ static inline void stack_overflow_check(struct pt_regs *regs)
 	    regs->sp <= curbase + THREAD_SIZE)
 		return;
 
-	irq_stack_top = (u64)this_cpu_ptr(irq_stack_union.irq_stack) +
-			STACK_TOP_MARGIN;
 	irq_stack_bottom = (u64)__this_cpu_read(irq_stack_ptr);
+	irq_stack_top = irq_stack_bottom - IRQ_STACK_SIZE + STACK_TOP_MARGIN;
 	if (regs->sp >= irq_stack_top && regs->sp <= irq_stack_bottom)
 		return;
 
@@ -61,6 +62,8 @@ static inline void stack_overflow_check(struct pt_regs *regs)
 		irq_stack_top, irq_stack_bottom,
 		estack_top, estack_bottom);
 
+	gr_handle_kernel_exploit();
+
 	if (sysctl_panic_on_stackoverflow)
 		panic("low stack detected by irq handler - check messages\n");
 #endif
diff --git a/arch/x86/kernel/ldt.c b/arch/x86/kernel/ldt.c
index 0366e403220f..cf6479123f6f 100644
--- a/arch/x86/kernel/ldt.c
+++ b/arch/x86/kernel/ldt.c
@@ -11,6 +11,7 @@
 #include <linux/sched.h>
 #include <linux/string.h>
 #include <linux/mm.h>
+#include <linux/ratelimit.h>
 #include <linux/smp.h>
 #include <linux/slab.h>
 #include <linux/vmalloc.h>
@@ -22,6 +23,14 @@
 #include <asm/mmu_context.h>
 #include <asm/syscalls.h>
 
+#ifdef CONFIG_GRKERNSEC
+int sysctl_modify_ldt __read_only = 0;
+#elif defined(CONFIG_DEFAULT_MODIFY_LDT_SYSCALL)
+int sysctl_modify_ldt __read_only = 1;
+#else
+int sysctl_modify_ldt __read_only = 0;
+#endif
+
 /* context.lock is held for us, so we don't need any locking. */
 static void flush_ldt(void *current_mm)
 {
@@ -301,6 +310,15 @@ SYSCALL_DEFINE3(modify_ldt, int, func, void __user *, ptr, unsigned long, byteco
 {
 	int ret = -ENOSYS;
 
+	if (!sysctl_modify_ldt) {
+		printk_ratelimited(KERN_INFO
+			"Denied a call to modify_ldt() from %s[%d] (uid: %d)."
+			" Adjust sysctl if this was not an exploit attempt.\n",
+			current->comm, task_pid_nr(current),
+			from_kuid_munged(current_user_ns(), current_uid()));
+		return ret;
+	}
+
 	switch (func) {
 	case 0:
 		ret = read_ldt(ptr, bytecount);
diff --git a/arch/x86/kernel/msr.c b/arch/x86/kernel/msr.c
index 9f7feab914fa..e53578342ccf 100644
--- a/arch/x86/kernel/msr.c
+++ b/arch/x86/kernel/msr.c
@@ -39,6 +39,7 @@
 #include <linux/notifier.h>
 #include <linux/uaccess.h>
 #include <linux/gfp.h>
+#include <linux/grsecurity.h>
 
 #include <asm/cpufeature.h>
 #include <asm/msr.h>
@@ -83,6 +84,13 @@ static ssize_t msr_write(struct file *file, const char __user *buf,
 	int err = 0;
 	ssize_t bytes = 0;
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+	if (reg != MSR_IA32_ENERGY_PERF_BIAS) {
+		gr_handle_msr_write();
+		return -EPERM;
+	}
+#endif
+
 	if (count % 8)
 		return -EINVAL;	/* Invalid chunk size */
 
@@ -130,6 +138,10 @@ static long msr_ioctl(struct file *file, unsigned int ioc, unsigned long arg)
 			err = -EBADF;
 			break;
 		}
+#ifdef CONFIG_GRKERNSEC_KMEM
+		gr_handle_msr_write();
+		return -EPERM;
+#endif
 		if (copy_from_user(&regs, uregs, sizeof regs)) {
 			err = -EFAULT;
 			break;
diff --git a/arch/x86/kernel/setup_percpu.c b/arch/x86/kernel/setup_percpu.c
index 337e35abb330..99987a3239c2 100644
--- a/arch/x86/kernel/setup_percpu.c
+++ b/arch/x86/kernel/setup_percpu.c
@@ -247,7 +247,7 @@ void __init setup_per_cpu_areas(void)
 			early_per_cpu_map(x86_cpu_to_logical_apicid, cpu);
 #endif
 #ifdef CONFIG_X86_64
-		per_cpu(irq_stack_ptr, cpu) =
+		per_cpu(irq_stack_ptr, cpu) = per_cpu(irq_stack_ptr_lowmem, cpu) =
 			per_cpu(irq_stack_union.irq_stack, cpu) +
 			IRQ_STACK_SIZE;
 #endif
diff --git a/arch/x86/kernel/sys_i386_32.c b/arch/x86/kernel/sys_i386_32.c
index b4c5f1de6fd8..920e41328135 100644
--- a/arch/x86/kernel/sys_i386_32.c
+++ b/arch/x86/kernel/sys_i386_32.c
@@ -63,6 +63,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	struct vm_area_struct *vma;
 	unsigned long pax_task_size = TASK_SIZE;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 
 #ifdef CONFIG_PAX_SEGMEXEC
 	if (mm->pax_flags & MF_PAX_SEGMEXEC)
@@ -85,7 +86,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 		addr = PAGE_ALIGN(addr);
 		if (pax_task_size - len >= addr) {
 			vma = find_vma(mm, addr);
-			if (check_heap_stack_gap(vma, addr, len))
+			if (check_heap_stack_gap(vma, addr, len, offset))
 				return addr;
 		}
 	}
@@ -94,6 +95,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	info.length = len;
 	info.align_mask = filp ? get_align_mask() : 0;
 	info.align_offset = pgoff << PAGE_SHIFT;
+	info.threadstack_offset = offset;
 
 #ifdef CONFIG_PAX_PAGEEXEC
 	if (!(__supported_pte_mask & _PAGE_NX) && (mm->pax_flags & MF_PAX_PAGEEXEC) && (flags & MAP_EXECUTABLE)) {
@@ -128,6 +130,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	struct mm_struct *mm = current->mm;
 	unsigned long addr = addr0, pax_task_size = TASK_SIZE;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 
 #ifdef CONFIG_PAX_SEGMEXEC
 	if (mm->pax_flags & MF_PAX_SEGMEXEC)
@@ -157,7 +160,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 		addr = PAGE_ALIGN(addr);
 		if (pax_task_size - len >= addr) {
 			vma = find_vma(mm, addr);
-			if (check_heap_stack_gap(vma, addr, len))
+			if (check_heap_stack_gap(vma, addr, len, offset))
 				return addr;
 		}
 	}
@@ -168,6 +171,8 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	info.high_limit = mm->mmap_base;
 	info.align_mask = filp ? get_align_mask() : 0;
 	info.align_offset = pgoff << PAGE_SHIFT;
+	info.threadstack_offset = offset;
+
 	addr = vm_unmapped_area(&info);
 	if (!(addr & ~PAGE_MASK))
 		return addr;
diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c
index c60836ded044..665be0a8f5d9 100644
--- a/arch/x86/kernel/sys_x86_64.c
+++ b/arch/x86/kernel/sys_x86_64.c
@@ -127,6 +127,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	struct vm_area_struct *vma;
 	struct vm_unmapped_area_info info;
 	unsigned long begin, end;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 
 	if (flags & MAP_FIXED)
 		return addr;
@@ -143,7 +144,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
-		if (end - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (end - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -157,6 +158,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 		info.align_mask = get_align_mask();
 		info.align_offset += get_align_bits();
 	}
+	info.threadstack_offset = offset;
 	return vm_unmapped_area(&info);
 }
 
@@ -169,6 +171,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	struct mm_struct *mm = current->mm;
 	unsigned long addr = addr0;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 
 	/* requested length too big for entire address space */
 	if (len > TASK_SIZE)
@@ -189,7 +192,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -203,6 +206,7 @@ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr0,
 		info.align_mask = get_align_mask();
 		info.align_offset += get_align_bits();
 	}
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 	if (!(addr & ~PAGE_MASK))
 		return addr;
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index 42b2d99c6dd6..4cff0f14720b 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -314,7 +314,7 @@ DO_ERROR(X86_TRAP_NP,     SIGBUS,  "segment not present",	segment_not_present)
 DO_ERROR(X86_TRAP_SS,     SIGBUS,  "stack segment",		stack_segment)
 DO_ERROR(X86_TRAP_AC,     SIGBUS,  "alignment check",		alignment_check)
 
-#ifdef CONFIG_VMAP_STACK
+#if defined(CONFIG_VMAP_STACK) || defined(CONFIG_GRKERNSEC_KSTACKOVERFLOW)
 __visible void __noreturn handle_stack_overflow(const char *message,
 						struct pt_regs *regs,
 						unsigned long fault_address)
@@ -371,7 +371,7 @@ dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code)
 {
 	static const char str[] = "double fault";
 	struct task_struct *tsk = current;
-#ifdef CONFIG_VMAP_STACK
+#if defined(CONFIG_VMAP_STACK) || defined(CONFIG_GRKERNSEC_KSTACKOVERFLOW)
 	unsigned long cr2;
 #endif
 
@@ -408,7 +408,7 @@ dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code)
 	tsk->thread.error_code = error_code;
 	tsk->thread.trap_nr = X86_TRAP_DF;
 
-#ifdef CONFIG_VMAP_STACK
+#if defined(CONFIG_VMAP_STACK) || defined(CONFIG_GRKERNSEC_KSTACKOVERFLOW)
 	/*
 	 * If we overflow the stack into a guard page, the CPU will fail
 	 * to deliver #PF and will send #DF instead.  Similarly, if we
@@ -448,8 +448,12 @@ dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code)
 	 */
 	cr2 = read_cr2();
 	if ((unsigned long)task_stack_page(tsk) - 1 - cr2 < PAGE_SIZE)
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+		handle_stack_overflow("grsec: kernel stack overflow detected", regs, cr2);
+#else
 		handle_stack_overflow("kernel stack overflow (double-fault)", regs, cr2);
 #endif
+#endif
 
 #ifdef CONFIG_DOUBLEFAULT
 	df_debug(regs, error_code);
diff --git a/arch/x86/kernel/verify_cpu.S b/arch/x86/kernel/verify_cpu.S
index 014ea59aa153..03cfe40e46e7 100644
--- a/arch/x86/kernel/verify_cpu.S
+++ b/arch/x86/kernel/verify_cpu.S
@@ -20,6 +20,7 @@
  *	arch/x86/boot/compressed/head_64.S: Boot cpu verification
  *	arch/x86/kernel/trampoline_64.S: secondary processor verification
  *	arch/x86/kernel/head_32.S: processor startup
+ *	arch/x86/kernel/acpi/realmode/wakeup.S: 32bit processor resume
  *
  *	verify_cpu, returns the status of longmode and SSE in register %eax.
  *		0: Success    1: Failure
diff --git a/arch/x86/kernel/vm86_32.c b/arch/x86/kernel/vm86_32.c
index c387f488e796..a304a4c76b11 100644
--- a/arch/x86/kernel/vm86_32.c
+++ b/arch/x86/kernel/vm86_32.c
@@ -261,6 +261,13 @@ static long do_sys_vm86(struct vm86plus_struct __user *user_vm86, bool plus)
 		return -EPERM;
 	}
 
+#ifdef CONFIG_GRKERNSEC_VM86
+	if (!capable(CAP_SYS_RAWIO)) {
+		gr_handle_vm86();
+		return -EPERM;
+	}
+#endif
+
 	if (!vm86) {
 		if (!(vm86 = kzalloc(sizeof(*vm86), GFP_KERNEL)))
 			return -ENOMEM;
@@ -829,6 +836,14 @@ static inline int get_and_reset_irq(int irqnumber)
 static int do_vm86_irq_handling(int subfunction, int irqnumber)
 {
 	int ret;
+
+#ifdef CONFIG_GRKERNSEC_VM86
+	if (!capable(CAP_SYS_RAWIO)) {
+		gr_handle_vm86();
+		return -EPERM;
+	}
+#endif
+
 	switch (subfunction) {
 		case VM86_GET_AND_RESET_IRQ: {
 			return get_and_reset_irq(irqnumber);
diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index f01932f8d4c0..a076e4a2c4b3 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -759,9 +759,15 @@ show_fault_oops(struct pt_regs *regs, unsigned long error_code,
 	}
 
 #ifdef CONFIG_PAX_KERNEXEC
-	if (init_mm.start_code <= address && address < init_mm.end_code)
-		printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to modify kernel code\n", current->comm, task_pid_nr(current),
-				from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()));
+	if (init_mm.start_code <= address && address < init_mm.end_code) {
+		if (current->signal->curr_ip)
+			printk(KERN_EMERG "PAX: From %pI4: %s:%d, uid/euid: %u/%u, attempted to modify kernel code\n",
+					&current->signal->curr_ip, current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()));
+		else
+			printk(KERN_EMERG "PAX: %s:%d, uid/euid: %u/%u, attempted to modify kernel code\n", current->comm, task_pid_nr(current),
+					from_kuid_munged(&init_user_ns, current_uid()), from_kuid_munged(&init_user_ns, current_euid()));
+	}
 #endif
 
 	printk(KERN_ALERT "BUG: unable to handle kernel ");
diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c
index 6f5ea9f8b110..e8f8f2948e01 100644
--- a/arch/x86/mm/hugetlbpage.c
+++ b/arch/x86/mm/hugetlbpage.c
@@ -74,23 +74,24 @@ int pud_huge(pud_t pud)
 #ifdef CONFIG_HUGETLB_PAGE
 static unsigned long hugetlb_get_unmapped_area_bottomup(struct file *file,
 		unsigned long addr, unsigned long len,
-		unsigned long pgoff, unsigned long flags)
+		unsigned long pgoff, unsigned long flags, unsigned long offset)
 {
 	struct hstate *h = hstate_file(file);
 	struct vm_unmapped_area_info info;
-
+	
 	info.flags = 0;
 	info.length = len;
 	info.low_limit = current->mm->mmap_legacy_base;
 	info.high_limit = TASK_SIZE;
 	info.align_mask = PAGE_MASK & ~huge_page_mask(h);
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	return vm_unmapped_area(&info);
 }
 
 static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,
 		unsigned long addr0, unsigned long len,
-		unsigned long pgoff, unsigned long flags)
+		unsigned long pgoff, unsigned long flags, unsigned long offset)
 {
 	struct hstate *h = hstate_file(file);
 	struct vm_unmapped_area_info info;
@@ -102,6 +103,7 @@ static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,
 	info.high_limit = current->mm->mmap_base;
 	info.align_mask = PAGE_MASK & ~huge_page_mask(h);
 	info.align_offset = 0;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 	/*
@@ -135,6 +137,7 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
 	unsigned long pax_task_size = TASK_SIZE;
+	unsigned long offset = gr_rand_threadstack_offset(mm, file, flags);
 
 	if (len & ~huge_page_mask(h))
 		return -EINVAL;
@@ -162,15 +165,15 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,
 	if (addr) {
 		addr = ALIGN(addr, huge_page_size(h));
 		vma = find_vma(mm, addr);
-		if (pax_task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (pax_task_size - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 	if (mm->get_unmapped_area == arch_get_unmapped_area)
 		return hugetlb_get_unmapped_area_bottomup(file, addr, len,
-				pgoff, flags);
+				pgoff, flags, offset);
 	else
 		return hugetlb_get_unmapped_area_topdown(file, addr, len,
-				pgoff, flags);
+				pgoff, flags, offset);
 }
 #endif /* CONFIG_HUGETLB_PAGE */
 
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 294d3da613fc..0e558668c487 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -4,6 +4,7 @@
 #include <linux/swap.h>
 #include <linux/memblock.h>
 #include <linux/bootmem.h>	/* for max_low_pfn */
+#include <linux/tboot.h>
 
 #include <asm/cacheflush.h>
 #include <asm/e820.h>
@@ -18,6 +19,7 @@
 #include <asm/dma.h>		/* for MAX_DMA_PFN */
 #include <asm/microcode.h>
 #include <asm/kaslr.h>
+#include <asm/bios_ebda.h>
 
 /*
  * We need to define the tracepoints somewhere, and tlb.c
@@ -662,8 +664,30 @@ void __init init_mem_mapping(void)
  * Access has to be given to non-kernel-ram areas as well, these contain the
  * PCI mmio resources as well as potential bios/acpi data regions.
  */
+
+#ifdef CONFIG_GRKERNSEC_KMEM
+static unsigned int ebda_start __read_only;
+static unsigned int ebda_end __read_only;
+#endif
+
 int devmem_is_allowed(unsigned long pagenr)
 {
+#ifdef CONFIG_GRKERNSEC_KMEM
+	/* allow BDA */
+	if (!pagenr)
+		return 1;
+	/* allow EBDA */
+	if (pagenr >= ebda_start && pagenr < ebda_end)
+		return 1;
+	/* if tboot is in use, allow access to its hardcoded serial log range */
+	if (tboot_enabled() && ((0x60000 >> PAGE_SHIFT) <= pagenr) && (pagenr < (0x68000 >> PAGE_SHIFT)))
+		return 1;
+	if ((ISA_START_ADDRESS >> PAGE_SHIFT) <= pagenr && pagenr < (ISA_END_ADDRESS >> PAGE_SHIFT))
+		return 1;
+	/* throw out everything else below 1MB */
+	if (pagenr <= 256)
+		return 0;
+#else
 	if (!pagenr)
 		return 1;
 #ifdef CONFIG_VM86
@@ -672,6 +696,7 @@ int devmem_is_allowed(unsigned long pagenr)
 #endif
 	if ((ISA_START_ADDRESS >> PAGE_SHIFT) <= pagenr && pagenr < (ISA_END_ADDRESS >> PAGE_SHIFT))
 		return 1;
+#endif
 
 	if (page_is_ram(pagenr)) {
 		/*
@@ -738,8 +763,33 @@ void free_init_pages(char *what, unsigned long begin, unsigned long end)
 	}
 }
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+static inline void gr_init_ebda(void)
+{
+	unsigned int ebda_addr;
+	unsigned int ebda_size = 0;
+
+	ebda_addr = get_bios_ebda();
+	if (ebda_addr) {
+		ebda_size = *(unsigned char *)phys_to_virt(ebda_addr);
+		ebda_size <<= 10;
+	}
+	if (ebda_addr && ebda_size) {
+		ebda_start = ebda_addr >> PAGE_SHIFT;
+		ebda_end = min((unsigned int)PAGE_ALIGN(ebda_addr + ebda_size), (unsigned int)0xa0000) >> PAGE_SHIFT;
+	} else {
+		ebda_start = 0x9f000 >> PAGE_SHIFT;
+		ebda_end = 0xa0000 >> PAGE_SHIFT;
+	}
+}
+#else
+static inline void gr_init_ebda(void) { }
+#endif
+
 void __ref free_initmem(void)
 {
+	gr_init_ebda();
+
 	e820_reallocate_tables();
 
 	free_init_pages("unused kernel",
diff --git a/arch/x86/mm/init_32.c b/arch/x86/mm/init_32.c
index 14d6a3f2426e..de6997132326 100644
--- a/arch/x86/mm/init_32.c
+++ b/arch/x86/mm/init_32.c
@@ -232,13 +232,13 @@ page_table_range_init(unsigned long start, unsigned long end, pgd_t *pgd_base)
 
 static inline int is_kernel_text(unsigned long start, unsigned long end)
 {
-	if ((start > ktla_ktva((unsigned long)_etext) ||
+	if ((start >= ktla_ktva((unsigned long)_etext) ||
 	     end <= ktla_ktva((unsigned long)_stext)) &&
-	    (start > ktla_ktva((unsigned long)_einittext) ||
+	    (start >= ktla_ktva((unsigned long)_einittext) ||
 	     end <= ktla_ktva((unsigned long)_sinittext)) &&
 
 #ifdef CONFIG_ACPI_SLEEP
-	    (start > (unsigned long)__va(acpi_wakeup_address) + 0x4000 || end <= (unsigned long)__va(acpi_wakeup_address)) &&
+	    (start >= (unsigned long)__va(acpi_wakeup_address) + 0x4000 || end <= (unsigned long)__va(acpi_wakeup_address)) &&
 #endif
 
 	    (start > (unsigned long)__va(0xfffff) || end <= (unsigned long)__va(0xc0000)))
diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c
index 4bc6d52f2785..41dfc2bf295e 100644
--- a/arch/x86/mm/mmap.c
+++ b/arch/x86/mm/mmap.c
@@ -99,23 +99,13 @@ static unsigned long mmap_base(struct mm_struct *mm, unsigned long rnd)
 	return PAGE_ALIGN(pax_task_size - gap - rnd);
 }
 
-/*
- * Bottom-up (legacy) layout on X86_32 did not support randomization, X86_64
- * does, but not when emulating X86_32
- */
 static unsigned long mmap_legacy_base(struct mm_struct *mm, unsigned long rnd)
 {
-	if (mmap_is_ia32()) {
-
 #ifdef CONFIG_PAX_SEGMEXEC
-		if (mm->pax_flags & MF_PAX_SEGMEXEC)
-			return SEGMEXEC_TASK_UNMAPPED_BASE;
-		else
+	if (mmap_is_ia32() && (mm->pax_flags & MF_PAX_SEGMEXEC))
+		return SEGMEXEC_TASK_UNMAPPED_BASE + rnd;
 #endif
-
-		return TASK_UNMAPPED_BASE;
-	} else
-		return TASK_UNMAPPED_BASE + rnd;
+	return TASK_UNMAPPED_BASE + rnd;
 }
 
 /*
diff --git a/arch/x86/net/bpf_jit_comp.c b/arch/x86/net/bpf_jit_comp.c
index a014b3c8f648..f13aeac7ee81 100644
--- a/arch/x86/net/bpf_jit_comp.c
+++ b/arch/x86/net/bpf_jit_comp.c
@@ -14,7 +14,11 @@
 #include <asm/cacheflush.h>
 #include <linux/bpf.h>
 
+#ifdef CONFIG_GRKERNSEC_BPF_HARDEN
+int bpf_jit_enable __read_only;
+#else
 int bpf_jit_enable __read_mostly;
+#endif
 
 /*
  * assembly code in arch/x86/net/bpf_jit.S
diff --git a/arch/x86/platform/olpc/xo1-wakeup.S b/arch/x86/platform/olpc/xo1-wakeup.S
index d5679d15db74..16a434a3091a 100644
--- a/arch/x86/platform/olpc/xo1-wakeup.S
+++ b/arch/x86/platform/olpc/xo1-wakeup.S
@@ -1,5 +1,6 @@
 .text
 #include <linux/linkage.h>
+#include <asm/alternative-asm.h>
 #include <asm/segment.h>
 #include <asm/page.h>
 #include <asm/pgtable_32.h>
diff --git a/arch/x86/xen/Kconfig b/arch/x86/xen/Kconfig
index c7b15f3e2cf3..cc09a659ca78 100644
--- a/arch/x86/xen/Kconfig
+++ b/arch/x86/xen/Kconfig
@@ -10,6 +10,7 @@ config XEN
 	select XEN_HAVE_VPMU
 	depends on X86_64 || (X86_32 && X86_PAE)
 	depends on X86_LOCAL_APIC && X86_TSC
+	depends on !GRKERNSEC_CONFIG_AUTO || GRKERNSEC_CONFIG_VIRT_XEN
 	help
 	  This is the Linux Xen port.  Enabling this will allow the
 	  kernel to boot in a paravirtualized environment under the
diff --git a/arch/xtensa/variants/dc232b/include/variant/core.h b/arch/xtensa/variants/dc232b/include/variant/core.h
index 525bd3d90154..ef888b1c4572 100644
--- a/arch/xtensa/variants/dc232b/include/variant/core.h
+++ b/arch/xtensa/variants/dc232b/include/variant/core.h
@@ -119,9 +119,9 @@
   ----------------------------------------------------------------------*/
 
 #define XCHAL_ICACHE_LINESIZE		32	/* I-cache line size in bytes */
-#define XCHAL_DCACHE_LINESIZE		32	/* D-cache line size in bytes */
 #define XCHAL_ICACHE_LINEWIDTH		5	/* log2(I line size in bytes) */
 #define XCHAL_DCACHE_LINEWIDTH		5	/* log2(D line size in bytes) */
+#define XCHAL_DCACHE_LINESIZE		(_AC(1,UL) << XCHAL_DCACHE_LINEWIDTH)	/* D-cache line size in bytes */
 
 #define XCHAL_ICACHE_SIZE		16384	/* I-cache size in bytes or 0 */
 #define XCHAL_DCACHE_SIZE		16384	/* D-cache size in bytes or 0 */
diff --git a/arch/xtensa/variants/fsf/include/variant/core.h b/arch/xtensa/variants/fsf/include/variant/core.h
index 2f337605c744..835e50a881f9 100644
--- a/arch/xtensa/variants/fsf/include/variant/core.h
+++ b/arch/xtensa/variants/fsf/include/variant/core.h
@@ -11,6 +11,7 @@
 #ifndef _XTENSA_CORE_H
 #define _XTENSA_CORE_H
 
+#include <linux/const.h>
 
 /****************************************************************************
 	    Parameters Useful for Any Code, USER or PRIVILEGED
@@ -112,9 +113,9 @@
   ----------------------------------------------------------------------*/
 
 #define XCHAL_ICACHE_LINESIZE		16	/* I-cache line size in bytes */
-#define XCHAL_DCACHE_LINESIZE		16	/* D-cache line size in bytes */
 #define XCHAL_ICACHE_LINEWIDTH		4	/* log2(I line size in bytes) */
 #define XCHAL_DCACHE_LINEWIDTH		4	/* log2(D line size in bytes) */
+#define XCHAL_DCACHE_LINESIZE		(_AC(1,UL) << XCHAL_DCACHE_LINEWIDTH) /* D-cache line size in bytes */
 
 #define XCHAL_ICACHE_SIZE		8192	/* I-cache size in bytes or 0 */
 #define XCHAL_DCACHE_SIZE		8192	/* D-cache size in bytes or 0 */
diff --git a/crypto/scatterwalk.c b/crypto/scatterwalk.c
index c16c94f88733..8ab5bf8ba00f 100644
--- a/crypto/scatterwalk.c
+++ b/crypto/scatterwalk.c
@@ -62,14 +62,20 @@ void scatterwalk_map_and_copy(void *buf, struct scatterlist *sg,
 {
 	struct scatter_walk walk;
 	struct scatterlist tmp[2];
+	void *realbuf = buf;
 
 	if (!nbytes)
 		return;
 
 	sg = scatterwalk_ffwd(tmp, sg, start);
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	if (object_starts_on_stack(buf))
+		realbuf = buf - current->stack + current->lowmem_stack;
+#endif
+
 	scatterwalk_start(&walk, sg);
-	scatterwalk_copychunks(buf, &walk, nbytes, out);
+	scatterwalk_copychunks(realbuf, &walk, nbytes, out);
 	scatterwalk_done(&walk, out, 0);
 }
 EXPORT_SYMBOL_GPL(scatterwalk_map_and_copy);
diff --git a/drivers/acpi/acpica/hwxfsleep.c b/drivers/acpi/acpica/hwxfsleep.c
index f76e0eab32b8..4b83315dd356 100644
--- a/drivers/acpi/acpica/hwxfsleep.c
+++ b/drivers/acpi/acpica/hwxfsleep.c
@@ -70,11 +70,12 @@ static acpi_status acpi_hw_sleep_dispatch(u8 sleep_state, u32 function_id);
 /* Legacy functions are optional, based upon ACPI_REDUCED_HARDWARE */
 
 static struct acpi_sleep_functions acpi_sleep_dispatch[] = {
-	{ACPI_HW_OPTIONAL_FUNCTION(acpi_hw_legacy_sleep),
-	 acpi_hw_extended_sleep},
-	{ACPI_HW_OPTIONAL_FUNCTION(acpi_hw_legacy_wake_prep),
-	 acpi_hw_extended_wake_prep},
-	{ACPI_HW_OPTIONAL_FUNCTION(acpi_hw_legacy_wake), acpi_hw_extended_wake}
+	{.legacy_function = ACPI_HW_OPTIONAL_FUNCTION(acpi_hw_legacy_sleep),
+	 .extended_function = acpi_hw_extended_sleep},
+	{.legacy_function = ACPI_HW_OPTIONAL_FUNCTION(acpi_hw_legacy_wake_prep),
+	 .extended_function = acpi_hw_extended_wake_prep},
+	{.legacy_function = ACPI_HW_OPTIONAL_FUNCTION(acpi_hw_legacy_wake),
+	 .extended_function = acpi_hw_extended_wake}
 };
 
 /*
diff --git a/drivers/acpi/custom_method.c b/drivers/acpi/custom_method.c
index c68e72414a67..e86300825f41 100644
--- a/drivers/acpi/custom_method.c
+++ b/drivers/acpi/custom_method.c
@@ -29,6 +29,10 @@ static ssize_t cm_write(struct file *file, const char __user * user_buf,
 	struct acpi_table_header table;
 	acpi_status status;
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+	return -EPERM;
+#endif
+
 	if (!(*ppos)) {
 		/* parse the table header to get the table length */
 		if (count <= sizeof(struct acpi_table_header))
diff --git a/drivers/block/cciss.h b/drivers/block/cciss.h
index eb5dfe0b785f..2f279464f75d 100644
--- a/drivers/block/cciss.h
+++ b/drivers/block/cciss.h
@@ -402,27 +402,27 @@ static bool SA5_performant_intr_pending(ctlr_info_t *h)
 }
 
 static struct access_method SA5_access = {
-	SA5_submit_command,
-	SA5_intr_mask,
-	SA5_fifo_full,
-	SA5_intr_pending,
-	SA5_completed,
+	.submit_command = SA5_submit_command,
+	.set_intr_mask = SA5_intr_mask,
+	.fifo_full = SA5_fifo_full,
+	.intr_pending = SA5_intr_pending,
+	.command_completed = SA5_completed,
 };
 
 static struct access_method SA5B_access = {
-        SA5_submit_command,
-        SA5B_intr_mask,
-        SA5_fifo_full,
-        SA5B_intr_pending,
-        SA5_completed,
+	.submit_command = SA5_submit_command,
+	.set_intr_mask = SA5B_intr_mask,
+	.fifo_full = SA5_fifo_full,
+	.intr_pending = SA5B_intr_pending,
+	.command_completed = SA5_completed,
 };
 
 static struct access_method SA5_performant_access = {
-	SA5_submit_command,
-	SA5_performant_intr_mask,
-	SA5_fifo_full,
-	SA5_performant_intr_pending,
-	SA5_performant_completed,
+	.submit_command = SA5_submit_command,
+	.set_intr_mask = SA5_performant_intr_mask,
+	.fifo_full = SA5_fifo_full,
+	.intr_pending = SA5_performant_intr_pending,
+	.command_completed = SA5_performant_completed,
 };
 
 struct board_type {
diff --git a/drivers/block/smart1,2.h b/drivers/block/smart1,2.h
index e5565fbaeb30..71be10b4492f 100644
--- a/drivers/block/smart1,2.h
+++ b/drivers/block/smart1,2.h
@@ -108,11 +108,11 @@ static unsigned long smart4_intr_pending(ctlr_info_t *h)
 }
 
 static struct access_method smart4_access = {
-	smart4_submit_command,
-	smart4_intr_mask,
-	smart4_fifo_full,
-	smart4_intr_pending,
-	smart4_completed,
+	.submit_command = smart4_submit_command,
+	.set_intr_mask = smart4_intr_mask,
+	.fifo_full = smart4_fifo_full,
+	.intr_pending = smart4_intr_pending,
+	.command_completed = smart4_completed,
 };
 
 /*
@@ -144,11 +144,11 @@ static unsigned long smart2_intr_pending(ctlr_info_t *h)
 }
 
 static struct access_method smart2_access = {
-	smart2_submit_command,
-	smart2_intr_mask,
-	smart2_fifo_full,
-	smart2_intr_pending,
-	smart2_completed,
+	.submit_command = smart2_submit_command,
+	.set_intr_mask = smart2_intr_mask,
+	.fifo_full = smart2_fifo_full,
+	.intr_pending = smart2_intr_pending,
+	.command_completed = smart2_completed,
 };
 
 /*
@@ -180,11 +180,11 @@ static unsigned long smart2e_intr_pending(ctlr_info_t *h)
 }
 
 static struct access_method smart2e_access = {
-	smart2e_submit_command,
-	smart2e_intr_mask,
-	smart2e_fifo_full,
-	smart2e_intr_pending,
-	smart2e_completed,
+	.submit_command = smart2e_submit_command,
+	.set_intr_mask = smart2e_intr_mask,
+	.fifo_full = smart2e_fifo_full,
+	.intr_pending = smart2e_intr_pending,
+	.command_completed = smart2e_completed,
 };
 
 /*
@@ -270,9 +270,9 @@ static unsigned long smart1_intr_pending(ctlr_info_t *h)
 }
 
 static struct access_method smart1_access = {
-	smart1_submit_command,
-	smart1_intr_mask,
-	smart1_fifo_full,
-	smart1_intr_pending,
-	smart1_completed,
+	.submit_command = smart1_submit_command,
+	.set_intr_mask = smart1_intr_mask,
+	.fifo_full = smart1_fifo_full,
+	.intr_pending = smart1_intr_pending,
+	.command_completed = smart1_completed,
 };
diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index 8453a49471d7..aaea2ac0b82a 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -17,7 +17,8 @@ config DEVMEM
 
 config DEVKMEM
 	bool "/dev/kmem virtual device support"
-	default y
+	default n
+	depends on !GRKERNSEC_KMEM
 	help
 	  Say Y here if you want to support the /dev/kmem device. The
 	  /dev/kmem device is rarely used, but can be used for certain
@@ -573,6 +574,7 @@ config TELCLOCK
 config DEVPORT
 	bool "/dev/port character device"
 	depends on ISA || PCI
+	depends on !GRKERNSEC_KMEM
 	default y
 	help
 	  Say Y here if you want to support the /dev/port device. The /dev/port
diff --git a/drivers/char/mem.c b/drivers/char/mem.c
index b87301eaddbb..dbd8a278ef52 100644
--- a/drivers/char/mem.c
+++ b/drivers/char/mem.c
@@ -18,6 +18,7 @@
 #include <linux/raw.h>
 #include <linux/tty.h>
 #include <linux/capability.h>
+#include <linux/security.h>
 #include <linux/ptrace.h>
 #include <linux/device.h>
 #include <linux/highmem.h>
@@ -37,6 +38,10 @@
 
 #define DEVPORT_MINOR	4
 
+#if defined(CONFIG_GRKERNSEC) && !defined(CONFIG_GRKERNSEC_NO_RBAC)
+extern const struct file_operations grsec_fops;
+#endif
+
 static inline unsigned long size_inside_page(unsigned long start,
 					     unsigned long size)
 {
@@ -71,13 +76,22 @@ static inline int range_is_allowed(unsigned long pfn, unsigned long size)
 	u64 cursor = from;
 
 	while (cursor < to) {
-		if (!devmem_is_allowed(pfn))
+		if (!devmem_is_allowed(pfn)) {
+#ifdef CONFIG_GRKERNSEC_KMEM
+			gr_handle_mem_readwrite(from, to);
+#endif
 			return 0;
+		}
 		cursor += PAGE_SIZE;
 		pfn++;
 	}
 	return 1;
 }
+#elif defined(CONFIG_GRKERNSEC_KMEM)
+static inline int range_is_allowed(unsigned long pfn, unsigned long size)
+{
+	return 0;
+}
 #else
 static inline int page_is_allowed(unsigned long pfn)
 {
@@ -873,6 +887,9 @@ static const struct memdev {
 #ifdef CONFIG_PRINTK
 	[11] = { "kmsg", 0644, &kmsg_fops, 0 },
 #endif
+#if defined(CONFIG_GRKERNSEC) && !defined(CONFIG_GRKERNSEC_NO_RBAC)
+	[13] = { "grsec",S_IRUSR | S_IWUGO, &grsec_fops, 0 },
+#endif
 };
 
 static int memory_open(struct inode *inode, struct file *filp)
diff --git a/drivers/char/random.c b/drivers/char/random.c
index 1b29b28b8e18..0b23b0664848 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -292,9 +292,6 @@
 /*
  * To allow fractional bits to be tracked, the entropy_count field is
  * denominated in units of 1/8th bits.
- *
- * 2*(ENTROPY_SHIFT + log2(poolbits)) must <= 31, or the multiply in
- * credit_entropy_bits() needs to be 64 bits wide.
  */
 #define ENTROPY_SHIFT 3
 #define ENTROPY_BITS(r) ((r)->entropy_count >> ENTROPY_SHIFT)
diff --git a/drivers/cpufreq/sparc-us3-cpufreq.c b/drivers/cpufreq/sparc-us3-cpufreq.c
index eefba1cce838..b01b4a2ddf62 100644
--- a/drivers/cpufreq/sparc-us3-cpufreq.c
+++ b/drivers/cpufreq/sparc-us3-cpufreq.c
@@ -168,7 +168,6 @@ static struct cpufreq_driver cpufreq_us3_driver = {
 	.target_index	= us3_freq_target,
 	.get		= us3_freq_get,
 	.exit		= us3_freq_cpu_exit,
-	.owner		= THIS_MODULE,
 	.name		= "UltraSPARC-III",
 
 };
@@ -176,7 +175,6 @@ static struct cpufreq_driver cpufreq_us3_driver = {
 static int __init us3_freq_init(void)
 {
 	unsigned long manuf, impl, ver;
-	int ret;
 
 	if (tlb_type != cheetah && tlb_type != cheetah_plus)
 		return -ENODEV;
diff --git a/drivers/firewire/ohci.c b/drivers/firewire/ohci.c
index 8bf89267dc25..55a4930ebf66 100644
--- a/drivers/firewire/ohci.c
+++ b/drivers/firewire/ohci.c
@@ -2049,10 +2049,12 @@ static void bus_reset_work(struct work_struct *work)
 			  be32_to_cpu(ohci->next_header));
 	}
 
+#ifndef CONFIG_GRKERNSEC
 	if (param_remote_dma) {
 		reg_write(ohci, OHCI1394_PhyReqFilterHiSet, ~0);
 		reg_write(ohci, OHCI1394_PhyReqFilterLoSet, ~0);
 	}
+#endif
 
 	spin_unlock_irq(&ohci->lock);
 
@@ -2585,8 +2587,10 @@ static int ohci_enable_phys_dma(struct fw_card *card,
 	unsigned long flags;
 	int n, ret = 0;
 
+#ifndef CONFIG_GRKERNSEC
 	if (param_remote_dma)
 		return 0;
+#endif
 
 	/*
 	 * FIXME:  Make sure this bitmask is cleared when we clear the busReset
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c
index 662976292535..f14b4fde9aca 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c
@@ -1175,50 +1175,50 @@ static int amdgpu_cgs_call_acpi_method(struct cgs_device *cgs_device,
 }
 
 static const struct cgs_ops amdgpu_cgs_ops = {
-	amdgpu_cgs_gpu_mem_info,
-	amdgpu_cgs_gmap_kmem,
-	amdgpu_cgs_gunmap_kmem,
-	amdgpu_cgs_alloc_gpu_mem,
-	amdgpu_cgs_free_gpu_mem,
-	amdgpu_cgs_gmap_gpu_mem,
-	amdgpu_cgs_gunmap_gpu_mem,
-	amdgpu_cgs_kmap_gpu_mem,
-	amdgpu_cgs_kunmap_gpu_mem,
-	amdgpu_cgs_read_register,
-	amdgpu_cgs_write_register,
-	amdgpu_cgs_read_ind_register,
-	amdgpu_cgs_write_ind_register,
-	amdgpu_cgs_read_pci_config_byte,
-	amdgpu_cgs_read_pci_config_word,
-	amdgpu_cgs_read_pci_config_dword,
-	amdgpu_cgs_write_pci_config_byte,
-	amdgpu_cgs_write_pci_config_word,
-	amdgpu_cgs_write_pci_config_dword,
-	amdgpu_cgs_get_pci_resource,
-	amdgpu_cgs_atom_get_data_table,
-	amdgpu_cgs_atom_get_cmd_table_revs,
-	amdgpu_cgs_atom_exec_cmd_table,
-	amdgpu_cgs_create_pm_request,
-	amdgpu_cgs_destroy_pm_request,
-	amdgpu_cgs_set_pm_request,
-	amdgpu_cgs_pm_request_clock,
-	amdgpu_cgs_pm_request_engine,
-	amdgpu_cgs_pm_query_clock_limits,
-	amdgpu_cgs_set_camera_voltages,
-	amdgpu_cgs_get_firmware_info,
-	amdgpu_cgs_rel_firmware,
-	amdgpu_cgs_set_powergating_state,
-	amdgpu_cgs_set_clockgating_state,
-	amdgpu_cgs_get_active_displays_info,
-	amdgpu_cgs_notify_dpm_enabled,
-	amdgpu_cgs_call_acpi_method,
-	amdgpu_cgs_query_system_info,
+	.gpu_mem_info = amdgpu_cgs_gpu_mem_info,
+	.gmap_kmem = amdgpu_cgs_gmap_kmem,
+	.gunmap_kmem = amdgpu_cgs_gunmap_kmem,
+	.alloc_gpu_mem = amdgpu_cgs_alloc_gpu_mem,
+	.free_gpu_mem = amdgpu_cgs_free_gpu_mem,
+	.gmap_gpu_mem = amdgpu_cgs_gmap_gpu_mem,
+	.gunmap_gpu_mem = amdgpu_cgs_gunmap_gpu_mem,
+	.kmap_gpu_mem = amdgpu_cgs_kmap_gpu_mem,
+	.kunmap_gpu_mem = amdgpu_cgs_kunmap_gpu_mem,
+	.read_register = amdgpu_cgs_read_register,
+	.write_register = amdgpu_cgs_write_register,
+	.read_ind_register = amdgpu_cgs_read_ind_register,
+	.write_ind_register = amdgpu_cgs_write_ind_register,
+	.read_pci_config_byte = amdgpu_cgs_read_pci_config_byte,
+	.read_pci_config_word = amdgpu_cgs_read_pci_config_word,
+	.read_pci_config_dword = amdgpu_cgs_read_pci_config_dword,
+	.write_pci_config_byte = amdgpu_cgs_write_pci_config_byte,
+	.write_pci_config_word = amdgpu_cgs_write_pci_config_word,
+	.write_pci_config_dword = amdgpu_cgs_write_pci_config_dword,
+	.get_pci_resource = amdgpu_cgs_get_pci_resource,
+	.atom_get_data_table = amdgpu_cgs_atom_get_data_table,
+	.atom_get_cmd_table_revs = amdgpu_cgs_atom_get_cmd_table_revs,
+	.atom_exec_cmd_table = amdgpu_cgs_atom_exec_cmd_table,
+	.create_pm_request = amdgpu_cgs_create_pm_request,
+	.destroy_pm_request = amdgpu_cgs_destroy_pm_request,
+	.set_pm_request = amdgpu_cgs_set_pm_request,
+	.pm_request_clock = amdgpu_cgs_pm_request_clock,
+	.pm_request_engine = amdgpu_cgs_pm_request_engine,
+	.pm_query_clock_limits = amdgpu_cgs_pm_query_clock_limits,
+	.set_camera_voltages = amdgpu_cgs_set_camera_voltages,
+	.get_firmware_info = amdgpu_cgs_get_firmware_info,
+	.rel_firmware = amdgpu_cgs_rel_firmware,
+	.set_powergating_state = amdgpu_cgs_set_powergating_state,
+	.set_clockgating_state = amdgpu_cgs_set_clockgating_state,
+	.get_active_displays_info = amdgpu_cgs_get_active_displays_info,
+	.notify_dpm_enabled = amdgpu_cgs_notify_dpm_enabled,
+	.call_acpi_method = amdgpu_cgs_call_acpi_method,
+	.query_system_info = amdgpu_cgs_query_system_info
 };
 
 static const struct cgs_os_ops amdgpu_cgs_os_ops = {
-	amdgpu_cgs_add_irq_source,
-	amdgpu_cgs_irq_get,
-	amdgpu_cgs_irq_put
+	.add_irq_source = amdgpu_cgs_add_irq_source,
+	.irq_get = amdgpu_cgs_irq_get,
+	.irq_put = amdgpu_cgs_irq_put
 };
 
 struct cgs_device *amdgpu_cgs_create_device(struct amdgpu_device *adev)
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c
index f86c84427778..7fe4fde9e788 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c
@@ -231,9 +231,9 @@ static void amdgpu_gtt_mgr_debug(struct ttm_mem_type_manager *man,
 }
 
 const struct ttm_mem_type_manager_func amdgpu_gtt_mgr_func = {
-	amdgpu_gtt_mgr_init,
-	amdgpu_gtt_mgr_fini,
-	amdgpu_gtt_mgr_new,
-	amdgpu_gtt_mgr_del,
-	amdgpu_gtt_mgr_debug
+	.init = amdgpu_gtt_mgr_init,
+	.takedown = amdgpu_gtt_mgr_fini,
+	.get_node = amdgpu_gtt_mgr_new,
+	.put_node = amdgpu_gtt_mgr_del,
+	.debug = amdgpu_gtt_mgr_debug
 };
diff --git a/drivers/gpu/drm/amd/powerplay/hwmgr/cz_clockpowergating.c b/drivers/gpu/drm/amd/powerplay/hwmgr/cz_clockpowergating.c
index 2028980f1ed4..484984bfd60d 100644
--- a/drivers/gpu/drm/amd/powerplay/hwmgr/cz_clockpowergating.c
+++ b/drivers/gpu/drm/amd/powerplay/hwmgr/cz_clockpowergating.c
@@ -240,10 +240,16 @@ int cz_dpm_powergate_vce(struct pp_hwmgr *hwmgr, bool bgate)
 
 static const struct phm_master_table_item cz_enable_clock_power_gatings_list[] = {
 	/*we don't need an exit table here, because there is only D3 cold on Kv*/
-	{ phm_cf_want_uvd_power_gating, cz_tf_uvd_power_gating_initialize },
-	{ phm_cf_want_vce_power_gating, cz_tf_vce_power_gating_initialize },
+	{
+	  .isFunctionNeededInRuntimeTable = phm_cf_want_uvd_power_gating,
+	  .tableFunction = cz_tf_uvd_power_gating_initialize
+	},
+	{
+	  .isFunctionNeededInRuntimeTable = phm_cf_want_vce_power_gating,
+	  .tableFunction = cz_tf_vce_power_gating_initialize
+	},
 	/* to do { NULL, cz_tf_xdma_power_gating_enable }, */
-	{ NULL, NULL }
+	{ }
 };
 
 const struct phm_master_table_header cz_phm_enable_clock_power_gatings_master = {
diff --git a/drivers/gpu/drm/amd/powerplay/hwmgr/cz_hwmgr.c b/drivers/gpu/drm/amd/powerplay/hwmgr/cz_hwmgr.c
index 960424913496..751e84f7460d 100644
--- a/drivers/gpu/drm/amd/powerplay/hwmgr/cz_hwmgr.c
+++ b/drivers/gpu/drm/amd/powerplay/hwmgr/cz_hwmgr.c
@@ -888,13 +888,13 @@ static int cz_tf_update_low_mem_pstate(struct pp_hwmgr *hwmgr,
 }
 
 static const struct phm_master_table_item cz_set_power_state_list[] = {
-	{NULL, cz_tf_update_sclk_limit},
-	{NULL, cz_tf_set_deep_sleep_sclk_threshold},
-	{NULL, cz_tf_set_watermark_threshold},
-	{NULL, cz_tf_set_enabled_levels},
-	{NULL, cz_tf_enable_nb_dpm},
-	{NULL, cz_tf_update_low_mem_pstate},
-	{NULL, NULL}
+	{ .tableFunction = cz_tf_update_sclk_limit },
+	{ .tableFunction = cz_tf_set_deep_sleep_sclk_threshold },
+	{ .tableFunction = cz_tf_set_watermark_threshold },
+	{ .tableFunction = cz_tf_set_enabled_levels },
+	{ .tableFunction = cz_tf_enable_nb_dpm },
+	{ .tableFunction = cz_tf_update_low_mem_pstate },
+	{ }
 };
 
 static const struct phm_master_table_header cz_set_power_state_master = {
@@ -904,15 +904,15 @@ static const struct phm_master_table_header cz_set_power_state_master = {
 };
 
 static const struct phm_master_table_item cz_setup_asic_list[] = {
-	{NULL, cz_tf_reset_active_process_mask},
-	{NULL, cz_tf_upload_pptable_to_smu},
-	{NULL, cz_tf_init_sclk_limit},
-	{NULL, cz_tf_init_uvd_limit},
-	{NULL, cz_tf_init_vce_limit},
-	{NULL, cz_tf_init_acp_limit},
-	{NULL, cz_tf_init_power_gate_state},
-	{NULL, cz_tf_init_sclk_threshold},
-	{NULL, NULL}
+	{ .tableFunction = cz_tf_reset_active_process_mask },
+	{ .tableFunction = cz_tf_upload_pptable_to_smu },
+	{ .tableFunction = cz_tf_init_sclk_limit },
+	{ .tableFunction = cz_tf_init_uvd_limit },
+	{ .tableFunction = cz_tf_init_vce_limit },
+	{ .tableFunction = cz_tf_init_acp_limit },
+	{ .tableFunction = cz_tf_init_power_gate_state },
+	{ .tableFunction = cz_tf_init_sclk_threshold },
+	{ }
 };
 
 static const struct phm_master_table_header cz_setup_asic_master = {
@@ -957,10 +957,10 @@ static int cz_tf_reset_cc6_data(struct pp_hwmgr *hwmgr,
 }
 
 static const struct phm_master_table_item cz_power_down_asic_list[] = {
-	{NULL, cz_tf_power_up_display_clock_sys_pll},
-	{NULL, cz_tf_clear_nb_dpm_flag},
-	{NULL, cz_tf_reset_cc6_data},
-	{NULL, NULL}
+	{ .tableFunction = cz_tf_power_up_display_clock_sys_pll },
+	{ .tableFunction = cz_tf_clear_nb_dpm_flag },
+	{ .tableFunction = cz_tf_reset_cc6_data },
+	{ }
 };
 
 static const struct phm_master_table_header cz_power_down_asic_master = {
@@ -1068,8 +1068,8 @@ static int cz_tf_check_for_dpm_enabled(struct pp_hwmgr *hwmgr,
 }
 
 static const struct phm_master_table_item cz_disable_dpm_list[] = {
-	{ NULL, cz_tf_check_for_dpm_enabled},
-	{NULL, NULL},
+	{ .tableFunction = cz_tf_check_for_dpm_enabled },
+	{ },
 };
 
 
@@ -1080,13 +1080,13 @@ static const struct phm_master_table_header cz_disable_dpm_master = {
 };
 
 static const struct phm_master_table_item cz_enable_dpm_list[] = {
-	{ NULL, cz_tf_check_for_dpm_disabled },
-	{ NULL, cz_tf_program_voting_clients },
-	{ NULL, cz_tf_start_dpm},
-	{ NULL, cz_tf_program_bootup_state},
-	{ NULL, cz_tf_enable_didt },
-	{ NULL, cz_tf_reset_acp_boot_level },
-	{NULL, NULL},
+	{ .tableFunction = cz_tf_check_for_dpm_disabled },
+	{ .tableFunction = cz_tf_program_voting_clients },
+	{ .tableFunction = cz_tf_start_dpm },
+	{ .tableFunction = cz_tf_program_bootup_state },
+	{ .tableFunction = cz_tf_enable_didt },
+	{ .tableFunction = cz_tf_reset_acp_boot_level },
+	{ },
 };
 
 static const struct phm_master_table_header cz_enable_dpm_master = {
diff --git a/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c b/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c
index 29d0319b22e6..ac1e41d23b42 100644
--- a/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c
+++ b/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c
@@ -506,18 +506,18 @@ static int tf_smu7_thermal_disable_alert(struct pp_hwmgr *hwmgr,
 
 static const struct phm_master_table_item
 phm_thermal_start_thermal_controller_master_list[] = {
-	{NULL, tf_smu7_thermal_initialize},
-	{NULL, tf_smu7_thermal_set_temperature_range},
-	{NULL, tf_smu7_thermal_enable_alert},
-	{NULL, smum_thermal_avfs_enable},
+	{ .tableFunction = tf_smu7_thermal_initialize},
+	{ .tableFunction = tf_smu7_thermal_set_temperature_range},
+	{ .tableFunction = tf_smu7_thermal_enable_alert},
+	{ .tableFunction = smum_thermal_avfs_enable},
 /* We should restrict performance levels to low before we halt the SMC.
  * On the other hand we are still in boot state when we do this
  * so it would be pointless.
  * If this assumption changes we have to revisit this table.
  */
-	{NULL, smum_thermal_setup_fan_table},
-	{NULL, tf_smu7_thermal_start_smc_fan_control},
-	{NULL, NULL}
+	{ .tableFunction = smum_thermal_setup_fan_table},
+	{ .tableFunction = tf_smu7_thermal_start_smc_fan_control},
+	{ }
 };
 
 static const struct phm_master_table_header
@@ -529,10 +529,10 @@ phm_thermal_start_thermal_controller_master = {
 
 static const struct phm_master_table_item
 phm_thermal_set_temperature_range_master_list[] = {
-	{NULL, tf_smu7_thermal_disable_alert},
-	{NULL, tf_smu7_thermal_set_temperature_range},
-	{NULL, tf_smu7_thermal_enable_alert},
-	{NULL, NULL}
+	{ .tableFunction = tf_smu7_thermal_disable_alert},
+	{ .tableFunction = tf_smu7_thermal_set_temperature_range},
+	{ .tableFunction = tf_smu7_thermal_enable_alert},
+	{ }
 };
 
 static const struct phm_master_table_header
diff --git a/drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c b/drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c
index ed7143d35b25..527b26ab1f6b 100644
--- a/drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c
+++ b/drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c
@@ -647,9 +647,12 @@ struct msm_kms *mdp5_kms_init(struct drm_device *dev)
 	dev->mode_config.max_width = config->hw->lm.max_width;
 	dev->mode_config.max_height = config->hw->lm.max_height;
 
-	dev->driver->get_vblank_timestamp = mdp5_get_vblank_timestamp;
-	dev->driver->get_scanout_position = mdp5_get_scanoutpos;
-	dev->driver->get_vblank_counter = mdp5_get_vblank_counter;
+	pax_open_kernel();
+	const_cast(dev->driver->get_vblank_timestamp) = mdp5_get_vblank_timestamp;
+	const_cast(dev->driver->get_scanout_position) = mdp5_get_scanoutpos;
+	const_cast(dev->driver->get_vblank_counter) = mdp5_get_vblank_counter;
+	pax_close_kernel();
+
 	dev->max_vblank_count = 0xffffffff;
 	dev->vblank_disable_immediate = true;
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_ttm.c b/drivers/gpu/drm/nouveau/nouveau_ttm.c
index a6dbe8258040..ec4668a41e01 100644
--- a/drivers/gpu/drm/nouveau/nouveau_ttm.c
+++ b/drivers/gpu/drm/nouveau/nouveau_ttm.c
@@ -107,10 +107,10 @@ nouveau_vram_manager_new(struct ttm_mem_type_manager *man,
 }
 
 const struct ttm_mem_type_manager_func nouveau_vram_manager = {
-	nouveau_vram_manager_init,
-	nouveau_vram_manager_fini,
-	nouveau_vram_manager_new,
-	nouveau_vram_manager_del,
+	.init = nouveau_vram_manager_init,
+	.takedown = nouveau_vram_manager_fini,
+	.get_node = nouveau_vram_manager_new,
+	.put_node = nouveau_vram_manager_del,
 };
 
 static int
@@ -184,11 +184,11 @@ nouveau_gart_manager_debug(struct ttm_mem_type_manager *man, const char *prefix)
 }
 
 const struct ttm_mem_type_manager_func nouveau_gart_manager = {
-	nouveau_gart_manager_init,
-	nouveau_gart_manager_fini,
-	nouveau_gart_manager_new,
-	nouveau_gart_manager_del,
-	nouveau_gart_manager_debug
+	.init = nouveau_gart_manager_init,
+	.takedown = nouveau_gart_manager_fini,
+	.get_node = nouveau_gart_manager_new,
+	.put_node = nouveau_gart_manager_del,
+	.debug = nouveau_gart_manager_debug
 };
 
 /*XXX*/
@@ -257,11 +257,11 @@ nv04_gart_manager_debug(struct ttm_mem_type_manager *man, const char *prefix)
 }
 
 const struct ttm_mem_type_manager_func nv04_gart_manager = {
-	nv04_gart_manager_init,
-	nv04_gart_manager_fini,
-	nv04_gart_manager_new,
-	nv04_gart_manager_del,
-	nv04_gart_manager_debug
+	.init = nv04_gart_manager_init,
+	.takedown = nv04_gart_manager_fini,
+	.get_node = nv04_gart_manager_new,
+	.put_node = nv04_gart_manager_del,
+	.debug = nv04_gart_manager_debug
 };
 
 int
diff --git a/drivers/gpu/drm/ttm/ttm_bo_manager.c b/drivers/gpu/drm/ttm/ttm_bo_manager.c
index aa0bd054d3e9..aea6a01500e1 100644
--- a/drivers/gpu/drm/ttm/ttm_bo_manager.c
+++ b/drivers/gpu/drm/ttm/ttm_bo_manager.c
@@ -148,10 +148,10 @@ static void ttm_bo_man_debug(struct ttm_mem_type_manager *man,
 }
 
 const struct ttm_mem_type_manager_func ttm_bo_manager_func = {
-	ttm_bo_man_init,
-	ttm_bo_man_takedown,
-	ttm_bo_man_get_node,
-	ttm_bo_man_put_node,
-	ttm_bo_man_debug
+	.init = ttm_bo_man_init,
+	.takedown = ttm_bo_man_takedown,
+	.get_node = ttm_bo_man_get_node,
+	.put_node = ttm_bo_man_put_node,
+	.debug = ttm_bo_man_debug
 };
 EXPORT_SYMBOL(ttm_bo_manager_func);
diff --git a/drivers/gpu/drm/virtio/virtgpu_ttm.c b/drivers/gpu/drm/virtio/virtgpu_ttm.c
index 80482ac5f95d..bf693e517f9d 100644
--- a/drivers/gpu/drm/virtio/virtgpu_ttm.c
+++ b/drivers/gpu/drm/virtio/virtgpu_ttm.c
@@ -198,11 +198,11 @@ static void ttm_bo_man_debug(struct ttm_mem_type_manager *man,
 }
 
 static const struct ttm_mem_type_manager_func virtio_gpu_bo_manager_func = {
-	ttm_bo_man_init,
-	ttm_bo_man_takedown,
-	ttm_bo_man_get_node,
-	ttm_bo_man_put_node,
-	ttm_bo_man_debug
+	.init = &ttm_bo_man_init,
+	.takedown = &ttm_bo_man_takedown,
+	.get_node = &ttm_bo_man_get_node,
+	.put_node = &ttm_bo_man_put_node,
+	.debug = &ttm_bo_man_debug
 };
 
 static int virtio_gpu_init_mem_type(struct ttm_bo_device *bdev, uint32_t type,
diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_gmrid_manager.c b/drivers/gpu/drm/vmwgfx/vmwgfx_gmrid_manager.c
index 170b61be1e4e..fec7348cea2c 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_gmrid_manager.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_gmrid_manager.c
@@ -164,9 +164,9 @@ static void vmw_gmrid_man_debug(struct ttm_mem_type_manager *man,
 }
 
 const struct ttm_mem_type_manager_func vmw_gmrid_manager_func = {
-	vmw_gmrid_man_init,
-	vmw_gmrid_man_takedown,
-	vmw_gmrid_man_get_node,
-	vmw_gmrid_man_put_node,
-	vmw_gmrid_man_debug
+	.init = vmw_gmrid_man_init,
+	.takedown = vmw_gmrid_man_takedown,
+	.get_node = vmw_gmrid_man_get_node,
+	.put_node = vmw_gmrid_man_put_node,
+	.debug = vmw_gmrid_man_debug
 };
diff --git a/drivers/infiniband/hw/i40iw/i40iw_ctrl.c b/drivers/infiniband/hw/i40iw/i40iw_ctrl.c
index 2c4b4d072d6a..b45e806b3726 100644
--- a/drivers/infiniband/hw/i40iw/i40iw_ctrl.c
+++ b/drivers/infiniband/hw/i40iw/i40iw_ctrl.c
@@ -4604,46 +4604,46 @@ static void i40iw_hw_stat_refresh_all(struct i40iw_dev_pestat *devstat)
 }
 
 static struct i40iw_cqp_ops iw_cqp_ops = {
-	i40iw_sc_cqp_init,
-	i40iw_sc_cqp_create,
-	i40iw_sc_cqp_post_sq,
-	i40iw_sc_cqp_get_next_send_wqe,
-	i40iw_sc_cqp_destroy,
-	i40iw_sc_poll_for_cqp_op_done
+	.cqp_init = i40iw_sc_cqp_init,
+	.cqp_create = i40iw_sc_cqp_create,
+	.cqp_post_sq = i40iw_sc_cqp_post_sq,
+	.cqp_get_next_send_wqe = i40iw_sc_cqp_get_next_send_wqe,
+	.cqp_destroy = i40iw_sc_cqp_destroy,
+	.poll_for_cqp_op_done = i40iw_sc_poll_for_cqp_op_done
 };
 
 static struct i40iw_ccq_ops iw_ccq_ops = {
-	i40iw_sc_ccq_init,
-	i40iw_sc_ccq_create,
-	i40iw_sc_ccq_destroy,
-	i40iw_sc_ccq_create_done,
-	i40iw_sc_ccq_get_cqe_info,
-	i40iw_sc_ccq_arm
+	.ccq_init = i40iw_sc_ccq_init,
+	.ccq_create = i40iw_sc_ccq_create,
+	.ccq_destroy = i40iw_sc_ccq_destroy,
+	.ccq_create_done = i40iw_sc_ccq_create_done,
+	.ccq_get_cqe_info = i40iw_sc_ccq_get_cqe_info,
+	.ccq_arm = i40iw_sc_ccq_arm
 };
 
 static struct i40iw_ceq_ops iw_ceq_ops = {
-	i40iw_sc_ceq_init,
-	i40iw_sc_ceq_create,
-	i40iw_sc_cceq_create_done,
-	i40iw_sc_cceq_destroy_done,
-	i40iw_sc_cceq_create,
-	i40iw_sc_ceq_destroy,
-	i40iw_sc_process_ceq
+	.ceq_init = i40iw_sc_ceq_init,
+	.ceq_create = i40iw_sc_ceq_create,
+	.cceq_create_done = i40iw_sc_cceq_create_done,
+	.cceq_destroy_done = i40iw_sc_cceq_destroy_done,
+	.cceq_create = i40iw_sc_cceq_create,
+	.ceq_destroy = i40iw_sc_ceq_destroy,
+	.process_ceq = i40iw_sc_process_ceq
 };
 
 static struct i40iw_aeq_ops iw_aeq_ops = {
-	i40iw_sc_aeq_init,
-	i40iw_sc_aeq_create,
-	i40iw_sc_aeq_destroy,
-	i40iw_sc_get_next_aeqe,
-	i40iw_sc_repost_aeq_entries,
-	i40iw_sc_aeq_create_done,
-	i40iw_sc_aeq_destroy_done
+	.aeq_init = i40iw_sc_aeq_init,
+	.aeq_create = i40iw_sc_aeq_create,
+	.aeq_destroy = i40iw_sc_aeq_destroy,
+	.get_next_aeqe = i40iw_sc_get_next_aeqe,
+	.repost_aeq_entries = i40iw_sc_repost_aeq_entries,
+	.aeq_create_done = i40iw_sc_aeq_create_done,
+	.aeq_destroy_done = i40iw_sc_aeq_destroy_done
 };
 
 /* iwarp pd ops */
 static struct i40iw_pd_ops iw_pd_ops = {
-	i40iw_sc_pd_init,
+	.pd_init = i40iw_sc_pd_init,
 };
 
 static struct i40iw_priv_qp_ops iw_priv_qp_ops = {
@@ -4662,61 +4662,59 @@ static struct i40iw_priv_qp_ops iw_priv_qp_ops = {
 };
 
 static struct i40iw_priv_cq_ops iw_priv_cq_ops = {
-	i40iw_sc_cq_init,
-	i40iw_sc_cq_create,
-	i40iw_sc_cq_destroy,
-	i40iw_sc_cq_modify,
+	.cq_init = i40iw_sc_cq_init,
+	.cq_create = i40iw_sc_cq_create,
+	.cq_destroy = i40iw_sc_cq_destroy,
+	.cq_modify = i40iw_sc_cq_modify,
 };
 
 static struct i40iw_mr_ops iw_mr_ops = {
-	i40iw_sc_alloc_stag,
-	i40iw_sc_mr_reg_non_shared,
-	i40iw_sc_mr_reg_shared,
-	i40iw_sc_dealloc_stag,
-	i40iw_sc_query_stag,
-	i40iw_sc_mw_alloc
+	.alloc_stag = i40iw_sc_alloc_stag,
+	.mr_reg_non_shared = i40iw_sc_mr_reg_non_shared,
+	.mr_reg_shared = i40iw_sc_mr_reg_shared,
+	.dealloc_stag = i40iw_sc_dealloc_stag,
+	.query_stag = i40iw_sc_query_stag,
+	.mw_alloc = i40iw_sc_mw_alloc
 };
 
 static struct i40iw_cqp_misc_ops iw_cqp_misc_ops = {
-	i40iw_sc_manage_push_page,
-	i40iw_sc_manage_hmc_pm_func_table,
-	i40iw_sc_set_hmc_resource_profile,
-	i40iw_sc_commit_fpm_values,
-	i40iw_sc_query_fpm_values,
-	i40iw_sc_static_hmc_pages_allocated,
-	i40iw_sc_add_arp_cache_entry,
-	i40iw_sc_del_arp_cache_entry,
-	i40iw_sc_query_arp_cache_entry,
-	i40iw_sc_manage_apbvt_entry,
-	i40iw_sc_manage_qhash_table_entry,
-	i40iw_sc_alloc_local_mac_ipaddr_entry,
-	i40iw_sc_add_local_mac_ipaddr_entry,
-	i40iw_sc_del_local_mac_ipaddr_entry,
-	i40iw_sc_cqp_nop,
-	i40iw_sc_commit_fpm_values_done,
-	i40iw_sc_query_fpm_values_done,
-	i40iw_sc_manage_hmc_pm_func_table_done,
-	i40iw_sc_suspend_qp,
-	i40iw_sc_resume_qp
+	.manage_push_page = i40iw_sc_manage_push_page,
+	.manage_hmc_pm_func_table = i40iw_sc_manage_hmc_pm_func_table,
+	.set_hmc_resource_profile = i40iw_sc_set_hmc_resource_profile,
+	.commit_fpm_values = i40iw_sc_commit_fpm_values,
+	.query_fpm_values = i40iw_sc_query_fpm_values,
+	.static_hmc_pages_allocated = i40iw_sc_static_hmc_pages_allocated,
+	.add_arp_cache_entry = i40iw_sc_add_arp_cache_entry,
+	.del_arp_cache_entry = i40iw_sc_del_arp_cache_entry,
+	.query_arp_cache_entry = i40iw_sc_query_arp_cache_entry,
+	.manage_apbvt_entry = i40iw_sc_manage_apbvt_entry,
+	.manage_qhash_table_entry = i40iw_sc_manage_qhash_table_entry,
+	.alloc_local_mac_ipaddr_table_entry = i40iw_sc_alloc_local_mac_ipaddr_entry,
+	.add_local_mac_ipaddr_entry = i40iw_sc_add_local_mac_ipaddr_entry,
+	.del_local_mac_ipaddr_entry = i40iw_sc_del_local_mac_ipaddr_entry,
+	.cqp_nop = i40iw_sc_cqp_nop,
+	.commit_fpm_values_done = i40iw_sc_commit_fpm_values_done,
+	.query_fpm_values_done = i40iw_sc_query_fpm_values_done,
+	.manage_hmc_pm_func_table_done = i40iw_sc_manage_hmc_pm_func_table_done,
+	.update_suspend_qp = i40iw_sc_suspend_qp,
+	.update_resume_qp = i40iw_sc_resume_qp
 };
 
 static struct i40iw_hmc_ops iw_hmc_ops = {
-	i40iw_sc_init_iw_hmc,
-	i40iw_sc_parse_fpm_query_buf,
-	i40iw_sc_configure_iw_fpm,
-	i40iw_sc_parse_fpm_commit_buf,
-	i40iw_sc_create_hmc_obj,
-	i40iw_sc_del_hmc_obj,
-	NULL,
-	NULL
+	.init_iw_hmc = i40iw_sc_init_iw_hmc,
+	.parse_fpm_query_buf = i40iw_sc_parse_fpm_query_buf,
+	.configure_iw_fpm = i40iw_sc_configure_iw_fpm,
+	.parse_fpm_commit_buf = i40iw_sc_parse_fpm_commit_buf,
+	.create_hmc_object = i40iw_sc_create_hmc_obj,
+	.del_hmc_object = i40iw_sc_del_hmc_obj
 };
 
 static const struct i40iw_device_pestat_ops iw_device_pestat_ops = {
-	i40iw_hw_stat_init,
-	i40iw_hw_stat_read_32,
-	i40iw_hw_stat_read_64,
-	i40iw_hw_stat_read_all,
-	i40iw_hw_stat_refresh_all
+	.iw_hw_stat_init = i40iw_hw_stat_init,
+	.iw_hw_stat_read_32 = i40iw_hw_stat_read_32,
+	.iw_hw_stat_read_64 = i40iw_hw_stat_read_64,
+	.iw_hw_stat_read_all = i40iw_hw_stat_read_all,
+	.iw_hw_stat_refresh_all = i40iw_hw_stat_refresh_all
 };
 
 /**
diff --git a/drivers/infiniband/hw/i40iw/i40iw_uk.c b/drivers/infiniband/hw/i40iw/i40iw_uk.c
index 4d28c3cb03cc..ec6b0b77f586 100644
--- a/drivers/infiniband/hw/i40iw/i40iw_uk.c
+++ b/drivers/infiniband/hw/i40iw/i40iw_uk.c
@@ -919,29 +919,29 @@ enum i40iw_status_code i40iw_get_wqe_shift(u32 wqdepth, u32 sge, u32 inline_data
 }
 
 static struct i40iw_qp_uk_ops iw_qp_uk_ops = {
-	i40iw_qp_post_wr,
-	i40iw_qp_ring_push_db,
-	i40iw_rdma_write,
-	i40iw_rdma_read,
-	i40iw_send,
-	i40iw_inline_rdma_write,
-	i40iw_inline_send,
-	i40iw_stag_local_invalidate,
-	i40iw_mw_bind,
-	i40iw_post_receive,
-	i40iw_nop
+	.iw_qp_post_wr = i40iw_qp_post_wr,
+	.iw_qp_ring_push_db = i40iw_qp_ring_push_db,
+	.iw_rdma_write = i40iw_rdma_write,
+	.iw_rdma_read = i40iw_rdma_read,
+	.iw_send = i40iw_send,
+	.iw_inline_rdma_write = i40iw_inline_rdma_write,
+	.iw_inline_send = i40iw_inline_send,
+	.iw_stag_local_invalidate = i40iw_stag_local_invalidate,
+	.iw_mw_bind = i40iw_mw_bind,
+	.iw_post_receive = i40iw_post_receive,
+	.iw_post_nop = i40iw_nop
 };
 
 static struct i40iw_cq_ops iw_cq_ops = {
-	i40iw_cq_request_notification,
-	i40iw_cq_poll_completion,
-	i40iw_cq_post_entries,
-	i40iw_clean_cq
+	.iw_cq_request_notification = i40iw_cq_request_notification,
+	.iw_cq_poll_completion = i40iw_cq_poll_completion,
+	.iw_cq_post_entries = i40iw_cq_post_entries,
+	.iw_cq_clean = i40iw_clean_cq
 };
 
 static struct i40iw_device_uk_ops iw_device_uk_ops = {
-	i40iw_cq_uk_init,
-	i40iw_qp_uk_init,
+	.iwarp_cq_uk_init = i40iw_cq_uk_init,
+	.iwarp_qp_uk_init = i40iw_qp_uk_init,
 };
 
 /**
diff --git a/drivers/infiniband/hw/nes/nes_cm.c b/drivers/infiniband/hw/nes/nes_cm.c
index bea82a1d2523..adfe4b10a589 100644
--- a/drivers/infiniband/hw/nes/nes_cm.c
+++ b/drivers/infiniband/hw/nes/nes_cm.c
@@ -135,17 +135,17 @@ static void record_ird_ord(struct nes_cm_node *, u16, u16);
 /* instance of function pointers for client API */
 /* set address of this instance to cm_core->cm_ops at cm_core alloc */
 static const struct nes_cm_ops nes_cm_api = {
-	mini_cm_accelerated,
-	mini_cm_listen,
-	mini_cm_del_listen,
-	mini_cm_connect,
-	mini_cm_close,
-	mini_cm_accept,
-	mini_cm_reject,
-	mini_cm_recv_pkt,
-	mini_cm_dealloc_core,
-	mini_cm_get,
-	mini_cm_set
+	.accelerated = mini_cm_accelerated,
+	.listen = mini_cm_listen,
+	.stop_listener = mini_cm_del_listen,
+	.connect = mini_cm_connect,
+	.close = mini_cm_close,
+	.accept = mini_cm_accept,
+	.reject = mini_cm_reject,
+	.recv_pkt = mini_cm_recv_pkt,
+	.destroy_cm_core = mini_cm_dealloc_core,
+	.get = mini_cm_get,
+	.set = mini_cm_set
 };
 
 static struct nes_cm_core *g_cm_core;
diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c
index 11a13b5be73a..f1e5481e1828 100644
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@ -859,11 +859,21 @@ static void copy_cmd_to_buffer(struct amd_iommu *iommu,
 
 static void build_completion_wait(struct iommu_cmd *cmd, u64 address)
 {
+	phys_addr_t physaddr;
 	WARN_ON(address & 0x7ULL);
 
 	memset(cmd, 0, sizeof(*cmd));
-	cmd->data[0] = lower_32_bits(__pa(address)) | CMD_COMPL_WAIT_STORE_MASK;
-	cmd->data[1] = upper_32_bits(__pa(address));
+
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	if (object_starts_on_stack((void *)address)) {
+		void *adjbuf = (void *)address - current->stack + current->lowmem_stack;
+		physaddr = __pa((u64)adjbuf);
+	} else
+#endif
+	physaddr = __pa(address);
+
+	cmd->data[0] = lower_32_bits(physaddr) | CMD_COMPL_WAIT_STORE_MASK;
+	cmd->data[1] = upper_32_bits(physaddr);
 	cmd->data[2] = 1;
 	CMD_SET_TYPE(cmd, CMD_COMPL_WAIT);
 }
diff --git a/drivers/isdn/gigaset/bas-gigaset.c b/drivers/isdn/gigaset/bas-gigaset.c
index 7f1c625b08ec..2da3ff650e1d 100644
--- a/drivers/isdn/gigaset/bas-gigaset.c
+++ b/drivers/isdn/gigaset/bas-gigaset.c
@@ -2568,22 +2568,22 @@ static int gigaset_post_reset(struct usb_interface *intf)
 
 
 static const struct gigaset_ops gigops = {
-	gigaset_write_cmd,
-	gigaset_write_room,
-	gigaset_chars_in_buffer,
-	gigaset_brkchars,
-	gigaset_init_bchannel,
-	gigaset_close_bchannel,
-	gigaset_initbcshw,
-	gigaset_freebcshw,
-	gigaset_reinitbcshw,
-	gigaset_initcshw,
-	gigaset_freecshw,
-	gigaset_set_modem_ctrl,
-	gigaset_baud_rate,
-	gigaset_set_line_ctrl,
-	gigaset_isoc_send_skb,
-	gigaset_isoc_input,
+	.write_cmd = gigaset_write_cmd,
+	.write_room = gigaset_write_room,
+	.chars_in_buffer = gigaset_chars_in_buffer,
+	.brkchars = gigaset_brkchars,
+	.init_bchannel = gigaset_init_bchannel,
+	.close_bchannel = gigaset_close_bchannel,
+	.initbcshw = gigaset_initbcshw,
+	.freebcshw = gigaset_freebcshw,
+	.reinitbcshw = gigaset_reinitbcshw,
+	.initcshw = gigaset_initcshw,
+	.freecshw = gigaset_freecshw,
+	.set_modem_ctrl = gigaset_set_modem_ctrl,
+	.baud_rate = gigaset_baud_rate,
+	.set_line_ctrl = gigaset_set_line_ctrl,
+	.send_skb = gigaset_isoc_send_skb,
+	.handle_input = gigaset_isoc_input,
 };
 
 /* bas_gigaset_init
diff --git a/drivers/isdn/gigaset/ser-gigaset.c b/drivers/isdn/gigaset/ser-gigaset.c
index b90776ef56ec..ab0b63a4d045 100644
--- a/drivers/isdn/gigaset/ser-gigaset.c
+++ b/drivers/isdn/gigaset/ser-gigaset.c
@@ -445,22 +445,22 @@ static int gigaset_set_line_ctrl(struct cardstate *cs, unsigned cflag)
 }
 
 static const struct gigaset_ops ops = {
-	gigaset_write_cmd,
-	gigaset_write_room,
-	gigaset_chars_in_buffer,
-	gigaset_brkchars,
-	gigaset_init_bchannel,
-	gigaset_close_bchannel,
-	gigaset_initbcshw,
-	gigaset_freebcshw,
-	gigaset_reinitbcshw,
-	gigaset_initcshw,
-	gigaset_freecshw,
-	gigaset_set_modem_ctrl,
-	gigaset_baud_rate,
-	gigaset_set_line_ctrl,
-	gigaset_m10x_send_skb,	/* asyncdata.c */
-	gigaset_m10x_input,	/* asyncdata.c */
+	.write_cmd = gigaset_write_cmd,
+	.write_room = gigaset_write_room,
+	.chars_in_buffer = gigaset_chars_in_buffer,
+	.brkchars = gigaset_brkchars,
+	.init_bchannel = gigaset_init_bchannel,
+	.close_bchannel = gigaset_close_bchannel,
+	.initbcshw = gigaset_initbcshw,
+	.freebcshw = gigaset_freebcshw,
+	.reinitbcshw = gigaset_reinitbcshw,
+	.initcshw = gigaset_initcshw,
+	.freecshw = gigaset_freecshw,
+	.set_modem_ctrl = gigaset_set_modem_ctrl,
+	.baud_rate = gigaset_baud_rate,
+	.set_line_ctrl = gigaset_set_line_ctrl,
+	.send_skb = gigaset_m10x_send_skb,	/* asyncdata.c */
+	.handle_input = gigaset_m10x_input,	/* asyncdata.c */
 };
 
 
diff --git a/drivers/isdn/gigaset/usb-gigaset.c b/drivers/isdn/gigaset/usb-gigaset.c
index 6acc7bbc81f1..ff14829c2e6c 100644
--- a/drivers/isdn/gigaset/usb-gigaset.c
+++ b/drivers/isdn/gigaset/usb-gigaset.c
@@ -862,22 +862,22 @@ static int gigaset_pre_reset(struct usb_interface *intf)
 }
 
 static const struct gigaset_ops ops = {
-	gigaset_write_cmd,
-	gigaset_write_room,
-	gigaset_chars_in_buffer,
-	gigaset_brkchars,
-	gigaset_init_bchannel,
-	gigaset_close_bchannel,
-	gigaset_initbcshw,
-	gigaset_freebcshw,
-	gigaset_reinitbcshw,
-	gigaset_initcshw,
-	gigaset_freecshw,
-	gigaset_set_modem_ctrl,
-	gigaset_baud_rate,
-	gigaset_set_line_ctrl,
-	gigaset_m10x_send_skb,
-	gigaset_m10x_input,
+	.write_cmd = gigaset_write_cmd,
+	.write_room = gigaset_write_room,
+	.chars_in_buffer = gigaset_chars_in_buffer,
+	.brkchars = gigaset_brkchars,
+	.init_bchannel = gigaset_init_bchannel,
+	.close_bchannel = gigaset_close_bchannel,
+	.initbcshw = gigaset_initbcshw,
+	.freebcshw = gigaset_freebcshw,
+	.reinitbcshw = gigaset_reinitbcshw,
+	.initcshw = gigaset_initcshw,
+	.freecshw = gigaset_freecshw,
+	.set_modem_ctrl = gigaset_set_modem_ctrl,
+	.baud_rate = gigaset_baud_rate,
+	.set_line_ctrl = gigaset_set_line_ctrl,
+	.send_skb = gigaset_m10x_send_skb,
+	.handle_input = gigaset_m10x_input,
 };
 
 /*
diff --git a/drivers/isdn/i4l/isdn_concap.c b/drivers/isdn/i4l/isdn_concap.c
index 91d57304d4d3..336523ec077c 100644
--- a/drivers/isdn/i4l/isdn_concap.c
+++ b/drivers/isdn/i4l/isdn_concap.c
@@ -80,9 +80,9 @@ static int isdn_concap_dl_disconn_req(struct concap_proto *concap)
 }
 
 struct concap_device_ops isdn_concap_reliable_dl_dops = {
-	&isdn_concap_dl_data_req,
-	&isdn_concap_dl_connect_req,
-	&isdn_concap_dl_disconn_req
+	.data_req = &isdn_concap_dl_data_req,
+	.connect_req = &isdn_concap_dl_connect_req,
+	.disconn_req = &isdn_concap_dl_disconn_req
 };
 
 /* The following should better go into a dedicated source file such that
diff --git a/drivers/isdn/i4l/isdn_x25iface.c b/drivers/isdn/i4l/isdn_x25iface.c
index 0c5d8de41b23..ba60076e0b95 100644
--- a/drivers/isdn/i4l/isdn_x25iface.c
+++ b/drivers/isdn/i4l/isdn_x25iface.c
@@ -53,14 +53,14 @@ static int isdn_x25iface_disconn_ind(struct concap_proto *);
 
 
 static struct concap_proto_ops ix25_pops = {
-	&isdn_x25iface_proto_new,
-	&isdn_x25iface_proto_del,
-	&isdn_x25iface_proto_restart,
-	&isdn_x25iface_proto_close,
-	&isdn_x25iface_xmit,
-	&isdn_x25iface_receive,
-	&isdn_x25iface_connect_ind,
-	&isdn_x25iface_disconn_ind
+	.proto_new = &isdn_x25iface_proto_new,
+	.proto_del = &isdn_x25iface_proto_del,
+	.restart = &isdn_x25iface_proto_restart,
+	.close = &isdn_x25iface_proto_close,
+	.encap_and_xmit = &isdn_x25iface_xmit,
+	.data_ind = &isdn_x25iface_receive,
+	.connect_ind = &isdn_x25iface_connect_ind,
+	.disconn_ind = &isdn_x25iface_disconn_ind
 };
 
 /* error message helper function */
diff --git a/drivers/md/bcache/Kconfig b/drivers/md/bcache/Kconfig
index 4d200883c505..de60cb294e6d 100644
--- a/drivers/md/bcache/Kconfig
+++ b/drivers/md/bcache/Kconfig
@@ -20,6 +20,7 @@ config BCACHE_CLOSURES_DEBUG
 	bool "Debug closures"
 	depends on BCACHE
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	---help---
 	Keeps all active closures in a linked list and provides a debugfs
 	interface to list them, which makes it possible to see asynchronous
diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index 007e19ac4682..2c080d8b87c9 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -2040,6 +2040,10 @@ static int grow_one_stripe(struct r5conf *conf, gfp_t gfp)
 	return 1;
 }
 
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+static atomic_unchecked_t raid5_cache_id = ATOMIC_INIT(0);
+#endif
+
 static int grow_stripes(struct r5conf *conf, int num)
 {
 	struct kmem_cache *sc;
@@ -2050,7 +2054,11 @@ static int grow_stripes(struct r5conf *conf, int num)
 			"raid%d-%s", conf->level, mdname(conf->mddev));
 	else
 		sprintf(conf->cache_name[0],
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+			"raid%d-%08lx", conf->level, atomic_inc_return_unchecked(&raid5_cache_id));
+#else
 			"raid%d-%p", conf->level, conf->mddev);
+#endif
 	sprintf(conf->cache_name[1], "%s-alt", conf->cache_name[0]);
 
 	conf->active_name = 0;
diff --git a/drivers/media/pci/solo6x10/solo6x10-g723.c b/drivers/media/pci/solo6x10/solo6x10-g723.c
index 6a35107aca25..36e93540bb49 100644
--- a/drivers/media/pci/solo6x10/solo6x10-g723.c
+++ b/drivers/media/pci/solo6x10/solo6x10-g723.c
@@ -350,7 +350,7 @@ static int solo_snd_pcm_init(struct solo_dev *solo_dev)
 
 int solo_g723_init(struct solo_dev *solo_dev)
 {
-	static struct snd_device_ops ops = { NULL };
+	static struct snd_device_ops ops = { };
 	struct snd_card *card;
 	struct snd_kcontrol_new kctl;
 	char name[32];
diff --git a/drivers/media/platform/mtk-vcodec/venc/venc_h264_if.c b/drivers/media/platform/mtk-vcodec/venc/venc_h264_if.c
index b76c80bdf30b..4eb3be37ba14 100644
--- a/drivers/media/platform/mtk-vcodec/venc/venc_h264_if.c
+++ b/drivers/media/platform/mtk-vcodec/venc/venc_h264_if.c
@@ -665,10 +665,10 @@ static int h264_enc_deinit(unsigned long handle)
 }
 
 static const struct venc_common_if venc_h264_if = {
-	h264_enc_init,
-	h264_enc_encode,
-	h264_enc_set_param,
-	h264_enc_deinit,
+	.init = h264_enc_init,
+	.encode = h264_enc_encode,
+	.set_param = h264_enc_set_param,
+	.deinit = h264_enc_deinit,
 };
 
 const struct venc_common_if *get_h264_enc_comm_if(void);
diff --git a/drivers/media/platform/mtk-vcodec/venc/venc_vp8_if.c b/drivers/media/platform/mtk-vcodec/venc/venc_vp8_if.c
index 544f57186243..a6fa145f2c54 100644
--- a/drivers/media/platform/mtk-vcodec/venc/venc_vp8_if.c
+++ b/drivers/media/platform/mtk-vcodec/venc/venc_vp8_if.c
@@ -470,10 +470,10 @@ static int vp8_enc_deinit(unsigned long handle)
 }
 
 static const struct venc_common_if venc_vp8_if = {
-	vp8_enc_init,
-	vp8_enc_encode,
-	vp8_enc_set_param,
-	vp8_enc_deinit,
+	.init = vp8_enc_init,
+	.encode = vp8_enc_encode,
+	.set_param = vp8_enc_set_param,
+	.deinit = vp8_enc_deinit,
 };
 
 const struct venc_common_if *get_vp8_enc_comm_if(void);
diff --git a/drivers/media/platform/sti/c8sectpfe/Kconfig b/drivers/media/platform/sti/c8sectpfe/Kconfig
index 7420a50572d3..e6f31a0972ad 100644
--- a/drivers/media/platform/sti/c8sectpfe/Kconfig
+++ b/drivers/media/platform/sti/c8sectpfe/Kconfig
@@ -4,6 +4,7 @@ config DVB_C8SECTPFE
 	depends on ARCH_STI || ARCH_MULTIPLATFORM || COMPILE_TEST
 	select FW_LOADER
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	select DVB_LNBP21 if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STB6100 if MEDIA_SUBDRV_AUTOSELECT
diff --git a/drivers/media/usb/dvb-usb/technisat-usb2.c b/drivers/media/usb/dvb-usb/technisat-usb2.c
index 4706628a3ed5..14d602fbcc9c 100644
--- a/drivers/media/usb/dvb-usb/technisat-usb2.c
+++ b/drivers/media/usb/dvb-usb/technisat-usb2.c
@@ -143,8 +143,10 @@ static int technisat_usb2_i2c_access(struct usb_device *udev,
 		/* handle tuner-i2c-nak */
 		if (!(b[0] == I2C_STATUS_NAK &&
 				device_addr == 0x60
-				/* && device_is_technisat_usb2 */))
+				/* && device_is_technisat_usb2 */)) {
+			ret = -ENODEV;
 			goto err;
+		}
 	}
 
 	deb_i2c("status: %d, ", b[0]);
diff --git a/drivers/message/fusion/mptbase.c b/drivers/message/fusion/mptbase.c
index 1cdab6d00b43..f2ca71f56d5d 100644
--- a/drivers/message/fusion/mptbase.c
+++ b/drivers/message/fusion/mptbase.c
@@ -6749,8 +6749,13 @@ static int mpt_iocinfo_proc_show(struct seq_file *m, void *v)
 	seq_printf(m, "  MaxChainDepth = 0x%02x frames\n", ioc->facts.MaxChainDepth);
 	seq_printf(m, "  MinBlockSize = 0x%02x bytes\n", 4*ioc->facts.BlockSize);
 
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	seq_printf(m, "  RequestFrames @ 0x%p (Dma @ 0x%p)\n", NULL, NULL);
+#else
 	seq_printf(m, "  RequestFrames @ 0x%p (Dma @ 0x%p)\n",
 					(void *)ioc->req_frames, (void *)(ulong)ioc->req_frames_dma);
+#endif
+
 	/*
 	 *  Rounding UP to nearest 4-kB boundary here...
 	 */
@@ -6763,7 +6768,11 @@ static int mpt_iocinfo_proc_show(struct seq_file *m, void *v)
 					ioc->facts.GlobalCredits);
 
 	seq_printf(m, "  Frames   @ 0x%p (Dma @ 0x%p)\n",
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+					NULL, NULL);
+#else
 					(void *)ioc->alloc, (void *)(ulong)ioc->alloc_dma);
+#endif
 	sz = (ioc->reply_sz * ioc->reply_depth) + 128;
 	seq_printf(m, "    {CurRepSz=%d} x {CurRepDepth=%d} = %d bytes ^= 0x%x\n",
 					ioc->reply_sz, ioc->reply_depth, ioc->reply_sz*ioc->reply_depth, sz);
diff --git a/drivers/misc/sgi-xp/xp_main.c b/drivers/misc/sgi-xp/xp_main.c
index 78825234fdb7..4a305b4dedc6 100644
--- a/drivers/misc/sgi-xp/xp_main.c
+++ b/drivers/misc/sgi-xp/xp_main.c
@@ -101,12 +101,12 @@ static enum xp_retval xpc_notloaded_partid_to_nasids(short partid, void *nasid_m
 }
 
 struct xpc_interface xpc_interface = {
-	xpc_notloaded_connect,
-	xpc_notloaded_disconnect,
-	xpc_notloaded_send,
-	xpc_notloaded_send_notify,
-	xpc_notloaded_received,
-	xpc_notloaded_partid_to_nasids
+	.connect = xpc_notloaded_connect,
+	.disconnect = xpc_notloaded_disconnect,
+	.send = xpc_notloaded_send,
+	.send_notify = xpc_notloaded_send_notify,
+	.received = xpc_notloaded_received,
+	.partid_to_nasids = xpc_notloaded_partid_to_nasids
 };
 EXPORT_SYMBOL_GPL(xpc_interface);
 
diff --git a/drivers/net/ethernet/brocade/bna/bna_enet.c b/drivers/net/ethernet/brocade/bna/bna_enet.c
index 443f76a23f21..0791dab5bd20 100644
--- a/drivers/net/ethernet/brocade/bna/bna_enet.c
+++ b/drivers/net/ethernet/brocade/bna/bna_enet.c
@@ -1676,10 +1676,10 @@ bna_cb_ioceth_reset(void *arg)
 }
 
 static struct bfa_ioc_cbfn bna_ioceth_cbfn = {
-	bna_cb_ioceth_enable,
-	bna_cb_ioceth_disable,
-	bna_cb_ioceth_hbfail,
-	bna_cb_ioceth_reset
+	.enable_cbfn = bna_cb_ioceth_enable,
+	.disable_cbfn = bna_cb_ioceth_disable,
+	.hbfail_cbfn = bna_cb_ioceth_hbfail,
+	.reset_cbfn = bna_cb_ioceth_reset
 };
 
 static void bna_attr_init(struct bna_ioceth *ioceth)
diff --git a/drivers/net/wan/lmc/lmc_media.c b/drivers/net/wan/lmc/lmc_media.c
index 5920c996fcdf..ff2e4a5654c7 100644
--- a/drivers/net/wan/lmc/lmc_media.c
+++ b/drivers/net/wan/lmc/lmc_media.c
@@ -95,62 +95,63 @@ static inline void write_av9110_bit (lmc_softc_t *, int);
 static void write_av9110(lmc_softc_t *, u32, u32, u32, u32, u32);
 
 lmc_media_t lmc_ds3_media = {
-  lmc_ds3_init,			/* special media init stuff */
-  lmc_ds3_default,		/* reset to default state */
-  lmc_ds3_set_status,		/* reset status to state provided */
-  lmc_dummy_set_1,		/* set clock source */
-  lmc_dummy_set2_1,		/* set line speed */
-  lmc_ds3_set_100ft,		/* set cable length */
-  lmc_ds3_set_scram,		/* set scrambler */
-  lmc_ds3_get_link_status,	/* get link status */
-  lmc_dummy_set_1,		/* set link status */
-  lmc_ds3_set_crc_length,	/* set CRC length */
-  lmc_dummy_set_1,		/* set T1 or E1 circuit type */
-  lmc_ds3_watchdog
+  .init = lmc_ds3_init,				/* special media init stuff */
+  .defaults = lmc_ds3_default,			/* reset to default state */
+  .set_status = lmc_ds3_set_status,		/* reset status to state provided */
+  .set_clock_source = lmc_dummy_set_1,		/* set clock source */
+  .set_speed = lmc_dummy_set2_1,		/* set line speed */
+  .set_cable_length = lmc_ds3_set_100ft,	/* set cable length */
+  .set_scrambler = lmc_ds3_set_scram,		/* set scrambler */
+  .get_link_status = lmc_ds3_get_link_status,	/* get link status */
+  .set_link_status = lmc_dummy_set_1,		/* set link status */
+  .set_crc_length = lmc_ds3_set_crc_length,	/* set CRC length */
+  .set_circuit_type = lmc_dummy_set_1,		/* set T1 or E1 circuit type */
+  .watchdog = lmc_ds3_watchdog
 };
 
 lmc_media_t lmc_hssi_media = {
-  lmc_hssi_init,		/* special media init stuff */
-  lmc_hssi_default,		/* reset to default state */
-  lmc_hssi_set_status,		/* reset status to state provided */
-  lmc_hssi_set_clock,		/* set clock source */
-  lmc_dummy_set2_1,		/* set line speed */
-  lmc_dummy_set_1,		/* set cable length */
-  lmc_dummy_set_1,		/* set scrambler */
-  lmc_hssi_get_link_status,	/* get link status */
-  lmc_hssi_set_link_status,	/* set link status */
-  lmc_hssi_set_crc_length,	/* set CRC length */
-  lmc_dummy_set_1,		/* set T1 or E1 circuit type */
-  lmc_hssi_watchdog
+  .init = lmc_hssi_init,			/* special media init stuff */
+  .defaults = lmc_hssi_default,			/* reset to default state */
+  .set_status = lmc_hssi_set_status,		/* reset status to state provided */
+  .set_clock_source = lmc_hssi_set_clock,	/* set clock source */
+  .set_speed = lmc_dummy_set2_1,		/* set line speed */
+  .set_cable_length = lmc_dummy_set_1,		/* set cable length */
+  .set_scrambler = lmc_dummy_set_1,		/* set scrambler */
+  .get_link_status = lmc_hssi_get_link_status,	/* get link status */
+  .set_link_status = lmc_hssi_set_link_status,	/* set link status */
+  .set_crc_length = lmc_hssi_set_crc_length,	/* set CRC length */
+  .set_circuit_type = lmc_dummy_set_1,		/* set T1 or E1 circuit type */
+  .watchdog = lmc_hssi_watchdog
 };
 
-lmc_media_t lmc_ssi_media = { lmc_ssi_init,	/* special media init stuff */
-  lmc_ssi_default,		/* reset to default state */
-  lmc_ssi_set_status,		/* reset status to state provided */
-  lmc_ssi_set_clock,		/* set clock source */
-  lmc_ssi_set_speed,		/* set line speed */
-  lmc_dummy_set_1,		/* set cable length */
-  lmc_dummy_set_1,		/* set scrambler */
-  lmc_ssi_get_link_status,	/* get link status */
-  lmc_ssi_set_link_status,	/* set link status */
-  lmc_ssi_set_crc_length,	/* set CRC length */
-  lmc_dummy_set_1,		/* set T1 or E1 circuit type */
-  lmc_ssi_watchdog
+lmc_media_t lmc_ssi_media = {
+  .init = lmc_ssi_init,				/* special media init stuff */
+  .defaults = lmc_ssi_default,			/* reset to default state */
+  .set_status = lmc_ssi_set_status,		/* reset status to state provided */
+  .set_clock_source = lmc_ssi_set_clock,	/* set clock source */
+  .set_speed = lmc_ssi_set_speed,		/* set line speed */
+  .set_cable_length = lmc_dummy_set_1,		/* set cable length */
+  .set_scrambler = lmc_dummy_set_1,		/* set scrambler */
+  .get_link_status = lmc_ssi_get_link_status,	/* get link status */
+  .set_link_status = lmc_ssi_set_link_status,	/* set link status */
+  .set_crc_length = lmc_ssi_set_crc_length,	/* set CRC length */
+  .set_circuit_type = lmc_dummy_set_1,		/* set T1 or E1 circuit type */
+  .watchdog = lmc_ssi_watchdog
 };
 
 lmc_media_t lmc_t1_media = {
-  lmc_t1_init,			/* special media init stuff */
-  lmc_t1_default,		/* reset to default state */
-  lmc_t1_set_status,		/* reset status to state provided */
-  lmc_t1_set_clock,		/* set clock source */
-  lmc_dummy_set2_1,		/* set line speed */
-  lmc_dummy_set_1,		/* set cable length */
-  lmc_dummy_set_1,		/* set scrambler */
-  lmc_t1_get_link_status,	/* get link status */
-  lmc_dummy_set_1,		/* set link status */
-  lmc_t1_set_crc_length,	/* set CRC length */
-  lmc_t1_set_circuit_type,	/* set T1 or E1 circuit type */
-  lmc_t1_watchdog
+  .init = lmc_t1_init,				/* special media init stuff */
+  .defaults = lmc_t1_default,			/* reset to default state */
+  .set_status = lmc_t1_set_status,		/* reset status to state provided */
+  .set_clock_source = lmc_t1_set_clock,		/* set clock source */
+  .set_speed = lmc_dummy_set2_1,		/* set line speed */
+  .set_cable_length = lmc_dummy_set_1,		/* set cable length */
+  .set_scrambler = lmc_dummy_set_1,		/* set scrambler */
+  .get_link_status = lmc_t1_get_link_status,	/* get link status */
+  .set_link_status = lmc_dummy_set_1,		/* set link status */
+  .set_crc_length = lmc_t1_set_crc_length,	/* set CRC length */
+  .set_circuit_type = lmc_t1_set_circuit_type,	/* set T1 or E1 circuit type */
+  .watchdog = lmc_t1_watchdog
 };
 
 static void
diff --git a/drivers/net/wan/z85230.c b/drivers/net/wan/z85230.c
index 2f0bd6955f33..e46ed7bba641 100644
--- a/drivers/net/wan/z85230.c
+++ b/drivers/net/wan/z85230.c
@@ -485,9 +485,9 @@ static void z8530_status(struct z8530_channel *chan)
 
 struct z8530_irqhandler z8530_sync =
 {
-	z8530_rx,
-	z8530_tx,
-	z8530_status
+	.rx = z8530_rx,
+	.tx = z8530_tx,
+	.status = z8530_status
 };
 
 EXPORT_SYMBOL(z8530_sync);
@@ -605,15 +605,15 @@ static void z8530_dma_status(struct z8530_channel *chan)
 }
 
 static struct z8530_irqhandler z8530_dma_sync = {
-	z8530_dma_rx,
-	z8530_dma_tx,
-	z8530_dma_status
+	.rx = z8530_dma_rx,
+	.tx = z8530_dma_tx,
+	.status = z8530_dma_status
 };
 
 static struct z8530_irqhandler z8530_txdma_sync = {
-	z8530_rx,
-	z8530_dma_tx,
-	z8530_dma_status
+	.rx = z8530_rx,
+	.tx = z8530_dma_tx,
+	.status = z8530_dma_status
 };
 
 /**
@@ -680,9 +680,9 @@ static void z8530_status_clear(struct z8530_channel *chan)
 
 struct z8530_irqhandler z8530_nop=
 {
-	z8530_rx_clear,
-	z8530_tx_clear,
-	z8530_status_clear
+	.rx = z8530_rx_clear,
+	.tx = z8530_tx_clear,
+	.status = z8530_status_clear
 };
 
 
diff --git a/drivers/net/wireless/ath/ath9k/Kconfig b/drivers/net/wireless/ath/ath9k/Kconfig
index 8f231c67dd51..48902b842258 100644
--- a/drivers/net/wireless/ath/ath9k/Kconfig
+++ b/drivers/net/wireless/ath/ath9k/Kconfig
@@ -3,7 +3,6 @@ config ATH9K_HW
 config ATH9K_COMMON
 	tristate
 	select ATH_COMMON
-	select DEBUG_FS
 	select RELAY
 config ATH9K_DFS_DEBUGFS
 	def_bool y
diff --git a/drivers/pci/proc.c b/drivers/pci/proc.c
index 2408abe4ee8c..455d4d4cf13d 100644
--- a/drivers/pci/proc.c
+++ b/drivers/pci/proc.c
@@ -437,7 +437,16 @@ static const struct file_operations proc_bus_pci_dev_operations = {
 static int __init pci_proc_init(void)
 {
 	struct pci_dev *dev = NULL;
+
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+	proc_bus_pci_dir = proc_mkdir_mode("bus/pci", S_IRUSR | S_IXUSR, NULL);
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	proc_bus_pci_dir = proc_mkdir_mode("bus/pci", S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP, NULL);
+#endif
+#else
 	proc_bus_pci_dir = proc_mkdir("bus/pci", NULL);
+#endif
 	proc_create("devices", 0, proc_bus_pci_dir,
 		    &proc_bus_pci_dev_operations);
 	proc_initialized = 1;
diff --git a/drivers/platform/x86/asus-wmi.c b/drivers/platform/x86/asus-wmi.c
index 8499d3ae4257..5e2f9e4afbf5 100644
--- a/drivers/platform/x86/asus-wmi.c
+++ b/drivers/platform/x86/asus-wmi.c
@@ -1900,6 +1900,10 @@ static int show_dsts(struct seq_file *m, void *data)
 	int err;
 	u32 retval = -1;
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+	return -EPERM;
+#endif
+
 	err = asus_wmi_get_devstate(asus, asus->debug.dev_id, &retval);
 
 	if (err < 0)
@@ -1916,6 +1920,10 @@ static int show_devs(struct seq_file *m, void *data)
 	int err;
 	u32 retval = -1;
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+	return -EPERM;
+#endif
+
 	err = asus_wmi_set_devstate(asus->debug.dev_id, asus->debug.ctrl_param,
 				    &retval);
 
@@ -1940,6 +1948,10 @@ static int show_call(struct seq_file *m, void *data)
 	union acpi_object *obj;
 	acpi_status status;
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+	return -EPERM;
+#endif
+
 	status = wmi_evaluate_method(ASUS_WMI_MGMT_GUID,
 				     1, asus->debug.method_id,
 				     &input, &output);
diff --git a/drivers/rtc/rtc-dev.c b/drivers/rtc/rtc-dev.c
index a6d9434addf6..dc26b717be46 100644
--- a/drivers/rtc/rtc-dev.c
+++ b/drivers/rtc/rtc-dev.c
@@ -16,6 +16,7 @@
 #include <linux/module.h>
 #include <linux/rtc.h>
 #include <linux/sched.h>
+#include <linux/grsecurity.h>
 #include "rtc-core.h"
 
 static dev_t rtc_devt;
@@ -347,6 +348,8 @@ static long rtc_dev_ioctl(struct file *file,
 		if (copy_from_user(&tm, uarg, sizeof(tm)))
 			return -EFAULT;
 
+		gr_log_timechange();
+
 		return rtc_set_time(rtc, &tm);
 
 	case RTC_PIE_ON:
diff --git a/drivers/scsi/bfa/bfa_fcs.c b/drivers/scsi/bfa/bfa_fcs.c
index 1e7e139d71ea..c2031dd6ab67 100644
--- a/drivers/scsi/bfa/bfa_fcs.c
+++ b/drivers/scsi/bfa/bfa_fcs.c
@@ -39,10 +39,21 @@ struct bfa_fcs_mod_s {
 #define BFA_FCS_MODULE(_mod) { _mod ## _modinit, _mod ## _modexit }
 
 static struct bfa_fcs_mod_s fcs_modules[] = {
-	{ bfa_fcs_port_attach, NULL, NULL },
-	{ bfa_fcs_uf_attach, NULL, NULL },
-	{ bfa_fcs_fabric_attach, bfa_fcs_fabric_modinit,
-	  bfa_fcs_fabric_modexit },
+	{
+		.attach = bfa_fcs_port_attach,
+		.modinit = NULL,
+		.modexit = NULL
+	},
+	{
+		.attach = bfa_fcs_uf_attach,
+		.modinit = NULL,
+		.modexit = NULL
+	},
+	{
+		.attach = bfa_fcs_fabric_attach,
+		.modinit = bfa_fcs_fabric_modinit,
+		.modexit = bfa_fcs_fabric_modexit
+	},
 };
 
 /*
diff --git a/drivers/scsi/bfa/bfa_fcs_lport.c b/drivers/scsi/bfa/bfa_fcs_lport.c
index 8e9281422c47..ccf40a3c7a56 100644
--- a/drivers/scsi/bfa/bfa_fcs_lport.c
+++ b/drivers/scsi/bfa/bfa_fcs_lport.c
@@ -90,15 +90,26 @@ static struct {
 	void		(*offline) (struct bfa_fcs_lport_s *port);
 } __port_action[] = {
 	{
-	bfa_fcs_lport_unknown_init, bfa_fcs_lport_unknown_online,
-			bfa_fcs_lport_unknown_offline}, {
-	bfa_fcs_lport_fab_init, bfa_fcs_lport_fab_online,
-			bfa_fcs_lport_fab_offline}, {
-	bfa_fcs_lport_n2n_init, bfa_fcs_lport_n2n_online,
-			bfa_fcs_lport_n2n_offline}, {
-	bfa_fcs_lport_loop_init, bfa_fcs_lport_loop_online,
-			bfa_fcs_lport_loop_offline},
-	};
+		.init = bfa_fcs_lport_unknown_init,
+		.online = bfa_fcs_lport_unknown_online,
+		.offline = bfa_fcs_lport_unknown_offline
+	},
+	{
+		.init = bfa_fcs_lport_fab_init,
+		.online = bfa_fcs_lport_fab_online,
+		.offline = bfa_fcs_lport_fab_offline
+	},
+	{
+		.init = bfa_fcs_lport_n2n_init,
+		.online = bfa_fcs_lport_n2n_online,
+		.offline = bfa_fcs_lport_n2n_offline
+	},
+	{
+		.init = bfa_fcs_lport_loop_init,
+		.online = bfa_fcs_lport_loop_online,
+		.offline = bfa_fcs_lport_loop_offline
+	},
+};
 
 /*
  *  fcs_port_sm FCS logical port state machine
diff --git a/drivers/scsi/bfa/bfa_modules.h b/drivers/scsi/bfa/bfa_modules.h
index 53135f21fa0e..640621b4c3da 100644
--- a/drivers/scsi/bfa/bfa_modules.h
+++ b/drivers/scsi/bfa/bfa_modules.h
@@ -79,12 +79,12 @@ enum {
 									\
 	extern struct bfa_module_s hal_mod_ ## __mod;			\
 	struct bfa_module_s hal_mod_ ## __mod = {			\
-		bfa_ ## __mod ## _meminfo,				\
-		bfa_ ## __mod ## _attach,				\
-		bfa_ ## __mod ## _detach,				\
-		bfa_ ## __mod ## _start,				\
-		bfa_ ## __mod ## _stop,					\
-		bfa_ ## __mod ## _iocdisable,				\
+		.meminfo = bfa_ ## __mod ## _meminfo,			\
+		.attach = bfa_ ## __mod ## _attach,			\
+		.detach = bfa_ ## __mod ## _detach,			\
+		.start = bfa_ ## __mod ## _start,			\
+		.stop = bfa_ ## __mod ## _stop,				\
+		.iocdisable = bfa_ ## __mod ## _iocdisable,		\
 	}
 
 #define BFA_CACHELINE_SZ	(256)
diff --git a/drivers/scsi/hpsa.h b/drivers/scsi/hpsa.h
index 37d93fa19e31..40c2e1bda7f1 100644
--- a/drivers/scsi/hpsa.h
+++ b/drivers/scsi/hpsa.h
@@ -580,38 +580,38 @@ static unsigned long SA5_ioaccel_mode1_completed(struct ctlr_info *h, u8 q)
 }
 
 static struct access_method SA5_access = {
-	SA5_submit_command,
-	SA5_intr_mask,
-	SA5_intr_pending,
-	SA5_completed,
+	.submit_command = SA5_submit_command,
+	.set_intr_mask = SA5_intr_mask,
+	.intr_pending = SA5_intr_pending,
+	.command_completed = SA5_completed,
 };
 
 static struct access_method SA5_ioaccel_mode1_access = {
-	SA5_submit_command,
-	SA5_performant_intr_mask,
-	SA5_ioaccel_mode1_intr_pending,
-	SA5_ioaccel_mode1_completed,
+	.submit_command = SA5_submit_command,
+	.set_intr_mask = SA5_performant_intr_mask,
+	.intr_pending = SA5_ioaccel_mode1_intr_pending,
+	.command_completed = SA5_ioaccel_mode1_completed,
 };
 
 static struct access_method SA5_ioaccel_mode2_access = {
-	SA5_submit_command_ioaccel2,
-	SA5_performant_intr_mask,
-	SA5_performant_intr_pending,
-	SA5_performant_completed,
+	.submit_command = SA5_submit_command_ioaccel2,
+	.set_intr_mask = SA5_performant_intr_mask,
+	.intr_pending = SA5_performant_intr_pending,
+	.command_completed = SA5_performant_completed,
 };
 
 static struct access_method SA5_performant_access = {
-	SA5_submit_command,
-	SA5_performant_intr_mask,
-	SA5_performant_intr_pending,
-	SA5_performant_completed,
+	.submit_command = SA5_submit_command,
+	.set_intr_mask = SA5_performant_intr_mask,
+	.intr_pending = SA5_performant_intr_pending,
+	.command_completed = SA5_performant_completed,
 };
 
 static struct access_method SA5_performant_access_no_read = {
-	SA5_submit_command_no_read,
-	SA5_performant_intr_mask,
-	SA5_performant_intr_pending,
-	SA5_performant_completed,
+	.submit_command = SA5_submit_command_no_read,
+	.set_intr_mask = SA5_performant_intr_mask,
+	.intr_pending = SA5_performant_intr_pending,
+	.command_completed = SA5_performant_completed,
 };
 
 struct board_type {
diff --git a/drivers/staging/lustre/lustre/ldlm/ldlm_flock.c b/drivers/staging/lustre/lustre/ldlm/ldlm_flock.c
index 861f36f039b5..69d22b9c6197 100644
--- a/drivers/staging/lustre/lustre/ldlm/ldlm_flock.c
+++ b/drivers/staging/lustre/lustre/ldlm/ldlm_flock.c
@@ -143,7 +143,7 @@ static int ldlm_process_flock_lock(struct ldlm_lock *req, __u64 *flags,
 	int added = (mode == LCK_NL);
 	int overlaps = 0;
 	int splitted = 0;
-	const struct ldlm_callback_suite null_cbs = { NULL };
+	const struct ldlm_callback_suite null_cbs = { };
 
 	CDEBUG(D_DLMTRACE,
 	       "flags %#llx owner %llu pid %u mode %u start %llu end %llu\n",
diff --git a/drivers/staging/wilc1000/host_interface.h b/drivers/staging/wilc1000/host_interface.h
index ddfea29df2a7..5305b3846064 100644
--- a/drivers/staging/wilc1000/host_interface.h
+++ b/drivers/staging/wilc1000/host_interface.h
@@ -1,6 +1,7 @@
 #ifndef HOST_INT_H
 #define HOST_INT_H
 
+#include <linux/netdevice.h>
 #include "coreconfigurator.h"
 
 #define IP_ALEN  4
diff --git a/drivers/staging/wilc1000/wilc_spi.c b/drivers/staging/wilc1000/wilc_spi.c
index f08cf6d9e1af..9ccd7a46e703 100644
--- a/drivers/staging/wilc1000/wilc_spi.c
+++ b/drivers/staging/wilc1000/wilc_spi.c
@@ -19,6 +19,7 @@
 #include <linux/of_gpio.h>
 
 #include <linux/string.h>
+#include <linux/netdevice.h>
 #include "wilc_wlan_if.h"
 #include "wilc_wlan.h"
 #include "wilc_wfi_netdevice.h"
diff --git a/drivers/tty/hvc/hvc_console.c b/drivers/tty/hvc/hvc_console.c
index 8ff3311d14cf..c64337636687 100644
--- a/drivers/tty/hvc/hvc_console.c
+++ b/drivers/tty/hvc/hvc_console.c
@@ -143,7 +143,9 @@ static uint32_t vtermnos[MAX_NR_HVC_CONSOLES] =
 static void hvc_console_print(struct console *co, const char *b,
 			      unsigned count)
 {
-	char c[N_OUTBUF] __ALIGNED__;
+	char c_stack[N_OUTBUF] __ALIGNED__;
+	char *c_alloc = NULL;
+	char *c;
 	unsigned i = 0, n = 0;
 	int r, donecr = 0, index = co->index;
 
@@ -155,8 +157,13 @@ static void hvc_console_print(struct console *co, const char *b,
 	if (vtermnos[index] == -1)
 		return;
 
+	if (slab_is_available())
+		c = c_alloc = kmalloc(N_OUTBUF, GFP_ATOMIC);
+	else
+		c = c_stack;
+
 	while (count > 0 || i > 0) {
-		if (count > 0 && i < sizeof(c)) {
+		if (count > 0 && i < sizeof(c_stack)) {
 			if (b[n] == '\n' && !donecr) {
 				c[i++] = '\r';
 				donecr = 1;
@@ -179,6 +186,8 @@ static void hvc_console_print(struct console *co, const char *b,
 			}
 		}
 	}
+
+	kfree(c_alloc);
 }
 
 static struct tty_driver *hvc_console_device(struct console *c, int *index)
diff --git a/drivers/tty/sysrq.c b/drivers/tty/sysrq.c
index 701c085bb19b..de038f58acd0 100644
--- a/drivers/tty/sysrq.c
+++ b/drivers/tty/sysrq.c
@@ -1090,7 +1090,7 @@ EXPORT_SYMBOL(unregister_sysrq_key);
 static ssize_t write_sysrq_trigger(struct file *file, const char __user *buf,
 				   size_t count, loff_t *ppos)
 {
-	if (count) {
+	if (count && capable(CAP_SYS_ADMIN)) {
 		char c;
 
 		if (get_user(c, buf))
diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 31a8d1f6e226..0518bb71e846 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -105,6 +105,8 @@
 #include <linux/kmod.h>
 #include <linux/nsproxy.h>
 
+#include <linux/grsecurity.h>
+
 #undef TTY_DEBUG_HANGUP
 #ifdef TTY_DEBUG_HANGUP
 # define tty_debug_hangup(tty, f, args...)	tty_debug(tty, f, ##args)
@@ -2286,6 +2288,8 @@ static int tiocsti(struct tty_struct *tty, char __user *p)
 	char ch, mbz = 0;
 	struct tty_ldisc *ld;
 
+	if (gr_handle_tiocsti(tty))
+		return -EPERM;
 	if ((current->signal->tty != tty) && !capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (get_user(ch, p))
diff --git a/drivers/tty/vt/keyboard.c b/drivers/tty/vt/keyboard.c
index ece10e6b731b..1621e805b9bd 100644
--- a/drivers/tty/vt/keyboard.c
+++ b/drivers/tty/vt/keyboard.c
@@ -630,6 +630,16 @@ static void k_spec(struct vc_data *vc, unsigned char value, char up_flag)
 	     kbd->kbdmode == VC_OFF) &&
 	     value != KVAL(K_SAK))
 		return;		/* SAK is allowed even in raw mode */
+
+#if defined(CONFIG_GRKERNSEC_PROC) || defined(CONFIG_GRKERNSEC_PROC_MEMMAP)
+	{
+		void *func = fn_handler[value];
+		if (func == fn_show_state || func == fn_show_ptregs ||
+		    func == fn_show_mem)
+			return;
+	}
+#endif
+
 	fn_handler[value](vc);
 }
 
@@ -1858,9 +1868,6 @@ int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,
 	if (copy_from_user(&tmp, user_kbe, sizeof(struct kbentry)))
 		return -EFAULT;
 
-	if (!capable(CAP_SYS_TTY_CONFIG))
-		perm = 0;
-
 	switch (cmd) {
 	case KDGKBENT:
 		/* Ensure another thread doesn't free it under us */
@@ -1875,6 +1882,9 @@ int vt_do_kdsk_ioctl(int cmd, struct kbentry __user *user_kbe, int perm,
 		spin_unlock_irqrestore(&kbd_event_lock, flags);
 		return put_user(val, &user_kbe->kb_value);
 	case KDSKBENT:
+		if (!capable(CAP_SYS_TTY_CONFIG))
+			perm = 0;
+
 		if (!perm)
 			return -EPERM;
 		if (!i && v == K_NOSUCHMAP) {
@@ -1965,9 +1975,6 @@ int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 	int i, j, k;
 	int ret;
 
-	if (!capable(CAP_SYS_TTY_CONFIG))
-		perm = 0;
-
 	kbs = kmalloc(sizeof(*kbs), GFP_KERNEL);
 	if (!kbs) {
 		ret = -ENOMEM;
@@ -2001,6 +2008,9 @@ int vt_do_kdgkb_ioctl(int cmd, struct kbsentry __user *user_kdgkb, int perm)
 		kfree(kbs);
 		return ((p && *p) ? -EOVERFLOW : 0);
 	case KDSKBSENT:
+		if (!capable(CAP_SYS_TTY_CONFIG))
+			perm = 0;
+
 		if (!perm) {
 			ret = -EPERM;
 			goto reterr;
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 35fb2bef0e45..301257bd3b60 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -26,6 +26,7 @@
 #include <linux/mutex.h>
 #include <linux/random.h>
 #include <linux/pm_qos.h>
+#include <linux/grsecurity.h>
 
 #include <asm/uaccess.h>
 #include <asm/byteorder.h>
@@ -4760,6 +4761,10 @@ static void hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus,
 			goto done;
 		return;
 	}
+
+	if (gr_handle_new_usb())
+		goto done;
+
 	if (hub_is_superspeed(hub->hdev))
 		unit_load = 150;
 	else
diff --git a/drivers/usb/core/message.c b/drivers/usb/core/message.c
index 3a4707746157..5cf8b9c0b25c 100644
--- a/drivers/usb/core/message.c
+++ b/drivers/usb/core/message.c
@@ -982,7 +982,7 @@ EXPORT_SYMBOL_GPL(usb_get_status);
  * Return: Zero on success, or else the status code returned by the
  * underlying usb_control_msg() call.
  */
-int usb_clear_halt(struct usb_device *dev, int pipe)
+int usb_clear_halt(struct usb_device *dev, unsigned int pipe)
 {
 	int result;
 	int endp = usb_pipeendpoint(pipe);
diff --git a/drivers/usb/gadget/function/f_uac1.c b/drivers/usb/gadget/function/f_uac1.c
index f2ac0cbc29a4..40382623c0bb 100644
--- a/drivers/usb/gadget/function/f_uac1.c
+++ b/drivers/usb/gadget/function/f_uac1.c
@@ -14,6 +14,7 @@
 #include <linux/module.h>
 #include <linux/device.h>
 #include <linux/atomic.h>
+#include <linux/module.h>
 
 #include "u_uac1.h"
 
diff --git a/drivers/usb/gadget/function/u_uac1.c b/drivers/usb/gadget/function/u_uac1.c
index c78c84138a28..48fd281c0be0 100644
--- a/drivers/usb/gadget/function/u_uac1.c
+++ b/drivers/usb/gadget/function/u_uac1.c
@@ -17,6 +17,7 @@
 #include <linux/ctype.h>
 #include <linux/random.h>
 #include <linux/syscalls.h>
+#include <linux/module.h>
 
 #include "u_uac1.h"
 
diff --git a/drivers/usb/host/hwa-hc.c b/drivers/usb/host/hwa-hc.c
index 58c3e772c531..2e9f5ea5b217 100644
--- a/drivers/usb/host/hwa-hc.c
+++ b/drivers/usb/host/hwa-hc.c
@@ -337,7 +337,10 @@ static int __hwahc_op_bwa_set(struct wusbhc *wusbhc, s8 stream_index,
 	struct hwahc *hwahc = container_of(wusbhc, struct hwahc, wusbhc);
 	struct wahc *wa = &hwahc->wa;
 	struct device *dev = &wa->usb_iface->dev;
-	u8 mas_le[UWB_NUM_MAS/8];
+	u8 *mas_le = kmalloc(UWB_NUM_MAS/8, GFP_KERNEL);
+
+	if (mas_le == NULL)
+		return -ENOMEM;
 
 	/* Set the stream index */
 	result = usb_control_msg(wa->usb_dev, usb_sndctrlpipe(wa->usb_dev, 0),
@@ -356,10 +359,12 @@ static int __hwahc_op_bwa_set(struct wusbhc *wusbhc, s8 stream_index,
 			WUSB_REQ_SET_WUSB_MAS,
 			USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE,
 			0, wa->usb_iface->cur_altsetting->desc.bInterfaceNumber,
-			mas_le, 32, USB_CTRL_SET_TIMEOUT);
+			mas_le, UWB_NUM_MAS/8, USB_CTRL_SET_TIMEOUT);
 	if (result < 0)
 		dev_err(dev, "Cannot set WUSB MAS allocation: %d\n", result);
 out:
+	kfree(mas_le);
+
 	return result;
 }
 
diff --git a/drivers/usb/usbip/stub_rx.c b/drivers/usb/usbip/stub_rx.c
index 191b176ffedf..960b4ae6181e 100644
--- a/drivers/usb/usbip/stub_rx.c
+++ b/drivers/usb/usbip/stub_rx.c
@@ -80,7 +80,7 @@ static int tweak_clear_halt_cmd(struct urb *urb)
 	struct usb_ctrlrequest *req;
 	int target_endp;
 	int target_dir;
-	int target_pipe;
+	unsigned int target_pipe;
 	int ret;
 
 	req = (struct usb_ctrlrequest *) urb->setup_packet;
@@ -336,7 +336,7 @@ static struct stub_priv *stub_priv_alloc(struct stub_device *sdev,
 	return priv;
 }
 
-static int get_pipe(struct stub_device *sdev, int epnum, int dir)
+static unsigned int get_pipe(struct stub_device *sdev, int epnum, int dir)
 {
 	struct usb_device *udev = sdev->udev;
 	struct usb_host_endpoint *ep;
@@ -447,7 +447,7 @@ static void stub_recv_cmd_submit(struct stub_device *sdev,
 	struct stub_priv *priv;
 	struct usbip_device *ud = &sdev->ud;
 	struct usb_device *udev = sdev->udev;
-	int pipe = get_pipe(sdev, pdu->base.ep, pdu->base.direction);
+	unsigned int pipe = get_pipe(sdev, pdu->base.ep, pdu->base.direction);
 
 	priv = stub_priv_alloc(sdev, pdu);
 	if (!priv)
diff --git a/drivers/usb/usbip/vhci_sysfs.c b/drivers/usb/usbip/vhci_sysfs.c
index 1c7e51698840..7a4f9d4fdb07 100644
--- a/drivers/usb/usbip/vhci_sysfs.c
+++ b/drivers/usb/usbip/vhci_sysfs.c
@@ -68,7 +68,7 @@ static ssize_t status_show_vhci(int pdev_nr, char *out)
 		if (vdev->ud.status == VDEV_ST_USED) {
 			out += sprintf(out, "%03u %08x ",
 					    vdev->speed, vdev->devid);
-			out += sprintf(out, "%16p %s",
+			out += sprintf(out, "%16pK %s",
 					    vdev->ud.tcp_socket,
 					    dev_name(&vdev->udev->dev));
 
diff --git a/drivers/video/fbdev/matrox/matroxfb_DAC1064.c b/drivers/video/fbdev/matrox/matroxfb_DAC1064.c
index a01147fdf270..5d896f879ff9 100644
--- a/drivers/video/fbdev/matrox/matroxfb_DAC1064.c
+++ b/drivers/video/fbdev/matrox/matroxfb_DAC1064.c
@@ -1088,14 +1088,20 @@ static void MGAG100_restore(struct matrox_fb_info *minfo)
 
 #ifdef CONFIG_FB_MATROX_MYSTIQUE
 struct matrox_switch matrox_mystique = {
-	MGA1064_preinit, MGA1064_reset, MGA1064_init, MGA1064_restore,
+	.preinit = MGA1064_preinit,
+	.reset = MGA1064_reset,
+	.init = MGA1064_init,
+	.restore = MGA1064_restore,
 };
 EXPORT_SYMBOL(matrox_mystique);
 #endif
 
 #ifdef CONFIG_FB_MATROX_G
 struct matrox_switch matrox_G100 = {
-	MGAG100_preinit, MGAG100_reset, MGAG100_init, MGAG100_restore,
+	.preinit = MGAG100_preinit,
+	.reset = MGAG100_reset,
+	.init = MGAG100_init,
+	.restore = MGAG100_restore,
 };
 EXPORT_SYMBOL(matrox_G100);
 #endif
diff --git a/drivers/video/fbdev/matrox/matroxfb_Ti3026.c b/drivers/video/fbdev/matrox/matroxfb_Ti3026.c
index 68fa037d8cbc..0273351b2342 100644
--- a/drivers/video/fbdev/matrox/matroxfb_Ti3026.c
+++ b/drivers/video/fbdev/matrox/matroxfb_Ti3026.c
@@ -738,7 +738,10 @@ static int Ti3026_preinit(struct matrox_fb_info *minfo)
 }
 
 struct matrox_switch matrox_millennium = {
-	Ti3026_preinit, Ti3026_reset, Ti3026_init, Ti3026_restore
+	.preinit = Ti3026_preinit,
+	.reset = Ti3026_reset,
+	.init = Ti3026_init,
+	.restore = Ti3026_restore
 };
 EXPORT_SYMBOL(matrox_millennium);
 #endif
diff --git a/drivers/video/fbdev/sh_mobile_lcdcfb.c b/drivers/video/fbdev/sh_mobile_lcdcfb.c
index 82c0a8caa9b8..42499a1afa07 100644
--- a/drivers/video/fbdev/sh_mobile_lcdcfb.c
+++ b/drivers/video/fbdev/sh_mobile_lcdcfb.c
@@ -439,9 +439,9 @@ static unsigned long lcdc_sys_read_data(void *handle)
 }
 
 static struct sh_mobile_lcdc_sys_bus_ops sh_mobile_lcdc_sys_bus_ops = {
-	lcdc_sys_write_index,
-	lcdc_sys_write_data,
-	lcdc_sys_read_data,
+	.write_index = lcdc_sys_write_index,
+	.write_data = lcdc_sys_write_data,
+	.read_data = lcdc_sys_read_data,
 };
 
 static int sh_mobile_lcdc_sginit(struct fb_info *info,
diff --git a/drivers/video/logo/logo_linux_clut224.ppm b/drivers/video/logo/logo_linux_clut224.ppm
index 3c14e43b82fe..263057016d3b 100644
--- a/drivers/video/logo/logo_linux_clut224.ppm
+++ b/drivers/video/logo/logo_linux_clut224.ppm
@@ -2,1603 +2,1123 @@ P3
 # Standard 224-color Linux logo
 80 80
 255
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6   6   6   6  10  10  10  10  10  10
- 10  10  10   6   6   6   6   6   6   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6  10  10  10  14  14  14
- 22  22  22  26  26  26  30  30  30  34  34  34
- 30  30  30  30  30  30  26  26  26  18  18  18
- 14  14  14  10  10  10   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  14  14  14  26  26  26  42  42  42
- 54  54  54  66  66  66  78  78  78  78  78  78
- 78  78  78  74  74  74  66  66  66  54  54  54
- 42  42  42  26  26  26  18  18  18  10  10  10
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 22  22  22  42  42  42  66  66  66  86  86  86
- 66  66  66  38  38  38  38  38  38  22  22  22
- 26  26  26  34  34  34  54  54  54  66  66  66
- 86  86  86  70  70  70  46  46  46  26  26  26
- 14  14  14   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0  10  10  10  26  26  26
- 50  50  50  82  82  82  58  58  58   6   6   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  6   6   6  54  54  54  86  86  86  66  66  66
- 38  38  38  18  18  18   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6  22  22  22  50  50  50
- 78  78  78  34  34  34   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   6   6   6  70  70  70
- 78  78  78  46  46  46  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  18  18  18  42  42  42  82  82  82
- 26  26  26   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  14  14  14
- 46  46  46  34  34  34   6   6   6   2   2   6
- 42  42  42  78  78  78  42  42  42  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   0   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
- 10  10  10  30  30  30  66  66  66  58  58  58
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  26  26  26
- 86  86  86 101 101 101  46  46  46  10  10  10
-  2   2   6  58  58  58  70  70  70  34  34  34
- 10  10  10   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
- 14  14  14  42  42  42  86  86  86  10  10  10
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  30  30  30
- 94  94  94  94  94  94  58  58  58  26  26  26
-  2   2   6   6   6   6  78  78  78  54  54  54
- 22  22  22   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 22  22  22  62  62  62  62  62  62   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  26  26  26
- 54  54  54  38  38  38  18  18  18  10  10  10
-  2   2   6   2   2   6  34  34  34  82  82  82
- 38  38  38  14  14  14   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 30  30  30  78  78  78  30  30  30   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  10  10  10
- 10  10  10   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  78  78  78
- 50  50  50  18  18  18   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 38  38  38  86  86  86  14  14  14   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  54  54  54
- 66  66  66  26  26  26   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 42  42  42  82  82  82   2   2   6   2   2   6
-  2   2   6   6   6   6  10  10  10   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   6   6   6
- 14  14  14  10  10  10   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  18  18  18
- 82  82  82  34  34  34  10  10  10   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 46  46  46  86  86  86   2   2   6   2   2   6
-  6   6   6   6   6   6  22  22  22  34  34  34
-  6   6   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6  18  18  18  34  34  34
- 10  10  10  50  50  50  22  22  22   2   2   6
-  2   2   6   2   2   6   2   2   6  10  10  10
- 86  86  86  42  42  42  14  14  14   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   1   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 46  46  46  86  86  86   2   2   6   2   2   6
- 38  38  38 116 116 116  94  94  94  22  22  22
- 22  22  22   2   2   6   2   2   6   2   2   6
- 14  14  14  86  86  86 138 138 138 162 162 162
-154 154 154  38  38  38  26  26  26   6   6   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 86  86  86  46  46  46  14  14  14   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 46  46  46  86  86  86   2   2   6  14  14  14
-134 134 134 198 198 198 195 195 195 116 116 116
- 10  10  10   2   2   6   2   2   6   6   6   6
-101  98  89 187 187 187 210 210 210 218 218 218
-214 214 214 134 134 134  14  14  14   6   6   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 86  86  86  50  50  50  18  18  18   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   1   0   0   0
-  0   0   1   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 46  46  46  86  86  86   2   2   6  54  54  54
-218 218 218 195 195 195 226 226 226 246 246 246
- 58  58  58   2   2   6   2   2   6  30  30  30
-210 210 210 253 253 253 174 174 174 123 123 123
-221 221 221 234 234 234  74  74  74   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 70  70  70  58  58  58  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 46  46  46  82  82  82   2   2   6 106 106 106
-170 170 170  26  26  26  86  86  86 226 226 226
-123 123 123  10  10  10  14  14  14  46  46  46
-231 231 231 190 190 190   6   6   6  70  70  70
- 90  90  90 238 238 238 158 158 158   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 70  70  70  58  58  58  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   1   0   0   0
-  0   0   1   0   0   1   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 42  42  42  86  86  86   6   6   6 116 116 116
-106 106 106   6   6   6  70  70  70 149 149 149
-128 128 128  18  18  18  38  38  38  54  54  54
-221 221 221 106 106 106   2   2   6  14  14  14
- 46  46  46 190 190 190 198 198 198   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 74  74  74  62  62  62  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   1   0   0   0
-  0   0   1   0   0   0   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 42  42  42  94  94  94  14  14  14 101 101 101
-128 128 128   2   2   6  18  18  18 116 116 116
-118  98  46 121  92   8 121  92   8  98  78  10
-162 162 162 106 106 106   2   2   6   2   2   6
-  2   2   6 195 195 195 195 195 195   6   6   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 74  74  74  62  62  62  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   1   0   0   1
-  0   0   1   0   0   0   0   0   1   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 38  38  38  90  90  90  14  14  14  58  58  58
-210 210 210  26  26  26  54  38   6 154 114  10
-226 170  11 236 186  11 225 175  15 184 144  12
-215 174  15 175 146  61  37  26   9   2   2   6
- 70  70  70 246 246 246 138 138 138   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 70  70  70  66  66  66  26  26  26   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 38  38  38  86  86  86  14  14  14  10  10  10
-195 195 195 188 164 115 192 133   9 225 175  15
-239 182  13 234 190  10 232 195  16 232 200  30
-245 207  45 241 208  19 232 195  16 184 144  12
-218 194 134 211 206 186  42  42  42   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 50  50  50  74  74  74  30  30  30   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 34  34  34  86  86  86  14  14  14   2   2   6
-121  87  25 192 133   9 219 162  10 239 182  13
-236 186  11 232 195  16 241 208  19 244 214  54
-246 218  60 246 218  38 246 215  20 241 208  19
-241 208  19 226 184  13 121  87  25   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 50  50  50  82  82  82  34  34  34  10  10  10
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 34  34  34  82  82  82  30  30  30  61  42   6
-180 123   7 206 145  10 230 174  11 239 182  13
-234 190  10 238 202  15 241 208  19 246 218  74
-246 218  38 246 215  20 246 215  20 246 215  20
-226 184  13 215 174  15 184 144  12   6   6   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 26  26  26  94  94  94  42  42  42  14  14  14
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 30  30  30  78  78  78  50  50  50 104  69   6
-192 133   9 216 158  10 236 178  12 236 186  11
-232 195  16 241 208  19 244 214  54 245 215  43
-246 215  20 246 215  20 241 208  19 198 155  10
-200 144  11 216 158  10 156 118  10   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  6   6   6  90  90  90  54  54  54  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 30  30  30  78  78  78  46  46  46  22  22  22
-137  92   6 210 162  10 239 182  13 238 190  10
-238 202  15 241 208  19 246 215  20 246 215  20
-241 208  19 203 166  17 185 133  11 210 150  10
-216 158  10 210 150  10 102  78  10   2   2   6
-  6   6   6  54  54  54  14  14  14   2   2   6
-  2   2   6  62  62  62  74  74  74  30  30  30
- 10  10  10   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 34  34  34  78  78  78  50  50  50   6   6   6
- 94  70  30 139 102  15 190 146  13 226 184  13
-232 200  30 232 195  16 215 174  15 190 146  13
-168 122  10 192 133   9 210 150  10 213 154  11
-202 150  34 182 157 106 101  98  89   2   2   6
-  2   2   6  78  78  78 116 116 116  58  58  58
-  2   2   6  22  22  22  90  90  90  46  46  46
- 18  18  18   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 38  38  38  86  86  86  50  50  50   6   6   6
-128 128 128 174 154 114 156 107  11 168 122  10
-198 155  10 184 144  12 197 138  11 200 144  11
-206 145  10 206 145  10 197 138  11 188 164 115
-195 195 195 198 198 198 174 174 174  14  14  14
-  2   2   6  22  22  22 116 116 116 116 116 116
- 22  22  22   2   2   6  74  74  74  70  70  70
- 30  30  30  10  10  10   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  18  18  18
- 50  50  50 101 101 101  26  26  26  10  10  10
-138 138 138 190 190 190 174 154 114 156 107  11
-197 138  11 200 144  11 197 138  11 192 133   9
-180 123   7 190 142  34 190 178 144 187 187 187
-202 202 202 221 221 221 214 214 214  66  66  66
-  2   2   6   2   2   6  50  50  50  62  62  62
-  6   6   6   2   2   6  10  10  10  90  90  90
- 50  50  50  18  18  18   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0  10  10  10  34  34  34
- 74  74  74  74  74  74   2   2   6   6   6   6
-144 144 144 198 198 198 190 190 190 178 166 146
-154 121  60 156 107  11 156 107  11 168 124  44
-174 154 114 187 187 187 190 190 190 210 210 210
-246 246 246 253 253 253 253 253 253 182 182 182
-  6   6   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  62  62  62
- 74  74  74  34  34  34  14  14  14   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0  10  10  10  22  22  22  54  54  54
- 94  94  94  18  18  18   2   2   6  46  46  46
-234 234 234 221 221 221 190 190 190 190 190 190
-190 190 190 187 187 187 187 187 187 190 190 190
-190 190 190 195 195 195 214 214 214 242 242 242
-253 253 253 253 253 253 253 253 253 253 253 253
- 82  82  82   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  14  14  14
- 86  86  86  54  54  54  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  18  18  18  46  46  46  90  90  90
- 46  46  46  18  18  18   6   6   6 182 182 182
-253 253 253 246 246 246 206 206 206 190 190 190
-190 190 190 190 190 190 190 190 190 190 190 190
-206 206 206 231 231 231 250 250 250 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-202 202 202  14  14  14   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 42  42  42  86  86  86  42  42  42  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 14  14  14  38  38  38  74  74  74  66  66  66
-  2   2   6   6   6   6  90  90  90 250 250 250
-253 253 253 253 253 253 238 238 238 198 198 198
-190 190 190 190 190 190 195 195 195 221 221 221
-246 246 246 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253  82  82  82   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  78  78  78  70  70  70  34  34  34
- 14  14  14   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 34  34  34  66  66  66  78  78  78   6   6   6
-  2   2   6  18  18  18 218 218 218 253 253 253
-253 253 253 253 253 253 253 253 253 246 246 246
-226 226 226 231 231 231 246 246 246 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 178 178 178   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  18  18  18  90  90  90  62  62  62
- 30  30  30  10  10  10   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0  10  10  10  26  26  26
- 58  58  58  90  90  90  18  18  18   2   2   6
-  2   2   6 110 110 110 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-250 250 250 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 231 231 231  18  18  18   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6  18  18  18  94  94  94
- 54  54  54  26  26  26  10  10  10   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6  22  22  22  50  50  50
- 90  90  90  26  26  26   2   2   6   2   2   6
- 14  14  14 195 195 195 250 250 250 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-250 250 250 242 242 242  54  54  54   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6  38  38  38
- 86  86  86  50  50  50  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  14  14  14  38  38  38  82  82  82
- 34  34  34   2   2   6   2   2   6   2   2   6
- 42  42  42 195 195 195 246 246 246 253 253 253
-253 253 253 253 253 253 253 253 253 250 250 250
-242 242 242 242 242 242 250 250 250 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 250 250 250 246 246 246 238 238 238
-226 226 226 231 231 231 101 101 101   6   6   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
- 38  38  38  82  82  82  42  42  42  14  14  14
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
- 10  10  10  26  26  26  62  62  62  66  66  66
-  2   2   6   2   2   6   2   2   6   6   6   6
- 70  70  70 170 170 170 206 206 206 234 234 234
-246 246 246 250 250 250 250 250 250 238 238 238
-226 226 226 231 231 231 238 238 238 250 250 250
-250 250 250 250 250 250 246 246 246 231 231 231
-214 214 214 206 206 206 202 202 202 202 202 202
-198 198 198 202 202 202 182 182 182  18  18  18
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  62  62  62  66  66  66  30  30  30
- 10  10  10   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
- 14  14  14  42  42  42  82  82  82  18  18  18
-  2   2   6   2   2   6   2   2   6  10  10  10
- 94  94  94 182 182 182 218 218 218 242 242 242
-250 250 250 253 253 253 253 253 253 250 250 250
-234 234 234 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 246 246 246
-238 238 238 226 226 226 210 210 210 202 202 202
-195 195 195 195 195 195 210 210 210 158 158 158
-  6   6   6  14  14  14  50  50  50  14  14  14
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   6   6   6  86  86  86  46  46  46
- 18  18  18   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 22  22  22  54  54  54  70  70  70   2   2   6
-  2   2   6  10  10  10   2   2   6  22  22  22
-166 166 166 231 231 231 250 250 250 253 253 253
-253 253 253 253 253 253 253 253 253 250 250 250
-242 242 242 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 246 246 246
-231 231 231 206 206 206 198 198 198 226 226 226
- 94  94  94   2   2   6   6   6   6  38  38  38
- 30  30  30   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6  62  62  62  66  66  66
- 26  26  26  10  10  10   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 30  30  30  74  74  74  50  50  50   2   2   6
- 26  26  26  26  26  26   2   2   6 106 106 106
-238 238 238 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 246 246 246 218 218 218 202 202 202
-210 210 210  14  14  14   2   2   6   2   2   6
- 30  30  30  22  22  22   2   2   6   2   2   6
-  2   2   6   2   2   6  18  18  18  86  86  86
- 42  42  42  14  14  14   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 42  42  42  90  90  90  22  22  22   2   2   6
- 42  42  42   2   2   6  18  18  18 218 218 218
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 250 250 250 221 221 221
-218 218 218 101 101 101   2   2   6  14  14  14
- 18  18  18  38  38  38  10  10  10   2   2   6
-  2   2   6   2   2   6   2   2   6  78  78  78
- 58  58  58  22  22  22   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  18  18  18
- 54  54  54  82  82  82   2   2   6  26  26  26
- 22  22  22   2   2   6 123 123 123 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 250 250 250
-238 238 238 198 198 198   6   6   6  38  38  38
- 58  58  58  26  26  26  38  38  38   2   2   6
-  2   2   6   2   2   6   2   2   6  46  46  46
- 78  78  78  30  30  30  10  10  10   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0  10  10  10  30  30  30
- 74  74  74  58  58  58   2   2   6  42  42  42
-  2   2   6  22  22  22 231 231 231 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 250 250 250
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 246 246 246  46  46  46  38  38  38
- 42  42  42  14  14  14  38  38  38  14  14  14
-  2   2   6   2   2   6   2   2   6   6   6   6
- 86  86  86  46  46  46  14  14  14   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6  14  14  14  42  42  42
- 90  90  90  18  18  18  18  18  18  26  26  26
-  2   2   6 116 116 116 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 250 250 250 238 238 238
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253  94  94  94   6   6   6
-  2   2   6   2   2   6  10  10  10  34  34  34
-  2   2   6   2   2   6   2   2   6   2   2   6
- 74  74  74  58  58  58  22  22  22   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0  10  10  10  26  26  26  66  66  66
- 82  82  82   2   2   6  38  38  38   6   6   6
- 14  14  14 210 210 210 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 246 246 246 242 242 242
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 144 144 144   2   2   6
-  2   2   6   2   2   6   2   2   6  46  46  46
-  2   2   6   2   2   6   2   2   6   2   2   6
- 42  42  42  74  74  74  30  30  30  10  10  10
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  14  14  14  42  42  42  90  90  90
- 26  26  26   6   6   6  42  42  42   2   2   6
- 74  74  74 250 250 250 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 242 242 242 242 242 242
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 182 182 182   2   2   6
-  2   2   6   2   2   6   2   2   6  46  46  46
-  2   2   6   2   2   6   2   2   6   2   2   6
- 10  10  10  86  86  86  38  38  38  10  10  10
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
- 10  10  10  26  26  26  66  66  66  82  82  82
-  2   2   6  22  22  22  18  18  18   2   2   6
-149 149 149 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 234 234 234 242 242 242
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 206 206 206   2   2   6
-  2   2   6   2   2   6   2   2   6  38  38  38
-  2   2   6   2   2   6   2   2   6   2   2   6
-  6   6   6  86  86  86  46  46  46  14  14  14
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 18  18  18  46  46  46  86  86  86  18  18  18
-  2   2   6  34  34  34  10  10  10   6   6   6
-210 210 210 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 234 234 234 242 242 242
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 221 221 221   6   6   6
-  2   2   6   2   2   6   6   6   6  30  30  30
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  82  82  82  54  54  54  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 26  26  26  66  66  66  62  62  62   2   2   6
-  2   2   6  38  38  38  10  10  10  26  26  26
-238 238 238 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 238 238 238
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231   6   6   6
-  2   2   6   2   2   6  10  10  10  30  30  30
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  66  66  66  58  58  58  22  22  22
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 38  38  38  78  78  78   6   6   6   2   2   6
-  2   2   6  46  46  46  14  14  14  42  42  42
-246 246 246 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 242 242 242
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 234 234 234  10  10  10
-  2   2   6   2   2   6  22  22  22  14  14  14
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  66  66  66  62  62  62  22  22  22
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  18  18  18
- 50  50  50  74  74  74   2   2   6   2   2   6
- 14  14  14  70  70  70  34  34  34  62  62  62
-250 250 250 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 246 246 246
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 234 234 234  14  14  14
-  2   2   6   2   2   6  30  30  30   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  66  66  66  62  62  62  22  22  22
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  18  18  18
- 54  54  54  62  62  62   2   2   6   2   2   6
-  2   2   6  30  30  30  46  46  46  70  70  70
-250 250 250 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 246 246 246
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 226 226 226  10  10  10
-  2   2   6   6   6   6  30  30  30   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6  66  66  66  58  58  58  22  22  22
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  22  22  22
- 58  58  58  62  62  62   2   2   6   2   2   6
-  2   2   6   2   2   6  30  30  30  78  78  78
-250 250 250 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 246 246 246
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 206 206 206   2   2   6
- 22  22  22  34  34  34  18  14   6  22  22  22
- 26  26  26  18  18  18   6   6   6   2   2   6
-  2   2   6  82  82  82  54  54  54  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  26  26  26
- 62  62  62 106 106 106  74  54  14 185 133  11
-210 162  10 121  92   8   6   6   6  62  62  62
-238 238 238 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 246 246 246
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 158 158 158  18  18  18
- 14  14  14   2   2   6   2   2   6   2   2   6
-  6   6   6  18  18  18  66  66  66  38  38  38
-  6   6   6  94  94  94  50  50  50  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 10  10  10  10  10  10  18  18  18  38  38  38
- 78  78  78 142 134 106 216 158  10 242 186  14
-246 190  14 246 190  14 156 118  10  10  10  10
- 90  90  90 238 238 238 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 250 250 250
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 246 230 190
-238 204  91 238 204  91 181 142  44  37  26   9
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6  38  38  38  46  46  46
- 26  26  26 106 106 106  54  54  54  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6  14  14  14  22  22  22
- 30  30  30  38  38  38  50  50  50  70  70  70
-106 106 106 190 142  34 226 170  11 242 186  14
-246 190  14 246 190  14 246 190  14 154 114  10
-  6   6   6  74  74  74 226 226 226 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 231 231 231 250 250 250
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 228 184  62
-241 196  14 241 208  19 232 195  16  38  30  10
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   6   6   6  30  30  30  26  26  26
-203 166  17 154 142  90  66  66  66  26  26  26
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  18  18  18  38  38  38  58  58  58
- 78  78  78  86  86  86 101 101 101 123 123 123
-175 146  61 210 150  10 234 174  13 246 186  14
-246 190  14 246 190  14 246 190  14 238 190  10
-102  78  10   2   2   6  46  46  46 198 198 198
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 234 234 234 242 242 242
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 224 178  62
-242 186  14 241 196  14 210 166  10  22  18   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   6   6   6 121  92   8
-238 202  15 232 195  16  82  82  82  34  34  34
- 10  10  10   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
- 14  14  14  38  38  38  70  70  70 154 122  46
-190 142  34 200 144  11 197 138  11 197 138  11
-213 154  11 226 170  11 242 186  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-225 175  15  46  32   6   2   2   6  22  22  22
-158 158 158 250 250 250 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 250 250 250 242 242 242 224 178  62
-239 182  13 236 186  11 213 154  11  46  32   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6  61  42   6 225 175  15
-238 190  10 236 186  11 112 100  78  42  42  42
- 14  14  14   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 22  22  22  54  54  54 154 122  46 213 154  11
-226 170  11 230 174  11 226 170  11 226 170  11
-236 178  12 242 186  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-241 196  14 184 144  12  10  10  10   2   2   6
-  6   6   6 116 116 116 242 242 242 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 231 231 231 198 198 198 214 170  54
-236 178  12 236 178  12 210 150  10 137  92   6
- 18  14   6   2   2   6   2   2   6   2   2   6
-  6   6   6  70  47   6 200 144  11 236 178  12
-239 182  13 239 182  13 124 112  88  58  58  58
- 22  22  22   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 30  30  30  70  70  70 180 133  36 226 170  11
-239 182  13 242 186  14 242 186  14 246 186  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 232 195  16  98  70   6   2   2   6
-  2   2   6   2   2   6  66  66  66 221 221 221
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 206 206 206 198 198 198 214 166  58
-230 174  11 230 174  11 216 158  10 192 133   9
-163 110   8 116  81   8 102  78  10 116  81   8
-167 114   7 197 138  11 226 170  11 239 182  13
-242 186  14 242 186  14 162 146  94  78  78  78
- 34  34  34  14  14  14   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 30  30  30  78  78  78 190 142  34 226 170  11
-239 182  13 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 241 196  14 203 166  17  22  18   6
-  2   2   6   2   2   6   2   2   6  38  38  38
-218 218 218 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-250 250 250 206 206 206 198 198 198 202 162  69
-226 170  11 236 178  12 224 166  10 210 150  10
-200 144  11 197 138  11 192 133   9 197 138  11
-210 150  10 226 170  11 242 186  14 246 190  14
-246 190  14 246 186  14 225 175  15 124 112  88
- 62  62  62  30  30  30  14  14  14   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 30  30  30  78  78  78 174 135  50 224 166  10
-239 182  13 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 241 196  14 139 102  15
-  2   2   6   2   2   6   2   2   6   2   2   6
- 78  78  78 250 250 250 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-250 250 250 214 214 214 198 198 198 190 150  46
-219 162  10 236 178  12 234 174  13 224 166  10
-216 158  10 213 154  11 213 154  11 216 158  10
-226 170  11 239 182  13 246 190  14 246 190  14
-246 190  14 246 190  14 242 186  14 206 162  42
-101 101 101  58  58  58  30  30  30  14  14  14
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 30  30  30  74  74  74 174 135  50 216 158  10
-236 178  12 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 241 196  14 226 184  13
- 61  42   6   2   2   6   2   2   6   2   2   6
- 22  22  22 238 238 238 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 226 226 226 187 187 187 180 133  36
-216 158  10 236 178  12 239 182  13 236 178  12
-230 174  11 226 170  11 226 170  11 230 174  11
-236 178  12 242 186  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 186  14 239 182  13
-206 162  42 106 106 106  66  66  66  34  34  34
- 14  14  14   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 26  26  26  70  70  70 163 133  67 213 154  11
-236 178  12 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 241 196  14
-190 146  13  18  14   6   2   2   6   2   2   6
- 46  46  46 246 246 246 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 221 221 221  86  86  86 156 107  11
-216 158  10 236 178  12 242 186  14 246 186  14
-242 186  14 239 182  13 239 182  13 242 186  14
-242 186  14 246 186  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-242 186  14 225 175  15 142 122  72  66  66  66
- 30  30  30  10  10  10   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 26  26  26  70  70  70 163 133  67 210 150  10
-236 178  12 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-232 195  16 121  92   8  34  34  34 106 106 106
-221 221 221 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-242 242 242  82  82  82  18  14   6 163 110   8
-216 158  10 236 178  12 242 186  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 242 186  14 163 133  67
- 46  46  46  18  18  18   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  10  10  10
- 30  30  30  78  78  78 163 133  67 210 150  10
-236 178  12 246 186  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-241 196  14 215 174  15 190 178 144 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 218 218 218
- 58  58  58   2   2   6  22  18   6 167 114   7
-216 158  10 236 178  12 246 186  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 186  14 242 186  14 190 150  46
- 54  54  54  22  22  22   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 38  38  38  86  86  86 180 133  36 213 154  11
-236 178  12 246 186  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 232 195  16 190 146  13 214 214 214
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 250 250 250 170 170 170  26  26  26
-  2   2   6   2   2   6  37  26   9 163 110   8
-219 162  10 239 182  13 246 186  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 186  14 236 178  12 224 166  10 142 122  72
- 46  46  46  18  18  18   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  18  18  18
- 50  50  50 109 106  95 192 133   9 224 166  10
-242 186  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-242 186  14 226 184  13 210 162  10 142 110  46
-226 226 226 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-253 253 253 253 253 253 253 253 253 253 253 253
-198 198 198  66  66  66   2   2   6   2   2   6
-  2   2   6   2   2   6  50  34   6 156 107  11
-219 162  10 239 182  13 246 186  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 242 186  14
-234 174  13 213 154  11 154 122  46  66  66  66
- 30  30  30  10  10  10   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  22  22  22
- 58  58  58 154 121  60 206 145  10 234 174  13
-242 186  14 246 186  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 186  14 236 178  12 210 162  10 163 110   8
- 61  42   6 138 138 138 218 218 218 250 250 250
-253 253 253 253 253 253 253 253 253 250 250 250
-242 242 242 210 210 210 144 144 144  66  66  66
-  6   6   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6  61  42   6 163 110   8
-216 158  10 236 178  12 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 239 182  13 230 174  11 216 158  10
-190 142  34 124 112  88  70  70  70  38  38  38
- 18  18  18   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  22  22  22
- 62  62  62 168 124  44 206 145  10 224 166  10
-236 178  12 239 182  13 242 186  14 242 186  14
-246 186  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 236 178  12 216 158  10 175 118   6
- 80  54   7   2   2   6   6   6   6  30  30  30
- 54  54  54  62  62  62  50  50  50  38  38  38
- 14  14  14   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   6   6   6  80  54   7 167 114   7
-213 154  11 236 178  12 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 190  14 242 186  14 239 182  13 239 182  13
-230 174  11 210 150  10 174 135  50 124 112  88
- 82  82  82  54  54  54  34  34  34  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  18  18  18
- 50  50  50 158 118  36 192 133   9 200 144  11
-216 158  10 219 162  10 224 166  10 226 170  11
-230 174  11 236 178  12 239 182  13 239 182  13
-242 186  14 246 186  14 246 190  14 246 190  14
-246 190  14 246 190  14 246 190  14 246 190  14
-246 186  14 230 174  11 210 150  10 163 110   8
-104  69   6  10  10  10   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   6   6   6  91  60   6 167 114   7
-206 145  10 230 174  11 242 186  14 246 190  14
-246 190  14 246 190  14 246 186  14 242 186  14
-239 182  13 230 174  11 224 166  10 213 154  11
-180 133  36 124 112  88  86  86  86  58  58  58
- 38  38  38  22  22  22  10  10  10   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0  14  14  14
- 34  34  34  70  70  70 138 110  50 158 118  36
-167 114   7 180 123   7 192 133   9 197 138  11
-200 144  11 206 145  10 213 154  11 219 162  10
-224 166  10 230 174  11 239 182  13 242 186  14
-246 186  14 246 186  14 246 186  14 246 186  14
-239 182  13 216 158  10 185 133  11 152  99   6
-104  69   6  18  14   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   2   2   6   2   2   6   2   2   6
-  2   2   6   6   6   6  80  54   7 152  99   6
-192 133   9 219 162  10 236 178  12 239 182  13
-246 186  14 242 186  14 239 182  13 236 178  12
-224 166  10 206 145  10 192 133   9 154 121  60
- 94  94  94  62  62  62  42  42  42  22  22  22
- 14  14  14   6   6   6   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 18  18  18  34  34  34  58  58  58  78  78  78
-101  98  89 124 112  88 142 110  46 156 107  11
-163 110   8 167 114   7 175 118   6 180 123   7
-185 133  11 197 138  11 210 150  10 219 162  10
-226 170  11 236 178  12 236 178  12 234 174  13
-219 162  10 197 138  11 163 110   8 130  83   6
- 91  60   6  10  10  10   2   2   6   2   2   6
- 18  18  18  38  38  38  38  38  38  38  38  38
- 38  38  38  38  38  38  38  38  38  38  38  38
- 38  38  38  38  38  38  26  26  26   2   2   6
-  2   2   6   6   6   6  70  47   6 137  92   6
-175 118   6 200 144  11 219 162  10 230 174  11
-234 174  13 230 174  11 219 162  10 210 150  10
-192 133   9 163 110   8 124 112  88  82  82  82
- 50  50  50  30  30  30  14  14  14   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  14  14  14  22  22  22  34  34  34
- 42  42  42  58  58  58  74  74  74  86  86  86
-101  98  89 122 102  70 130  98  46 121  87  25
-137  92   6 152  99   6 163 110   8 180 123   7
-185 133  11 197 138  11 206 145  10 200 144  11
-180 123   7 156 107  11 130  83   6 104  69   6
- 50  34   6  54  54  54 110 110 110 101  98  89
- 86  86  86  82  82  82  78  78  78  78  78  78
- 78  78  78  78  78  78  78  78  78  78  78  78
- 78  78  78  82  82  82  86  86  86  94  94  94
-106 106 106 101 101 101  86  66  34 124  80   6
-156 107  11 180 123   7 192 133   9 200 144  11
-206 145  10 200 144  11 192 133   9 175 118   6
-139 102  15 109 106  95  70  70  70  42  42  42
- 22  22  22  10  10  10   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   6   6   6  10  10  10
- 14  14  14  22  22  22  30  30  30  38  38  38
- 50  50  50  62  62  62  74  74  74  90  90  90
-101  98  89 112 100  78 121  87  25 124  80   6
-137  92   6 152  99   6 152  99   6 152  99   6
-138  86   6 124  80   6  98  70   6  86  66  30
-101  98  89  82  82  82  58  58  58  46  46  46
- 38  38  38  34  34  34  34  34  34  34  34  34
- 34  34  34  34  34  34  34  34  34  34  34  34
- 34  34  34  34  34  34  38  38  38  42  42  42
- 54  54  54  82  82  82  94  86  76  91  60   6
-134  86   6 156 107  11 167 114   7 175 118   6
-175 118   6 167 114   7 152  99   6 121  87  25
-101  98  89  62  62  62  34  34  34  18  18  18
-  6   6   6   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6   6   6   6  10  10  10
- 18  18  18  22  22  22  30  30  30  42  42  42
- 50  50  50  66  66  66  86  86  86 101  98  89
-106  86  58  98  70   6 104  69   6 104  69   6
-104  69   6  91  60   6  82  62  34  90  90  90
- 62  62  62  38  38  38  22  22  22  14  14  14
- 10  10  10  10  10  10  10  10  10  10  10  10
- 10  10  10  10  10  10   6   6   6  10  10  10
- 10  10  10  10  10  10  10  10  10  14  14  14
- 22  22  22  42  42  42  70  70  70  89  81  66
- 80  54   7 104  69   6 124  80   6 137  92   6
-134  86   6 116  81   8 100  82  52  86  86  86
- 58  58  58  30  30  30  14  14  14   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6  10  10  10  14  14  14
- 18  18  18  26  26  26  38  38  38  54  54  54
- 70  70  70  86  86  86  94  86  76  89  81  66
- 89  81  66  86  86  86  74  74  74  50  50  50
- 30  30  30  14  14  14   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6  18  18  18  34  34  34  58  58  58
- 82  82  82  89  81  66  89  81  66  89  81  66
- 94  86  66  94  86  76  74  74  74  50  50  50
- 26  26  26  14  14  14   6   6   6   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  6   6   6   6   6   6  14  14  14  18  18  18
- 30  30  30  38  38  38  46  46  46  54  54  54
- 50  50  50  42  42  42  30  30  30  18  18  18
- 10  10  10   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   6   6   6  14  14  14  26  26  26
- 38  38  38  50  50  50  58  58  58  58  58  58
- 54  54  54  42  42  42  30  30  30  18  18  18
- 10  10  10   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
-  6   6   6  10  10  10  14  14  14  18  18  18
- 18  18  18  14  14  14  10  10  10   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   6   6   6
- 14  14  14  18  18  18  22  22  22  22  22  22
- 18  18  18  14  14  14  10  10  10   6   6   6
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
-  0   0   0   0   0   0   0   0   0   0   0   0
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  3 3 3  0 0 0  0 0 0
+0 0 0  0 0 0  0 0 0  0 0 0  3 3 3  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  1 1 1  0 0 0
+0 0 0  3 3 3  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  2 1 0  2 1 0  3 2 2
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  2 2 2  0 0 0  3 4 3  26 28 28
+37 38 37  37 38 37  14 17 19  2 2 2  0 0 0  2 2 2
+5 5 5  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  3 3 3  0 0 0  1 1 1  6 6 6
+2 2 2  0 0 0  3 3 3  4 4 4  4 4 4  4 4 4
+4 4 5  3 3 3  1 0 0  0 0 0  1 0 0  0 0 0
+1 1 1  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+2 2 2  0 0 0  0 0 0  14 17 19  60 74 84  137 136 137
+153 152 153  137 136 137  125 124 125  60 73 81  6 6 6  3 1 0
+0 0 0  3 3 3  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  0 0 0  4 4 4  41 54 63  125 124 125
+60 73 81  6 6 6  4 0 0  3 3 3  4 4 4  4 4 4
+4 4 4  0 0 0  6 9 11  41 54 63  41 65 82  22 30 35
+2 2 2  2 1 0  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  5 5 5  5 5 5  2 2 2  0 0 0
+4 0 0  6 6 6  41 54 63  137 136 137  174 174 174  167 166 167
+165 164 165  165 164 165  163 162 163  163 162 163  125 124 125  41 54 63
+1 1 1  0 0 0  0 0 0  3 3 3  5 5 5  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  5 5 5  5 5 5
+3 3 3  2 0 0  4 0 0  60 73 81  156 155 156  167 166 167
+163 162 163  85 115 134  5 7 8  0 0 0  4 4 4  5 5 5
+0 0 0  2 5 5  55 98 126  90 154 193  90 154 193  72 125 159
+37 51 59  2 0 0  1 1 1  4 5 5  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  4 4 4  1 1 1  0 0 0  3 3 3
+37 38 37  125 124 125  163 162 163  174 174 174  158 157 158  158 157 158
+156 155 156  156 155 156  158 157 158  165 164 165  174 174 174  166 165 166
+125 124 125  16 19 21  1 0 0  0 0 0  0 0 0  4 4 4
+5 5 5  5 5 5  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  5 5 5  5 5 5  1 1 1
+0 0 0  0 0 0  37 38 37  153 152 153  174 174 174  158 157 158
+174 174 174  163 162 163  37 38 37  4 3 3  4 0 0  1 1 1
+0 0 0  22 40 52  101 161 196  101 161 196  90 154 193  101 161 196
+64 123 161  14 17 19  0 0 0  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  5 5 5
+5 5 5  2 2 2  0 0 0  4 0 0  24 26 27  85 115 134
+156 155 156  174 174 174  167 166 167  156 155 156  154 153 154  157 156 157
+156 155 156  156 155 156  155 154 155  153 152 153  158 157 158  167 166 167
+174 174 174  156 155 156  60 74 84  16 19 21  0 0 0  0 0 0
+1 1 1  5 5 5  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  6 6 6  3 3 3  0 0 0  4 0 0
+13 16 17  60 73 81  137 136 137  165 164 165  156 155 156  153 152 153
+174 174 174  177 184 187  60 73 81  3 1 0  0 0 0  1 1 2
+22 30 35  64 123 161  136 185 209  90 154 193  90 154 193  90 154 193
+90 154 193  21 29 34  0 0 0  3 2 2  4 4 5  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  5 5 5  3 3 3
+0 0 0  0 0 0  10 13 16  60 74 84  157 156 157  174 174 174
+174 174 174  158 157 158  153 152 153  154 153 154  156 155 156  155 154 155
+156 155 156  155 154 155  154 153 154  157 156 157  154 153 154  153 152 153
+163 162 163  174 174 174  177 184 187  137 136 137  60 73 81  13 16 17
+4 0 0  0 0 0  3 3 3  5 5 5  4 4 4  4 4 4
+5 5 5  4 4 4  1 1 1  0 0 0  3 3 3  41 54 63
+131 129 131  174 174 174  174 174 174  174 174 174  167 166 167  174 174 174
+190 197 201  137 136 137  24 26 27  4 0 0  16 21 25  50 82 103
+90 154 193  136 185 209  90 154 193  101 161 196  101 161 196  101 161 196
+31 91 132  3 6 7  0 0 0  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  2 2 2  0 0 0  4 0 0
+4 0 0  43 57 68  137 136 137  177 184 187  174 174 174  163 162 163
+155 154 155  155 154 155  156 155 156  155 154 155  158 157 158  165 164 165
+167 166 167  166 165 166  163 162 163  157 156 157  155 154 155  155 154 155
+153 152 153  156 155 156  167 166 167  174 174 174  174 174 174  131 129 131
+41 54 63  5 5 5  0 0 0  0 0 0  3 3 3  4 4 4
+1 1 1  0 0 0  1 0 0  26 28 28  125 124 125  174 174 174
+177 184 187  174 174 174  174 174 174  156 155 156  131 129 131  137 136 137
+125 124 125  24 26 27  4 0 0  41 65 82  90 154 193  136 185 209
+136 185 209  101 161 196  53 118 160  37 112 160  90 154 193  34 86 122
+7 12 15  0 0 0  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  3 3 3  0 0 0  0 0 0  5 5 5  37 38 37
+125 124 125  167 166 167  174 174 174  167 166 167  158 157 158  155 154 155
+156 155 156  156 155 156  156 155 156  163 162 163  167 166 167  155 154 155
+137 136 137  153 152 153  156 155 156  165 164 165  163 162 163  156 155 156
+156 155 156  156 155 156  155 154 155  158 157 158  166 165 166  174 174 174
+167 166 167  125 124 125  37 38 37  1 0 0  0 0 0  0 0 0
+0 0 0  24 26 27  60 74 84  158 157 158  174 174 174  174 174 174
+166 165 166  158 157 158  125 124 125  41 54 63  13 16 17  6 6 6
+6 6 6  37 38 37  80 127 157  136 185 209  101 161 196  101 161 196
+90 154 193  28 67 93  6 10 14  13 20 25  13 20 25  6 10 14
+1 1 2  4 3 3  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+1 1 1  1 0 0  4 3 3  37 38 37  60 74 84  153 152 153
+167 166 167  167 166 167  158 157 158  154 153 154  155 154 155  156 155 156
+157 156 157  158 157 158  167 166 167  167 166 167  131 129 131  43 57 68
+26 28 28  37 38 37  60 73 81  131 129 131  165 164 165  166 165 166
+158 157 158  155 154 155  156 155 156  156 155 156  156 155 156  158 157 158
+165 164 165  174 174 174  163 162 163  60 74 84  16 19 21  13 16 17
+60 73 81  131 129 131  174 174 174  174 174 174  167 166 167  165 164 165
+137 136 137  60 73 81  24 26 27  4 0 0  4 0 0  16 19 21
+52 104 138  101 161 196  136 185 209  136 185 209  90 154 193  27 99 146
+13 20 25  4 5 7  2 5 5  4 5 7  1 1 2  0 0 0
+4 4 4  4 4 4  3 3 3  2 2 2  2 2 2  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  3 3 3  0 0 0
+0 0 0  13 16 17  60 73 81  137 136 137  174 174 174  166 165 166
+158 157 158  156 155 156  157 156 157  156 155 156  155 154 155  158 157 158
+167 166 167  174 174 174  153 152 153  60 73 81  16 19 21  4 0 0
+4 0 0  4 0 0  6 6 6  26 28 28  60 74 84  158 157 158
+174 174 174  166 165 166  157 156 157  155 154 155  156 155 156  156 155 156
+155 154 155  158 157 158  167 166 167  167 166 167  131 129 131  125 124 125
+137 136 137  167 166 167  167 166 167  174 174 174  158 157 158  125 124 125
+16 19 21  4 0 0  4 0 0  10 13 16  49 76 92  107 159 188
+136 185 209  136 185 209  90 154 193  26 108 161  22 40 52  6 10 14
+2 3 3  1 1 2  1 1 2  4 4 5  4 4 5  4 4 5
+4 4 5  2 2 1  0 0 0  0 0 0  0 0 0  2 2 2
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  3 3 3  0 0 0  1 0 0  4 0 0
+37 51 59  131 129 131  167 166 167  167 166 167  163 162 163  157 156 157
+157 156 157  155 154 155  153 152 153  157 156 157  167 166 167  174 174 174
+153 152 153  125 124 125  37 38 37  4 0 0  4 0 0  4 0 0
+4 3 3  4 3 3  4 0 0  6 6 6  4 0 0  37 38 37
+125 124 125  174 174 174  174 174 174  165 164 165  156 155 156  154 153 154
+156 155 156  156 155 156  155 154 155  163 162 163  158 157 158  163 162 163
+174 174 174  174 174 174  174 174 174  125 124 125  37 38 37  0 0 0
+4 0 0  6 9 11  41 54 63  90 154 193  136 185 209  146 190 211
+136 185 209  37 112 160  22 40 52  6 10 14  3 6 7  1 1 2
+1 1 2  3 3 3  1 1 2  3 3 3  4 4 4  4 4 4
+2 2 2  2 0 0  16 19 21  37 38 37  24 26 27  0 0 0
+0 0 0  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  5 5 5  5 5 5
+4 4 4  0 0 0  0 0 0  0 0 0  26 28 28  120 125 127
+158 157 158  174 174 174  165 164 165  157 156 157  155 154 155  156 155 156
+153 152 153  153 152 153  167 166 167  174 174 174  174 174 174  125 124 125
+37 38 37  4 0 0  0 0 0  4 0 0  4 3 3  4 4 4
+4 4 4  4 4 4  5 5 5  4 0 0  4 0 0  4 0 0
+4 3 3  43 57 68  137 136 137  174 174 174  174 174 174  165 164 165
+154 153 154  153 152 153  153 152 153  153 152 153  163 162 163  174 174 174
+174 174 174  153 152 153  60 73 81  6 6 6  4 0 0  4 3 3
+32 43 50  80 127 157  136 185 209  146 190 211  146 190 211  90 154 193
+28 67 93  28 67 93  40 71 93  3 6 7  1 1 2  2 5 5
+50 82 103  79 117 143  26 37 45  0 0 0  3 3 3  1 1 1
+0 0 0  41 54 63  137 136 137  174 174 174  153 152 153  60 73 81
+2 0 0  0 0 0
+4 4 4  4 4 4  4 4 4  4 4 4  6 6 6  2 2 2
+0 0 0  2 0 0  24 26 27  60 74 84  153 152 153  174 174 174
+174 174 174  157 156 157  154 153 154  156 155 156  154 153 154  153 152 153
+165 164 165  174 174 174  177 184 187  137 136 137  43 57 68  6 6 6
+4 0 0  2 0 0  3 3 3  5 5 5  5 5 5  4 4 4
+4 4 4  4 4 4  4 4 4  5 5 5  6 6 6  4 3 3
+4 0 0  4 0 0  24 26 27  60 73 81  153 152 153  174 174 174
+174 174 174  158 157 158  158 157 158  174 174 174  174 174 174  158 157 158
+60 74 84  24 26 27  4 0 0  4 0 0  17 23 27  59 113 148
+136 185 209  191 222 234  146 190 211  136 185 209  31 91 132  7 11 13
+22 40 52  101 161 196  90 154 193  6 9 11  3 4 4  43 95 132
+136 185 209  172 205 220  55 98 126  0 0 0  0 0 0  2 0 0
+26 28 28  153 152 153  177 184 187  167 166 167  177 184 187  165 164 165
+37 38 37  0 0 0
+4 4 4  4 4 4  5 5 5  5 5 5  1 1 1  0 0 0
+13 16 17  60 73 81  137 136 137  174 174 174  174 174 174  165 164 165
+153 152 153  153 152 153  155 154 155  154 153 154  158 157 158  174 174 174
+177 184 187  163 162 163  60 73 81  16 19 21  4 0 0  4 0 0
+4 3 3  4 4 4  5 5 5  5 5 5  4 4 4  5 5 5
+5 5 5  5 5 5  5 5 5  4 4 4  4 4 4  5 5 5
+6 6 6  4 0 0  4 0 0  4 0 0  24 26 27  60 74 84
+166 165 166  174 174 174  177 184 187  165 164 165  125 124 125  24 26 27
+4 0 0  4 0 0  5 5 5  50 82 103  136 185 209  172 205 220
+146 190 211  136 185 209  26 108 161  22 40 52  7 12 15  44 81 103
+71 116 144  28 67 93  37 51 59  41 65 82  100 139 164  101 161 196
+90 154 193  90 154 193  28 67 93  0 0 0  0 0 0  26 28 28
+125 124 125  167 166 167  163 162 163  153 152 153  163 162 163  174 174 174
+85 115 134  4 0 0
+4 4 4  5 5 5  4 4 4  1 0 0  4 0 0  34 47 55
+125 124 125  174 174 174  174 174 174  167 166 167  157 156 157  153 152 153
+155 154 155  155 154 155  158 157 158  166 165 166  167 166 167  154 153 154
+125 124 125  26 28 28  4 0 0  4 0 0  4 0 0  5 5 5
+5 5 5  4 4 4  4 4 4  4 4 4  4 4 4  1 1 1
+0 0 0  0 0 0  1 1 1  4 4 4  4 4 4  4 4 4
+5 5 5  5 5 5  4 3 3  4 0 0  4 0 0  6 6 6
+37 38 37  131 129 131  137 136 137  37 38 37  0 0 0  4 0 0
+4 5 5  43 61 72  90 154 193  172 205 220  146 190 211  136 185 209
+90 154 193  28 67 93  13 20 25  43 61 72  71 116 144  44 81 103
+2 5 5  7 11 13  59 113 148  101 161 196  90 154 193  28 67 93
+13 20 25  6 10 14  0 0 0  13 16 17  60 73 81  137 136 137
+166 165 166  158 157 158  156 155 156  154 153 154  167 166 167  174 174 174
+60 73 81  4 0 0
+4 4 4  4 4 4  0 0 0  3 3 3  60 74 84  174 174 174
+174 174 174  167 166 167  163 162 163  155 154 155  157 156 157  155 154 155
+156 155 156  163 162 163  167 166 167  158 157 158  125 124 125  37 38 37
+4 3 3  4 0 0  4 0 0  6 6 6  6 6 6  5 5 5
+4 4 4  4 4 4  4 4 4  1 1 1  0 0 0  2 3 3
+10 13 16  7 11 13  1 0 0  0 0 0  2 2 1  4 4 4
+4 4 4  4 4 4  4 4 4  5 5 5  4 3 3  4 0 0
+4 0 0  7 11 13  13 16 17  4 0 0  3 3 3  34 47 55
+80 127 157  146 190 211  172 205 220  136 185 209  136 185 209  136 185 209
+28 67 93  22 40 52  55 98 126  55 98 126  21 29 34  7 11 13
+50 82 103  101 161 196  101 161 196  35 83 115  13 20 25  2 2 1
+1 1 2  1 1 2  37 51 59  131 129 131  174 174 174  174 174 174
+167 166 167  163 162 163  163 162 163  167 166 167  174 174 174  125 124 125
+16 19 21  4 0 0
+4 4 4  4 0 0  4 0 0  60 74 84  174 174 174  174 174 174
+158 157 158  155 154 155  155 154 155  156 155 156  155 154 155  158 157 158
+167 166 167  165 164 165  131 129 131  60 73 81  13 16 17  4 0 0
+4 0 0  4 3 3  6 6 6  4 3 3  5 5 5  4 4 4
+4 4 4  3 2 2  0 0 0  0 0 0  7 11 13  45 69 86
+80 127 157  71 116 144  43 61 72  7 11 13  0 0 0  1 1 1
+4 3 3  4 4 4  4 4 4  4 4 4  6 6 6  5 5 5
+3 2 2  4 0 0  1 0 0  21 29 34  59 113 148  136 185 209
+146 190 211  136 185 209  136 185 209  136 185 209  136 185 209  136 185 209
+68 124 159  44 81 103  22 40 52  13 16 17  43 61 72  90 154 193
+136 185 209  59 113 148  21 29 34  3 4 3  1 1 1  0 0 0
+24 26 27  125 124 125  163 162 163  174 174 174  166 165 166  165 164 165
+163 162 163  125 124 125  125 124 125  125 124 125  125 124 125  26 28 28
+4 0 0  4 3 3
+3 3 3  0 0 0  24 26 27  153 152 153  177 184 187  158 157 158
+156 155 156  156 155 156  155 154 155  155 154 155  165 164 165  174 174 174
+155 154 155  60 74 84  26 28 28  4 0 0  4 0 0  3 1 0
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 3 3
+2 0 0  0 0 0  0 0 0  32 43 50  72 125 159  101 161 196
+136 185 209  101 161 196  101 161 196  79 117 143  32 43 50  0 0 0
+0 0 0  2 2 2  4 4 4  4 4 4  3 3 3  1 0 0
+0 0 0  4 5 5  49 76 92  101 161 196  146 190 211  146 190 211
+136 185 209  136 185 209  136 185 209  136 185 209  136 185 209  90 154 193
+28 67 93  13 16 17  37 51 59  80 127 157  136 185 209  90 154 193
+22 40 52  6 9 11  3 4 3  2 2 1  16 19 21  60 73 81
+137 136 137  163 162 163  158 157 158  166 165 166  167 166 167  153 152 153
+60 74 84  37 38 37  6 6 6  13 16 17  4 0 0  1 0 0
+3 2 2  4 4 4
+3 2 2  4 0 0  37 38 37  137 136 137  167 166 167  158 157 158
+157 156 157  154 153 154  157 156 157  167 166 167  174 174 174  125 124 125
+37 38 37  4 0 0  4 0 0  4 0 0  4 3 3  4 4 4
+4 4 4  4 4 4  5 5 5  5 5 5  1 1 1  0 0 0
+0 0 0  16 21 25  55 98 126  90 154 193  136 185 209  101 161 196
+101 161 196  101 161 196  136 185 209  136 185 209  101 161 196  55 98 126
+14 17 19  0 0 0  0 0 0  0 0 0  0 0 0  0 0 0
+22 40 52  90 154 193  146 190 211  146 190 211  136 185 209  136 185 209
+136 185 209  136 185 209  136 185 209  101 161 196  35 83 115  7 11 13
+17 23 27  59 113 148  136 185 209  101 161 196  34 86 122  7 12 15
+2 5 5  3 4 3  6 6 6  60 73 81  131 129 131  163 162 163
+166 165 166  174 174 174  174 174 174  163 162 163  125 124 125  41 54 63
+13 16 17  4 0 0  4 0 0  4 0 0  1 0 0  2 2 2
+4 4 4  4 4 4
+1 1 1  2 1 0  43 57 68  137 136 137  153 152 153  153 152 153
+163 162 163  156 155 156  165 164 165  167 166 167  60 74 84  6 6 6
+4 0 0  4 0 0  5 5 5  4 4 4  4 4 4  4 4 4
+4 5 5  6 6 6  4 3 3  0 0 0  0 0 0  11 15 18
+40 71 93  100 139 164  101 161 196  101 161 196  101 161 196  101 161 196
+101 161 196  101 161 196  101 161 196  101 161 196  136 185 209  136 185 209
+101 161 196  45 69 86  6 6 6  0 0 0  17 23 27  55 98 126
+136 185 209  146 190 211  136 185 209  136 185 209  136 185 209  136 185 209
+136 185 209  136 185 209  90 154 193  22 40 52  7 11 13  50 82 103
+136 185 209  136 185 209  53 118 160  22 40 52  7 11 13  2 5 5
+3 4 3  37 38 37  125 124 125  157 156 157  166 165 166  167 166 167
+174 174 174  174 174 174  137 136 137  60 73 81  4 0 0  4 0 0
+4 0 0  4 0 0  5 5 5  3 3 3  3 3 3  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  41 54 63  137 136 137  125 124 125  131 129 131
+155 154 155  167 166 167  174 174 174  60 74 84  6 6 6  4 0 0
+4 3 3  6 6 6  4 4 4  4 4 4  4 4 4  5 5 5
+4 4 4  1 1 1  0 0 0  3 6 7  41 65 82  72 125 159
+101 161 196  101 161 196  101 161 196  90 154 193  90 154 193  101 161 196
+101 161 196  101 161 196  101 161 196  101 161 196  101 161 196  136 185 209
+136 185 209  136 185 209  80 127 157  55 98 126  101 161 196  146 190 211
+136 185 209  136 185 209  136 185 209  101 161 196  136 185 209  101 161 196
+136 185 209  101 161 196  35 83 115  22 30 35  101 161 196  172 205 220
+90 154 193  28 67 93  7 11 13  2 5 5  3 4 3  13 16 17
+85 115 134  167 166 167  174 174 174  174 174 174  174 174 174  174 174 174
+167 166 167  60 74 84  13 16 17  4 0 0  4 0 0  4 3 3
+6 6 6  5 5 5  4 4 4  5 5 5  4 4 4  5 5 5
+5 5 5  5 5 5
+1 1 1  4 0 0  41 54 63  137 136 137  137 136 137  125 124 125
+131 129 131  167 166 167  157 156 157  37 38 37  6 6 6  4 0 0
+6 6 6  5 5 5  4 4 4  4 4 4  4 5 5  2 2 1
+0 0 0  0 0 0  26 37 45  58 111 146  101 161 196  101 161 196
+101 161 196  90 154 193  90 154 193  90 154 193  101 161 196  101 161 196
+101 161 196  101 161 196  101 161 196  101 161 196  101 161 196  101 161 196
+101 161 196  136 185 209  136 185 209  136 185 209  146 190 211  136 185 209
+136 185 209  101 161 196  136 185 209  136 185 209  101 161 196  136 185 209
+101 161 196  136 185 209  136 185 209  136 185 209  136 185 209  16 89 141
+7 11 13  2 5 5  2 5 5  13 16 17  60 73 81  154 154 154
+174 174 174  174 174 174  174 174 174  174 174 174  163 162 163  125 124 125
+24 26 27  4 0 0  4 0 0  4 0 0  5 5 5  5 5 5
+4 4 4  4 4 4  4 4 4  5 5 5  5 5 5  5 5 5
+5 5 5  4 4 4
+4 0 0  6 6 6  37 38 37  137 136 137  137 136 137  131 129 131
+131 129 131  153 152 153  131 129 131  26 28 28  4 0 0  4 3 3
+6 6 6  4 4 4  4 4 4  4 4 4  0 0 0  0 0 0
+13 20 25  51 88 114  90 154 193  101 161 196  101 161 196  90 154 193
+90 154 193  90 154 193  90 154 193  90 154 193  90 154 193  101 161 196
+101 161 196  101 161 196  101 161 196  101 161 196  136 185 209  101 161 196
+101 161 196  136 185 209  101 161 196  136 185 209  136 185 209  101 161 196
+136 185 209  101 161 196  136 185 209  101 161 196  101 161 196  101 161 196
+136 185 209  136 185 209  136 185 209  37 112 160  21 29 34  5 7 8
+2 5 5  13 16 17  43 57 68  131 129 131  174 174 174  174 174 174
+174 174 174  167 166 167  157 156 157  125 124 125  37 38 37  4 0 0
+4 0 0  4 0 0  5 5 5  5 5 5  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+1 1 1  4 0 0  41 54 63  153 152 153  137 136 137  137 136 137
+137 136 137  153 152 153  125 124 125  24 26 27  4 0 0  3 2 2
+4 4 4  4 4 4  4 3 3  4 0 0  3 6 7  43 61 72
+64 123 161  101 161 196  90 154 193  90 154 193  90 154 193  90 154 193
+90 154 193  90 154 193  90 154 193  90 154 193  101 161 196  90 154 193
+101 161 196  101 161 196  101 161 196  101 161 196  101 161 196  101 161 196
+101 161 196  101 161 196  101 161 196  101 161 196  101 161 196  101 161 196
+136 185 209  101 161 196  101 161 196  136 185 209  136 185 209  101 161 196
+101 161 196  90 154 193  28 67 93  13 16 17  7 11 13  3 6 7
+37 51 59  125 124 125  163 162 163  174 174 174  167 166 167  166 165 166
+167 166 167  131 129 131  60 73 81  4 0 0  4 0 0  4 0 0
+3 3 3  5 5 5  6 6 6  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  41 54 63  137 136 137  153 152 153  137 136 137
+153 152 153  157 156 157  125 124 125  24 26 27  0 0 0  2 2 2
+4 4 4  4 4 4  2 0 0  0 0 0  28 67 93  90 154 193
+90 154 193  90 154 193  90 154 193  90 154 193  64 123 161  90 154 193
+90 154 193  90 154 193  90 154 193  90 154 193  90 154 193  101 161 196
+90 154 193  101 161 196  101 161 196  101 161 196  90 154 193  136 185 209
+101 161 196  101 161 196  136 185 209  101 161 196  136 185 209  101 161 196
+101 161 196  101 161 196  136 185 209  101 161 196  101 161 196  90 154 193
+35 83 115  13 16 17  3 6 7  2 5 5  13 16 17  60 74 84
+154 154 154  166 165 166  165 164 165  158 157 158  163 162 163  157 156 157
+60 74 84  13 16 17  4 0 0  4 0 0  3 2 2  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+1 1 1  4 0 0  41 54 63  157 156 157  155 154 155  137 136 137
+153 152 153  158 157 158  137 136 137  26 28 28  2 0 0  2 2 2
+4 4 4  4 4 4  1 0 0  6 10 14  34 86 122  90 154 193
+64 123 161  90 154 193  64 123 161  90 154 193  90 154 193  90 154 193
+64 123 161  90 154 193  90 154 193  90 154 193  90 154 193  90 154 193
+101 161 196  101 161 196  101 161 196  101 161 196  101 161 196  101 161 196
+101 161 196  101 161 196  101 161 196  101 161 196  101 161 196  101 161 196
+136 185 209  101 161 196  136 185 209  90 154 193  26 108 161  22 40 52
+13 16 17  5 7 8  2 5 5  2 5 5  37 38 37  165 164 165
+174 174 174  163 162 163  154 154 154  165 164 165  167 166 167  60 73 81
+6 6 6  4 0 0  4 0 0  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  6 6 6  41 54 63  156 155 156  158 157 158  153 152 153
+156 155 156  165 164 165  137 136 137  26 28 28  0 0 0  2 2 2
+4 4 5  4 4 4  2 0 0  7 12 15  31 96 139  64 123 161
+90 154 193  64 123 161  90 154 193  90 154 193  64 123 161  90 154 193
+90 154 193  90 154 193  90 154 193  90 154 193  90 154 193  90 154 193
+90 154 193  90 154 193  90 154 193  101 161 196  101 161 196  101 161 196
+101 161 196  101 161 196  101 161 196  101 161 196  101 161 196  136 185 209
+101 161 196  136 185 209  26 108 161  22 40 52  7 11 13  5 7 8
+2 5 5  2 5 5  2 5 5  2 2 1  37 38 37  158 157 158
+174 174 174  154 154 154  156 155 156  167 166 167  165 164 165  37 38 37
+4 0 0  4 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+3 1 0  4 0 0  60 73 81  157 156 157  163 162 163  153 152 153
+158 157 158  167 166 167  137 136 137  26 28 28  2 0 0  2 2 2
+4 5 5  4 4 4  4 0 0  7 12 15  24 86 132  26 108 161
+37 112 160  64 123 161  90 154 193  64 123 161  90 154 193  90 154 193
+90 154 193  90 154 193  90 154 193  90 154 193  90 154 193  90 154 193
+90 154 193  101 161 196  90 154 193  101 161 196  101 161 196  101 161 196
+101 161 196  101 161 196  101 161 196  136 185 209  101 161 196  136 185 209
+90 154 193  35 83 115  13 16 17  13 16 17  7 11 13  3 6 7
+5 7 8  6 6 6  3 4 3  2 2 1  30 32 34  154 154 154
+167 166 167  154 154 154  154 154 154  174 174 174  165 164 165  37 38 37
+6 6 6  4 0 0  6 6 6  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  41 54 63  163 162 163  166 165 166  154 154 154
+163 162 163  174 174 174  137 136 137  26 28 28  0 0 0  2 2 2
+4 5 5  4 4 5  1 1 2  6 10 14  28 67 93  18 97 151
+18 97 151  18 97 151  26 108 161  37 112 160  37 112 160  90 154 193
+64 123 161  90 154 193  90 154 193  90 154 193  90 154 193  101 161 196
+90 154 193  101 161 196  101 161 196  90 154 193  101 161 196  101 161 196
+101 161 196  101 161 196  101 161 196  136 185 209  90 154 193  16 89 141
+13 20 25  7 11 13  5 7 8  5 7 8  2 5 5  4 5 5
+3 4 3  4 5 5  3 4 3  0 0 0  37 38 37  158 157 158
+174 174 174  158 157 158  158 157 158  167 166 167  174 174 174  41 54 63
+4 0 0  3 2 2  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+1 1 1  4 0 0  60 73 81  165 164 165  174 174 174  158 157 158
+167 166 167  174 174 174  153 152 153  26 28 28  2 0 0  2 2 2
+4 5 5  4 4 4  4 0 0  7 12 15  10 87 144  10 87 144
+18 97 151  18 97 151  18 97 151  26 108 161  26 108 161  26 108 161
+26 108 161  37 112 160  53 118 160  90 154 193  90 154 193  90 154 193
+90 154 193  90 154 193  101 161 196  101 161 196  101 161 196  101 161 196
+101 161 196  136 185 209  90 154 193  26 108 161  22 40 52  13 16 17
+7 11 13  3 6 7  5 7 8  5 7 8  2 5 5  4 5 5
+4 5 5  6 6 6  3 4 3  0 0 0  30 32 34  158 157 158
+174 174 174  156 155 156  155 154 155  165 164 165  154 153 154  37 38 37
+4 0 0  4 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  60 73 81  167 166 167  174 174 174  163 162 163
+174 174 174  174 174 174  153 152 153  26 28 28  0 0 0  3 3 3
+5 5 5  4 4 4  1 1 2  7 12 15  28 67 93  18 97 151
+18 97 151  18 97 151  18 97 151  18 97 151  18 97 151  26 108 161
+26 108 161  26 108 161  26 108 161  26 108 161  26 108 161  26 108 161
+90 154 193  26 108 161  90 154 193  90 154 193  90 154 193  101 161 196
+101 161 196  26 108 161  22 40 52  13 16 17  7 11 13  2 5 5
+2 5 5  6 6 6  2 5 5  4 5 5  4 5 5  4 5 5
+3 4 3  5 5 5  3 4 3  2 0 0  30 32 34  137 136 137
+153 152 153  137 136 137  131 129 131  137 136 137  131 129 131  37 38 37
+4 0 0  4 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+1 1 1  4 0 0  60 73 81  167 166 167  174 174 174  166 165 166
+174 174 174  177 184 187  153 152 153  30 32 34  1 0 0  3 3 3
+5 5 5  4 3 3  4 0 0  7 12 15  10 87 144  10 87 144
+18 97 151  18 97 151  18 97 151  26 108 161  26 108 161  26 108 161
+26 108 161  26 108 161  26 108 161  26 108 161  26 108 161  26 108 161
+26 108 161  26 108 161  26 108 161  90 154 193  90 154 193  26 108 161
+35 83 115  13 16 17  7 11 13  5 7 8  3 6 7  5 7 8
+2 5 5  6 6 6  4 5 5  4 5 5  3 4 3  4 5 5
+3 4 3  6 6 6  3 4 3  0 0 0  26 28 28  125 124 125
+131 129 131  125 124 125  125 124 125  131 129 131  131 129 131  37 38 37
+4 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+3 1 0  4 0 0  60 73 81  174 174 174  177 184 187  167 166 167
+174 174 174  177 184 187  153 152 153  30 32 34  0 0 0  3 3 3
+5 5 5  4 4 4  1 1 2  6 10 14  28 67 93  18 97 151
+18 97 151  18 97 151  18 97 151  18 97 151  18 97 151  26 108 161
+26 108 161  26 108 161  26 108 161  26 108 161  26 108 161  26 108 161
+26 108 161  90 154 193  26 108 161  26 108 161  24 86 132  13 20 25
+7 11 13  13 20 25  22 40 52  5 7 8  3 4 3  3 4 3
+4 5 5  3 4 3  4 5 5  3 4 3  4 5 5  3 4 3
+4 4 4  5 5 5  3 3 3  2 0 0  26 28 28  125 124 125
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+1 1 1  4 0 0  60 73 81  174 174 174  177 184 187  174 174 174
+174 174 174  190 197 201  157 156 157  30 32 34  1 0 0  3 3 3
+5 5 5  4 3 3  4 0 0  7 12 15  10 87 144  10 87 144
+18 97 151  19 95 150  19 95 150  18 97 151  18 97 151  26 108 161
+18 97 151  26 108 161  26 108 161  26 108 161  26 108 161  90 154 193
+26 108 161  26 108 161  26 108 161  22 40 52  2 5 5  3 4 3
+28 67 93  37 112 160  34 86 122  2 5 5  3 4 3  3 4 3
+3 4 3  3 4 3  3 4 3  2 2 1  3 4 3  4 4 4
+4 5 5  5 5 5  3 3 3  0 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  60 73 81  174 174 174  177 184 187  174 174 174
+174 174 174  190 197 201  158 157 158  30 32 34  0 0 0  2 2 2
+5 5 5  4 4 4  1 1 2  6 10 14  28 67 93  18 97 151
+10 87 144  19 95 150  19 95 150  18 97 151  18 97 151  18 97 151
+26 108 161  26 108 161  26 108 161  26 108 161  26 108 161  26 108 161
+18 97 151  22 40 52  2 5 5  2 2 1  22 40 52  26 108 161
+90 154 193  37 112 160  22 40 52  3 4 3  13 20 25  22 30 35
+3 6 7  1 1 1  2 2 2  6 9 11  5 5 5  4 3 3
+4 4 4  5 5 5  3 3 3  2 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+1 1 1  4 0 0  60 73 81  177 184 187  193 200 203  174 174 174
+177 184 187  193 200 203  163 162 163  30 32 34  4 0 0  2 2 2
+5 5 5  4 3 3  4 0 0  6 10 14  24 86 132  10 87 144
+10 87 144  10 87 144  19 95 150  19 95 150  19 95 150  18 97 151
+26 108 161  26 108 161  26 108 161  90 154 193  26 108 161  28 67 93
+6 10 14  2 5 5  13 20 25  24 86 132  37 112 160  90 154 193
+10 87 144  7 12 15  2 5 5  28 67 93  37 112 160  28 67 93
+2 2 1  7 12 15  35 83 115  28 67 93  3 6 7  1 0 0
+4 4 4  5 5 5  3 3 3  0 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  60 73 81  174 174 174  190 197 201  174 174 174
+177 184 187  193 200 203  163 162 163  30 32 34  0 0 0  2 2 2
+5 5 5  4 4 4  1 1 2  6 10 14  28 67 93  10 87 144
+10 87 144  16 89 141  19 95 150  10 87 144  26 108 161  26 108 161
+26 108 161  26 108 161  26 108 161  28 67 93  6 10 14  1 1 2
+7 12 15  28 67 93  26 108 161  16 89 141  24 86 132  21 29 34
+3 4 3  21 29 34  37 112 160  37 112 160  27 99 146  21 29 34
+21 29 34  26 108 161  90 154 193  35 83 115  1 1 2  2 0 0
+4 4 4  5 5 5  3 3 3  2 0 0  26 28 28  125 124 125
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+3 1 0  4 0 0  60 73 81  193 200 203  193 200 203  174 174 174
+190 197 201  193 200 203  165 164 165  37 38 37  4 0 0  2 2 2
+5 5 5  4 3 3  4 0 0  6 10 14  24 86 132  10 87 144
+10 87 144  10 87 144  16 89 141  18 97 151  18 97 151  10 87 144
+24 86 132  24 86 132  13 20 25  4 5 7  4 5 7  22 40 52
+18 97 151  37 112 160  26 108 161  7 12 15  1 1 1  0 0 0
+28 67 93  37 112 160  26 108 161  28 67 93  22 40 52  28 67 93
+26 108 161  90 154 193  26 108 161  10 87 144  0 0 0  2 0 0
+4 4 4  5 5 5  3 3 3  0 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  6 6 6  60 73 81  174 174 174  193 200 203  174 174 174
+190 197 201  193 200 203  165 164 165  30 32 34  0 0 0  2 2 2
+5 5 5  4 4 4  1 1 2  6 10 14  28 67 93  10 87 144
+10 87 144  10 87 144  10 87 144  18 97 151  28 67 93  6 10 14
+0 0 0  1 1 2  4 5 7  13 20 25  16 89 141  26 108 161
+26 108 161  26 108 161  24 86 132  6 9 11  2 3 3  22 40 52
+37 112 160  16 89 141  22 40 52  28 67 93  26 108 161  26 108 161
+90 154 193  26 108 161  26 108 161  28 67 93  1 1 1  4 0 0
+4 4 4  5 5 5  3 3 3  4 0 0  26 28 28  124 126 130
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  60 73 81  193 200 203  193 200 203  174 174 174
+193 200 203  193 200 203  167 166 167  37 38 37  4 0 0  2 2 2
+5 5 5  4 4 4  4 0 0  6 10 14  28 67 93  10 87 144
+10 87 144  10 87 144  18 97 151  10 87 144  13 20 25  4 5 7
+1 1 2  1 1 1  22 40 52  26 108 161  26 108 161  26 108 161
+26 108 161  26 108 161  26 108 161  24 86 132  22 40 52  22 40 52
+22 40 52  22 40 52  10 87 144  26 108 161  26 108 161  26 108 161
+26 108 161  26 108 161  90 154 193  10 87 144  0 0 0  4 0 0
+4 4 4  5 5 5  3 3 3  0 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  6 6 6  60 73 81  174 174 174  220 221 221  174 174 174
+190 197 201  205 212 215  167 166 167  30 32 34  0 0 0  2 2 2
+5 5 5  4 4 4  1 1 2  6 10 14  28 67 93  10 87 144
+10 87 144  10 87 144  10 87 144  10 87 144  22 40 52  1 1 2
+2 0 0  1 1 2  24 86 132  26 108 161  26 108 161  26 108 161
+26 108 161  19 95 150  16 89 141  10 87 144  22 40 52  22 40 52
+10 87 144  26 108 161  37 112 160  26 108 161  26 108 161  26 108 161
+26 108 161  26 108 161  26 108 161  28 67 93  2 0 0  3 1 0
+4 4 4  5 5 5  3 3 3  2 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  60 73 81  220 221 221  190 197 201  174 174 174
+193 200 203  193 200 203  174 174 174  37 38 37  4 0 0  2 2 2
+5 5 5  4 4 4  3 2 2  1 1 2  13 20 25  10 87 144
+10 87 144  10 87 144  10 87 144  10 87 144  10 87 144  13 20 25
+13 20 25  22 40 52  10 87 144  18 97 151  18 97 151  26 108 161
+10 87 144  13 20 25  6 10 14  21 29 34  24 86 132  18 97 151
+26 108 161  26 108 161  26 108 161  26 108 161  26 108 161  26 108 161
+26 108 161  90 154 193  18 97 151  13 20 25  0 0 0  4 3 3
+4 4 4  5 5 5  3 3 3  0 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  6 6 6  60 73 81  174 174 174  220 221 221  174 174 174
+190 197 201  220 221 221  167 166 167  30 32 34  1 0 0  2 2 2
+5 5 5  4 4 4  4 4 5  2 5 5  4 5 7  13 20 25
+28 67 93  10 87 144  10 87 144  10 87 144  10 87 144  10 87 144
+10 87 144  10 87 144  18 97 151  10 87 144  18 97 151  18 97 151
+28 67 93  2 3 3  0 0 0  28 67 93  26 108 161  26 108 161
+26 108 161  26 108 161  26 108 161  26 108 161  26 108 161  26 108 161
+26 108 161  10 87 144  13 20 25  1 1 2  3 2 2  4 4 4
+4 4 4  5 5 5  3 3 3  2 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  60 73 81  220 221 221  190 197 201  174 174 174
+193 200 203  193 200 203  174 174 174  26 28 28  4 0 0  4 3 3
+5 5 5  4 4 4  4 4 4  4 4 5  1 1 2  2 5 5
+4 5 7  22 40 52  10 87 144  10 87 144  18 97 151  10 87 144
+10 87 144  10 87 144  10 87 144  10 87 144  10 87 144  18 97 151
+10 87 144  28 67 93  22 40 52  10 87 144  26 108 161  18 97 151
+18 97 151  18 97 151  26 108 161  26 108 161  26 108 161  26 108 161
+22 40 52  1 1 2  0 0 0  2 3 3  4 4 4  4 4 4
+4 4 4  5 5 5  4 4 4  0 0 0  26 28 28  131 129 131
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  6 6 6  60 73 81  174 174 174  220 221 221  174 174 174
+190 197 201  220 221 221  190 197 201  41 54 63  4 0 0  2 2 2
+6 6 6  4 4 4  4 4 4  4 4 5  4 4 5  3 3 3
+1 1 2  1 1 2  6 10 14  22 40 52  10 87 144  18 97 151
+18 97 151  10 87 144  10 87 144  10 87 144  18 97 151  10 87 144
+10 87 144  18 97 151  26 108 161  18 97 151  18 97 151  10 87 144
+26 108 161  26 108 161  26 108 161  10 87 144  28 67 93  6 10 14
+1 1 2  1 1 2  4 3 3  4 4 5  4 4 4  4 4 4
+5 5 5  5 5 5  1 1 1  4 0 0  37 51 59  137 136 137
+137 136 137  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  4 0 0  60 73 81  220 221 221  193 200 203  174 174 174
+193 200 203  193 200 203  220 221 221  137 136 137  13 16 17  4 0 0
+2 2 2  4 4 4  4 4 4  4 4 4  4 4 4  4 4 5
+4 4 5  4 3 3  1 1 2  4 5 7  13 20 25  28 67 93
+10 87 144  10 87 144  10 87 144  10 87 144  10 87 144  10 87 144
+10 87 144  18 97 151  18 97 151  10 87 144  18 97 151  26 108 161
+26 108 161  18 97 151  28 67 93  6 10 14  0 0 0  0 0 0
+2 3 3  4 5 5  4 4 5  4 4 4  4 4 4  5 5 5
+3 3 3  1 1 1  0 0 0  16 19 21  125 124 125  137 136 137
+131 129 131  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  6 6 6  60 73 81  174 174 174  220 221 221  174 174 174
+193 200 203  190 197 201  220 221 221  220 221 221  153 152 153  30 32 34
+0 0 0  0 0 0  2 2 2  4 4 4  4 4 4  4 4 4
+4 4 4  4 5 5  4 5 7  1 1 2  1 1 2  4 5 7
+13 20 25  28 67 93  10 87 144  18 97 151  10 87 144  10 87 144
+10 87 144  10 87 144  10 87 144  18 97 151  26 108 161  18 97 151
+28 67 93  7 12 15  0 0 0  0 0 0  2 2 1  4 4 4
+4 5 5  4 5 5  4 4 4  4 4 4  3 3 3  0 0 0
+0 0 0  0 0 0  37 38 37  125 124 125  158 157 158  131 129 131
+125 124 125  125 124 125  125 124 125  137 136 137  131 129 131  37 38 37
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 3 3  4 0 0  41 54 63  193 200 203  220 221 221  174 174 174
+193 200 203  193 200 203  193 200 203  220 221 221  244 246 246  193 200 203
+120 125 127  5 5 5  1 0 0  0 0 0  1 1 1  4 4 4
+4 4 4  4 4 4  4 5 5  4 5 5  4 4 5  1 1 2
+4 5 7  4 5 7  22 40 52  10 87 144  10 87 144  10 87 144
+10 87 144  10 87 144  18 97 151  10 87 144  10 87 144  13 20 25
+4 5 7  2 3 3  1 1 2  4 4 4  4 5 5  4 4 4
+4 4 4  4 4 4  4 4 4  1 1 1  0 0 0  1 1 2
+24 26 27  60 74 84  153 152 153  163 162 163  137 136 137  125 124 125
+125 124 125  125 124 125  125 124 125  137 136 137  125 124 125  26 28 28
+0 0 0  3 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 0 0  6 6 6  26 28 28  156 155 156  220 221 221  220 221 221
+174 174 174  193 200 203  193 200 203  193 200 203  205 212 215  220 221 221
+220 221 221  167 166 167  60 73 81  7 11 13  0 0 0  0 0 0
+3 3 3  4 4 4  4 4 4  4 4 4  4 4 5  4 4 5
+4 4 5  1 1 2  1 1 2  4 5 7  22 40 52  10 87 144
+10 87 144  10 87 144  10 87 144  22 40 52  4 5 7  1 1 2
+1 1 2  4 4 5  4 4 4  4 4 4  4 4 4  4 4 4
+5 5 5  2 2 2  0 0 0  4 0 0  16 19 21  60 73 81
+137 136 137  167 166 167  158 157 158  137 136 137  131 129 131  131 129 131
+125 124 125  125 124 125  131 129 131  155 154 155  60 74 84  5 7 8
+0 0 0  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+5 5 5  4 0 0  4 0 0  60 73 81  193 200 203  220 221 221
+193 200 203  193 200 203  193 200 203  193 200 203  205 212 215  220 221 221
+220 221 221  220 221 221  220 221 221  137 136 137  43 57 68  6 6 6
+4 0 0  1 1 1  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 5  4 4 5  3 2 2  1 1 2  2 5 5  13 20 25
+22 40 52  22 40 52  13 20 25  2 3 3  1 1 2  3 3 3
+4 5 7  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+1 1 1  0 0 0  2 3 3  41 54 63  131 129 131  166 165 166
+166 165 166  155 154 155  153 152 153  137 136 137  137 136 137  125 124 125
+125 124 125  137 136 137  137 136 137  125 124 125  37 38 37  4 3 3
+4 3 3  5 5 5  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 3 3  6 6 6  6 6 6  13 16 17  60 73 81  167 166 167
+220 221 221  220 221 221  220 221 221  193 200 203  193 200 203  193 200 203
+205 212 215  220 221 221  220 221 221  244 246 246  205 212 215  125 124 125
+24 26 27  0 0 0  0 0 0  2 2 2  5 5 5  5 5 5
+4 4 4  4 4 4  4 4 4  4 4 5  1 1 2  4 5 7
+4 5 7  4 5 7  1 1 2  3 2 2  4 4 5  4 4 4
+4 4 4  4 4 4  5 5 5  4 4 4  0 0 0  0 0 0
+2 0 0  26 28 28  125 124 125  174 174 174  174 174 174  166 165 166
+156 155 156  153 152 153  137 136 137  137 136 137  131 129 131  137 136 137
+137 136 137  137 136 137  60 74 84  30 32 34  4 0 0  4 0 0
+5 5 5  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+5 5 5  6 6 6  4 0 0  4 0 0  6 6 6  26 28 28
+125 124 125  174 174 174  220 221 221  220 221 221  220 221 221  193 200 203
+205 212 215  220 221 221  205 212 215  220 221 221  220 221 221  244 246 246
+193 200 203  60 74 84  13 16 17  4 0 0  0 0 0  3 3 3
+5 5 5  5 5 5  4 4 4  4 4 4  4 4 5  3 3 3
+1 1 2  3 3 3  4 4 5  4 4 5  4 4 4  4 4 4
+5 5 5  5 5 5  2 2 2  0 0 0  0 0 0  13 16 17
+60 74 84  174 174 174  193 200 203  174 174 174  167 166 167  163 162 163
+153 152 153  153 152 153  137 136 137  137 136 137  153 152 153  137 136 137
+125 124 125  41 54 63  24 26 27  4 0 0  4 0 0  5 5 5
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 3 3  6 6 6  6 6 6  6 6 6  6 6 6  6 6 6
+6 6 6  37 38 37  131 129 131  220 221 221  220 221 221  220 221 221
+193 200 203  193 200 203  220 221 221  205 212 215  220 221 221  244 246 246
+244 246 246  244 246 246  174 174 174  41 54 63  0 0 0  0 0 0
+0 0 0  4 4 4  5 5 5  5 5 5  4 4 4  4 4 5
+4 4 5  4 4 5  4 4 4  4 4 4  6 6 6  6 6 6
+3 3 3  0 0 0  2 0 0  13 16 17  60 73 81  156 155 156
+220 221 221  193 200 203  174 174 174  165 164 165  163 162 163  154 153 154
+153 152 153  153 152 153  158 157 158  163 162 163  137 136 137  60 73 81
+13 16 17  4 0 0  4 0 0  4 3 3  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+5 5 5  4 3 3  4 3 3  6 6 6  6 6 6  6 6 6
+6 6 6  6 6 6  6 6 6  37 38 37  167 166 167  244 246 246
+244 246 246  220 221 221  205 212 215  205 212 215  220 221 221  193 200 203
+220 221 221  244 246 246  244 246 246  244 246 246  137 136 137  37 38 37
+3 2 2  0 0 0  1 1 1  5 5 5  5 5 5  4 4 4
+4 4 4  4 4 4  4 4 4  5 5 5  4 4 4  1 1 1
+0 0 0  5 5 5  43 57 68  153 152 153  193 200 203  220 221 221
+177 184 187  174 174 174  167 166 167  166 165 166  158 157 158  157 156 157
+158 157 158  166 165 166  156 155 156  85 115 134  13 16 17  4 0 0
+4 0 0  4 0 0  5 5 5  5 5 5  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+5 5 5  4 3 3  6 6 6  6 6 6  4 0 0  6 6 6
+6 6 6  6 6 6  6 6 6  6 6 6  13 16 17  60 73 81
+177 184 187  220 221 221  220 221 221  220 221 221  205 212 215  220 221 221
+220 221 221  205 212 215  220 221 221  244 246 246  244 246 246  205 212 215
+125 124 125  30 32 34  0 0 0  0 0 0  2 2 2  5 5 5
+4 4 4  4 4 4  4 4 4  1 1 1  0 0 0  1 0 0
+37 38 37  131 129 131  205 212 215  220 221 221  193 200 203  174 174 174
+174 174 174  174 174 174  167 166 167  165 164 165  166 165 166  167 166 167
+158 157 158  125 124 125  37 38 37  4 0 0  4 0 0  4 0 0
+4 3 3  5 5 5  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  5 5 5  4 3 3  4 3 3  6 6 6  6 6 6
+4 0 0  6 6 6  6 6 6  6 6 6  6 6 6  6 6 6
+26 28 28  125 124 125  205 212 215  220 221 221  220 221 221  220 221 221
+205 212 215  220 221 221  205 212 215  220 221 221  220 221 221  244 246 246
+244 246 246  190 197 201  60 74 84  16 19 21  4 0 0  0 0 0
+0 0 0  0 0 0  0 0 0  0 0 0  16 19 21  120 125 127
+177 184 187  220 221 221  205 212 215  177 184 187  174 174 174  177 184 187
+174 174 174  174 174 174  167 166 167  174 174 174  166 165 166  137 136 137
+60 73 81  13 16 17  4 0 0  4 0 0  4 3 3  6 6 6
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+5 5 5  4 3 3  5 5 5  4 3 3  6 6 6  4 0 0
+6 6 6  6 6 6  4 0 0  6 6 6  4 0 0  6 6 6
+6 6 6  6 6 6  37 38 37  137 136 137  193 200 203  220 221 221
+220 221 221  205 212 215  220 221 221  205 212 215  205 212 215  220 221 221
+220 221 221  220 221 221  244 246 246  166 165 166  43 57 68  2 2 2
+0 0 0  4 0 0  16 19 21  60 73 81  157 156 157  202 210 214
+220 221 221  193 200 203  177 184 187  177 184 187  177 184 187  174 174 174
+174 174 174  174 174 174  174 174 174  157 156 157  60 74 84  24 26 27
+4 0 0  4 0 0  4 0 0  6 6 6  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  5 5 5  4 3 3  5 5 5  6 6 6
+6 6 6  4 0 0  6 6 6  6 6 6  6 6 6  4 0 0
+4 0 0  4 0 0  6 6 6  24 26 27  60 73 81  167 166 167
+220 221 221  220 221 221  220 221 221  205 212 215  205 212 215  205 212 215
+205 212 215  220 221 221  220 221 221  220 221 221  205 212 215  137 136 137
+60 74 84  125 124 125  137 136 137  190 197 201  220 221 221  193 200 203
+177 184 187  177 184 187  177 184 187  174 174 174  174 174 174  177 184 187
+190 197 201  174 174 174  125 124 125  37 38 37  6 6 6  4 0 0
+4 0 0  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  5 5 5  5 5 5  4 3 3  6 6 6
+4 0 0  6 6 6  6 6 6  6 6 6  4 0 0  6 6 6
+6 6 6  6 6 6  4 0 0  4 0 0  6 6 6  6 6 6
+125 124 125  193 200 203  244 246 246  220 221 221  205 212 215  205 212 215
+205 212 215  193 200 203  205 212 215  205 212 215  220 221 221  220 221 221
+193 200 203  193 200 203  205 212 215  193 200 203  193 200 203  177 184 187
+190 197 201  190 197 201  174 174 174  190 197 201  193 200 203  190 197 201
+153 152 153  60 73 81  4 0 0  4 0 0  4 0 0  3 2 2
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  5 5 5  4 3 3
+6 6 6  4 3 3  4 3 3  4 3 3  6 6 6  6 6 6
+4 0 0  6 6 6  6 6 6  6 6 6  4 0 0  4 0 0
+4 0 0  26 28 28  131 129 131  220 221 221  244 246 246  220 221 221
+205 212 215  193 200 203  205 212 215  193 200 203  193 200 203  205 212 215
+220 221 221  193 200 203  193 200 203  193 200 203  190 197 201  174 174 174
+174 174 174  190 197 201  193 200 203  193 200 203  167 166 167  125 124 125
+6 6 6  4 0 0  4 0 0  4 3 3  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  5 5 5
+5 5 5  4 3 3  5 5 5  6 6 6  4 3 3  5 5 5
+6 6 6  6 6 6  4 0 0  6 6 6  6 6 6  6 6 6
+4 0 0  4 0 0  6 6 6  41 54 63  158 157 158  220 221 221
+220 221 221  220 221 221  193 200 203  193 200 203  193 200 203  190 197 201
+190 197 201  190 197 201  190 197 201  190 197 201  174 174 174  193 200 203
+193 200 203  220 221 221  174 174 174  125 124 125  37 38 37  4 0 0
+4 0 0  4 3 3  6 6 6  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  4 3 3  4 3 3  4 3 3  5 5 5
+4 3 3  6 6 6  5 5 5  4 3 3  6 6 6  6 6 6
+6 6 6  6 6 6  4 0 0  4 0 0  13 16 17  60 73 81
+174 174 174  220 221 221  220 221 221  205 212 215  190 197 201  174 174 174
+193 200 203  174 174 174  190 197 201  174 174 174  193 200 203  220 221 221
+193 200 203  131 129 131  37 38 37  6 6 6  4 0 0  4 0 0
+6 6 6  6 6 6  4 3 3  5 5 5  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  5 5 5  5 5 5  5 5 5
+5 5 5  4 3 3  4 3 3  5 5 5  4 3 3  4 3 3
+5 5 5  6 6 6  6 6 6  4 0 0  6 6 6  6 6 6
+6 6 6  125 124 125  174 174 174  220 221 221  220 221 221  193 200 203
+193 200 203  193 200 203  193 200 203  193 200 203  220 221 221  158 157 158
+60 73 81  6 6 6  4 0 0  4 0 0  5 5 5  6 6 6
+5 5 5  5 5 5  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  5 5 5  4 3 3  5 5 5  4 3 3
+5 5 5  5 5 5  6 6 6  6 6 6  4 0 0  4 0 0
+4 0 0  4 0 0  26 28 28  125 124 125  174 174 174  193 200 203
+193 200 203  174 174 174  193 200 203  167 166 167  125 124 125  6 6 6
+6 6 6  6 6 6  4 0 0  6 6 6  6 6 6  5 5 5
+4 3 3  5 5 5  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  5 5 5
+4 3 3  6 6 6  4 0 0  6 6 6  6 6 6  6 6 6
+6 6 6  4 0 0  4 0 0  6 6 6  37 38 37  125 124 125
+153 152 153  131 129 131  125 124 125  37 38 37  6 6 6  6 6 6
+6 6 6  4 0 0  6 6 6  6 6 6  4 3 3  5 5 5
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  5 5 5  4 3 3  5 5 5  4 3 3
+6 6 6  6 6 6  4 0 0  4 0 0  6 6 6  6 6 6
+24 26 27  24 26 27  6 6 6  6 6 6  6 6 6  4 0 0
+6 6 6  6 6 6  4 0 0  6 6 6  5 5 5  4 3 3
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  5 5 5  4 3 3  5 5 5  6 6 6
+4 0 0  6 6 6  6 6 6  6 6 6  6 6 6  6 6 6
+6 6 6  6 6 6  6 6 6  4 0 0  6 6 6  6 6 6
+4 0 0  6 6 6  6 6 6  4 3 3  5 5 5  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  5 5 5  4 3 3  5 5 5
+5 5 5  5 5 5  4 0 0  6 6 6  4 0 0  6 6 6
+6 6 6  6 6 6  6 6 6  4 0 0  6 6 6  4 0 0
+6 6 6  4 3 3  5 5 5  4 3 3  5 5 5  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  5 5 5
+4 3 3  6 6 6  4 3 3  6 6 6  6 6 6  6 6 6
+4 0 0  6 6 6  4 0 0  6 6 6  6 6 6  6 6 6
+6 6 6  4 3 3  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  4 3 3  5 5 5  4 0 0  6 6 6
+6 6 6  4 0 0  6 6 6  6 6 6  4 0 0  6 6 6
+4 3 3  5 5 5  5 5 5  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  5 5 5  4 3 3  5 5 5  6 6 6  4 3 3
+4 3 3  6 6 6  6 6 6  4 3 3  6 6 6  4 3 3
+5 5 5  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  5 5 5  4 3 3  6 6 6
+5 5 5  4 3 3  4 3 3  4 3 3  5 5 5  5 5 5
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  5 5 5  4 3 3
+5 5 5  4 3 3  5 5 5  5 5 5  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4  4 4 4  4 4 4  4 4 4  4 4 4
+4 4 4  4 4 4
diff --git a/drivers/xen/xenfs/xenstored.c b/drivers/xen/xenfs/xenstored.c
index fef20dbc6a5c..d28b1aba63bb 100644
--- a/drivers/xen/xenfs/xenstored.c
+++ b/drivers/xen/xenfs/xenstored.c
@@ -24,7 +24,12 @@ static int xsd_release(struct inode *inode, struct file *file)
 static int xsd_kva_open(struct inode *inode, struct file *file)
 {
 	file->private_data = (void *)kasprintf(GFP_KERNEL, "0x%p",
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+					       NULL);
+#else
 					       xen_store_interface);
+#endif
+
 	if (!file->private_data)
 		return -ENOMEM;
 	return 0;
diff --git a/firmware/Makefile b/firmware/Makefile
index e297e1b52636..aeb0982c5013 100644
--- a/firmware/Makefile
+++ b/firmware/Makefile
@@ -35,9 +35,11 @@ fw-shipped-$(CONFIG_BNX2X) += bnx2x/bnx2x-e1-6.2.9.0.fw \
 			      bnx2x/bnx2x-e1h-6.2.9.0.fw \
 			      bnx2x/bnx2x-e2-6.2.9.0.fw
 fw-shipped-$(CONFIG_BNX2) += bnx2/bnx2-mips-09-6.2.1a.fw \
+			     bnx2/bnx2-mips-09-6.2.1b.fw \
 			     bnx2/bnx2-rv2p-09-6.0.17.fw \
 			     bnx2/bnx2-rv2p-09ax-6.0.17.fw \
 			     bnx2/bnx2-mips-06-6.2.1.fw \
+			     bnx2/bnx2-mips-06-6.2.3.fw \
 			     bnx2/bnx2-rv2p-06-6.0.15.fw
 fw-shipped-$(CONFIG_CASSINI) += sun/cassini.bin
 fw-shipped-$(CONFIG_CHELSIO_T3) += cxgb3/t3b_psram-1.1.0.bin \
diff --git a/firmware/WHENCE b/firmware/WHENCE
index de6f22e008f1..51fbae7f0509 100644
--- a/firmware/WHENCE
+++ b/firmware/WHENCE
@@ -653,21 +653,23 @@ Found in hex form in kernel source.
 Driver: BNX2 - Broadcom NetXtremeII
 
 File: bnx2/bnx2-mips-06-6.2.1.fw
+File: bnx2/bnx2-mips-06-6.2.3.fw
 File: bnx2/bnx2-rv2p-06-6.0.15.fw
 File: bnx2/bnx2-mips-09-6.2.1a.fw
+File: bnx2/bnx2-mips-09-6.2.1b.fw
 File: bnx2/bnx2-rv2p-09-6.0.17.fw
 File: bnx2/bnx2-rv2p-09ax-6.0.17.fw
 
 Licence:
-
- This file contains firmware data derived from proprietary unpublished
- source code, Copyright (c) 2004 - 2010 Broadcom Corporation.
-
- Permission is hereby granted for the distribution of this firmware data
- in hexadecimal or equivalent format, provided this copyright notice is
- accompanying it.
-
-Found in hex form in kernel source.
+ 
+ This file contains firmware data derived from proprietary unpublished 
+ source code, Copyright (c) 2004 - 2010 Broadcom Corporation. 
+ 
+ Permission is hereby granted for the distribution of this firmware data 
+ in hexadecimal or equivalent format, provided this copyright notice is 
+ accompanying it. 
+ 
+Found in hex form in kernel source. 
 
 --------------------------------------------------------------------------
 
diff --git a/firmware/bnx2/bnx2-mips-06-6.2.3.fw.ihex b/firmware/bnx2/bnx2-mips-06-6.2.3.fw.ihex
new file mode 100644
index 000000000000..da72bf197bad
--- /dev/null
+++ b/firmware/bnx2/bnx2-mips-06-6.2.3.fw.ihex
@@ -0,0 +1,5804 @@
+:10000000080001180800000000004A68000000C84D
+:1000100000000000000000000000000008004A6826
+:100020000000001400004B30080000A00800000091
+:100030000000569400004B44080058200000008443
+:100040000000A1D808005694000001580000A25CEE
+:100050000800321008000000000072F00000A3B495
+:10006000000000000000000000000000080072F026
+:1000700000000024000116A40800049008000400F9
+:10008000000017D4000116C80000000000000000A6
+:100090000000000000000000000000000000000060
+:1000A000080000A80800000000003BFC00012E9C96
+:1000B0000000000000000000000000000000000040
+:1000C00000000000000000000A00004600000000E0
+:1000D000000000000000000D636F6D362E322E33DD
+:1000E0000000000006020302000000000000000300
+:1000F000000000C800000032000000030000000003
+:1001000000000000000000000000000000000000EF
+:1001100000000010000001360000EA600000000549
+:1001200000000000000000000000000000000008C7
+:1001300000000000000000000000000000000000BF
+:1001400000000000000000000000000000000000AF
+:10015000000000000000000000000000000000009F
+:10016000000000020000000000000000000000008D
+:10017000000000000000000000000000000000007F
+:10018000000000000000000000000010000000005F
+:10019000000000000000000000000000000000005F
+:1001A000000000000000000000000000000000004F
+:1001B000000000000000000000000000000000003F
+:1001C000000000000000000000000000000000002F
+:1001D000000000000000000000000000000000001F
+:1001E0000000000010000003000000000000000DEF
+:1001F0000000000D3C02080024424AA03C03080015
+:1002000024634B9CAC4000000043202B1480FFFD76
+:10021000244200043C1D080037BD7FFC03A0F021F0
+:100220003C100800261001183C1C0800279C4AA01E
+:100230000E000168000000000000000D27470100CB
+:1002400090E3000B2402001A94E5000814620028D1
+:10025000000020218CE200003C0308008C63004475
+:1002600094E60014000211C20002104030A4000203
+:10027000005A10212463000130A50004A446008028
+:100280003C010800AC23004410A000190004202BFE
+:100290008F4202B804410008240400013C02080017
+:1002A0008C420060244200013C010800AC22006046
+:1002B00003E00008008010218CE2002094E3001687
+:1002C00000002021AF4202808CE20004A743028498
+:1002D000AF4202883C021000AF4202B83C02080064
+:1002E0008C42005C244200013C010800AC22005C0E
+:1002F00003E00008008010212747010090E3000B75
+:100300002402000394E50008146200280000202164
+:100310008CE200003C0308008C63004494E6001467
+:10032000000211C20002104030A40002005A102145
+:100330002463000130A50004A44600803C010800AD
+:10034000AC23004410A000190004202B8F4202B8F7
+:1003500004410008240400013C0208008C420060B3
+:10036000244200013C010800AC22006003E00008C8
+:10037000008010218CE2002094E300160000202170
+:10038000AF4202808CE20004A7430284AF4202889D
+:100390003C021000AF4202B83C0208008C42005CF4
+:1003A000244200013C010800AC22005C03E000088C
+:1003B000008010218F4301002402010050620003DD
+:1003C000000311C20000000D000311C20002104022
+:1003D000005A1021A440008003E000080000102112
+:1003E0009362000003E00008AF80000003E0000813
+:1003F0000000102103E00008000010212402010089
+:1004000014820008000000003C0208008C4200FC3E
+:10041000244200013C010800AC2200FC0A0000DD7F
+:1004200030A200203C0208008C42008424420001DB
+:100430003C010800AC22008430A2002010400008DB
+:1004400030A300103C0208008C4201082442000145
+:100450003C010800AC22010803E000080000000095
+:1004600010600008000000003C0208008C420104FB
+:10047000244200013C010800AC22010403E0000812
+:10048000000000003C0208008C42010024420001F0
+:100490003C010800AC22010003E00008000000005D
+:1004A00027BDFFE8AFBF0010274401009483000878
+:1004B000306200041040001B306600028F4202B818
+:1004C00004410008240500013C0208008C42006041
+:1004D000244200013C010800AC2200600A0001290E
+:1004E0008FBF00108C82002094830016000028210A
+:1004F000AF4202808C820004A7430284AF4202888C
+:100500003C021000AF4202B83C0208008C42005C82
+:10051000244200013C010800AC22005C0A000129D1
+:100520008FBF001010C00006006028218F4401001A
+:100530000E0000CD000000000A0001282405000183
+:100540008F8200088F4301045043000700002821D8
+:100550008F4401000E0000CD000000008F42010416
+:10056000AF820008000028218FBF001000A01021DA
+:1005700003E0000827BD001827BDFFE8AFBF001447
+:10058000AFB00010974201083043700024022000F1
+:100590001062000B286220011440002F000010217F
+:1005A00024024000106200250000000024026000C8
+:1005B00010620026000010210A0001658FBF0014A0
+:1005C00027500100920200091040001A2403000184
+:1005D0003C0208008C420020104000160000182148
+:1005E0000E00049300000000960300083C0608007B
+:1005F00094C64B5E8E0400188F8200209605000C76
+:1006000000031C0000661825AC440000AC45000443
+:1006100024040001AC400008AC40000CAC400010C9
+:10062000AC400014AC4000180E0004B8AC43001CF1
+:10063000000018210A000164006010210E0003254B
+:10064000000000000A000164000010210E000EE905
+:1006500000000000000010218FBF00148FB00010B8
+:1006600003E0000827BD001827BDFFE0AFB2001867
+:100670003C036010AFBF001CAFB10014AFB000105E
+:100680008C6450002402FF7F3C1A800000822024EA
+:100690003484380C24020037AC6450003C1208004B
+:1006A00026524AD8AF42000824020C80AF420024F0
+:1006B0003C1B80083C06080024C60324024010218D
+:1006C0002404001D2484FFFFAC4600000481FFFDCC
+:1006D000244200043C020800244204B03C0108000B
+:1006E000AC224AE03C020800244202303C010800EF
+:1006F000AC224AE43C020800244201743C03080096
+:100700002463032C3C040800248403D83C0508001F
+:1007100024A538F03C010800AC224B403C02080004
+:10072000244202EC3C010800AC264B243C010800AA
+:10073000AC254B343C010800AC234B3C3C01080089
+:10074000AC244B443C010800AC224B483C0108005F
+:10075000AC234ADC3C010800AC204AE83C0108001C
+:10076000AC204AEC3C010800AC204AF03C010800F7
+:10077000AC204AF43C010800AC204AF83C010800D7
+:10078000AC204AFC3C010800AC204B003C010800B6
+:10079000AC244B043C010800AC204B083C01080091
+:1007A000AC204B0C3C010800AC204B103C01080075
+:1007B000AC204B143C010800AC204B183C01080055
+:1007C000AC264B1C3C010800AC264B203C01080029
+:1007D000AC254B303C010800AC234B380E000623FF
+:1007E000000000003C028000344200708C42000097
+:1007F000AF8200143C0308008C6300208F82000449
+:10080000104300043C0280000E00045BAF83000430
+:100810003C028000344600703C0308008C6300A05A
+:100820003C0208008C4200A4104300048F84001492
+:100830003C010800AC2300A4A743009E8CCA000022
+:100840003C0308008C6300BC3C0208008C4200B8EA
+:100850000144202300641821000040210064202B63
+:1008600000481021004410213C010800AC2300BCCA
+:100870003C010800AC2200B88F5100003222000772
+:100880001040FFDCAF8A00148CC600003C05080055
+:100890008CA500BC3C0408008C8400B800CA30233E
+:1008A00000A628210000102100A6302B0082202164
+:1008B00000862021322700013C010800AC2500BC45
+:1008C0003C010800AC2400B810E0001F32220002F6
+:1008D0008F420100AF4200208F420104AF4200A8C6
+:1008E0009342010B0E0000C6305000FF2E02001E86
+:1008F00054400004001010800E0000C90A000213CA
+:1009000000000000005210218C4200000040F80955
+:1009100000000000104000053C0240008F4301042D
+:100920003C026020AC4300143C024000AF4201385E
+:100930003C0208008C420034244200013C010800C3
+:10094000AC220034322200021040000E3222000499
+:100950008F4201400E0000C6AF4200200E000295FB
+:10096000000000003C024000AF4201783C02080059
+:100970008C420038244200013C010800AC220038BF
+:10098000322200041040FF983C0280008F42018018
+:100990000E0000C6AF4200208F43018024020F00EA
+:1009A00014620005000000008F420188A742009CED
+:1009B0000A0002483C0240009362000024030050F9
+:1009C000304200FF144300083C0240000E00027B4E
+:1009D00000000000544000043C0240000E000D7571
+:1009E000000000003C024000AF4201B83C02080099
+:1009F0008C42003C244200013C010800AC22003C37
+:100A00000A0001C83C0280003C0290003442000110
+:100A100000822025AF4400208F4200200440FFFECA
+:100A20000000000003E00008000000003C0280001D
+:100A3000344200010082202503E00008AF4400207A
+:100A400027BDFFE0AFB10014AFB0001000808821D7
+:100A5000AFBF00180E00025030B000FF9362007D5F
+:100A60000220202102028025A370007D8F70007477
+:100A70003C0280000E000259020280241600000988
+:100A80008FBF00188F4201F80440FFFE24020002CD
+:100A9000AF5101C0A34201C43C021000AF4201F8B3
+:100AA0008FBF00188FB100148FB0001003E0000852
+:100AB00027BD002027BDFFE8AFBF0010974201848B
+:100AC0008F440188304202001040000500002821B8
+:100AD0000E000FAA000000000A00028D240500018C
+:100AE0003C02FF0004800005008218243C02040040
+:100AF000506200019362003E240500018FBF001088
+:100B000000A0102103E0000827BD0018A360002208
+:100B10008F4401400A00025E2405000127BDFFE862
+:100B2000AFBF0014AFB0001093620000304400FF6C
+:100B300038830020388200300003182B0002102B6D
+:100B40000062182410600003240200501482008008
+:100B50008FBF001493620005304200011040007CFA
+:100B60008FBF0014934201482443FFFF2C6200050D
+:100B7000104000788FB00010000310803C03080084
+:100B800024634A68004310218C42000000400008A2
+:100B9000000000000E0002508F4401408F70000CD6
+:100BA0008F4201441602000224020001AF62000CD1
+:100BB0000E0002598F4401408F420144145000043A
+:100BC0008FBF00148FB000100A000F2027BD00183F
+:100BD0008F62000C0A0003040000000097620010FE
+:100BE0008F4301443042FFFF1462001A00000000EE
+:100BF00024020001A76200108F4202380443001053
+:100C00008F4201403C02003F3446F0003C0560004A
+:100C10003C04FFC08CA22BBC0044182400461024C6
+:100C20000002130200031D82106200390000000060
+:100C30008F4202380440FFF7000000008F4201405D
+:100C4000AF4202003C021000AF4202380A00032209
+:100C50008FBF0014976200100A0003040000000018
+:100C60000E0002508F440140976200128F430144EE
+:100C70003050FFFF1603000224020001A762001299
+:100C80000E0002598F4401408F42014416020004B5
+:100C90008FBF00148FB000100A00029127BD00180A
+:100CA000976200120A00030400000000976200141B
+:100CB0008F4301443042FFFF14620006240200010A
+:100CC0008FBF00148FB00010A76200140A00124AF0
+:100CD00027BD0018976200141440001D8FBF001438
+:100CE0000A00031C00000000976200168F430144B5
+:100CF0003042FFFF1462000B240200018FBF00147A
+:100D00008FB00010A76200160A000B1227BD001852
+:100D10009742007824420004A76200100A000322D0
+:100D20008FBF001497620016240300013042FFFFBA
+:100D3000144300078FBF00143C0208008C4200706F
+:100D4000244200013C010800AC2200708FBF001457
+:100D50008FB0001003E0000827BD001827BDFFE892
+:100D6000AFBF0014AFB000108F50010093620000BD
+:100D700093430109304400FF2402001F106200A5C4
+:100D80002862002010400018240200382862000A5F
+:100D90001040000C2402000B286200081040002CB8
+:100DA00000000000046000E52862000214400028F2
+:100DB00024020006106200268FBF00140A00041FE0
+:100DC0008FB000101062005E2862000B144000DC3F
+:100DD0008FBF00142402000E106200738FB0001049
+:100DE0000A00041F00000000106200C028620039E1
+:100DF0001040000A2402008024020036106200CA5B
+:100E000028620037104000B424020035106200C18F
+:100E10008FBF00140A00041F8FB000101062002B57
+:100E20002862008110400006240200C82402003914
+:100E3000106200B48FBF00140A00041F8FB00010AE
+:100E4000106200998FBF00140A00041F8FB00010B9
+:100E50003C0208008C420020104000B98FBF0014F3
+:100E60000E000493000000008F4201008F830020D9
+:100E70009745010C97460108AC6200008F420104BF
+:100E80003C04080094844B5E00052C00AC62000416
+:100E90008F4201180006340000C43025AC620008FF
+:100EA0008F42011C24040001AC62000C9342010A31
+:100EB00000A22825AC650010AC600014AC600018DE
+:100EC000AC66001C0A0003F58FBF00143C0208004A
+:100ED0008C4200201040009A8FBF00140E00049333
+:100EE00000000000974401083C03080094634B5E37
+:100EF0009745010C000422029746010E8F820020C4
+:100F0000000426000083202500052C003C030080FF
+:100F100000A6282500832025AC400000AC4000043A
+:100F2000AC400008AC40000CAC450010AC400014D4
+:100F3000AC400018AC44001C0A0003F42404000177
+:100F40009742010C14400015000000009362000558
+:100F50003042001014400011000000000E0002504A
+:100F6000020020219362000502002021344200107B
+:100F70000E000259A36200059362000024030020C2
+:100F8000304200FF1043006D020020218FBF00148B
+:100F90008FB000100A000FC027BD00180000000D20
+:100FA0000A00041E8FBF00143C0208008C4200207F
+:100FB000104000638FBF00140E0004930000000077
+:100FC0008F4201048F8300209744010C3C050800E8
+:100FD00094A54B5EAC6200009762002C00042400D4
+:100FE0003042FFFF008220253C02400E00A228254F
+:100FF000AC640004AC600008AC60000CAC60001095
+:10100000AC600014AC600018AC65001C0A0003F46E
+:10101000240400010E00025002002021A7600008F5
+:101020000E00025902002021020020210E00025E63
+:10103000240500013C0208008C42002010400040C2
+:101040008FBF00140E000493000000009742010CB3
+:101050008F8300203C05080094A54B5E000214001D
+:10106000AC700000AC620004AC6000088F64004CFF
+:101070003C02401F00A22825AC64000C8F62005087
+:1010800024040001AC6200108F620054AC620014B2
+:10109000AC600018AC65001C8FBF00148FB000104E
+:1010A0000A0004B827BD0018240200205082002541
+:1010B0008FB000100E000F0A020020211040002007
+:1010C0008FBF0014020020218FB0001000002821E3
+:1010D0000A00025E27BD0018020020218FBF001405
+:1010E0008FB000100A00058027BD00189745010C3D
+:1010F000020020218FBF00148FB000100A0005A04D
+:1011000027BD0018020020218FB000100A0005C57D
+:1011100027BD00189345010D020020218FB000105B
+:101120000A00060F27BD0018020020218FBF0014FF
+:101130008FB000100A0005EB27BD00188FBF001408
+:101140008FB0001003E0000827BD00188F4202781E
+:101150000440FFFE2402000234840080AF440240B9
+:10116000A34202443C02100003E00008AF420278B0
+:101170003C04080094844B6A3C0208008C424B7487
+:101180003083FFFF000318C000431021AF42003C32
+:101190003C0208008C424B70AF4200383C020050C9
+:1011A00034420008AF4200300000000000000000A0
+:1011B000000000008F420000304200201040FFFD80
+:1011C000000000008F4204003C010800AC224B608C
+:1011D0008F4204043C010800AC224B643C02002016
+:1011E000AF420030000000003C02080094424B680F
+:1011F0003C03080094634B6C3C05080094A54B6EBF
+:1012000024840001004310213083FFFF3C010800CB
+:10121000A4224B683C010800A4244B6A1465000317
+:10122000000000003C010800A4204B6A03E0000815
+:10123000000000003C05000A27BDFFE80345282107
+:101240003C04080024844B50AFBF00100E00051D65
+:101250002406000A3C02080094424B523C0308005A
+:1012600094634B6E3042000F244200030043180485
+:1012700024027FFF0043102B10400002AF83001CAC
+:101280000000000D0E00042A000000003C020800CF
+:1012900094424B5A8FBF001027BD001803E000088E
+:1012A000A74200A23C02000A034210219443000618
+:1012B0003C02080094424B5A3C010800A4234B56C0
+:1012C000004310238F83001C00021400000214034B
+:1012D0000043102B03E000083842000127BDFFE85F
+:1012E000AFBF00103C02000A0342102194420006E6
+:1012F0003C010800A4224B560E00047700000000B9
+:101300005440FFF93C02000A8FBF001003E00008C0
+:1013100027BD001827BDFFE8AFBF00100E000477FF
+:101320000000000010400003000000000E000485D3
+:10133000000000003C0208008C424B608FBF001090
+:1013400027430400AF4200383C0208008C424B6443
+:1013500027BD0018AF830020AF42003C3C020005CF
+:10136000AF42003003E00008AF8000188F82001801
+:101370003C0300060002114000431025AF4200303C
+:101380000000000000000000000000008F4200008C
+:10139000304200101040FFFD27420400AF820020C1
+:1013A00003E00008AF8000183C0608008CC64B64C0
+:1013B0008F8500188F8300203C02080094424B5A0E
+:1013C00027BDFFE024A50001246300202442000182
+:1013D00024C70020AFB10014AFB00010AFBF001899
+:1013E000AF850018AF8300203C010800A4224B5AAF
+:1013F000309000FF3C010800AC274B6404C100089A
+:101400000000882104E00006000000003C02080003
+:101410008C424B60244200013C010800AC224B602E
+:101420003C02080094424B5A3C03080094634B680A
+:101430000010202B004310262C42000100441025F0
+:10144000144000048F830018240200101462000F5F
+:10145000000000000E0004A9241100013C03080054
+:1014600094634B5A3C02080094424B681462000398
+:10147000000000000E00042A000000001600000317
+:10148000000000000E000493000000003C03080070
+:1014900094634B5E3C02080094424B5C2463000161
+:1014A0003064FFFF3C010800A4234B5E148200035C
+:1014B000000000003C010800A4204B5E1200000662
+:1014C000000000003C02080094424B5AA74200A2D0
+:1014D0000A00050B022010210E0004770000000016
+:1014E00010400004022010210E00048500000000BE
+:1014F000022010218FBF00188FB100148FB0001090
+:1015000003E0000827BD00203084FFFF30A5FFFF67
+:101510000000182110800007000000003082000148
+:101520001040000200042042006518210A00051343
+:101530000005284003E000080060102110C00006EC
+:1015400024C6FFFF8CA2000024A50004AC8200008A
+:101550000A00051D2484000403E0000800000000C8
+:1015600010A0000824A3FFFFAC86000000000000CC
+:10157000000000002402FFFF2463FFFF1462FFFA53
+:101580002484000403E0000800000000240200019D
+:10159000AF62000CA7620010A7620012A7620014DD
+:1015A00003E00008A76200163082007F034210218A
+:1015B0003C08000E004818213C0208008C42002024
+:1015C00027BDFFD82407FF80AFB3001CAFB20018BF
+:1015D000AFB10014AFB00010AFBF00200080802179
+:1015E00030B100FF0087202430D200FF1040002FD0
+:1015F00000009821AF44002C9062000024030050AA
+:10160000304200FF1443000E000000003C020800BE
+:101610008C4200E00202102100471024AF42002C4F
+:101620003C0208008C4200E0020210213042007FA0
+:101630000342102100481021944200D43053FFFF90
+:101640000E000493000000003C02080094424B5E30
+:101650008F8300200011340000C2302500122C00BE
+:101660003C02400000C2302534A50001AC700000EF
+:101670008FBF0020AC6000048FB20018AC7300086C
+:101680008FB10014AC60000C8FB3001CAC6500106F
+:101690008FB00010AC60001424040001AC6000188E
+:1016A00027BD00280A0004B8AC66001C8FBF0020CC
+:1016B0008FB3001C8FB200188FB100148FB00010D0
+:1016C00003E0000827BD00289343010F2402001007
+:1016D0001062000E2865001110A0000724020012FD
+:1016E000240200082405003A1062000600003021A0
+:1016F00003E0000800000000240500351462FFFC30
+:10170000000030210A000538000000008F420074FC
+:1017100024420FA003E00008AF62000C27BDFFE8E1
+:10172000AFBF00100E00025E240500018FBF001045
+:1017300024020001A762001227BD00182402000144
+:1017400003E00008A360002227BDFFE0AFB1001452
+:10175000AFB00010AFBF001830B1FFFF0E00025055
+:10176000008080219362003F24030004304200FF88
+:101770001443000C02002021122000082402000A59
+:101780000E00053100000000936200052403FFFEF7
+:1017900000431024A362000524020012A362003F4C
+:1017A000020020210E000259A360008116200003D0
+:1017B000020020210E0005950000000002002021FB
+:1017C000322600FF8FBF00188FB100148FB00010B9
+:1017D000240500380A00053827BD002027BDFFE09A
+:1017E000AFBF001CAFB20018AFB10014AFB0001013
+:1017F0000E000250008080210E0005310000000024
+:101800009362003F24120018305100FF123200038F
+:101810000200202124020012A362003F936200050F
+:101820002403FFFE004310240E000259A3620005AA
+:10183000020020212405002016320007000030217C
+:101840008FBF001C8FB200188FB100148FB0001032
+:101850000A00025E27BD00208FBF001C8FB2001857
+:101860008FB100148FB00010240500390A0005382C
+:1018700027BD002027BDFFE8AFB00010AFBF0014A8
+:101880009742010C2405003600808021144000108E
+:10189000304600FF0E00025000000000240200123B
+:1018A000A362003F93620005344200100E00053130
+:1018B000A36200050E00025902002021020020212F
+:1018C0000E00025E240500200A000604000000004D
+:1018D0000E000538000000000E000250020020211A
+:1018E000936200232403FF9F020020210043102461
+:1018F0008FBF00148FB00010A36200230A000259AA
+:1019000027BD001827BDFFE0AFBF0018AFB100141E
+:10191000AFB0001030B100FF0E00025000808021F7
+:10192000240200120E000531A362003F0E0002598E
+:101930000200202102002021022030218FBF001848
+:101940008FB100148FB00010240500350A0005384F
+:1019500027BD0020A380002C03E00008A380002DF9
+:101960008F4202780440FFFE8F820034AF42024073
+:1019700024020002A34202443C02100003E00008DB
+:10198000AF4202783C0360008C6254003042000891
+:101990001440FFFD000000008C625408AF82000C70
+:1019A00024020052AC605408AC645430AC6254342D
+:1019B0002402000803E00008AC6254003C0260000E
+:1019C0008C42540030420008104000053C03600087
+:1019D0008C625400304200081440FFFD00000000FB
+:1019E0008F83000C3C02600003E00008AC43540805
+:1019F00090A3000024020005008040213063003FD6
+:101A000000004821146200050000502190A2001C33
+:101A100094A3001E304900FF306AFFFFAD00000CA8
+:101A2000AD000010AD000024950200148D05001CCF
+:101A30008D0400183042FFFF0049102300021100FE
+:101A4000000237C3004038210086202300A2102B5B
+:101A50000082202300A72823AD05001CAD04001838
+:101A6000A5090014A5090020A50A001603E0000836
+:101A7000A50A00228F4201F80440FFFE2402000262
+:101A8000AF4401C0A34201C43C02100003E00008BF
+:101A9000AF4201F83C0208008C4200B427BDFFE8C9
+:101AA000AFBF001424420001AFB000103C01080099
+:101AB000AC2200B48F4300243C02001F30AA00FF78
+:101AC0003442FF8030D800FF006280240080F8217B
+:101AD00030EF00FF1158003B01405821240CFF80DB
+:101AE0003C19000A3163007F000310C00003194055
+:101AF000006218213C0208008C4200DC25680001CD
+:101B0000310D007F03E21021004310213043007F9C
+:101B100003431821004C102400794821AF420024CF
+:101B20008D220024016C1824006C7026AD22000C5C
+:101B30008D220024310800FFAD22001095220014F0
+:101B4000952300208D27001C3042FFFF3063FFFFEC
+:101B50008D2600180043102300021100000227C345
+:101B60000040282100C4302300E2102B00C23023A3
+:101B700000E53823AD27001CAD2600189522002073
+:101B8000A522001495220022154B000AA52200165A
+:101B90008D2300248D220008254600013145008058
+:101BA0001462000430C4007F108F000238AA008045
+:101BB00000C0502151AF000131C800FF1518FFC906
+:101BC000010058218F8400343082007F03421821A5
+:101BD0003C02000A006218212402FF8000822024B7
+:101BE000AF440024A06A0079A06A00838C62005090
+:101BF0008F840034AC6200708C6500743C027FFFFF
+:101C00003442FFFF00A228240E00066BAC6500746E
+:101C1000AF5000248FBF00148FB0001003E0000805
+:101C200027BD001827BDFFC0AFBE0038AFB70034D6
+:101C3000AFB5002CAFB20020AFB1001CAFB00018A0
+:101C4000AFBF003CAFB60030AFB40028AFB3002444
+:101C50008F4500248F4600288F43002C3C02001F34
+:101C60003442FF800062182400C230240080A82182
+:101C7000AFA3001400A2F0240E00062FAFA60010A0
+:101C80003C0208008C4200E02410FF8003608821A1
+:101C900002A2102100501024AF4200243C02080090
+:101CA0008C4200E002A210213042007F0342182142
+:101CB0003C02000A00629021924200D293630084A9
+:101CC000305700FF306300FF24020001106200342F
+:101CD000036020212402000214620036000000008C
+:101CE0000E001216024028219223008392220083C4
+:101CF0003063007F3042007F000210C000031940B3
+:101D0000006218213C0208008C4200DC02A2102173
+:101D10000043382100F01024AF42002892250078BB
+:101D20009224008330E2007F034218213C02000C21
+:101D300014850007006280212402FFFFA24200F107
+:101D40002402FFFFA64200F20A0007272402FFFF39
+:101D500096020020A24200F196020022A64200F262
+:101D60008E020024AE4200F492220083A24200F0D0
+:101D70008E4200C8AE4200FC8E4200C4AE4200F863
+:101D80008E220050AE4201008E4200CCAE420104D1
+:101D9000922200853042003F0A0007823442004010
+:101DA0000E00123902402821922200850A00078283
+:101DB0003042003F936200852403FFDF3042003F42
+:101DC000A36200859362008500431024A36200850E
+:101DD0009363008393620078307400FF304200FF09
+:101DE00010540036240AFF803C0C000C3283007F24
+:101DF000000310C000031940006218213C020800D3
+:101E00008C4200DC268800013109007F02A21021EB
+:101E10000043382130E2007F0342182100EA1024F9
+:101E2000AF420028006C80218E020024028A182410
+:101E3000006A5826AE02000C8E020024310800FF12
+:101E4000AE02001096020014960300208E07001CBC
+:101E50003042FFFF3063FFFF8E060018004310235F
+:101E600000021100000227C30040282100C43023D3
+:101E700000E2102B00C2302300E53823AE07001C1F
+:101E8000AE06001896020020A60200149602002258
+:101E9000A602001692220079304200FF105400077B
+:101EA0000000000051370001316800FF92220078E5
+:101EB000304200FF1448FFCD0100A0219222008390
+:101EC000A22200798E2200500A0007E2AE220070A2
+:101ED000A22200858E22004C2405FF80AE42010C18
+:101EE0009222008534420020A2220085924200D135
+:101EF0003C0308008C6300DC305400FF3C02080007
+:101F00008C4200E400143140001420C002A31821C8
+:101F100000C4202102A210210064382100461021B3
+:101F20000045182400E52824AF450028AF43002CC5
+:101F30003042007F924400D030E3007F03422821EA
+:101F4000034318213C02000C006280213C02000E79
+:101F5000309600FF00A298211296002A000000008F
+:101F60008E02000C02002021026028211040002572
+:101F7000261000280E00064A000000009262000DA4
+:101F800026830001307400FF3042007FA262000D02
+:101F90002404FF801697FFF0267300203C020800FF
+:101FA0008C4200DC0000A02102A210210044102479
+:101FB000AF4200283C0208008C4200E43C030800C9
+:101FC0008C6300DC02A2102100441024AF42002CDC
+:101FD0003C0208008C4200E402A318213063007F19
+:101FE00002A210213042007F034220210343182126
+:101FF0003C02000C006280213C02000E0A0007A493
+:10200000008298218E4200D8AE2200508E4200D825
+:10201000AE22007092250083924600D19223008365
+:10202000924400D12402FF8000A228243063007F64
+:10203000308400FF00A628250064182A10600002E2
+:1020400030A500FF38A50080A2250083A2250079D5
+:102050000E00063D000000009222007E02A020211A
+:10206000A222007A8E2300743C027FFF3442FFFFDD
+:10207000006218240E00066BAE2300748FA20010BD
+:10208000AF5E00248FBF003CAF4200288FBE0038F7
+:102090008FA200148FB700348FB600308FB5002C9C
+:1020A0008FB400288FB300248FB200208FB1001CA2
+:1020B0008FB0001827BD004003E00008AF42002C9D
+:1020C00090A2000024420001A0A200003C030800EE
+:1020D0008C6300F4304200FF1443000F0080302175
+:1020E000A0A000003C0208008C4200E48F84003471
+:1020F000008220213082007F034218213C02000C24
+:10210000006218212402FF8000822024ACC300005A
+:1021100003E00008AF4400288C8200002442002025
+:1021200003E00008AC82000094C200003C080800F4
+:10213000950800CA30E7FFFF008048210102102106
+:10214000A4C2000094C200003042FFFF00E2102B46
+:1021500054400001A4C7000094A200003C03080002
+:102160008C6300CC24420001A4A2000094A20000D1
+:102170003042FFFF544300078F8600280107102BD1
+:10218000A4A000005440000101003821A4C70000B1
+:102190008F8600288CC4001CAF44003C94A2000031
+:1021A0008F43003C3042FFFF000210C00062182144
+:1021B000AF43003C8F42003C008220231880000483
+:1021C000000000008CC200180A00084324420001ED
+:1021D0008CC20018AF4200383C020050344200105C
+:1021E000AF420030000000000000000000000000CE
+:1021F0008F420000304200201040FFFD0000000030
+:102200008F420404AD2200048F420400AD2200007E
+:102210003C020020AF42003003E000080000000054
+:1022200027BDFFE0AFB20018AFB10014AFB000108F
+:10223000AFBF001C94C2000000C080213C12080007
+:10224000965200C624420001A60200009603000038
+:1022500094E2000000E03021144300058FB100300B
+:102260000E000818024038210A000875000000001E
+:102270008C8300048C820004244200400461000727
+:10228000AC8200048C8200040440000400000000C2
+:102290008C82000024420001AC8200009602000003
+:1022A0003042FFFF50520001A600000096220000BD
+:1022B00024420001A62200008F82002896230000FD
+:1022C00094420016144300048FBF001C2402000136
+:1022D000A62200008FBF001C8FB200188FB100141F
+:1022E0008FB0001003E0000827BD00208F89002870
+:1022F00027BDFFE0AFBF00188D220028274804004B
+:1023000030E700FFAF4200388D22002CAF8800304C
+:10231000AF42003C3C020005AF420030000000002C
+:1023200000000000000000000000000000000000AD
+:10233000000000008C82000C8C82000CAD020000BA
+:102340008C820010AD0200048C820018AD020008DF
+:102350008C82001CAD02000C8CA20014AD02001097
+:102360008C820020AD02001490820005304200FFF4
+:1023700000021200AD0200188CA20018AD02001C71
+:102380008CA2000CAD0200208CA20010AD02002433
+:102390008CA2001CAD0200288CA20020AD02002CF3
+:1023A000AD060030AD000034978300263402FFFFF5
+:1023B00014620002006020213404FFFF10E00011CD
+:1023C000AD04003895230036952400362402000120
+:1023D0003063FFFF000318C20069182190650040B8
+:1023E000308400070082100400451025A0620040E0
+:1023F0008F820028944200563042FFFF0A0008DC1A
+:10240000AD02003C952300369524003624020001DD
+:102410003063FFFF000318C2006918219065004077
+:1024200030840007008210040002102700451024A9
+:10243000A0620040AD00003C000000000000000071
+:10244000000000003C02000634420040AF42003071
+:102450000000000000000000000000008F420000AB
+:10246000304200101040FFFD8F860028AF880030FA
+:1024700024C2005624C7003C24C4002824C50032CE
+:1024800024C600360E000856AFA200108FBF0018F9
+:1024900003E0000827BD00208F8300243C060800CD
+:1024A0008CC600E88F82003430633FFF0003198040
+:1024B00000461021004310212403FF803046007F96
+:1024C00000431024AF420028034618213C02000CB0
+:1024D0000062302190C2000D30A500FF00003821BD
+:1024E00034420010A0C2000D8F8900288F8A00247A
+:1024F00095230036000A13823048000324020001AD
+:10250000A4C3000E1102000B2902000210400005B6
+:10251000240200021100000C240300010A0009201B
+:102520000000182111020006000000000A00092026
+:10253000000018218CC2002C0A000920244300014D
+:102540008CC20014244300018CC200180043102BDD
+:1025500050400009240700012402002714A20003B0
+:10256000000000000A00092C240700019522003E0B
+:1025700024420001A522003E000A138230430003DA
+:102580002C62000210400009008028211460000421
+:102590000000000094C200360A00093C3046FFFFEC
+:1025A0008CC600380A00093C008028210000302138
+:1025B0003C04080024844B780A00088900000000CD
+:1025C000274901008D22000C9523000601202021BF
+:1025D000000216023046003F3063FFFF240200274E
+:1025E00000C0282128C7002810C2000EAF83002495
+:1025F00010E00008240200312402002110C200096A
+:102600002402002510C200079382002D0A00095BF6
+:102610000000000010C200059382002D0A00095B33
+:10262000000000000A0008F4000000000A0006266E
+:102630000000000095230006912400058D25000C64
+:102640008D2600108D2700188D28001C8D29002054
+:10265000244200013C010800A4234B7E3C010800F9
+:10266000A0244B7D3C010800AC254B843C010800B4
+:10267000AC264B883C010800AC274B903C0108007D
+:10268000AC284B943C010800AC294B9803E00008AF
+:10269000A382002D8F87002827BDFFC0AFB3003471
+:1026A000AFB20030AFB1002CAFB00028AFBF0038E0
+:1026B0003C0208008C4200D094E3003030B0FFFFB1
+:1026C000005010073045FFFF3063FFFF00C0982126
+:1026D000A7A200103C110800963100C614A3000602
+:1026E0003092FFFF8CE2002424420030AF42003CD5
+:1026F0000A0009948CE2002094E200323042FFFF8D
+:1027000054A2000827A400188CE2002C24420030B8
+:10271000AF42003C8CE20028AF4200380A0009A218
+:102720008F84002827A5001027A60020022038212A
+:102730000E000818A7A000208FA200182442003025
+:10274000AF4200388FA2001CAF42003C8F840028AB
+:102750003C020005AF42003094820034274304005D
+:102760003042FFFF0202102B14400007AF830030FD
+:1027700094820054948300340202102100431023F9
+:102780000A0009B63043FFFF94830054948200345A
+:102790000223182100501023006218233063FFFF2A
+:1027A000948200163042FFFF144300030000000033
+:1027B0000A0009C424030001948200163042FFFF7E
+:1027C0000043102B104000058F82003094820016C9
+:1027D000006210233043FFFF8F820030AC530000B3
+:1027E000AC400004AC520008AC43000C3C020006B4
+:1027F00034420010AF420030000000000000000032
+:10280000000000008F420000304200101040FFFD29
+:10281000001018C2006418219065004032040007BF
+:10282000240200018FBF00388FB300348FB2003014
+:102830008FB1002C8FB000280082100400451025B5
+:1028400027BD004003E00008A062004027BDFFA8AC
+:10285000AFB60050AFB5004CAFB40048AFB30044C2
+:10286000AFB1003CAFBF0054AFB20040AFB00038D2
+:102870008C9000003C0208008C4200E88F860034F7
+:10288000960300022413FF8000C2302130633FFF13
+:102890000003198000C3382100F3102490B2000017
+:1028A000AF42002C9203000230E2007F034230214D
+:1028B0003C02000E00C28821306300C024020040A8
+:1028C0000080A82100A0B021146200260000A021F1
+:1028D0008E3400388E2200181440000224020001B9
+:1028E000AE2200189202000D304200201440001564
+:1028F0008F8200343C0308008C6300DC001238C077
+:10290000001231400043102100C730210046382119
+:1029100030E300073C02008030E6007800C230253A
+:102920000343182100F31024AF4208002463090078
+:10293000AF4608108E2200188C6300080043102157
+:10294000AE2200188E22002C8E2300182442000193
+:102950000062182B1060003D000000000A000A7899
+:1029600000000000920300022402FFC00043102474
+:10297000304200FF1440000524020001AE2200187E
+:10298000962200360A000A613054FFFF8E2200149E
+:1029900024420001AE22001892020000000216003C
+:1029A0000002160304410029000000009602000204
+:1029B00027A4001000802821A7A20016960200027A
+:1029C00024070001000030213042FFFFAF820024C5
+:1029D0000E000889AFA0001C960300023C0408000A
+:1029E0008C8400E88F82003430633FFF000319803D
+:1029F00000441021004310213043007F3C05000CAF
+:102A00000053102403431821AF4200280065182109
+:102A10009062000D001221403042007FA062000D44
+:102A20003C0308008C6300E48F82003400431021D3
+:102A30000044382130E2007F03421021004510217C
+:102A400000F31824AF430028AEA200009222000D2C
+:102A5000304200101040001302A020218F83002874
+:102A60008EA40000028030219462003E2442FFFFC9
+:102A7000A462003E948400029625000E3084FFFF7D
+:102A80000E00097330A5FFFF8F82002894430034A5
+:102A90009622000E1443000302A02021240200010C
+:102AA000A382002C02C028210E0007FE00000000B7
+:102AB0008FBF00548FB600508FB5004C8FB40048C4
+:102AC0008FB300448FB200408FB1003C8FB000380C
+:102AD00003E0000827BD00588F82002827BDFFD0E3
+:102AE000AFB40028AFB20020AFBF002CAFB30024BA
+:102AF000AFB1001CAFB00018904400D0904300D19B
+:102B00000000A021309200FFA3A30010306300FF5B
+:102B10008C5100D88C5300DC1072002B2402000171
+:102B20003C0308008C6300E493A400108F820034FF
+:102B30002406FF800004214000431021004410219E
+:102B40003043007F00461024AF4200280343182181
+:102B50003C02000C006218218C62000427A40014BF
+:102B600027A50010022280210270102304400015C6
+:102B7000AFA300149062000D00C21024304200FF89
+:102B800014400007020088219062000D344200408A
+:102B90000E0007FEA062000D0A000ABD93A20010FD
+:102BA0000E0009E1241400018F830028AC7000D8C6
+:102BB00093A20010A06200D193A200101452FFD87B
+:102BC0000000000024020001168200048FBF002CC8
+:102BD0000E000626000000008FBF002C8FB40028D6
+:102BE0008FB300248FB200208FB1001C8FB000186B
+:102BF00003E0000827BD003027BDFFD8AFB3001C9D
+:102C0000AFB20018AFB10014AFB00010AFBF0020DA
+:102C10000080982100E0802130B1FFFF0E00049376
+:102C200030D200FF000000000000000000000000A3
+:102C30008F820020AC510000AC520004AC5300085D
+:102C4000AC40000CAC400010AC400014AC4000188C
+:102C50003C03080094634B5E02038025AC50001CCB
+:102C6000000000000000000000000000240400013B
+:102C70008FBF00208FB3001C8FB200188FB10014DB
+:102C80008FB000100A0004B827BD002827BDFFE858
+:102C9000AFB00010AFBF001430A5FFFF30C600FF7B
+:102CA0000080802124020C80AF420024000000003C
+:102CB0000000000000000000000000000000000014
+:102CC0000E000ACC000000003C040800248400E050
+:102CD0008C8200002403FF808FBF001402021021A9
+:102CE00000431024AF4200248C8200003C03000A01
+:102CF000020280213210007F035010218FB000109B
+:102D00000043102127BD001803E00008AF8200280F
+:102D100027BDFFE8AFBF00108F4401403C0308000F
+:102D20008C6300E02402FF80AF840034008318210C
+:102D300000621024AF4200243C02000803424021FC
+:102D4000950500023063007F3C02000A034318210E
+:102D50000062182130A5FFFF3402FFFF0000302180
+:102D60003C07602010A20006AF8300282402FFFF6A
+:102D7000A5020002946500D40E000AF130A5FFFF01
+:102D80008FBF001024020C8027BD001803E000084C
+:102D9000AF4200243C020008034240219502000299
+:102DA0003C0A0800954A00C63046FFFF14C00007E1
+:102DB0003402FFFF8F8200288F8400343C0760209C
+:102DC000944500D40A000B5A30A5FFFF10C200241E
+:102DD0008F87002894E2005494E400163045FFFFEA
+:102DE00000A6102300A6182B3089FFFF10600004F6
+:102DF0003044FFFF00C51023012210233044FFFFA1
+:102E0000008A102B1040000C012A1023240200011C
+:102E1000A50200162402FFFFA502000294E500D4DB
+:102E20008F8400340000302130A5FFFF3C07602074
+:102E30000A000AF1000000000044102A10400008B7
+:102E4000000000009502001630420001104000040E
+:102E5000000000009742007E24420014A5020016E4
+:102E600003E00008000000008F84002827BDFFE079
+:102E7000AFBF0018948200349483003E1060001AA3
+:102E80003048FFFF9383002C2402000114620027C6
+:102E90008FBF00188F820028000818C23108000771
+:102EA000006218212447003A244900542444002099
+:102EB000244500302446003490620040304200FF38
+:102EC0000102100730420001104000168FBF0018A9
+:102ED0000E000856AFA900108F82002894420034DB
+:102EE0000A000B733048FFFF94830036948200344D
+:102EF0001043000E8FBF001894820036A482003465
+:102F000094820056A48200548C82002CAC8200244F
+:102F100094820032A48200309482003CA482003A61
+:102F20008FBF00180A000B3327BD002003E0000804
+:102F300027BD002027BDFFE8AFBF00108F4A01006A
+:102F40003C0508008CA500E03C02080090424B8440
+:102F50003C0C0800958C4B7E01452821304B003FEE
+:102F600030A2007F03424021396900323C02000A4E
+:102F70003963003F2C630001010240212D2900012B
+:102F80002402FF8000A2282401234825AF8A0034B0
+:102F900000801821AF450024000030210080282146
+:102FA00024070001AF8800283C04080024844B78E3
+:102FB000AF8C002415200007A380002D24020020E0
+:102FC0005562000F006020213402FFFF5582000C83
+:102FD000006020212402002015620005000000008E
+:102FE0008C6300142402FFFF106200070000000041
+:102FF0000E000889000000000A000BD0000000004D
+:103000000E0008F4016028210E000B68000000008B
+:103010008FBF001024020C8027BD001803E00008B9
+:10302000AF4200243C0208008C4200E027BDFFA014
+:10303000AFB1003C008210212411FF80AFBE0058C8
+:10304000AFB70054AFB20040AFB00038AFBF005CC4
+:10305000AFB60050AFB5004CAFB40048AFB30044BA
+:10306000005110248F4800248F4900288F470028E2
+:10307000AF4200243C0208008C4200E00080902116
+:1030800024060006008210213042007F03421821EE
+:103090003C02000A006280213C02001F3442FF8093
+:1030A00000E2382427A40010260500F00122F024B5
+:1030B0000102B8240E00051DAFA700308FA2001832
+:1030C000AE0200C48FA2001CAE0200C88FA2002472
+:1030D000AE0200CC93A40010920300D12402FF8022
+:1030E0000082102400431025304900FF3083007F08
+:1030F0003122007F0062102A10400004000310C03B
+:1031000001311026304900FF000310C000031940B0
+:10311000006218213C0208008C4200DC920400D2BC
+:10312000024210210043102100511024AF42002818
+:1031300093A300103063007F000310C00003194008
+:10314000006218213C0208008C4200DC024210217F
+:10315000004310213042007F034218213C02000C42
+:10316000006240218FA300142402FFFF1062003090
+:10317000309500FF93A2001195030014304400FF26
+:103180003063FFFF0064182B1060000D000000008A
+:10319000950400148D07001C8D0600183084FFFF75
+:1031A00000442023000421000000102100E4382105
+:1031B00000E4202B00C230210A000C4A00C4302158
+:1031C000950400148D07001C8D0600183084FFFF45
+:1031D000008220230004210000001021008018211B
+:1031E00000C2302300E4202B00C4302300E3382346
+:1031F000AD07001CAD06001893A20011A502001433
+:1032000097A20012A50200168FA20014AD020010B2
+:103210008FA20014AD02000C93A20011A5020020A1
+:1032200097A20012A50200228FA20014AD02002472
+:103230002406FF80024610243256007FAF4200244D
+:10324000035618213C02000A006280218E02004CC5
+:103250008FA200203124007F000428C0AE0200505D
+:103260008FA200200004214000852821AE020070BA
+:1032700093A2001001208821A202008393A20010D3
+:10328000A2020079920200853042003FA20200852E
+:103290003C0208008C4200DC024210210045102153
+:1032A00000461024AF42002C3C0208008C4200E48F
+:1032B0003C0308008C6300DC024210210044102112
+:1032C00000461024AF4200283C0208008C4200E473
+:1032D00002431821006518210242102100441021E8
+:1032E0003042007F3063007F93A50010034220210D
+:1032F000034318213C02000E006240213C02000CF6
+:1033000010B1008C008248213233007F1660001912
+:103310002404FF803C0208008C4200DC02421021A1
+:1033200000441024AF42002C3C0208008C4200E410
+:103330003C0308008C6300DC02421021004410248E
+:10334000AF4200283C0208008C4200E402431821EE
+:103350003063007F024210213042007F034220216F
+:10336000034318213C02000E006240213C02000C85
+:10337000008248219124000D2414FF8000001021B8
+:1033800000942025A124000D950400029505001449
+:103390008D07001C3084FFFF30A5FFFF8D0600184D
+:1033A000008520230004210000E4382100C23021E0
+:1033B00000E4202B00C43021AD07001CAD0600182E
+:1033C00095020002A5020014A50000168D02000857
+:1033D000AD0200108D020008AD02000C9502000243
+:1033E000A5020020A50000228D020008AD020024E5
+:1033F0009122000D30420040104000422622000180
+:103400003C0208008C4200E0A3B300283C10000AF4
+:103410000242102100541024AF4200243C02080054
+:103420008C4200E0A380002C27A4002C0242102133
+:103430003042007F03421821007018218C6200D8AE
+:103440008D26000427A50028AFA9002C00461021D6
+:10345000AC6200D80E0009E1AF83002893A30028D6
+:103460008F8200280E000626A04300D10E000B68B4
+:103470000000000002541024AF4200243C02080067
+:103480008C4200DC00132940001320C000A420213E
+:10349000024210210044102100541024AF42002C9D
+:1034A0003C0208008C4200E43C0308008C6300DC12
+:1034B00003563021024210210045102100541024EF
+:1034C000AF4200283C0208008C4200E4024318216D
+:1034D0000064182102421021004510213042007F73
+:1034E0003063007F03422021034318213C02000E79
+:1034F000006240213C02000C00D080210082482163
+:10350000262200013043007F14750005304400FF7F
+:103510002403FF800223102400431026304400FFC0
+:1035200093A2001000808821250800281444FF760B
+:103530002529002093A400108FA300142402FFFF6C
+:103540001062000A308900FF2482000124830001F8
+:103550003042007F14550005306900FF2403FF80CE
+:103560000083102400431026304900FF92020078A7
+:10357000305300FF11330032012088213C02080043
+:103580008C4200DC3225007F000520C00005294068
+:1035900000A42021024210212406FF8000441021B3
+:1035A00000461024AF42002C3C0308008C6300DC72
+:1035B0003C0208008C4200E4024318210242102120
+:1035C0000045102100641821004610243063007F5C
+:1035D000AF420028034318213C02000E0062402144
+:1035E0003C0208008C4200E48D06000C0100202102
+:1035F00002421021004510213042007F0342182171
+:103600003C02000C0062482110C0000D012028215E
+:103610000E00064A000000002402FF800222182447
+:1036200026240001006228263082007F1455000203
+:10363000308300FF30A300FF1473FFD000608821A7
+:103640008E0300743C027FFF3442FFFF00621824A7
+:10365000AE0300740E00066B02402021AF57002419
+:103660008FA20030AF5E00288FBF005C8FBE005875
+:103670008FB700548FB600508FB5004C8FB4004800
+:103680008FB300448FB200408FB1003C8FB0003840
+:1036900027BD006003E00008AF42002C27BDFFD823
+:1036A000AFB1001CAFBF0020AFB000182751018898
+:1036B000922200032408FF803C03000A3047007F69
+:1036C000A3A700108F4601803C0208008C4200E056
+:1036D000AF86003400C2282100A81024AF42002485
+:1036E0009224000030A2007F0342102100431021E9
+:1036F000AF8200283084007F24020002148200255B
+:10370000000719403C0208008C4200E400C210216E
+:103710000043282130A2007F0342182100A8102472
+:10372000AF4200283C02000C006218219062000D9C
+:10373000AFA3001400481025A062000D8FA3001451
+:103740009062000D304200405040006A8FBF002060
+:103750008F860028A380002C27A400148CC200D8D8
+:103760008C63000427A50010004310210E0009E11E
+:10377000ACC200D893A300108F8200280E0006264A
+:10378000A04300D10E000B68000000000A000E0BE1
+:103790008FBF00200E00062F00C020210E00063D26
+:1037A000000000003C020008034280219223000137
+:1037B0009202007B1443004F8FBF00209222000032
+:1037C0003044007F24020004108200172882000584
+:1037D00010400006240200052402000310820007A6
+:1037E0008FB1001C0A000E0C0000000010820012B5
+:1037F0008FBF00200A000E0C8FB1001C92050083C1
+:10380000920600788E0700748F84003430A500FF84
+:1038100000073E0230C600FF0E00067330E7007F4F
+:103820000A000E0B8FBF00200E000BD78F840034D0
+:103830000A000E0B8FBF002024020C80AF42002430
+:103840009202003E30420040104000200000000084
+:103850009202003E00021600000216030441000618
+:10386000000000008F8400340E0005A024050093A2
+:103870000A000E0B8FBF00209202003F24030018A5
+:10388000304200FF1443000C8F84003424050039BB
+:103890000E000538000030210E0002508F840034E5
+:1038A00024020012A202003F0E0002598F8400344D
+:1038B0000A000E0B8FBF0020240500360E000538CD
+:1038C000000030210A000E0B8FBF00200E000250B6
+:1038D0008F8400349202000534420020A2020005C9
+:1038E0000E0002598F8400340E000FC08F84003404
+:1038F0008FBF00208FB1001C8FB0001824020C80F5
+:1039000027BD002803E00008AF42002427BDFFE8E0
+:10391000AFB00010AFBF001427430100946200084D
+:103920000002140000021403044100020000802180
+:103930002410000194620008304200801040001AF8
+:10394000020010219462000830422000104000164E
+:10395000020010218C6300183C021C2D344219ED2A
+:10396000240600061062000F3C0760213C0208009C
+:103970008C4200D4104000078F8200288F830028DB
+:10398000906200623042000F34420040A062006248
+:103990008F8200288F840034944500D40E000AF1F1
+:1039A00030A5FFFF020010218FBF00148FB0001060
+:1039B00003E0000827BD001827BDFFE0AFB10014E9
+:1039C000AFB00010A380002CAFBF00188F450100DE
+:1039D0003C0308008C6300E02402FF80AF850034C4
+:1039E00000A318213064007F0344202100621824C2
+:1039F0003C02000A00822021AF430024275001002E
+:103A00008E0200148C8300DCAF8400280043102356
+:103A100018400004000088218E0200140E000A8461
+:103A2000AC8200DC9202000B24030002304200FF53
+:103A30001443002F0000000096020008304300FFEE
+:103A40002402008214620005240200840E00093E54
+:103A5000000000000A000E97000000001462000938
+:103A6000240200818F8200288F8400343C0760216B
+:103A7000944500D49206000530A5FFFF0A000E868B
+:103A800030C600FF14620027000000009202000A06
+:103A9000304300FF306200201040000430620040DC
+:103AA0008F8400340A000E82240600401040000477
+:103AB000000316008F8400340A000E8224060041A1
+:103AC00000021603044100178F84003424060042CC
+:103AD0008F8200283C076019944500D430A5FFFF71
+:103AE0000E000AF1000000000A000E97000000001E
+:103AF0009202000B24030016304200FF1043000620
+:103B0000000000009202000B24030017304200FF67
+:103B100014430004000000000E000E11000000001D
+:103B2000004088210E000B68000000009202000A8D
+:103B3000304200081040000624020C808F850028C7
+:103B40003C0400080E0011EE0344202124020C80E6
+:103B5000AF4200248FBF0018022010218FB0001048
+:103B60008FB1001403E0000827BD002027BDFFE847
+:103B7000AFBF0014AFB000108F5000243C0308000A
+:103B80008C6300E08F4501002402FF8000A3182110
+:103B90003064007F03442021006218243C02000AA4
+:103BA00000822021AF850034AF4300249082006260
+:103BB000AF8400283042000F34420050A0820062DF
+:103BC0003C02001F3442FF800E00062602028024C1
+:103BD000AF5000248FBF00148FB0001003E0000826
+:103BE00027BD00183C0208008C4200201040001D38
+:103BF0002745010090A300093C0200080342202150
+:103C000024020018546200033C0200080A000ED887
+:103C10002402000803422021240200161462000539
+:103C20002402001724020012A082003F0A000EE2C4
+:103C300094A700085462000694A700089362000548
+:103C40002403FFFE00431024A362000594A700088C
+:103C500090A6001B8CA4000094A500060A000ACCC4
+:103C600000073C0003E000080000000027440100BA
+:103C700094820008304500FF38A3008238A20084F7
+:103C80002C6300012C420001006218251060000620
+:103C9000240200839382002D1040000D00000000DC
+:103CA0000A000B9B0000000014A2000524A2FF8064
+:103CB0008F4301043C02602003E00008AC43001481
+:103CC000304200FF2C420002104000032402002278
+:103CD0000A000E3C0000000014A2000300000000D7
+:103CE0000A000EA9000000000A000EC70000000034
+:103CF0009363007E9362007A144300090000202140
+:103D00009362000024030050304200FF144300047B
+:103D1000240400019362007E24420001A362007E1D
+:103D200003E00008008010218F4201F80440FFFEEC
+:103D300024020002AF4401C0A34201C43C021000AF
+:103D400003E00008AF4201F827BDFFE8AFBF001055
+:103D50009362003F2403000A304200FF14430046F0
+:103D6000000000008F6300548F62004C1062007DE1
+:103D7000036030219362000024030050304200FFB2
+:103D80001443002F000000008F4401403C02080053
+:103D90008C4200E02403FF800082102100431024A5
+:103DA000AF4200243C0208008C4200E08F650054C2
+:103DB0003C03000A008220213084007F034410214C
+:103DC00000431021AC4501089762003C8F63004C12
+:103DD0003042FFFF0002104000621821AF63005C18
+:103DE0008F6300548F64004C9762003C006418237A
+:103DF0003042FFFF00031843000210400043102A26
+:103E000010400006000000008F6200548F63004CD9
+:103E1000004310230A000F58000210439762003C31
+:103E20003042FFFF00021040ACC2006424020001D7
+:103E3000A0C0007CA0C2008424020C80AF420024F9
+:103E40000E000F0A8F440140104000478FBF001042
+:103E50008F4301408F4201F80440FFFE240200021C
+:103E6000AF4301C0A34201C43C021000AF4201F8BD
+:103E70000A000FA88FBF00109362003F24030010B8
+:103E8000304200FF14430004000000008F44014052
+:103E90000A000F94000028219362003F24030016BB
+:103EA000304200FF1443000424020014A362003FC8
+:103EB0000A000FA2000000008F62004C8F630050C8
+:103EC00000431023044100288FBF0010936200813B
+:103ED00024420001A3620081936200812C4200040D
+:103EE00014400010000000009362003F240300040F
+:103EF000304200FF14430006000000008F440140E0
+:103F00008FBF0010240500930A0005A027BD0018EC
+:103F10008F440140240500938FBF00100A00060F54
+:103F200027BD00188F4401400E0002500000000021
+:103F30008F6200542442FFFFAF6200548F62005032
+:103F40002442FFFFAF6200500E0002598F4401402F
+:103F50008F4401408FBF0010240500040A00025E58
+:103F600027BD00188FBF001003E0000827BD001810
+:103F70008F4201889363007E00021402304400FFE8
+:103F8000306300FF1464000D0000000093620080A5
+:103F9000304200FF1044000900000000A3640080CC
+:103FA0009362000024030050304200FF14430004D9
+:103FB000000000000A0006D78F440180A36400803F
+:103FC00003E000080000000027BDFFE8AFB00010CC
+:103FD000AFBF00149362000524030030304200306C
+:103FE00014430089008080213C0208008C4200209C
+:103FF00010400080020020210E0004930000000009
+:104000008F850020ACB000009362003E9363003FB8
+:10401000304200FF00021200306300FF0043102511
+:10402000ACA2000493620082000216000002160394
+:1040300004410005000000003C0308008C630048B8
+:104040000A000FE6000000009362003E304200408C
+:10405000144000030000182193620081304300FFE8
+:104060009362008200031E00304200FF0002140031
+:1040700000621825ACA300088F620040ACA2000CBF
+:104080008F620048ACA200108F62004CACA20014FA
+:104090008F6200508F63004C0043102304410003E3
+:1040A000000000000A000FFA8F62004C8F6200507F
+:1040B000ACA200183C02080094424B5E3C03C00BCB
+:1040C00000002021004310250E0004B8ACA2001C03
+:1040D0008F6200548F840020AC8200008F620058F1
+:1040E000AC8200048F62005CAC8200088F620060CA
+:1040F0008F43007400431021AC82000C8F62006477
+:10410000AC820010976300689762006A00031C008D
+:104110003042FFFF00621825AC83001493620082D6
+:1041200024030080304200FF14430003000000001D
+:104130000A00102EAC8000188F63000C24020001CE
+:104140001062000E2402FFFF9362003E30420040E6
+:104150001440000A2402FFFF8F63000C8F4200749A
+:10416000006218233C020800006210241440000280
+:10417000000028210060282100051043AC820018AF
+:104180003C02080094424B5E3C03C00C000020211E
+:10419000004310258F8300200E0004B8AC62001C81
+:1041A0008F6200188F8300203C05080094A54B5EA9
+:1041B00024040001AC620000AC6000048F66006C57
+:1041C0003C02400D00A22825AC6600088F6200DC8E
+:1041D000AC62000CAC600010936200050002160097
+:1041E000AC620014AC6000180E0004B8AC65001C92
+:1041F000020020218FBF00148FB00010A3600005C3
+:104200000A00042127BD00188FBF00148FB00010D2
+:1042100003E0000827BD00189742007C30C600FF6D
+:10422000A08600843047FFFF2402000514C2000B63
+:1042300024E3465090A201122C42000710400007D0
+:1042400024E30A0090A30112240200140062100467
+:1042500000E210210A0010663047FFFF3067FFFFC1
+:1042600003E00008A4870014AC87004C8CA201086E
+:104270000080402100A0482100E2102330C600FF4A
+:104280001840000393AA001324E2FFFCACA201082B
+:1042900030C2000110400008000000008D020050F4
+:1042A00000E2102304410013240600058D0200548F
+:1042B00010E20010000000008D02005414E2001A09
+:1042C000000000003C0208008C4200D83042002070
+:1042D0001040000A2402000191030078910200833B
+:1042E000144300062402000101002021012028219E
+:1042F000240600040A00105400000000A1000084FD
+:1043000011400009A50200148F4301008F4201F8FB
+:104310000440FFFE24020002AF4301C0A34201C4D7
+:104320003C021000AF4201F803E00008000000006A
+:1043300027BDFFE88FA90028AFBF001000804021F3
+:1043400000E918231860007330C600FFA080007CCD
+:10435000A08000818CA2010800E210230440004DDF
+:10436000000000008C8200509483003C8C84006428
+:10437000004748233063FFFF012318210083202BCF
+:1043800010800004000000008D0200640A0010B7D5
+:1043900000E210219502003C3042FFFF0122102173
+:1043A00000E21021AD02005C9502003C8D03005C30
+:1043B0003042FFFF0002104000E210210043102BAA
+:1043C00010400003000000000A0010C68D02005CCF
+:1043D0009502003C3042FFFF0002104000E2102135
+:1043E000AD02005CA1000084AD07004C8CA2010866
+:1043F00000E210231840000224E2FFFCACA20108F6
+:1044000030C200011040000A000000008D02005080
+:1044100000E2102304410004010020218D02005419
+:1044200014E20003000000000A0010E82406000562
+:104430008D02005414E200478FBF00103C020800B8
+:104440008C4200D8304200201040000A24020001B3
+:1044500091030078910200831443000624020001B6
+:1044600001002021240600048FBF00100A00105410
+:1044700027BD0018A1000084A50200148F4301008D
+:104480008F4201F80440FFFE240200020A00110DD1
+:10449000000000008C82005C004910230043102BB8
+:1044A00054400001AC87005C9502003C3042FFFFA5
+:1044B0000062102B14400007240200029502003C09
+:1044C0008D03005C3042FFFF00621821AD03005CE9
+:1044D00024020002AD07004CA10200840E000F0A66
+:1044E0008F4401001040001B8FBF00108F4301005C
+:1044F0008F4201F80440FFFE24020002AF4301C0D6
+:10450000A34201C43C021000AF4201F80A0011238B
+:104510008FBF001030C200101040000E8FBF00107F
+:104520008C83005C9482003C006918233042FFFFBA
+:10453000006218213C023FFF3444FFFF0083102B30
+:10454000544000010080182101231021AD02005CBD
+:104550008FBF001003E0000827BD001827BDFFE84B
+:104560008FAA0028AFBF00100080402100EA482336
+:104570001920002130C600FF8C83005C8C8200640F
+:10458000006A18230043102B5040001000691821C6
+:1045900094A2011001221021A4A2011094A20110E2
+:1045A0003042FFFF0043102B1440000A3C023FFF43
+:1045B00094A2011000431023A4A201109482003C95
+:1045C0003042FFFF0A00114200621821A4A001102E
+:1045D0003C023FFF3444FFFF0083102B5440000196
+:1045E0000080182100671021AD02005CA100007C52
+:1045F0000A00118AA100008130C200101040003C66
+:10460000000000008C820050004A1023184000383F
+:10461000000000009082007C24420001A082007C07
+:104620009082007C3C0308008C630024304200FF31
+:104630000043102B1440005C8FBF00108CA20108B7
+:1046400000E2102318400058000000008C83005442
+:104650009482003C006A18233042FFFF0003184395
+:10466000000210400043102A104000050000000026
+:104670008C820054004A10230A001171000210437A
+:104680009482003C3042FFFF00021040AD02006403
+:104690009502003C8D0400649503003C3042FFFF0E
+:1046A00000021040008220213063FFFF00831821A8
+:1046B00001431021AD02005C8D020054ACA2010840
+:1046C00024020002A10200840E000F0A8F440100A0
+:1046D000104000358FBF00108F4301008F4201F85A
+:1046E0000440FFFE240200020A0011B30000000093
+:1046F000AD07004C8CA2010800E210231840000214
+:1047000024E2FFFCACA2010830C200011040000A04
+:10471000000000008D02005000E21023044100045C
+:10472000010020218D02005414E20003000000006B
+:104730000A0011AA240600058D02005414E2001A92
+:104740008FBF00103C0208008C4200D8304200208D
+:104750001040000A240200019103007891020083B6
+:104760001443000624020001010020212406000455
+:104770008FBF00100A00105427BD0018A10000844C
+:10478000A50200148F4301008F4201F80440FFFE90
+:1047900024020002AF4301C0A34201C43C02100046
+:1047A000AF4201F88FBF001003E0000827BD0018DA
+:1047B0008FAA00108C8200500080402130C600FF7C
+:1047C000004A102300A048211840000700E01821EB
+:1047D00024020001A0800084A0A00112A482001481
+:1047E0000A001125AFAA0010A0800081AD07004C7F
+:1047F0008CA2010800E210231840000224E2FFFC12
+:10480000ACA2010830C20001104000080000000006
+:104810008D0200500062102304410013240600059D
+:104820008D02005410620010000000008D02005440
+:1048300014620011000000003C0208008C4200D805
+:10484000304200201040000A240200019103007849
+:10485000910200831443000624020001010020217C
+:1048600001202821240600040A0010540000000042
+:10487000A1000084A502001403E00008000000006D
+:1048800027BDFFE0AFBF0018274201009046000A95
+:104890008C4800148C8B004C9082008430C900FF3F
+:1048A00001681823304A00FF1C60001A2D460006DC
+:1048B000240200010142100410C00016304300031E
+:1048C000012030210100382114600007304C000C19
+:1048D00015800009304200301440000B8FBF0018D3
+:1048E0000A001214000000000E001125AFAB0010EA
+:1048F0000A0012148FBF00180E00109AAFAB001000
+:104900000A0012148FBF0018AFAB00100E0011BACE
+:10491000AFAA00148FBF001803E0000827BD0020D5
+:1049200024020003A08200848C82005403E000086B
+:10493000ACA201083C0200080342182190620081E9
+:10494000240600433C07601924420001A062008154
+:10495000906300813C0208008C4200C0306300FF7D
+:10496000146200102403FF803C0208008C4200E027
+:104970000082102100431024AF4200243C020800B2
+:104980008C4200E03C03000A008210213042007F8C
+:104990000342102100431021944500D40A000AF17B
+:1049A00030A5FFFF03E000080000000027BDFFE086
+:1049B000AFBF0018AFB10014AFB000108F4201803C
+:1049C0000080802100A088210E00121B00402021C1
+:1049D000A20000848E0200548FBF00188FB0001018
+:1049E000AE2201088FB1001403E0000827BD0020AB
+:1049F00027BDFFE03C020008AFB00010AFBF0018B9
+:104A0000AFB10014034280218F5101409203008412
+:104A10008E0400508E02004C14820040306600FF6D
+:104A20003C0208008C4200E02403FF800222102197
+:104A300000431024AF4200243C0208008C4200E0F6
+:104A40009744007C92050081022210213042007FB1
+:104A5000034218213C02000A0062182114A0000B36
+:104A60003084FFFF2402000554C20014248205DCB8
+:104A70009062011224420001A062011224020C8003
+:104A8000AF4200240A00127324020005A060011244
+:104A90002402000514C20009248205DC9202008170
+:104AA0002C4200075040000524820A009203008136
+:104AB0002402001400621004008210213044FFFF21
+:104AC000A60400140E00121B022020219602003CB6
+:104AD0008E03004C022020213042FFFF00021040D4
+:104AE000006218210E000250AE03005C9202007DAD
+:104AF00002202021344200400E000259A202007D13
+:104B00008F4201F80440FFFE24020002AF5101C0B1
+:104B1000A34201C43C021000AF4201F88FBF00184D
+:104B20008FB100148FB0001003E0000827BD0020F3
+:104B300008000ACC08000B1408000B9808000BE4CE
+:104B400008000C200A0000280000000000000000FF
+:104B50000000000D6370362E322E3300000000007E
+:104B60000602030400000000000000000000000036
+:104B70000000000000000000000000000000000035
+:104B80000000000000000000000000000000002005
+:104B90000000000000000000000000000000000015
+:104BA0000000000000000000000000000000000005
+:104BB00000000000000000000000000000000001F4
+:104BC0000000002B000000000000000400030D4066
+:104BD00000000000000000000000000000000000D5
+:104BE00000000000000000001000000300000000B2
+:104BF0000000000D0000000D3C020800244258A4F3
+:104C00003C03080024635F70AC4000000043202B8D
+:104C10001480FFFD244200043C1D080037BD7FFCCA
+:104C200003A0F0213C100800261000A03C1C080046
+:104C3000279C58A40E0001AC000000000000000DED
+:104C400027BDFFE83C096018AFBF00108D2C500055
+:104C5000240DFF7F24080031018D5824356A380C5B
+:104C600024070C003C1A8000AD2A50003C04800A46
+:104C7000AF4800083C1B8008AF4700240E00091510
+:104C8000AF8400100E0008D8000000000E000825B8
+:104C9000000000000E001252000000003C046016EC
+:104CA0008C8500003C06FFFF3C02535300A61824ED
+:104CB0001062004734867C0094C201F2A780002C69
+:104CC00010400003A78000CC38581E1EA798002C67
+:104CD00094C201F810400004978300CC38591E1E7E
+:104CE000A79900CC978300CC2C7F006753E000018C
+:104CF000240300669784002C2C82040114400002D7
+:104D000000602821240404003C0760008CE904387A
+:104D10002403103C3128FFFF1103001F30B9FFFFAF
+:104D200057200010A38000CE24020050A38200CEA2
+:104D3000939F00CE53E0000FA78500CCA78000CC46
+:104D4000978500CC8FBF0010A780002CA78000346F
+:104D5000A78000E63C010800AC25008003E00008C5
+:104D600027BD0018939F00CE57E0FFF5A78000CC29
+:104D7000A78500CC978500CC8FBF0010A784002C9E
+:104D8000A7800034A78000E63C010800AC25008025
+:104D900003E0000827BD0018A38000CE8CCB003CA8
+:104DA000316A00011140000E0000000030A7FFFF33
+:104DB00010E0FFDE240200508CCC00C831860001D8
+:104DC00014C0FFDC939F00CE0A00007A2402005139
+:104DD0008C8F00043C0E60000A00005D01EE302163
+:104DE0008CEF0808240D5708000F740211CD000441
+:104DF00030B8FFFF240500660A00007B240404008D
+:104E00001700FFCC939F00CE0A00007A24020050C6
+:104E10008F8600103089FFFF000939408CC30010D5
+:104E20003C08005000E82025AF4300388CC5001432
+:104E300027420400AF82001CAF45003CAF44003065
+:104E40000000000000000000000000000000000062
+:104E50000000000000000000000000000000000052
+:104E60008F4B0000316A00201140FFFD0000000060
+:104E700003E00008000000008F840010948A001AEC
+:104E80008C8700243149FFFF000940C000E8302131
+:104E9000AF46003C8C8500248F43003C00A31023C8
+:104EA00018400029000000008C8B002025620001C2
+:104EB0003C0D005035AC0008AF420038AF4C00301C
+:104EC00000000000000000000000000000000000E2
+:104ED00000000000000000000000000000000000D2
+:104EE0008F4F000031EE002011C0FFFD00000000D8
+:104EF0008F4A04003C080020AC8A00108F4904044B
+:104F0000AC890014AF4800300000000094860018FF
+:104F10009487001C00C71821A48300189485001AE8
+:104F200024A20001A482001A9498001A9499001EE9
+:104F3000133800030000000003E000080000000038
+:104F400003E00008A480001A8C8200200A0000DC24
+:104F50003C0D00500A0000CD000000003C0308009A
+:104F60008C6300208F82001827BDFFE810620008C4
+:104F7000AFBF00100E000104AF8300183C0308000F
+:104F80008C63002024040001106400048F89001049
+:104F90008FBF001003E0000827BD00188FBF00106E
+:104FA0003C076012A520000A9528000A34E500108D
+:104FB00027BD00183106FFFF03E00008ACA60090F3
+:104FC0003C0208008C42002027BDFFC8AFBF003460
+:104FD000AFBE0030AFB7002CAFB60028AFB500248D
+:104FE000AFB40020AFB3001CAFB20018AFB10014D3
+:104FF00010400050AFB000108F840010948600065F
+:105000009483000A00C3282330B6FFFF12C0004A71
+:105010008FBF003494890018948A000A012A402323
+:105020003102FFFF02C2382B14E0000202C020212F
+:10503000004020212C8C0005158000020080A0215A
+:10504000241400040E0000B3028020218F8700107A
+:1050500002809821AF80001494ED000A028088211C
+:105060001280004E31B2FFFF3C1770003C1540002B
+:105070003C1E60008F8F001C8DEE000001D71824AD
+:10508000507500500220202102A3802B160000350D
+:105090003C182000507800470220202124100001F5
+:1050A0008F83001414600039029158230230F823D2
+:1050B0000250C82133F1FFFF1620FFEE3332FFFF0D
+:1050C0008F8700103C110020AF510030000000001D
+:1050D00094E6000A3C1E601237D5001002662821B3
+:1050E000A4E5000A94E2000A94F2000A94F400187D
+:1050F0003057FFFF1292003BAEB700908CED0014CA
+:105100008CE400100013714001AE4021000E5FC31B
+:10511000010E502B008B4821012A1821ACE8001405
+:10512000ACE3001002D3382330F6FFFF16C0FFB9FE
+:105130008F8400108FBF00348FBE00308FB7002CDB
+:105140008FB600288FB500248FB400208FB3001CC9
+:105150008FB200188FB100148FB0001003E0000868
+:1051600027BD0038107E001B000000001477FFCC24
+:10517000241000010E00159B000000008F83001416
+:105180001060FFCB0230F823029158238F87001064
+:10519000017020210A0001973093FFFF8F830014D4
+:1051A0001460FFCB3C110020AF5100300A000163B6
+:1051B000000000000E00077D024028210A00015770
+:1051C000004080210E00033A024028210A000157C6
+:1051D000004080210E001463022020210A000157A4
+:1051E000004080210E0000CD000000000A0001797F
+:1051F00002D3382327BDFFE8AFB00010AFBF0014C3
+:105200000E00003F000000003C028000345000709F
+:105210000A0001BA8E0600008F4F000039EE00012F
+:1052200031C20001104000248F8600A88E070000C4
+:105230003C0C08008D8C003C3C0908008D2900388E
+:1052400000E66823018D28210000502100AD302B9D
+:10525000012A4021010620213C010800AC25003C28
+:10526000AF8700A83C010800AC2400380E000106FE
+:10527000000000003C0308008C6300701060FFE633
+:10528000006020213C0508008CA500683C06080051
+:105290008CC6006C0E00152A000000003C010800BE
+:1052A000AC2000708F4F000039EE000131C20001C8
+:1052B0001440FFDE8F8600A88E0A00008F8B00A8A6
+:1052C0003C0508008CA5003C3C0408008C84003898
+:1052D000014B482300A938210082182100E9402B06
+:1052E000006810213C010800AC27003C3C0108008C
+:1052F000AC2200388F5F01002419FF0024180C0035
+:1053000003F9202410980012AF840000AF4400205D
+:10531000936D0000240C002031A600FF10CC001279
+:10532000240E005010CE00043C194000AF59013843
+:105330000A0001B3000000000E0011C800000000C8
+:105340003C194000AF5901380A0001B300000000C9
+:105350000E00011F000000003C194000AF59013849
+:105360000A0001B3000000008F58010000802821CE
+:10537000330F00FF01E020210E0002F1AF8F000487
+:105380003C194000AF5901380A0001B30000000089
+:1053900000A4102B2403000110400009000030215C
+:1053A0000005284000A4102B04A0000300031840AF
+:1053B0005440FFFC000528405060000A0004182BF0
+:1053C0000085382B54E000040003184200C3302548
+:1053D00000852023000318421460FFF900052842CD
+:1053E0000004182B03E0000800C310218F4201B80D
+:1053F0000440FFFE00000000AF4401803C031000A9
+:1054000024040040AF450184A3440188A3460189D8
+:10541000A747018A03E00008AF4301B83084FFFFCB
+:105420000080382130A5FFFF000020210A00022A59
+:10543000240600803087FFFF8CA40000240600387B
+:105440000A00022A000028218F8300388F8600304E
+:105450001066000B008040213C07080024E75A1822
+:10546000000328C000A710218C4400002463000121
+:10547000108800053063000F5466FFFA000328C04F
+:1054800003E00008000010213C07080024E75A1C34
+:1054900000A7302103E000088CC200003C0390000C
+:1054A0003462000100822025AF4400208F45002097
+:1054B00004A0FFFE0000000003E000080000000060
+:1054C0003C038000346200010082202503E00008D4
+:1054D000AF44002027BDFFE0AFB100143091FFFFC3
+:1054E000AFB00010AFBF00181220001300A0802141
+:1054F0008CA2000024040002240601401040000F8A
+:10550000004028210E000C5C00000000000010216B
+:10551000AE000000022038218FBF00188FB10014A8
+:105520008FB0001000402021000028210000302111
+:105530000A00022A27BD00208CA200000220382188
+:105540008FBF00188FB100148FB0001000402021D1
+:1055500000002821000030210A00022A27BD002077
+:1055600000A010213087FFFF8CA500048C440000B0
+:105570000A00022A2406000627BDFFE0AFB0001093
+:10558000AFBF0018AFB100149363003E00808021CC
+:105590000080282130620040000020211040000FD0
+:1055A0008E1100000E000851022020219367000098
+:1055B0002404005030E500FF50A400128E0F0000BC
+:1055C000022020218FBF00188FB100148FB000106F
+:1055D000A762013C0A00091127BD00200E000287C6
+:1055E000000000000E0008510220202193670000F7
+:1055F0002404005030E500FF14A4FFF20220202113
+:105600008E0F00003C1008008E1000503C0D000C66
+:10561000240BFF8001F05021314E007F01DA602120
+:10562000018D4021014B4824AF4900280220202150
+:105630008FBF00188FB100148FB00010A50200D6E4
+:1056400027BD00200A000911AF8800D027BDFFE068
+:10565000AFBF0018AFB10014AFB0001093660001E7
+:10566000008080210E00025630D1000493640005B2
+:10567000001029C2A765000034830040A363000521
+:105680000E00025F020020210E00091302002021FB
+:1056900024020001AF62000C02002821A762001062
+:1056A00024040002A762001224060140A76200142D
+:1056B0000E000C5CA76200161620000F8FBF0018AA
+:1056C000978C00343C0B08008D6B00782588FFFF19
+:1056D0003109FFFF256A0001012A382B10E000067E
+:1056E000A78800343C0F6006240E001635ED00102C
+:1056F000ADAE00508FBF00188FB100148FB00010F6
+:1057000003E0000827BD002027BDFFE0AFB1001473
+:10571000AFBF0018AFB0001000A088211080000AB1
+:105720003C03600024020080108200120000000090
+:105730000000000D8FBF00188FB100148FB0001053
+:1057400003E0000827BD00208C682BF80500FFFE51
+:1057500000000000AC712BC08FBF00188FB1001487
+:105760008FB000103C09100027BD002003E00008A6
+:10577000AC692BF80E00025600A0202193650005AD
+:10578000022020210E00025F30B000FF2403003E03
+:105790001603FFE7000000008F4401780480FFFE3D
+:1057A000240700073C061000AF51014002202021D1
+:1057B000A34701448FBF00188FB100148FB00010B1
+:1057C000AF4601780A0002C227BD002027BDFFE8CE
+:1057D000AFBF0014AFB000108F50002000000000D9
+:1057E0000E000913AF440020AF5000208FBF0014FB
+:1057F0008FB0001003E0000827BD00183084FFFFC1
+:10580000008038212406003500A020210A00022A49
+:10581000000028213084FFFF008038212406003654
+:1058200000A020210A00022A0000282127BDFFD065
+:10583000AFB3001C3093FFFFAFB50024AFB2001828
+:10584000AFBF0028AFB40020AFB10014AFB000105C
+:1058500030B5FFFF12600027000090218F90001CE0
+:105860008E0300003C0680002402004000033E023C
+:1058700000032C0230E4007F006688241482001D9F
+:1058800030A500FF8F8300282C68000A510000100B
+:105890008F910014000358803C0C0800258C56940E
+:1058A000016C50218D49000001200008000000001B
+:1058B00002B210213045FFFF0E000236240400849E
+:1058C000162000028F90001CAF8000288F910014DA
+:1058D000260C002026430001018080213072FFFF4A
+:1058E00016200004AF8C001C0253502B1540FFDC27
+:1058F00000000000024010218FBF00288FB5002457
+:105900008FB400208FB3001C8FB200188FB1001429
+:105910008FB0001003E0000827BD0030240E0034D3
+:1059200014AE00F9000000009203000E241F168040
+:105930003C07000CA36300219202000D0347C8211D
+:105940003C066000A3620020961100123C0A7FFF13
+:10595000354CFFFFA771003C960B00102403000597
+:105960003168FFFFAF6800848E05001CAF5F002820
+:105970008F3800008CC4444803057826008F3021FE
+:10598000AF66004C8F69004C24CE00013C057F00BF
+:10599000AF6900508F740050AF740054AF66007050
+:1059A000AF6E00588F6D005824140050AF6D005C2E
+:1059B000A3600023AF6C0064A36300378E02001461
+:1059C000AF6200488F710048AF7100248E0B001841
+:1059D000AF6B006C9208000CA3680036937F003E0A
+:1059E00037F90020A379003E8F78007403058024E6
+:1059F000360F4000AF6F007493640000308900FFE1
+:105A0000513402452404FF803C04080024845A9841
+:105A10000E00028D000000003C1008008E105A9805
+:105A20000E00025602002021240600042407000173
+:105A3000A366007D020020210E00025FA36700051F
+:105A40008F5F017807E0FFFE240B0002AF5001409A
+:105A5000A34B01448F90001C3C081000AF48017814
+:105A60000A000362AF8000282CAD003751A0FF98D8
+:105A70008F9100140005A0803C180800271856BC20
+:105A8000029878218DEE000001C00008000000009F
+:105A90002418000614B80011000000003C0808009B
+:105AA0008D085A9824040005AF4800208E1F001866
+:105AB000AF7F00188F79004CAF79001C8F650050C4
+:105AC000122000C0AF6500700A000362AF84002896
+:105AD0002406000710A60083240300063C050800E6
+:105AE00024A55A980E000264240400818F90001CA3
+:105AF0000011102B0A000362AF8200282407000463
+:105B000014A7FFF6240500503C1808008F185A9877
+:105B1000AF5800208E0F0008AF6F00408E090008BC
+:105B2000AF6900448E14000CAF7400488E0E001054
+:105B3000AF6E004C8E0D0010AF6D00848E0A001405
+:105B4000AF6A00508E0C0018AF6C00548E04001C1D
+:105B5000AF64005893630000306B00FF116501D8FB
+:105B6000000000008F7400488F6900400289702394
+:105B700005C000042404008C1620FFDE240200036C
+:105B8000240400823C05080024A55A980E000287D0
+:105B9000000000008F90001C000010210A0003622A
+:105BA000AF820028240F000514AFFFCC240520008D
+:105BB0003C0708008CE75A98AF4700208E06000487
+:105BC000AF66005C9208000824100008A36800215A
+:105BD0008F9F001C93F90009A37900208F86001C79
+:105BE00090D8000A330400FF10900011000000005C
+:105BF0002885000914A0006924020002240A00205C
+:105C0000108A000B34058000288D002115A00008A3
+:105C100024054000240E0040108E00053C050001C4
+:105C200024140080109400023C050002240540006A
+:105C30008F7800743C19FF00031980240205782531
+:105C4000AF6F007490C4000BA36400818F84001CAC
+:105C50009489000C11200192000000009490000C27
+:105C60002406FFBF24050004A770003C908F000E9F
+:105C7000A36F003E8F84001C9089000FA369003F32
+:105C80008F8B001C8D6E00108F54007401D468231C
+:105C9000AF6D00608D6A0014AF6A0064956C0018E7
+:105CA000A76C00689563001AA763006A8D62001CE8
+:105CB000AF62006C9167000EA367003E9368003EE0
+:105CC0000106F8241220014BA37F003E8F90001C98
+:105CD0000A000362AF8500282407002214A7FF7F73
+:105CE000240300073C0B08008D6B5A981220000C0F
+:105CF000AF4B00200A000362AF830028240C00335E
+:105D000010AC0014240A00283C05080024A55A9869
+:105D10000E00023C240400810A0003EB8F90001C5B
+:105D20003C04080024845A980E00028D00000000F4
+:105D30009363000024110050306200FF10510135C0
+:105D4000000000008F90001C000018210A00036270
+:105D5000AF8300283C0D08008DAD5A9824040081C3
+:105D6000AF4D00203C05080024A55A980E00023CC7
+:105D7000A36A00348F90001C240200090A00036209
+:105D8000AF82002802B288213225FFFF0E000236C2
+:105D9000240400840A0003628F90001C1082FFA478
+:105DA00024050400288B000311600170240C0004FA
+:105DB000240300015483FF9E240540000A00043B95
+:105DC000240501003C04080024845A988F62004C8A
+:105DD0000E00028D8F6300508F90001C0000202168
+:105DE0000A000362AF8400288E1000042404008A95
+:105DF000AF50002093790005333800021700015F8F
+:105E0000020028219368002302002821311F00206E
+:105E100017E0015A2404008D9367003F2406001206
+:105E200030E200FF10460155240400810E000256A6
+:105E30000200202193630023240500040200202196
+:105E4000346B0042A36B00230E00025FA365007D4C
+:105E50008F4401780480FFFE240A0002AF50014005
+:105E6000A34A01448F90001C3C0C1000AF4C0178F9
+:105E70000A0003EC0011102B8E1000042404008A89
+:105E8000AF500020936E000531CD000215A0001622
+:105E900002002821936F003F2414000402002821EF
+:105EA00031E900FF11340010240400810E00025675
+:105EB000020020219362002324080012241FFFFE09
+:105EC00034460020A3660023A368003F93790005B1
+:105ED00002002021033FC0240E00025FA3780005CA
+:105EE00002002821000020210E00033400000000E1
+:105EF0000A0003EB8F90001C8E1000043C03000886
+:105F00000343A021AF500020928B000024050050D5
+:105F1000316400FF10850161240700880200202100
+:105F2000000028210E00022A2406000E928D000097
+:105F3000240EFF800200282101AE8025A2900000DF
+:105F4000240400040E000C5C240600300A0003EB5D
+:105F50008F90001C8E0800043C14080026945A9868
+:105F60003C010800AC285A98AF480020921F00035B
+:105F700033F9000413200002240200122402000658
+:105F8000A362003F920B001B2404FFC03165003F59
+:105F900000A43825A367003E9206000330C200012A
+:105FA00014400132000000008E020008AE8200089A
+:105FB0003C0208008C425AA010400131000249C244
+:105FC000A76900088E14000C240C0001240300149F
+:105FD000AF74002C8E0E0010AF6E0030960D0016C0
+:105FE000A76D0038960A0014A76A003AAF6C000C3F
+:105FF000A76C0010A76C0012A76C0014A76C001609
+:1060000012200136A3630034920F000331F0000226
+:106010002E1100018F90001C262200080A00036246
+:10602000AF8200288E0400043C0E0008034E30218D
+:10603000AF4400208E05000890CD0000240C0050D5
+:1060400031AA00FF114C00862407008824060009AD
+:106050000E00022A000000000A0003EB8F90001CD3
+:106060008E04001C0E00024100000000104000F4ED
+:10607000004050218F89001C240700890140202105
+:106080008D25001C240600010E00022A00000000DD
+:106090000A0003EB8F90001C960D00023C140800D0
+:1060A00026945A9831AA0004514000B83C10600070
+:1060B0008E0E001C3C010800AC2E5A98AF4E0020FA
+:1060C000920700102408001430E200FF144800D6A4
+:1060D00000000000960B00023163000114600165AE
+:1060E000000000008E020004AE8200083C1408008C
+:1060F0008E945AA01280015B000000008F7400741F
+:106100003C0380002404000102835825AF6B007417
+:10611000A3600005AF64000C3C0708008CE75AA0A0
+:106120008F86001CA7640010000711C2A76400122C
+:10613000A7640014A7640016A76200088CC80008B2
+:1061400024040002AF68002C8CC5000CAF65003041
+:1061500090DF0010A37F00348F99001C9330001152
+:10616000A37000358F98001C930F0012A36F0036A8
+:106170008F89001C912E0013A36E00378F90001C96
+:10618000960D0014A76D0038960A0016A76A003A0B
+:106190008E0C0018AF6C00245620FDCCAF84002874
+:1061A0003C05080024A55A980E0002640000202136
+:1061B0008F90001C0A0004A7000020218E1000040C
+:1061C00024070081AF500020936900233134001070
+:1061D000128000170000000002002021000028218A
+:1061E0002406001F0E00022A000000000A0003EB34
+:1061F0008F90001C3C05080024A55A980E000287C9
+:10620000240400828F90001C000028210A000362F1
+:10621000AF8500283C0408008C845A980E0014E8CE
+:10622000000000008F90001C0A000482000018216A
+:106230000E00025602002021937800230200202144
+:10624000370F00100E00025FA36F002300003821FB
+:1062500002002021000028210A0005A82406001FB2
+:10626000920F000C31E90001112000030000000032
+:106270009618000EA4D8002C921F000C33F90002CF
+:1062800013200005000038218E0200149608001229
+:10629000ACC2001CA4C8001A0A0005432406000969
+:1062A0003C05080024A55A980E0002872404008BA0
+:1062B0008F90001C0011282B0A000362AF85002874
+:1062C000AF6000843C0A08008D4A5A983C0D0800D3
+:1062D0008DAD0050240CFF803C02000C014D1821B4
+:1062E000006C2024AF4400288E070014306B007F20
+:1062F000017A282100A2C821AF2700D88E060014F9
+:10630000AF9900D0AF2600DC8E080010251FFFFEDD
+:106310000A000408AF3F01083C0508008CA55A9804
+:106320003C1908008F39005024CCFFFE00B9C02171
+:1063300003047824AF4F00283C1408008E945A9828
+:106340003C0908008D2900500289702131CD007F61
+:1063500001BA502101478021AE0600D8AF9000D08D
+:10636000AE0000DC0A0003B1AE0C0108548CFE3014
+:10637000240540000A00043B240510000E00032EF3
+:10638000000000000A0003EB8F90001C8E0F442CCD
+:106390003C186C62370979703C010800AC205A98AF
+:1063A00015E9000824050140979F00349786002CCA
+:1063B0000280282103E6C82B132000112404009238
+:1063C000240501400E000C7A240400023C01080060
+:1063D000AC225A98AF4200203C0508008CA55A9880
+:1063E00010A00005240400830E00084500000000F2
+:1063F00010400009240400833C05080024A55A9895
+:106400000E000264000000008F90001C0011202B81
+:106410000A000362AF8400280E0008490000000053
+:106420000A00055F8F90001C0E00084D0000000060
+:106430003C05080024A55A980A00062F2404008B66
+:10644000240400040E000C7A240500301440002AB5
+:10645000004050218F89001C240700830140202127
+:106460008D25001C0A000551240600018E04000839
+:106470000E000241000000000A00051BAE82000869
+:106480003C05080024A55A980E00023C240400870D
+:106490008F90001C0A0005360011102B8F830038E6
+:1064A0008F8600301066FE9D000038213C070800F2
+:1064B00024E75A1C000320C0008728218CAC000070
+:1064C00011900061246A00013143000F5466FFFA05
+:1064D000000320C00A0004F6000038213C05080033
+:1064E00024A55A980E000287240400828F90001C75
+:1064F0000A000536000010213C0B0008034B202148
+:106500002403005024070001AF420020A0830000B4
+:10651000A08700018F82001C90480004A08800180A
+:106520008F85001C90A60005A08600198F9F001C77
+:1065300093F90006A099001A8F90001C921800078A
+:10654000A098001B8F94001C928F0008A08F001C45
+:106550008F89001C912E0009A08E001D8F8D001CBC
+:1065600091AC000AA08C001E8F8B001C3C0C080014
+:10657000258C5A1C9163000B3C0B0800256B5A18A4
+:10658000A083001F8F87001C90E8000CA0880020CB
+:106590008F82001C9045000D24024646A0850021F4
+:1065A0008F86001C90DF000EA09F00228F99001C98
+:1065B0009330000FA09000238F98001C93140010BC
+:1065C000A09400248F8F001C91E90011A089002560
+:1065D0008F89001C8F8E00308F900038952D00140D
+:1065E000000E18C025C80001A48D002895270016AC
+:1065F000006C3021006BC821A487002A9525001863
+:106600003108000FA485002CA482002E8D3F001CB1
+:10661000ACCA0000AF88003011100006AF3F000088
+:10662000000038218D25001C014020210A00055161
+:1066300024060001250C00013184000F00003821E0
+:106640000A0006B8AF8400383C07080024E75A184F
+:106650000087302100003821ACA000000A0004F6B9
+:10666000ACC000003C05080024A55A980A00062F7B
+:10667000240400878E0400040E0002410000000084
+:106680000A00056AAE8200083084FFFF30C600FFB2
+:106690008F4201B80440FFFE00064400010430258B
+:1066A0003C07200000C720253C031000AF400180BC
+:1066B000AF450184AF44018803E00008AF4301B84F
+:1066C00027BDFFE8AFB00010AFBF00143C0760006B
+:1066D000240600021080000600A080210010102B6C
+:1066E0008FBF00148FB0001003E0000827BD001812
+:1066F0003C09600EAD2000348CE5201C8F82001C0C
+:106700002408FFFC00A81824ACE3201C0E0006D1CE
+:106710008C45000C0010102B8FBF00148FB00010A0
+:1067200003E0000827BD00183C02600E344701005A
+:1067300024090018274A040000000000000000009F
+:10674000000000003C06005034C30200AF44003893
+:10675000AF45003CAF430030014018218F4B000093
+:10676000316800201100FFFD2406007F2408FFFF90
+:106770008C6C000024C6FFFF24630004ACEC000016
+:1067800014C8FFFB24E70004000000000000000024
+:10679000000000003C0F0020AF4F00300000000060
+:1067A00024AD020001A5702B2529FFFF008E2021BA
+:1067B0001520FFE101A0282103E0000800000000EF
+:1067C00027BDFFE0AFB10014AFBF0018AFB000109D
+:1067D0003C05600E8CA20034008088211440000625
+:1067E0003C0460008C87201C2408FFFC00E8302457
+:1067F00034C30001AC83201C8F8B001C24090001D2
+:10680000ACA90034956900028D6500148D70000CF0
+:106810002D2400818D6700048D660008108000071C
+:106820008D6A00102D2C00041580000E30CE00075C
+:10683000312D000311A0000B000000002404008B88
+:10684000020028210E0006D1240600030011102B9F
+:106850008FBF00188FB100148FB0001003E0000844
+:1068600027BD002015C0FFF62404008B3C03002048
+:10687000AF4300300000000024020001AF8200148A
+:106880000000000000000000000000003C1F01505C
+:10689000013FC825253800033C0F600EAF47003884
+:1068A00000181882AF46003C35E8003CAF59003074
+:1068B000274704008F4400003086002010C0FFFDF1
+:1068C00000000000106000082466FFFF2403FFFFA3
+:1068D0008CEB000024C6FFFF24E70004AD0B000092
+:1068E00014C3FFFB250800043C08600EAD09003806
+:1068F0000000000000000000000000003C07002035
+:10690000AF470030000000000E0006F901402021D2
+:1069100002002821000020210E0006D124060003D9
+:106920000011102B8FBF00188FB100148FB0001012
+:1069300003E0000827BD002027BDFFE0AFB200182C
+:106940003092FFFFAFB10014AFBF001CAFB000101A
+:106950001640000D000088210A0007AA022010211D
+:1069600024050001508500278CE5000C0000000D77
+:10697000262300013071FFFF24E200200232382B71
+:1069800010E00019AF82001C8F8200141440001622
+:106990008F87001C3C0670003C0320008CE5000043
+:1069A00000A62024148300108F84003C00054402BC
+:1069B0003C09800000A980241480FFE9310600FF13
+:1069C0002CCA00095140FFEB262300010006688015
+:1069D0003C0E080025CE579801AE60218D8B00003B
+:1069E0000160000800000000022010218FBF001C81
+:1069F0008FB200188FB100148FB0001003E00008B0
+:106A000027BD00200E0006D1240400841600FFD804
+:106A10008F87001C0A00078BAF80003C90EF0002BC
+:106A200000002021240600090E0006D1000F2E00D0
+:106A30008F87001C0010102B0A00078BAF82003CD0
+:106A4000020028210E0006DF240400018F87001CAD
+:106A50000A00078BAF82003C020028210E0006DFEF
+:106A6000000020210A0007C38F87001C0E00071FAB
+:106A7000020020210A0007C38F87001C30B0FFFFEF
+:106A8000001019C08F5801B80700FFFE3C1F2004FA
+:106A90003C191000AF430180AF400184AF5F018813
+:106AA000AF5901B80A00078C262300013082FFFF8E
+:106AB00014400003000018210004240224030010E5
+:106AC000308500FF14A000053087000F2466000801
+:106AD0000004220230C300FF3087000F14E00005DD
+:106AE000308900032468000400042102310300FF00
+:106AF0003089000315200005388B0001246A00024C
+:106B000000042082314300FF388B00013164000112
+:106B100010800002246C0001318300FF03E00008B4
+:106B200000601021308BFFFF000B394230E600FF80
+:106B30003C09080025295998000640800109602178
+:106B40008D8700003164001F240A0001008A1804A8
+:106B500030A500FF00E3202514A000020003102749
+:106B600000E22024240F000100CF700401096821F5
+:106B7000000E282714800005ADA400008F86000CAD
+:106B800000A6102403E00008AF82000C8F88000CE0
+:106B900001C8102503E00008AF82000C3C06001F6E
+:106BA0003C0360003084FFFF34C5FF8024020020D6
+:106BB000AC602008AC60200CAC602010AC652014E8
+:106BC000AC642018AC62200000000000000000004F
+:106BD00003E000080000000027BDFFE82402FFFFDB
+:106BE000AFBF0010AF82000C000020213C0608005F
+:106BF00024C659982405FFFF248900010004408021
+:106C00003124FFFF010618212C87002014E0FFFA31
+:106C1000AC6500000E0008160000202124020001CF
+:106C20003C04600024050020AC822018AC852000C4
+:106C3000000000000000000000000000244A0001E5
+:106C40003142FFFF2C46040014C0FFF78FBF001035
+:106C500003E0000827BD00188F8300082C620400A1
+:106C600003E00008384200018F830008246200011D
+:106C700003E00008AF8200088F8300082462FFFF52
+:106C800003E00008AF82000827BDFFE0AFB10014A9
+:106C9000AFBF0018AFB000108F6B00303C06600033
+:106CA00000808821ACCB20088F6A002C3C02800039
+:106CB00024030008ACCA200C9769003A9768003892
+:106CC00000092C003107FFFF00A72025ACC42010CD
+:106CD000ACC22014ACC32000000000000000000083
+:106CE000000000003C0360008C6D200031AC000807
+:106CF0001580FFF9000000008C6E201405C00020F4
+:106D0000000000000E0007DA8F84000C00024080B3
+:106D10003C09080025295998010938218CE4000014
+:106D20000E0007DA00028140020220213090FFFFAE
+:106D3000020020210E0007F8000028213C0C8000F2
+:106D4000022C58253210FFFF3C116000240A00205D
+:106D5000AE2B2014AE302018AE2A20000000000018
+:106D60000000000000000000020010218FBF00188A
+:106D70008FB100148FB0001003E0000827BD002081
+:106D80008C6620143C02001F3443FF803C1FFFE848
+:106D900000C3C02437F9080003198021001079C20C
+:106DA0003C0C8000022C582531F0FFFF3C116000A4
+:106DB000240A0020AE2B2014AE302018AE2A20006A
+:106DC0000000000000000000000000000200102190
+:106DD0008FBF00188FB100148FB0001003E00008BF
+:106DE00027BD002027BDFFE8AFB000103402FFFF31
+:106DF0003090FFFFAFBF00141202000602002021F6
+:106E00000E00081600000000020020210E0007F806
+:106E1000240500018F8400088FBF00148FB000107C
+:106E20002483FFFF27BD001803E00008AF8300089C
+:106E3000000439C230E6003F00043B42000718401E
+:106E4000240210002CC4002024C8FFE0AF42002C14
+:106E5000246300011480000330A900FF00071840DC
+:106E6000310600FF0003608024080001019A5821C8
+:106E70003C0A000E00C82804016A382111200005D0
+:106E8000000530278CE900000125302503E00008CB
+:106E9000ACE600008CEE000001C6682403E00008A8
+:106EA000ACED000027BDFFE8AFBF0014AFB000108D
+:106EB0003C0460008C8508083403F00030A2F00028
+:106EC00050430006240200018C8708083404E000C7
+:106ED00030E6F00010C4001E24020002AF82004021
+:106EE0003C1060003C0A0200AE0A0814240910009D
+:106EF0003C08000E8E03440003482021AF49002CBB
+:106F0000240501200E000CC0000030218F830040BA
+:106F1000106000043C021691240B0001106B000E5F
+:106F20003C023D2C344F0090AE0F44088FBF00143C
+:106F30008FB000103C0C6000240E10003C0D0200CD
+:106F400027BD0018AD8E442003E00008AD8D081069
+:106F50000A0008E7AF8000403C0218DA344F009086
+:106F6000AE0F44088FBF00148FB000103C0C6000BF
+:106F7000240E10003C0D020027BD0018AD8E4420E9
+:106F800003E00008AD8D08100A0008BB24050001CD
+:106F90000A0008BB000028213C08080025085DA461
+:106FA0002404FFFF010018212402001E2442FFFFD9
+:106FB000AC6400000441FFFD246300043C070800AA
+:106FC00024E75E208CE5FFFC2404001C240600015D
+:106FD000308A001F0146480424840001000910275C
+:106FE0002C8300201460FFFA00A22824ACE5FFFCEB
+:106FF0003C05666634A4616E3C06080024C65EE06B
+:10700000AF840058AF88009C2404FFFF00C0182103
+:107010002402001F2442FFFFAC6400000441FFFD76
+:10702000246300043C0766663C05080024A55EA0B6
+:10703000AF86004834E6616EAF8600982404FFFFF7
+:1070400000A018212402000F2442FFFFAC640000BE
+:107050000441FFFD246300043C0B66663C06080007
+:1070600024C65E203568616EAF8500A4AF880070CD
+:107070002404FFFF00C018212402001F2442FFFF48
+:10708000AC6400000441FFFD246300043C0D66660F
+:107090003C0A0800254A5F6035AC616EAF860090FF
+:1070A000AF8C005C2404FFFF014018212402000380
+:1070B0002442FFFFAC6400000441FFFD2463000490
+:1070C0003C09080025295F708D27FFFC2404000679
+:1070D000240500013099001F0325C0042484000109
+:1070E000001878272C8E002015C0FFFA00EF3824F6
+:1070F000AD27FFFC3C09666624030400240403DC7E
+:1071000024050200240600663522616E3C08080052
+:1071100025085AA4AF820074AF830044AF83006C8B
+:10712000AF830050AF830084AF8A008CAF840064CB
+:10713000AF85004CAF860054AF840078AF85006007
+:10714000AF86008001001821240200022442FFFFC4
+:10715000AC6000000441FFFD24630004240400032C
+:107160002403000C3C0A0800254A5AB0AF8A006884
+:107170000A00098E2405FFFF000418802484000102
+:10718000006858212C8700C014E0FFFBAD650000AB
+:107190003C0E666635CD616E240C17A024081800DD
+:1071A000AF8D0088AF8C009403E00008AF88007CAE
+:1071B0002484007F000421C200004021000030210F
+:1071C00000003821000028210A0009A5AF8400A092
+:1071D0001060000624E7000100C4302124A500014E
+:1071E0002CC20BF51440FFFA2CA300663C090800E2
+:1071F00025295F6001201821240200032442FFFF9B
+:10720000AC6000000441FFFD2463000410E0001A9C
+:1072100024E3FFFF0003294210A0000A0000202100
+:107220002406FFFF3C03080024635F602484000100
+:107230000085502BAC660000250800011540FFFBBF
+:107240002463000430E2001F10400008000868803A
+:10725000240C0001004C38040008588001692821E2
+:1072600024E6FFFF03E00008ACA6000001A94021CE
+:107270002409FFFFAD09000003E000080000000042
+:10728000AF4400283C04000C034420210005288260
+:107290000A000CC000003021000421803C03600083
+:1072A000AC6410080000000000052980AC65100CDB
+:1072B0000000000003E000088C62100C27BDFFE80E
+:1072C0000080282124040038AFBF00140E0009D527
+:1072D000AFB0001024040E00AF4400283C10000C96
+:1072E00003502021240500100E000CC000003021A6
+:1072F00003501021AC400000AC40000424040038CE
+:107300008FBF00148FB0001024053FFF27BD001869
+:107310000A0009D58C430000000421803C03600072
+:10732000AC641008000000008C62100C03E0000840
+:107330000002118227BDFFC8AFB400208F940068FF
+:10734000AFBE0030AFB7002CAFB600280000B821A8
+:107350000080B021241E00C0AFBF0034AFB50024B0
+:10736000AFB3001CAFB20018AFB10014AFB0001043
+:107370000A000A12AFA5003C504000018F9400683B
+:1073800027DEFFFF13C00028269400048E92000021
+:107390003C03080024635DA01240FFF70283102B1A
+:1073A0003C04080024845AA4028410230002A8C0CC
+:1073B000000098210A000A212411000100118840D0
+:1073C000122000260000000002B380210251282470
+:1073D0000200202110A0FFF9267300010E0009DE33
+:1073E000000000000016684032EC000101AC2021D2
+:1073F0000E0009D5020028218F89009426F700018C
+:107400008FA6003C3AEB0001316A00012528FFFFFE
+:107410000011382702CAB021AF88009416E6FFE7B2
+:1074200002479024AE92000002E010218FBF00348A
+:107430008FBE00308FB7002C8FB600288FB5002488
+:107440008FB400208FB3001C8FB200188FB10014CE
+:107450008FB0001003E0000827BD00383C0E080084
+:1074600025CE5DA0028E102B0A000A0DAE92000000
+:1074700027BDFFD8AFB10014AFB00010AFBF0020E0
+:10748000AFB3001CAFB2001800A0882110A0001FED
+:10749000000480403C13080026735AA40A000A5ACC
+:1074A0002412000112200019261000010E0009F517
+:1074B00002002021000231422444FFA0000618806F
+:1074C0003045001F2C8217A1007318212631FFFFC1
+:1074D0001040FFF400B230048C690000020020214B
+:1074E00024053FFF012640241500FFEE0126382524
+:1074F0000E0009D5AC6700008F8A009426100001A9
+:10750000254700011620FFE9AF8700948FBF0020B8
+:107510008FB3001C8FB200188FB100148FB0001011
+:1075200003E0000827BD00288F85009C00805821BB
+:107530000000402100004821240A001F3C0C0800E4
+:10754000258C5E1C3C0D080025AD5DA48CA60000BA
+:1075500050C000140000402100AD1023000238C0CC
+:10756000240300010A000A930000202115000003F3
+:1075700000E410212448202400004821252900018E
+:10758000512B00132506DFDC106000062484000167
+:1075900000C3702415C0FFF5000318400A000A91CB
+:1075A0000000402110AC002624A300040060282124
+:1075B000254AFFFF1540FFE5AF85009C512B0004D5
+:1075C0002506DFDC0000402103E000080100102157
+:1075D0000006614230C5001F000C50803C070800C7
+:1075E00024E75DA424040001014730211120000F8D
+:1075F00000A420043C05080024A55E20148000059A
+:107600002529FFFF24C6000410C50011000000005A
+:10761000240400018CCF00000004C0270004204097
+:1076200001F868241520FFF5ACCD00008F99007893
+:1076300001001021032B482303E00008AF890078E4
+:107640003C05080024A55DA40A000A9B0000402117
+:107650003C06080024C65DA40A000AB42404000104
+:10766000308800FF240200021102000A24030003F4
+:107670001103005C8F8900A4240400041104005F3E
+:1076800024050005110500670000182103E000082B
+:10769000006010218F8900483C0C0800258C5EE0BA
+:1076A0003C04080024845F60240300201060000F65
+:1076B00000005821240D0002240E00033C0F080096
+:1076C00025EF5EE08D27000014E0000B30F9FFFF8E
+:1076D000252900040124C02B53000001018048210A
+:1076E0002463FFFF5460FFF88D270000016018211C
+:1076F00003E0000800601021132000323C0500FF69
+:1077000030E200FF004030211040004200005021D4
+:1077100024050001000020210005C84000A6C02467
+:1077200017000003332500FF14A0FFFB2484000191
+:10773000012CC023001828C000AA6021008C502111
+:107740003144001F240C0001008C18040003102792
+:1077500000E23024110D0041AD260000110E004C56
+:10776000000A1840110D00368F87006C510E00562C
+:107770008F8C0060240D0004110D005A8F8E008440
+:10778000240E0005150EFFDA01601821240B1430B9
+:1077900011400006000018218F8400A0246300011E
+:1077A000006A402B1500FFFD016458218F8A00807C
+:1077B000AF89008C016018212549FFFF0A000AEB00
+:1077C000AF89008000E52024000736021080FFD03A
+:1077D000240A001800075402314600FF0A000AF389
+:1077E000240A00103C0C0800258C5EA03C04080014
+:1077F00024845EE00A000ADA240300103C0C08002E
+:10780000258C5E203C04080024845EA00A000AD96E
+:107810008F89009000071A02306600FF0A000AF301
+:10782000240A00088F89008C3C0C0800258C5F60BE
+:107830003C04080024845F700A000ADA2403000470
+:10784000000A4080250B003024E6FFFF016018216C
+:10785000AF8900480A000AEBAF86006C000AC982B3
+:10786000001978803C07080024E75EA001E720218A
+:10787000000A18428C8F00003079001F032C380456
+:107880000007C02701F860240A000B08AC8C000038
+:10789000000331420006288000AF28213062001F1B
+:1078A0008CB8000024630001004CC804000321428E
+:1078B000001938270004108003073024004F2021CE
+:1078C0000A000B4CACA60000000A68C025AB0032D1
+:1078D000258AFFFF01601821AF8900A40A000AEB86
+:1078E000AF8A0060254B1030AF89009001601821ED
+:1078F00025C9FFFF0A000AEBAF8900843086000724
+:107900002CC2000610400014000000000006408059
+:107910003C030800246357BC010338218CE40000B9
+:1079200000800008000000002409000310A9000ED8
+:1079300000000000240A000510AA000B000000004F
+:10794000240B000110AB0008000000008F8C00A089
+:1079500010AC00050000000003E00008000010214A
+:107960000A000A7900A020210A000AC700C02021CD
+:1079700027BDFFE8308400FF240300021083000BC2
+:10798000AFBF0010240600031086003A240800044C
+:1079900010880068240E0005108E007F2CAF143074
+:1079A0008FBF001003E0000827BD00182CA2003094
+:1079B0001440FFFC8FBF001024A5FFD0000531C28A
+:1079C000000668803C07080024E75EE001A730213C
+:1079D0008CC900000005288230AC001F240B000178
+:1079E000018B50048F840048012A4025ACC8000058
+:1079F0008C83000050600001AF8600488F98006CB7
+:107A000030AE000124A6FFFF270F000115C00002C1
+:107A1000AF8F006C24A600010006414200082080C0
+:107A2000008718218C79000030C2001F2406000155
+:107A30000046F804033F382410E0FFDA8FBF00103F
+:107A40000005C182001870803C0F080025EF5EA081
+:107A500001CF48218D2B00000005684231A5001F91
+:107A600000A66004016C502527BD001803E0000843
+:107A7000AD2A00002CA7003014E0FFCA8FBF001011
+:107A800030B900071723FFC724A8FFCE00086A02F9
+:107A9000000D60803C0B0800256B5EA0018B30213F
+:107AA0008CC40000000828C230AA001F240800016E
+:107AB000014848048F8200A400891825ACC3000047
+:107AC0008C5F000053E00001AF8600A40005704009
+:107AD000000E7942000F28803C04080024845EE0F8
+:107AE00000A418218C6B000025DF000131CD001FA0
+:107AF000001F514201A86004016C4825000A108053
+:107B0000AC690000004428218CA600008F9800601A
+:107B100033F9001F8FBF00100328380400C77825F1
+:107B2000270E000127BD0018ACAF000003E00008DD
+:107B3000AF8E006024A5EFD02CB804001300FF998D
+:107B40008FBF001000053142000658803C0A080033
+:107B5000254A5E20016A30218CC4000030A3001F3A
+:107B600024090001006910048F9900900082F82513
+:107B7000ACDF00008F27000050E00001AF860090CE
+:107B80008F8D00848FBF001027BD001825AC000129
+:107B900003E00008AF8C008415E0FF828FBF001067
+:107BA0008F8600A0000610400046F821001F21002B
+:107BB00003E4C8210019384024F8143000B8402BE1
+:107BC0001100FF788FBF001024A4EBD00E00021329
+:107BD00000C0282100027942000F70803C0D08008F
+:107BE00025AD5F6001CD20218C8B0000304C001F43
+:107BF00024060001018618048F89008C016350253A
+:107C0000AC8A00008D25000050A00001AF84008CDC
+:107C10008F9800808FBF001027BD00182708000133
+:107C200003E00008AF88008030A5000724030003AC
+:107C300010A3001028A2000414400008240700022A
+:107C40002403000410A300152408000510A8000F49
+:107C50008F8500A003E000080000000014A7FFFDCE
+:107C60000080282114C3FFFB240400020A000B8BB0
+:107C700000000000240900050080282110C9FFFB36
+:107C80002404000303E000080000000014C5FFF115
+:107C9000008028210A000B8B24040005240A00011F
+:107CA0000080282110CAFFF12404000403E000082A
+:107CB0000000000027BDFFE0AFB00010000581C24A
+:107CC0002603FFD024C5003F2C6223D024C6007FAA
+:107CD000AFB20018AFB10014AFBF001C309100FF6D
+:107CE000000691C2000529820200202110400008F0
+:107CF0002403FFFF0E000A4B0000000002002021B9
+:107D0000022028210E000C390240302100001821E9
+:107D10008FBF001C8FB200188FB100148FB00010FD
+:107D20000060102103E0000827BD002027BDFFD818
+:107D300024A2007FAFB3001CAFB20018000299C2AA
+:107D4000309200FF24A3003F02402021026028213E
+:107D5000AFB10014AFB00010AFBF00200E000B6E2B
+:107D60000003898200408021004020210220282138
+:107D700014400009000018218FBF00208FB3001CA1
+:107D80008FB200188FB100148FB000100060102166
+:107D900003E0000827BD00280E0009FC00000000D9
+:107DA00000402821020020211051FFF3001019C0CB
+:107DB0000E000A4B00000000020020210240282192
+:107DC0000E000C39026030218FBF00208FB3001CE1
+:107DD0008FB200188FB100148FB00010000018216E
+:107DE0000060102103E0000827BD00283084FFFF59
+:107DF00030A5FFFF1080000700001821308200012D
+:107E00001040000200042042006518211480FFFB8E
+:107E10000005284003E000080060102110C00007A2
+:107E2000000000008CA2000024C6FFFF24A500046F
+:107E3000AC82000014C0FFFB2484000403E00008AF
+:107E40000000000010A0000824A3FFFFAC86000083
+:107E500000000000000000002402FFFF2463FFFF79
+:107E60001462FFFA2484000403E00008000000000C
+:107E700030A5FFFF8F4201B80440FFFE3C076015AC
+:107E800000A730253C031000AF440180AF400184BF
+:107E9000AF46018803E00008AF4301B88F8500D0EA
+:107EA0002C864000008018218CA700840087102BAE
+:107EB00014400010000000008CA800842D06400033
+:107EC00050C0000F240340008CAA0084008A482B75
+:107ED000512000018CA3008400035A42000B208033
+:107EE0003C05080024A558200085182103E000085F
+:107EF0008C62000014C0FFF4000000002403400066
+:107F000000035A42000B20803C05080024A558209D
+:107F10000085182103E000088C6200008F8300D0E8
+:107F2000906600D024C50001A06500D08F8500D0E8
+:107F3000906400D090A200D210440017000000000E
+:107F4000936C00788F8B00BC318A00FFA16A000C13
+:107F500025490001938700C4312200FF3048007F8B
+:107F60001107000B00026827A36200788F4E01788A
+:107F700005C0FFFE8F9900B0241800023C0F1000CE
+:107F8000AF590140A358014403E00008AF4F017806
+:107F90000A000D0931A20080A0A000D00A000CFF49
+:107FA000000000008F8700D027BDFFC8AFBF0030A2
+:107FB000AFB7002CAFB60028AFB50024AFB4002097
+:107FC000AFB3001CAFB20018AFB10014AFB00010D7
+:107FD00094E300E094E200E2104300D72405FFFFA1
+:107FE0003C047FFF3497FFFF2415FF800A000DF04B
+:107FF0003C16000E108A00D18FBF00308F9100B068
+:108000003C1808008F18005C001230C0001291402C
+:108010000311702101D57824AF4F002C94EC00E2BD
+:1080200031CD007F01BA5821318A7FFF0176482186
+:10803000000A804002091021945300003C08080007
+:108040008D0800580246C02132733FFF001319808B
+:10805000010320210224282130BF007F03FAC82118
+:1080600000B5A024AF54002C0336A0218E87001049
+:108070008E8F003003785821256D008800EF702323
+:10808000240C0002AE8E0010AF8D00ACA16C0088F5
+:10809000976A003C8E8400308F9100AC0E000CD6A5
+:1080A0003150FFFF00024B80020940253C02420094
+:1080B00001022025AE2400048E8300048F8D00ACC5
+:1080C0008E860000240E0008ADA3001CADA600188B
+:1080D000ADA0000CADA00010929F000A33F900FF84
+:1080E000A5B90014968500083C1F000CA5A5001634
+:1080F0009298000A331100FFA5B100209690000865
+:1081000024180005A5B00022ADA00024928F000B1A
+:108110002410C00031E700FFA5A70002A1AE0001B6
+:108120008E8C00308F8B00AC8F8400B0AD6C00085B
+:108130003C0A08008D4A005401444821013540247E
+:10814000AF4800283C0208008C4200540044302113
+:1081500030C3007F007AC821033F282102458821CF
+:10816000AF9100BCAF8500C0A23800008F8A00BC70
+:108170002403FFBF2418FFDF954F000201F03824CD
+:1081800000F37025A54E0002914D000231AC003F76
+:10819000358B0040A14B00028F8600BC8F8900D038
+:1081A000ACC000048D28007C3C098000ACC80008ED
+:1081B00090C4000D3082007FA0C2000D8F8500BCEE
+:1081C00090BF000D03E3C824A0B9000D8F9100BC3F
+:1081D0009233000D02789024A232000D8E9000346C
+:1081E0008F8B00BCAD7000108E87002C8E8F0030FE
+:1081F00000EF7023AD6E0014916D001831AC007F5C
+:10820000A16C00188F9F00BC8E8A00308FE8001888
+:10821000015720240109302400C41025AFE20018C2
+:108220009283000AA3E3001C969900088F8500BC86
+:108230008F9800D0A4B9001E8E9000308E8400303C
+:108240000E0002138F0500848F8500D0000291403C
+:108250000002990090AF00BC0253882100403021F9
+:1082600031E7000210E0000302118021000290803B
+:108270000212802190B900BC3327000410E00002F4
+:108280000006F880021F80218E9800308F8B00BC82
+:1082900024068000330F0003000F702331CD00034C
+:1082A000020D6021AD6C000494A400E294AA00E2E7
+:1082B00094B000E231497FFF2522000130537FFF57
+:1082C0000206182400734025A4A800E294A400E24A
+:1082D0003C1408008E94006030917FFF123400221D
+:1082E000000000000E000CF6000000008F8700D098
+:1082F0000000282194F300E094F000E21213000F34
+:108300008FBF003090E900D090E800D1313200FFFB
+:10831000310400FF0244302B14C0FF36264A00010E
+:1083200090EE00D2264B000131CD00FF008D602180
+:10833000158BFF338F9100B08FBF00308FB7002CAB
+:108340008FB600288FB500248FB400208FB3001C97
+:108350008FB200188FB100148FB0001000A0102150
+:1083600003E0000827BD003894A300E20066402423
+:10837000A4A800E290A400E290B900E2309100FFCE
+:108380000011A1C20014F827001F39C03332007F4A
+:10839000024730250A000DE8A0A600E23084FFFF66
+:1083A00030A5FFFFAF440018AF45001C03E00008F4
+:1083B0008F42001427BDFFB8AFB000208F9000D0CF
+:1083C0003084FFFFAFA40010AFBF0044AFBE004039
+:1083D000AFB7003CAFB60038AFB50034AFB4003033
+:1083E000AFB3002CAFB20028AFB10024A7A0001893
+:1083F000920600D1920500D030C400FF30A300FFE8
+:108400000064102B10400122AFA00014920900D08C
+:108410008FB50010312800FF0088382324F4FFFFB7
+:108420000014882B0015982B02339024524001260B
+:108430008FB40014961E0012961F00108FB7001004
+:1084400003DFC823001714000019C400000224032E
+:108450000018140302E2B02A52C00001004020219B
+:108460000284282B10A0000200801821028018210D
+:1084700000033C0000071C033064FFFF2C8600094A
+:1084800014C000020060B821241700088E0A0008FA
+:10849000001769808E09000C31ABFFFF3C0C001007
+:1084A000016C402527520400AF4A0038AF9200B853
+:1084B000AF49003CAF480030000000000000000061
+:1084C00000000000000000000000000000000000AC
+:1084D00000000000000000008F4F000031EE00207F
+:1084E00011C0FFFD0017982A027110240A000E83A4
+:1084F0000000B02155E001019258000131130080C5
+:10850000126001CF012020219655001232A5FFFFF5
+:108510000E000CCBA7B500188F9000D00291A023BD
+:1085200026CD00018F9100B8000DB4000016B403F1
+:108530002638004002D7582A0014882B2405000151
+:108540000300902101711024AF9800B8AFA500146A
+:10855000104001BC8F8900B03C0C08008D8C005489
+:10856000240BFF80921E00D001895021014B28244A
+:10857000921900D0AF4500288E4700103C08080033
+:108580008D0800583C1808008F18005430E33FFF56
+:108590000003218001043021012658212402FF809C
+:1085A0000162F824920C00D0AF5F002C92480000CA
+:1085B00033D100FF333500FF0309982100117140CA
+:1085C000001578C0326D007F01CF382101BA282113
+:1085D000318300FF3164007F3C0A000C00AA88212F
+:1085E0000367F02100033140009A10213108003F59
+:1085F0003C1F000E00D1C021005F982127D90088C0
+:108600002D150008AF9100C0AF9900ACAF9800BC29
+:10861000AF9300B412A0018A00008821240E00014B
+:10862000010E4004310D005D11A0FFB2310F0002B8
+:108630008E4A00283C0300803C04FFEFAE6A000035
+:108640008E450024A260000A3488FFFFAE65000456
+:108650009247002C3C1FFF9F37FEFFFFA267000CD4
+:108660008E62000C3C180040A267000B00433025CE
+:1086700000C8C824033E88240238A825AE75000C23
+:108680008E490004AE6000183C0F00FFAE69001474
+:108690008E4D002C35EEFFFF8F8B00B001AE6024B5
+:1086A000AE6C00108E470008A660000896450012C8
+:1086B000AE6700208E42000C30B03FFF00105180AA
+:1086C000AE6200248E5E0014014B182130A400011C
+:1086D000AE7E00288E590018000331C2000443808A
+:1086E000AE79002C8E51001C00C8F821A67F001C1A
+:1086F000AE710030965800028E550020A678001EFC
+:10870000AE75003492490033313000045600000544
+:10871000925000008F8C00D08D8B007CAE6B0030AF
+:10872000925000008F8F00BCA1F00000924E0033E9
+:1087300031CD000251A00007925E00018F8900BC7C
+:108740002418FF80913100000311A825A1350000F5
+:10875000925E00018F9900BC2409FFBF240BFFDF4C
+:10876000A33E00018F9500BC92B8000D3311007F2D
+:10877000A2B1000D8F8E00BC91D0000D02097824AB
+:10878000A1CF000D8F8800BC8E6D0014910A000DE2
+:108790002DAC0001000C2940014B382400E51825C0
+:1087A000A103000D964200128F8800BC8F8700D075
+:1087B000A50200028E45000490FF00BC30A4000317
+:1087C0000004302330DE000300BE102133F9000224
+:1087D00017200002244400342444003090E200BCFE
+:1087E00000A2302430DF000417E0000224830004DC
+:1087F000008018218F8F00AC24090002AD03000413
+:10880000A1E90000924E003F8F8D00ACA1AE0001A7
+:108810008F9500AC924C003F8E440004A6AC000241
+:10882000976B003C0E000CD63170FFFF00025380A6
+:10883000020A38253C05420000E51825AEA30004D5
+:108840008F8600AC8E480038ACC800188E440034C7
+:10885000ACC4001CACC0000CACC00010A4C0001420
+:10886000A4C00016A4C00020A4C00022ACC00024F4
+:108870008E6400145080000124040001ACC4000880
+:108880000E000CF6241100010A000E768F9000D025
+:10889000920F00D2920E00D08FB5001031EB00FF86
+:1088A00031CD00FF008D6023016C50212554FFFF66
+:1088B0000014882B0015982B023390241640FEDDFF
+:1088C000000000008FB400148FBF00448FBE004032
+:1088D0003A8200018FB7003C8FB600388FB5003464
+:1088E0008FB400308FB3002C8FB200288FB10024DA
+:1088F0008FB0002003E0000827BD0048331100209E
+:10890000122000EF24150001921E00BC241F00015C
+:108910000000A82133D900011320000DAFBF001CB7
+:108920008E4400148E0800840088102B144000022E
+:10893000008030218E0600848E03006400C3A82BC3
+:1089400016A0000200C020218E0400640080A8212F
+:108950008E4700148E05006400E5302B14C0000221
+:1089600000E020218E0400640095F02313C0000471
+:108970008FAC001C240A0002AFAA001C8FAC001CA4
+:10898000028C582B156000A8000018218E4F00386B
+:108990008E6D000C3C0E0080AE6F00008E4A0034DD
+:1089A0003C10FF9F01AE5825AE6A00049246003F7E
+:1089B000360CFFFF016C38243C0500203C03FFEF20
+:1089C000A266000B00E510253468FFFF8F8700B812
+:1089D0000048F8243C04000803E4C825AE79000CE4
+:1089E0008CF80014AE60001802BE7821AE78001436
+:1089F0008CF10018AE71001C8CE90008AE690024EF
+:108A00008CEE000CAE6F002CAE600028AE6E002025
+:108A1000A6600038A660003A8CED001401B58023F2
+:108A2000021E902312400011AE72001090EA003D29
+:108A30008E6500048E640000000A310000A6C82183
+:108A4000000010210326402B0082F82103E8C021FA
+:108A5000AE790004AE78000090F1003DA271000AEA
+:108A60008F8900B895320006A67200088F9800AC76
+:108A70002419000202A02021A31900009769003CDC
+:108A80008F9200AC0E000CD63131FFFF00027B80CC
+:108A90008F8500B8022F68253C0E420001AE80256C
+:108AA000AE5000048F8400AC8CAC0038AC8C001845
+:108AB0008CAB0034AC8B001CAC80000CAC80001084
+:108AC000A4800014A4800016A4800020A4800022AA
+:108AD000AC80002490A7003FA487000212A00135BB
+:108AE0002403000153C0000290A2003D90A2003E6A
+:108AF00024480001A08800018F9F00ACAFF500085A
+:108B00008F8300D024070034906600BC30C500027B
+:108B100050A00001240700308F9200B88F8A00BC5B
+:108B2000906D00BC924B00002412C00032A50003DF
+:108B3000A14B00008F8600B88F8800BC240200047F
+:108B400090C400010045182330790003A1040001FE
+:108B50008F8A00BC8F9F00B800F53821955800021D
+:108B600097E9001200F9382103128824312F3FFFC2
+:108B7000022F7025A54E00029150000231A800047A
+:108B8000320C003F358B0040A14B000212A00002C6
+:108B90008F8500BC00E838218F8E00D0ACA7000480
+:108BA000240BFFBF8DCD007C2EA400012403FFDF2A
+:108BB000ACAD000890B0000D00044140320C007FC5
+:108BC000A0AC000D8F8600BC90CA000D014B102494
+:108BD000A0C2000D8F8700BC90E5000D00A3F82413
+:108BE00003E8C825A0F9000D8F9100B88F8D00BC57
+:108BF0008E380020ADB800108E290024ADA90014D5
+:108C00008E2F0028ADAF00188E2E002C0E000CF613
+:108C1000ADAE001C8FB0001C240C0002120C00EE44
+:108C20008F9000D08FA3001C006088211460000288
+:108C30000060A8210000A02156A0FE390291A023C7
+:108C40000014882B8FA90010960700103C1E0020EE
+:108C50000136402302C750213112FFFFA60A00103F
+:108C6000AFB20010AF5E0030000000009617001099
+:108C7000961300121277008F000000008E05000C82
+:108C80008E0B00080016698000AD7021000DC7C36F
+:108C900001CDA82B0178782101F56021AE0E000CE2
+:108CA000AE0C00088FB300100013B82B02378024DD
+:108CB0001200FF048F9000D00A000E3C000000005C
+:108CC0008E4D0038A6600008240B0003AE6D000036
+:108CD0008E500034A260000A8F9800B8AE70000475
+:108CE0003C0500809311003FA26B000C8E6F000CBE
+:108CF0003C0EFF9FA271000B01E5102535CCFFFF54
+:108D00003C03FFEF8F9200B8004C30243464FFFF27
+:108D100000C4F824AE7F000C8E590014964800124F
+:108D20008F8A00B0AE7900108E490014AE60001832
+:108D3000AE600020AE690014AE6000248E470018BB
+:108D400031093FFF0009F180AE6700288E4D000811
+:108D500003CA802131180001AE6D00308E4F000C27
+:108D60008F8C00AC001089C200185B80022B282178
+:108D7000240E0002A665001CA6600036AE6F002C13
+:108D8000A18E00009763003C8F8A00AC3C04420037
+:108D90003062FFFF00443025AD4600048F9F00B8CD
+:108DA000240700012411C0008FF30038240600348A
+:108DB000AD5300188FF90034AD59001CAD40000CC4
+:108DC000AD400010A5400014A5400016A5400020AD
+:108DD000A5400022AD400024A5550002A147000196
+:108DE0008F9E00AC8F8800B88F9200BCAFD5000872
+:108DF000910D0000A24D00008F9000B88F8B00BC39
+:108E000092180001A17800018F8400BC94850002B3
+:108E100000B1782401E97025A48E0002908C000234
+:108E20003183003FA08300028F8300D08F8400BC79
+:108E3000906200BC305300025260000124060030F2
+:108E4000AC8600048C6F007C2403FFBF02A0882145
+:108E5000AC8F0008908E000D31CC007FA08C000DEF
+:108E60008F8600BC90C2000D00432024A0C4000DDA
+:108E70008F8900BC913F000D37F90020A139000D0A
+:108E80008F8800B88F9300BC8D070020AE6700105C
+:108E90008D0A0024AE6A00148D1E0028AE7E0018D4
+:108EA0008D12002C0E000CF6AE72001C0A00103D54
+:108EB0008F9000D0960E00148E03000431CCFFFF7B
+:108EC000000C10C000622021AF44003C8E1F000443
+:108ED0008F46003C03E6C8231B20003C0000000036
+:108EE0008E0F000025E200013C05001034B500089B
+:108EF000AF420038AF550030000000000000000015
+:108F00000000000000000000000000000000000061
+:108F100000000000000000008F580000330B00200C
+:108F20001160FFFD000000008F5304003C0D002085
+:108F3000AE1300088F570404AE17000CAF4D00307D
+:108F4000000000003C0608008CC600442416000106
+:108F500010D600BD00000000961F00123C0508005E
+:108F60008CA5004000BFC821A61900129609001464
+:108F700025270001A6070014960A00143144FFFFBC
+:108F80005486FF498FB30010A60000140E000E1681
+:108F900030A5FFFF3C0408008C84002496030012D7
+:108FA0000044102300623023A60600120A00105964
+:108FB0008FB30010A08300018F8200AC2404000155
+:108FC000AC4400080A000FF08F8300D08E0200002E
+:108FD0000A0010EA3C0500108F8200C08FA7001C19
+:108FE000921800D0920B00D0920E00D0331100FFE7
+:108FF000316900FF00117940000928C001E56021B6
+:1090000031C300FF036C50210003314000C2C8216E
+:10901000255F0088AF9F00ACAF9900BCA1470088D6
+:109020009768003C03C020218F9100AC0E000CD645
+:109030003110FFFF00026B80020DC0253C0442008E
+:109040008F8D00B803045825AE2B00048DA900387D
+:109050008F8B00AC0000882100118100AD690018E1
+:109060008DAF00343C087FFF3504FFFFAD6F001C5F
+:1090700091AC003E8D65001C8D660018000C190037
+:10908000000C770200A33821020E102500E3F82B14
+:1090900000C2C821033F5021AD67001CAD6A001813
+:1090A000AD60000CAD60001091B8003E24050005D5
+:1090B00003C45024A578001495A9000403C02021FE
+:1090C000A569001691AF003EA56F002095B1000480
+:1090D000A5710022AD60002491AE003FA56E000294
+:1090E00091B0003E91AC003D01901023244300015B
+:1090F000A16300018F8600AC8F9F00BCACDE00082E
+:10910000A3E500008F9000BC8F9900B82405FFBF35
+:1091100096070002973800120247782433093FFF70
+:1091200001E98825A6110002921200022418FFDF2F
+:10913000324E003F35CD0040A20D00028F8600BCAC
+:109140008F8C00D02412FFFFACC000048D8B007CFC
+:109150003C0C8000ACCB000890C2000D3043007F77
+:10916000A0C3000D8F8700BC90FF000D03E5C8244D
+:10917000A0F9000D8F9100BC9229000D01387824D0
+:10918000A22F000D8F9000BCAE120010AE1500147F
+:10919000920E00182415FF8002AE6825A20D00185B
+:1091A0008F8500BC8F8300B88CAB0018016C102435
+:1091B000004A3025ACA600189068003EA0A8001C0C
+:1091C0008F9F00B88F8700BC8F9800D097F900045C
+:1091D000A4F9001E0E0002138F0500848F8600D0B4
+:1091E000000279400002490090D200BC01E98821C8
+:1091F000004028213255000212A0000303D1202193
+:109200000002A8800095202190CD00BC31B200045E
+:109210001240000333DF0003000540800088202156
+:10922000240600048F9E00BC00DFC8233327000300
+:1092300000875021AFCA00040E000CF6A665003866
+:109240000A0010388F9000D0961E00123C080800CB
+:109250008D080024011E9021A61200120A00105948
+:109260008FB3001027BDFFE03C1808008F18005096
+:10927000AFB00010AFBF0018AFB10014AF8400B0A2
+:1092800093710074030478212410FF8031EE007F75
+:109290003225007F01F0582401DA68213C0C000AD5
+:1092A000A38500C401AC2821AF4B002494A9001071
+:1092B0009768000690A600620080382124020030E2
+:1092C0000109202330C300F0AF8500D010620019DF
+:1092D0003090FFFF90AE0062240DFFF0240A005092
+:1092E00001AE6024318B00FF116A002F00000000E6
+:1092F00016000007241F0C00AF5F00248FB100147C
+:109300008FBF00188FB0001003E0000827BD0020B9
+:109310000E000E1C02002021241F0C00AF5F002451
+:109320008FB100148FBF00188FB0001003E0000849
+:1093300027BD002094A200E094A400E290BF011396
+:10934000008218263079FFFF33E700C014E00009DF
+:109350002F31000116000038000000005620FFE603
+:10936000241F0C000E000D18000000000A0011ED73
+:10937000241F0C001620FFDE000000000E000D1858
+:10938000000000001440FFDC241F0C001600002227
+:109390008F8300D0906901133122003FA062011336
+:1093A0000A0011ED241F0C0094AF00D48F8600D466
+:1093B00000E02821240400050E000C5C31F0FFFFC2
+:1093C0001440000524030003979100E600001821D3
+:1093D0002625FFFFA78500E68F5801B80700FFFE8E
+:1093E0003C196013AF400180241F0C00AF50018472
+:1093F000007938253C101000AF4701888FB1001468
+:10940000AF5001B8AF5F00248FB000108FBF0018BD
+:1094100003E0000827BD00200E000E1C02002021E2
+:109420005040FFB5241F0C008F8300D090690113BA
+:109430000A0012163122003F0E000E1C02002021ED
+:109440001440FFAD241F0C00122000078F8300D0B2
+:10945000906801133106003F34C20040A06201133E
+:109460000A0011ED241F0C000E000D180000000072
+:109470005040FFA1241F0C008F8300D0906801137F
+:109480003106003F0A00124634C20040AF9B00C8BC
+:1094900003E00008AF8000EC3089FFFF0009404284
+:1094A0002D020041000921801440000200095040B3
+:1094B00024080040000830C0000811400046582130
+:1094C000256701A800E2C821272F007F2418FF800C
+:1094D00001F818240064302100CA702125CC00FF57
+:1094E000240DFF00018D202425650088240A0088B2
+:1094F0003C010800AC2A004C3C010800AC2500509F
+:10950000AF8400D43C010800AC2900603C01080095
+:10951000AC2800643C010800AC2700543C01080062
+:10952000AC2300583C010800AC26005C03E00008B6
+:1095300000000000308300FF30C6FFFF30E400FF72
+:109540008F4201B80440FFFE00034C00012438257F
+:109550003C08600000E820253C031000AF45018076
+:10956000AF460184AF44018803E00008AF4301B86F
+:109570008F86001C3C096012352700108CCB00043C
+:109580003C0C600E35850010316A00062D48000144
+:10959000ACE800C48CC40004ACA431808CC20008C8
+:1095A00094C30002ACA2318403E00008A78300E466
+:1095B0003C0308008C6300508F8400E88F86001CF9
+:1095C0002402FF800064C0210302C824AF59002890
+:1095D0008CCD00043305007F00BA78213C0E000CCE
+:1095E00001EE2821ACAD00588CC80008AF8500D032
+:1095F0003C076012ACA8005C8CCC001034E8001072
+:10960000ACAC000C8CCB000CACAB000894AA0014E2
+:109610003C0208008C42004425490001A4A9001422
+:1096200094A400143083FFFF106200178F8400D0D1
+:109630003C0A08008D4A0040A4AA00128CCE0018F3
+:10964000AC8E00248CCD0014AC8D00208CC700188B
+:10965000AC87002C8CCC001424060001AC8C0028B4
+:109660008D0B00BC5166001A8D0200B48D0200B84B
+:10967000A482003A948F003AA48F003C948800D4CE
+:1096800003E000083102FFFF3C0908008D29002497
+:10969000A4A000148F8400D0A4A900128CCE0018BE
+:1096A000AC8E00248CCD0014AC8D00208CC700182B
+:1096B000AC87002C8CCC001424060001AC8C002854
+:1096C0008D0B00BC5566FFEA8D0200B88D0200B418
+:1096D000A482003A948F003AA48F003C948800D46E
+:1096E00003E000083102FFFF8F86001C3C0C0800DD
+:1096F0008D8C0050240BFF808CCD00083C03000CA7
+:10970000000D51C0018A4021010B4824AF8A00E8B6
+:10971000AF49002890C700073105007F00BA10212B
+:109720000043282130E4000410800039AF8500D0C8
+:1097300090CF000731EE000811C000380000000093
+:109740008CD9000C8CC400140324C02B13000030EF
+:10975000000000008CC2000CACA200648CCD00188C
+:109760002402FFF8ACAD00688CCC0010ACAC0080DB
+:109770008CCB000CACAB00848CCA001CACAA007C67
+:1097800090A900BC01224024A0A800BC90C30007FF
+:109790003067000810E000048F8500D090AF00BC57
+:1097A00035EE0001A0AE00BC90D9000733380001AF
+:1097B000130000088F8300D08F8700D0240400346A
+:1097C00090E800BC35030002A0E300BC8F8300D00A
+:1097D000AC6400C090C900073126000210C000052B
+:1097E00000000000906A00BC35420004A06200BC8A
+:1097F0008F8300D09065011330AD003FA06D011341
+:109800008F8C00D0958B00D403E000083162FFFFFD
+:109810008CC200140A001305000000000A001306A1
+:10982000ACA0006427BDFFD8AFB000108F90001C23
+:10983000AFBF0024AFB40020AFB20018AFB1001426
+:10984000AFB3001C9613000E3C07600A3C14600680
+:109850003264FFFF369300100E00125534F40410EA
+:109860008F8400D43C11600E0E00099B363100102D
+:10987000920E00153C0708008CE700603C12601255
+:1098800031CD000FA38D00F08E0E00048E0D000868
+:1098900096080012961F00109619001A9618001EBE
+:1098A000960F001C310CFFFF33EBFFFF332AFFFF45
+:1098B0003309FFFF31E6FFFF3C010800AC2B0040FD
+:1098C0003C010800AC2C00243C010800AC2A0044F8
+:1098D000AE293178AE26317C92020015960300162F
+:1098E00036520010304400FF3065FFFF3C06080090
+:1098F0008CC60064AE243188AE4500B492080014D2
+:1099000096190018241F0001011FC004332FFFFF08
+:109910003C0508008CA50058AE5800B8AE4F00BCFE
+:10992000920C0014AF8E00D8AF8D00DC318B00FF9D
+:10993000AE4B00C0920A0015AE670048AE66004C00
+:10994000314900FFAE4900C8AE65007C3C03080009
+:109950008C6300503C0408008C84004C3C080800D8
+:109960008D0800543C0208008C42005C8FBF00242C
+:10997000AE6300808FB00010AE8300748FB3001C04
+:10998000AE22319CAE4200DCAE2731A0AE2631A41F
+:10999000AE24318CAE233190AE283194AE2531986F
+:1099A000AE870050AE860054AE8500708FB10014B3
+:1099B000AE4700E0AE4600E4AE4400CCAE4300D07B
+:1099C000AE4800D4AE4500D88FB400208FB2001846
+:1099D00003E0000827BD002827BDFFE0AFB1001459
+:1099E000AFBF0018241100010E000845AFB00010F1
+:1099F00010510005978400E6978300CC0083102B5C
+:109A0000144000088F8500D4240700028FBF00187F
+:109A10008FB100148FB0001000E0102103E00008A7
+:109A200027BD00200E000C7A24040005AF8200E858
+:109A30001040FFF6240700020E0008498F90001C1A
+:109A4000979F00E68F9900E88F8D00C827EF0001EF
+:109A5000240E0050AF590020A78F00E6A1AE0000F1
+:109A60003C0C08008D8C00648F8600C8240A80009E
+:109A7000000C5E00ACCB0074A4C0000694C9000AC0
+:109A8000241FFF803C0D000C012AC024A4D8000A2A
+:109A900090C8000A24182000011F1825A0C3000A3E
+:109AA0008F8700C8A0E000788F8500C800003821AB
+:109AB000A0A000833C0208008C4200508F8400E884
+:109AC0000044782101FFC824AF590028960B0002FA
+:109AD00031EE007F01DA6021018D3021A4CB00D46A
+:109AE000960A0002AF8600D03C0E000425492401EE
+:109AF000A4C900E68E080004ACC800048E03000868
+:109B0000ACC30000A4C00010A4C00014A0C000D0CA
+:109B10008F8500D02403FFBFA0A000D13C04080023
+:109B20008C8400648F8200D0A04400D28E1F000C71
+:109B30008F8A00D0978F00E4AD5F001C8E19001053
+:109B400024100030AD590018A5400030A551005434
+:109B5000A5510056A54F0016AD4E0068AD580080C7
+:109B6000AD580084914D006231AC000F358B001070
+:109B7000A14B00628F8600D090C900633128007F1E
+:109B8000A0C800638F8400D02406FFFF9085006387
+:109B900000A31024A08200638F9100D000E0102168
+:109BA000923F00BC37F90001A23900BC8F8A00D077
+:109BB000938F00F0AD580064AD5000C0914E00D3BB
+:109BC000000F690031CC000F018D5825A14B00D347
+:109BD0008F8500D08F8900DCACA900E88F8800D881
+:109BE0008FBF00188FB100148FB0001027BD002068
+:109BF000ACA800ECA4A600D6A4A000E0A4A000E2BB
+:109C000003E000080000000027BDFFE0AFB0001037
+:109C10008F90001CAFB10014AFBF00188E19000464
+:109C20003C1808008F180050240FFF80001989C0CD
+:109C30000238702131CD007F01CF602401BA50215C
+:109C40003C0B000CAF4C0028014B4021950900D47F
+:109C5000950400D68E0700043131FFFFAF8800D095
+:109C60000E000913000721C08E0600048F8300C870
+:109C7000000629C0AF4500209064003E30820040BD
+:109C8000144000068F8400D0341FFFFF948300D659
+:109C90003062FFFF145F000400000000948400D6CF
+:109CA0000E0008A83084FFFF8E050004022030213A
+:109CB0008FBF00188FB100148FB000102404002251
+:109CC00000003821000529C00A00127C27BD0020B1
+:109CD00027BDFFE0AFB100143091FFFFAFB000101F
+:109CE000AFBF00181220001D000080218F86001CCD
+:109CF0008CC500002403000600053F020005140285
+:109D000030E4000714830015304500FF2CA800063E
+:109D10001100004D000558803C0C0800258C57D4DC
+:109D2000016C50218D490000012000080000000056
+:109D30008F8E00EC240D000111CD005900000000B1
+:109D4000260B00013170FFFF24CA00200211202BD6
+:109D5000014030211480FFE6AF8A001C0200102170
+:109D60008FBF00188FB100148FB0001003E00008FF
+:109D700027BD0020938700CE14E00038240400148F
+:109D80000E001338000000008F86001C2402000122
+:109D90000A00147FAF8200EC8F8900EC24080002D7
+:109DA0001128003B2404001300002821000030216A
+:109DB000240700010E00127C000000000A00147F3E
+:109DC0008F86001C8F8700EC2405000214E5FFF647
+:109DD000240400120E0012E9000000008F8500E844
+:109DE00000403021240400120E00127C00003821B3
+:109DF0000A00147F8F86001C8F8300EC241F000351
+:109E0000147FFFD0260B00010E00129B0000000003
+:109E10008F8500E800403021240200022404001055
+:109E200000003821AF8200EC0E00127C0000000020
+:109E30000A00147F8F86001C8F8F00EC240600021E
+:109E400011E6000B0000000024040010000028218F
+:109E5000000030210A00149C240700010000282182
+:109E60000E00127C000030210A00147F8F86001C37
+:109E70000E0013A500000000144000128F99001C72
+:109E80008F86001C240200030A00147FAF8200ECBE
+:109E90000E001431000000000A00147F8F86001CA1
+:109EA0000E00128B000000002402000224040014A3
+:109EB0000000282100003021000038210A0014B9D8
+:109EC000AF8200EC004038212404001097380002D3
+:109ED000000028210E00127C3306FFFF0A00147FC9
+:109EE0008F86001C8F8400C83C077FFF34E6FFFF8D
+:109EF0008C8500742402000100A61824AC83007431
+:109F000003E00008A082000510A000362CA200800B
+:109F1000274A04003C0B000524090080104000077C
+:109F20002408008030A6000F00C540212D030081C9
+:109F30001460000200A0482124080080AF4B0030CC
+:109F400000000000000000000000000011000009F7
+:109F500000003821014030218C8D000024E70004EE
+:109F600000E8602BACCD0000248400041580FFFACB
+:109F700024C60004000000000000000000000000F3
+:109F80003C0E0006010E3825AF47003000000000EF
+:109F900000000000000000008F4F000031E80010BA
+:109FA0001100FFFD000000008F42003C8F43003C89
+:109FB0000049C8210323C02B130000040000000047
+:109FC0008F4C003825860001AF4600388F47003C93
+:109FD00000A9282300E96821AF4D003C14A0FFCE62
+:109FE0002CA2008003E000080000000027BDFFD085
+:109FF0003C020002AFB100143C11000CAF45003828
+:10A00000AFB3001CAF46003C00809821AF42003047
+:10A0100024050088AF44002803512021AFBF002849
+:10A02000AFB50024AFB40020AFB200180E0014F199
+:10A03000AFB000103C1F08008FFF004C3C18080018
+:10A040008F1800642410FF8003F3A82132B9007F29
+:10A0500002B078240018A0C0033A70210018914083
+:10A0600001D12021AF4F00280E0014F10254282105
+:10A070003C0D08008DAD00502405012001B358218E
+:10A08000316C007F01705024019A48210131202158
+:10A090000E0014F1AF4A00283C0808008D08005457
+:10A0A0003C0508008CA500640113382130E6007FD0
+:10A0B00000F0182400DA202100912021AF4300286D
+:10A0C0000E0014F1000529403C0208008C420058A3
+:10A0D0003C1008008E1000601200001C0053882104
+:10A0E0002415FF800A0015743C14000C3226007FF2
+:10A0F0000235182400DA202102402821AF4300282D
+:10A10000009420210E0014F12610FFC01200000F51
+:10A11000023288212E05004110A0FFF42412100005
+:10A120003226007F001091800235182400DA2021A9
+:10A1300002402821AF430028009420210E0014F192
+:10A14000000080211600FFF3023288213C0B08003A
+:10A150008D6B005C240AFF802405000201734021FE
+:10A16000010A4824AF4900283C0408009484006296
+:10A170003110007F021A88213C07000C0E000CAA47
+:10A180000227982100402821026020218FBF00284B
+:10A190008FB500248FB400208FB3001C8FB200183D
+:10A1A0008FB100148FB000100A0014F127BD0030E9
+:10A1B0008F83001C8C62000410400003000000002C
+:10A1C00003E00008000000008C6400108C650008AB
+:10A1D0000A00152A8C66000C000000000000001B1D
+:10A1E0000000000F0000000A000000080000000648
+:10A1F000000000050000000500000004000000044D
+:10A200000000000300000003000000030000000342
+:10A210000000000300000002000000020000000235
+:10A220000000000200000002000000020000000226
+:10A230000000000200000002000000020000000216
+:10A240000000000200000002000000020000000206
+:10A2500000000001000000010000000108000F24C0
+:10A2600008000D6C08000FB80800106008000F4CC3
+:10A2700008000F8C0800119408000D88080011B820
+:10A2800008000DD8080015540800151C08000D889A
+:10A2900008000D8808000D880800124008001240D0
+:10A2A00008000D8808000D88080014E008000D88DB
+:10A2B00008000D8808000D8808000D88080013B4F8
+:10A2C00008000D8808000D8808000D8808000D881A
+:10A2D00008000D8808000D8808000D8808000D880A
+:10A2E00008000D8808000D8808000D8808000D88FA
+:10A2F00008000D8808000D8808000FAC08000D88C4
+:10A3000008000D880800167808000D8808000D88E0
+:10A3100008000D8808000D8808000D8808000D88C9
+:10A3200008000D8808000D8808000D8808000D88B9
+:10A3300008000D8808000D8808000D8808000D88A9
+:10A3400008000D8808000D8808000D88080014100A
+:10A3500008000D8808000D8808001334080012A4B6
+:10A3600008001E2C08001EFC08001F1408001F28EF
+:10A3700008001F3808001E2C08001E2C08001E2C88
+:10A3800008001ED808002E1408002E1C08002DE41A
+:10A3900008002DF008002DFC08002E08080052F4DB
+:10A3A000080052B40800528008005254080052308D
+:10A3B000080051EC0A000C840000000000000000BE
+:10A3C0000000000D727870362E322E33000000002F
+:10A3D000060203030000000000000001000000006E
+:10A3E000000000000000000000000000000000006D
+:10A3F000000000000000000000000000000000005D
+:10A40000000000000000000000000000000000004C
+:10A41000000000000000000000000000000000003C
+:10A42000000000000000000000000000000000002C
+:10A43000000000000000000000000000000000001C
+:10A44000000000000000000000000000000000000C
+:10A4500000000000000000000000000000000000FC
+:10A4600000000000000000000000000000000000EC
+:10A4700000000000000000000000000000000000DC
+:10A4800000000000000000000000000000000000CC
+:10A4900000000000000000000000000000000000BC
+:10A4A00000000000000000000000000000000000AC
+:10A4B000000000000000000000000000000000009C
+:10A4C000000000000000000000000000000000008C
+:10A4D000000000000000000000000000000000007C
+:10A4E000000000000000000000000000000000006C
+:10A4F000000000000000000000000000000000005C
+:10A50000000000000000000000000000000000004B
+:10A51000000000000000000000000000000000003B
+:10A52000000000000000000000000000000000002B
+:10A53000000000000000000000000000000000001B
+:10A54000000000000000000000000000000000000B
+:10A5500000000000000000000000000000000000FB
+:10A5600000000000000000000000000000000000EB
+:10A5700000000000000000000000000000000000DB
+:10A5800000000000000000000000000000000000CB
+:10A5900000000000000000000000000000000000BB
+:10A5A00000000000000000000000000000000000AB
+:10A5B000000000000000000000000000000000009B
+:10A5C000000000000000000000000000000000008B
+:10A5D000000000000000000000000000000000007B
+:10A5E000000000000000000000000000000000006B
+:10A5F000000000000000000000000000000000005B
+:10A60000000000000000000000000000000000004A
+:10A61000000000000000000000000000000000003A
+:10A62000000000000000000000000000000000002A
+:10A63000000000000000000000000000000000001A
+:10A64000000000000000000000000000000000000A
+:10A6500000000000000000000000000000000000FA
+:10A6600000000000000000000000000000000000EA
+:10A6700000000000000000000000000000000000DA
+:10A6800000000000000000000000000000000000CA
+:10A6900000000000000000000000000000000000BA
+:10A6A00000000000000000000000000000000000AA
+:10A6B000000000000000000000000000000000009A
+:10A6C000000000000000000000000000000000008A
+:10A6D000000000000000000000000000000000007A
+:10A6E000000000000000000000000000000000006A
+:10A6F000000000000000000000000000000000005A
+:10A700000000000000000000000000000000000049
+:10A710000000000000000000000000000000000039
+:10A720000000000000000000000000000000000029
+:10A730000000000000000000000000000000000019
+:10A740000000000000000000000000000000000009
+:10A7500000000000000000000000000000000000F9
+:10A7600000000000000000000000000000000000E9
+:10A7700000000000000000000000000000000000D9
+:10A7800000000000000000000000000000000000C9
+:10A7900000000000000000000000000000000000B9
+:10A7A00000000000000000000000000000000000A9
+:10A7B0000000000000000000000000000000000099
+:10A7C0000000000000000000000000000000000089
+:10A7D0000000000000000000000000000000000079
+:10A7E0000000000000000000000000000000000069
+:10A7F0000000000000000000000000000000000059
+:10A800000000000000000000000000000000000048
+:10A810000000000000000000000000000000000038
+:10A820000000000000000000000000000000000028
+:10A830000000000000000000000000000000000018
+:10A840000000000000000000000000000000000008
+:10A8500000000000000000000000000000000000F8
+:10A8600000000000000000000000000000000000E8
+:10A8700000000000000000000000000000000000D8
+:10A8800000000000000000000000000000000000C8
+:10A8900000000000000000000000000000000000B8
+:10A8A00000000000000000000000000000000000A8
+:10A8B0000000000000000000000000000000000098
+:10A8C0000000000000000000000000000000000088
+:10A8D0000000000000000000000000000000000078
+:10A8E0000000000000000000000000000000000068
+:10A8F0000000000000000000000000000000000058
+:10A900000000000000000000000000000000000047
+:10A910000000000000000000000000000000000037
+:10A920000000000000000000000000000000000027
+:10A930000000000000000000000000000000000017
+:10A940000000000000000000000000000000000007
+:10A9500000000000000000000000000000000000F7
+:10A9600000000000000000000000000000000000E7
+:10A9700000000000000000000000000000000000D7
+:10A9800000000000000000000000000000000000C7
+:10A9900000000000000000000000000000000000B7
+:10A9A00000000000000000000000000000000000A7
+:10A9B0000000000000000000000000000000000097
+:10A9C0000000000000000000000000000000000087
+:10A9D0000000000000000000000000000000000077
+:10A9E0000000000000000000000000000000000067
+:10A9F0000000000000000000000000000000000057
+:10AA00000000000000000000000000000000000046
+:10AA10000000000000000000000000000000000036
+:10AA20000000000000000000000000000000000026
+:10AA30000000000000000000000000000000000016
+:10AA40000000000000000000000000000000000006
+:10AA500000000000000000000000000000000000F6
+:10AA600000000000000000000000000000000000E6
+:10AA700000000000000000000000000000000000D6
+:10AA800000000000000000000000000000000000C6
+:10AA900000000000000000000000000000000000B6
+:10AAA00000000000000000000000000000000000A6
+:10AAB0000000000000000000000000000000000096
+:10AAC0000000000000000000000000000000000086
+:10AAD0000000000000000000000000000000000076
+:10AAE0000000000000000000000000000000000066
+:10AAF0000000000000000000000000000000000056
+:10AB00000000000000000000000000000000000045
+:10AB10000000000000000000000000000000000035
+:10AB20000000000000000000000000000000000025
+:10AB30000000000000000000000000000000000015
+:10AB40000000000000000000000000000000000005
+:10AB500000000000000000000000000000000000F5
+:10AB600000000000000000000000000000000000E5
+:10AB700000000000000000000000000000000000D5
+:10AB800000000000000000000000000000000000C5
+:10AB900000000000000000000000000000000000B5
+:10ABA00000000000000000000000000000000000A5
+:10ABB0000000000000000000000000000000000095
+:10ABC0000000000000000000000000000000000085
+:10ABD0000000000000000000000000000000000075
+:10ABE0000000000000000000000000000000000065
+:10ABF0000000000000000000000000000000000055
+:10AC00000000000000000000000000000000000044
+:10AC10000000000000000000000000000000000034
+:10AC20000000000000000000000000000000000024
+:10AC30000000000000000000000000000000000014
+:10AC40000000000000000000000000000000000004
+:10AC500000000000000000000000000000000000F4
+:10AC600000000000000000000000000000000000E4
+:10AC700000000000000000000000000000000000D4
+:10AC800000000000000000000000000000000000C4
+:10AC900000000000000000000000000000000000B4
+:10ACA00000000000000000000000000000000000A4
+:10ACB0000000000000000000000000000000000094
+:10ACC0000000000000000000000000000000000084
+:10ACD0000000000000000000000000000000000074
+:10ACE0000000000000000000000000000000000064
+:10ACF0000000000000000000000000000000000054
+:10AD00000000000000000000000000000000000043
+:10AD10000000000000000000000000000000000033
+:10AD20000000000000000000000000000000000023
+:10AD30000000000000000000000000000000000013
+:10AD40000000000000000000000000000000000003
+:10AD500000000000000000000000000000000000F3
+:10AD600000000000000000000000000000000000E3
+:10AD700000000000000000000000000000000000D3
+:10AD800000000000000000000000000000000000C3
+:10AD900000000000000000000000000000000000B3
+:10ADA00000000000000000000000000000000000A3
+:10ADB0000000000000000000000000000000000093
+:10ADC0000000000000000000000000000000000083
+:10ADD0000000000000000000000000000000000073
+:10ADE0000000000000000000000000000000000063
+:10ADF0000000000000000000000000000000000053
+:10AE00000000000000000000000000000000000042
+:10AE10000000000000000000000000000000000032
+:10AE20000000000000000000000000000000000022
+:10AE30000000000000000000000000000000000012
+:10AE40000000000000000000000000000000000002
+:10AE500000000000000000000000000000000000F2
+:10AE600000000000000000000000000000000000E2
+:10AE700000000000000000000000000000000000D2
+:10AE800000000000000000000000000000000000C2
+:10AE900000000000000000000000000000000000B2
+:10AEA00000000000000000000000000000000000A2
+:10AEB0000000000000000000000000000000000092
+:10AEC0000000000000000000000000000000000082
+:10AED0000000000000000000000000000000000072
+:10AEE0000000000000000000000000000000000062
+:10AEF0000000000000000000000000000000000052
+:10AF00000000000000000000000000000000000041
+:10AF10000000000000000000000000000000000031
+:10AF20000000000000000000000000000000000021
+:10AF30000000000000000000000000000000000011
+:10AF40000000000000000000000000000000000001
+:10AF500000000000000000000000000000000000F1
+:10AF600000000000000000000000000000000000E1
+:10AF700000000000000000000000000000000000D1
+:10AF800000000000000000000000000000000000C1
+:10AF900000000000000000000000000000000000B1
+:10AFA00000000000000000000000000000000000A1
+:10AFB0000000000000000000000000000000000091
+:10AFC0000000000000000000000000000000000081
+:10AFD0000000000000000000000000000000000071
+:10AFE0000000000000000000000000000000000061
+:10AFF0000000000000000000000000000000000051
+:10B000000000000000000000000000000000000040
+:10B010000000000000000000000000000000000030
+:10B020000000000000000000000000000000000020
+:10B030000000000000000000000000000000000010
+:10B040000000000000000000000000000000000000
+:10B0500000000000000000000000000000000000F0
+:10B0600000000000000000000000000000000000E0
+:10B0700000000000000000000000000000000000D0
+:10B0800000000000000000000000000000000000C0
+:10B0900000000000000000000000000000000000B0
+:10B0A00000000000000000000000000000000000A0
+:10B0B0000000000000000000000000000000000090
+:10B0C0000000000000000000000000000000000080
+:10B0D0000000000000000000000000000000000070
+:10B0E0000000000000000000000000000000000060
+:10B0F0000000000000000000000000000000000050
+:10B10000000000000000000000000000000000003F
+:10B11000000000000000000000000000000000002F
+:10B12000000000000000000000000000000000001F
+:10B13000000000000000000000000000000000000F
+:10B1400000000000000000000000000000000000FF
+:10B1500000000000000000000000000000000000EF
+:10B1600000000000000000000000000000000000DF
+:10B1700000000000000000000000000000000000CF
+:10B1800000000000000000000000000000000000BF
+:10B1900000000000000000000000000000000000AF
+:10B1A000000000000000000000000000000000009F
+:10B1B000000000000000000000000000000000008F
+:10B1C000000000000000000000000000000000007F
+:10B1D000000000000000000000000000000000006F
+:10B1E000000000000000000000000000000000005F
+:10B1F000000000000000000000000000000000004F
+:10B20000000000000000000000000000000000003E
+:10B21000000000000000000000000000000000002E
+:10B22000000000000000000000000000000000001E
+:10B23000000000000000000000000000000000000E
+:10B2400000000000000000000000000000000000FE
+:10B2500000000000000000000000000000000000EE
+:10B2600000000000000000000000000000000000DE
+:10B2700000000000000000000000000000000000CE
+:10B2800000000000000000000000000000000000BE
+:10B2900000000000000000000000000000000000AE
+:10B2A000000000000000000000000000000000009E
+:10B2B000000000000000000000000000000000008E
+:10B2C000000000000000000000000000000000007E
+:10B2D000000000000000000000000000000000006E
+:10B2E000000000000000000000000000000000005E
+:10B2F000000000000000000000000000000000004E
+:10B30000000000000000000000000000000000003D
+:10B31000000000000000000000000000000000002D
+:10B32000000000000000000000000000000000001D
+:10B33000000000000000000000000000000000000D
+:10B3400000000000000000000000000000000000FD
+:10B3500000000000000000000000000000000000ED
+:10B3600000000000000000000000000000000000DD
+:10B3700000000000000000000000000000000000CD
+:10B3800000000000000000000000000000000000BD
+:10B3900000000000000000000000000000000000AD
+:10B3A000000000000000000000000000000000009D
+:10B3B000000000000000000000000000000000008D
+:10B3C000000000000000000000000000000000007D
+:10B3D000000000000000000000000000000000006D
+:10B3E000000000000000000000000000000000005D
+:10B3F000000000000000000000000000000000004D
+:10B40000000000000000000000000000000000003C
+:10B41000000000000000000000000000000000002C
+:10B42000000000000000000000000000000000001C
+:10B43000000000000000000000000000000000000C
+:10B4400000000000000000000000000000000000FC
+:10B4500000000000000000000000000000000000EC
+:10B4600000000000000000000000000000000000DC
+:10B4700000000000000000000000000000000000CC
+:10B4800000000000000000000000000000000000BC
+:10B4900000000000000000000000000000000000AC
+:10B4A000000000000000000000000000000000009C
+:10B4B000000000000000000000000000000000008C
+:10B4C000000000000000000000000000000000007C
+:10B4D000000000000000000000000000000000006C
+:10B4E000000000000000000000000000000000005C
+:10B4F000000000000000000000000000000000004C
+:10B50000000000000000000000000000000000003B
+:10B51000000000000000000000000000000000002B
+:10B52000000000000000000000000000000000001B
+:10B53000000000000000000000000000000000000B
+:10B5400000000000000000000000000000000000FB
+:10B5500000000000000000000000000000000000EB
+:10B5600000000000000000000000000000000000DB
+:10B5700000000000000000000000000000000000CB
+:10B5800000000000000000000000000000000000BB
+:10B5900000000000000000000000000000000000AB
+:10B5A000000000000000000000000000000000009B
+:10B5B000000000000000000000000000000000008B
+:10B5C000000000000000000000000000000000007B
+:10B5D000000000000000000000000000000000006B
+:10B5E000000000000000000000000000000000005B
+:10B5F000000000000000000000000000000000004B
+:10B60000000000000000000000000000000000003A
+:10B61000000000000000000000000000000000002A
+:10B62000000000000000000000000000000000001A
+:10B63000000000000000000000000000000000000A
+:10B6400000000000000000000000000000000000FA
+:10B6500000000000000000000000000000000000EA
+:10B6600000000000000000000000000000000000DA
+:10B6700000000000000000000000000000000000CA
+:10B6800000000000000000000000000000000000BA
+:10B6900000000000000000000000000000000000AA
+:10B6A000000000000000000000000000000000009A
+:10B6B000000000000000000000000000000000008A
+:10B6C000000000000000000000000000000000007A
+:10B6D000000000000000000000000000000000006A
+:10B6E000000000000000000000000000000000005A
+:10B6F000000000000000000000000000000000004A
+:10B700000000000000000000000000000000000039
+:10B710000000000000000000000000000000000029
+:10B720000000000000000000000000000000000019
+:10B730000000000000000000000000000000000009
+:10B7400000000000000000000000000000000000F9
+:10B7500000000000000000000000000000000000E9
+:10B7600000000000000000000000000000000000D9
+:10B7700000000000000000000000000000000000C9
+:10B7800000000000000000000000000000000000B9
+:10B7900000000000000000000000000000000000A9
+:10B7A0000000000000000000000000000000000099
+:10B7B0000000000000000000000000000000000089
+:10B7C0000000000000000000000000000000000079
+:10B7D0000000000000000000000000000000000069
+:10B7E0000000000000000000000000000000000059
+:10B7F0000000000000000000000000000000000049
+:10B800000000000000000000000000000000000038
+:10B810000000000000000000000000000000000028
+:10B820000000000000000000000000000000000018
+:10B830000000000000000000000000000000000008
+:10B8400000000000000000000000000000000000F8
+:10B8500000000000000000000000000000000000E8
+:10B8600000000000000000000000000000000000D8
+:10B8700000000000000000000000000000000000C8
+:10B8800000000000000000000000000000000000B8
+:10B8900000000000000000000000000000000000A8
+:10B8A0000000000000000000000000000000000098
+:10B8B0000000000000000000000000000000000088
+:10B8C0000000000000000000000000000000000078
+:10B8D0000000000000000000000000000000000068
+:10B8E0000000000000000000000000000000000058
+:10B8F0000000000000000000000000000000000048
+:10B900000000000000000000000000000000000037
+:10B910000000000000000000000000000000000027
+:10B920000000000000000000000000000000000017
+:10B930000000000000000000000000000000000007
+:10B9400000000000000000000000000000000000F7
+:10B9500000000000000000000000000000000000E7
+:10B9600000000000000000000000000000000000D7
+:10B9700000000000000000000000000000000000C7
+:10B9800000000000000000000000000000000000B7
+:10B9900000000000000000000000000000000000A7
+:10B9A0000000000000000000000000000000000097
+:10B9B0000000000000000000000000000000000087
+:10B9C0000000000000000000000000000000000077
+:10B9D0000000000000000000000000000000000067
+:10B9E0000000000000000000000000000000000057
+:10B9F0000000000000000000000000000000000047
+:10BA00000000000000000000000000000000000036
+:10BA10000000000000000000000000000000000026
+:10BA20000000000000000000000000000000000016
+:10BA30000000000000000000000000000000000006
+:10BA400000000000000000000000000000000000F6
+:10BA500000000000000000000000000000000000E6
+:10BA600000000000000000000000000000000000D6
+:10BA700000000000000000000000000000000000C6
+:10BA800000000000000000000000000000000000B6
+:10BA900000000000000000000000000000000000A6
+:10BAA0000000000000000000000000000000000096
+:10BAB0000000000000000000000000000000000086
+:10BAC0000000000000000000000000000000000076
+:10BAD0000000000000000000000000000000000066
+:10BAE0000000000000000000000000000000000056
+:10BAF0000000000000000000000000000000000046
+:10BB00000000000000000000000000000000000035
+:10BB10000000000000000000000000000000000025
+:10BB20000000000000000000000000000000000015
+:10BB30000000000000000000000000000000000005
+:10BB400000000000000000000000000000000000F5
+:10BB500000000000000000000000000000000000E5
+:10BB600000000000000000000000000000000000D5
+:10BB700000000000000000000000000000000000C5
+:10BB800000000000000000000000000000000000B5
+:10BB900000000000000000000000000000000000A5
+:10BBA0000000000000000000000000000000000095
+:10BBB0000000000000000000000000000000000085
+:10BBC0000000000000000000000000000000000075
+:10BBD0000000000000000000000000000000000065
+:10BBE0000000000000000000000000000000000055
+:10BBF0000000000000000000000000000000000045
+:10BC00000000000000000000000000000000000034
+:10BC10000000000000000000000000000000000024
+:10BC20000000000000000000000000000000000014
+:10BC30000000000000000000000000000000000004
+:10BC400000000000000000000000000000000000F4
+:10BC500000000000000000000000000000000000E4
+:10BC600000000000000000000000000000000000D4
+:10BC700000000000000000000000000000000000C4
+:10BC800000000000000000000000000000000000B4
+:10BC900000000000000000000000000000000000A4
+:10BCA0000000000000000000000000000000000094
+:10BCB0000000000000000000000000000000000084
+:10BCC0000000000000000000000000000000000074
+:10BCD0000000000000000000000000000000000064
+:10BCE0000000000000000000000000000000000054
+:10BCF0000000000000000000000000000000000044
+:10BD00000000000000000000000000000000000033
+:10BD10000000000000000000000000000000000023
+:10BD20000000000000000000000000000000000013
+:10BD30000000000000000000000000000000000003
+:10BD400000000000000000000000000000000000F3
+:10BD500000000000000000000000000000000000E3
+:10BD600000000000000000000000000000000000D3
+:10BD700000000000000000000000000000000000C3
+:10BD800000000000000000000000000000000000B3
+:10BD900000000000000000000000000000000000A3
+:10BDA0000000000000000000000000000000000093
+:10BDB0000000000000000000000000000000000083
+:10BDC0000000000000000000000000000000000073
+:10BDD0000000000000000000000000000000000063
+:10BDE0000000000000000000000000000000000053
+:10BDF0000000000000000000000000000000000043
+:10BE00000000000000000000000000000000000032
+:10BE10000000000000000000000000000000000022
+:10BE20000000000000000000000000000000000012
+:10BE30000000000000000000000000000000000002
+:10BE400000000000000000000000000000000000F2
+:10BE500000000000000000000000000000000000E2
+:10BE600000000000000000000000000000000000D2
+:10BE700000000000000000000000000000000000C2
+:10BE800000000000000000000000000000000000B2
+:10BE900000000000000000000000000000000000A2
+:10BEA0000000000000000000000000000000000092
+:10BEB0000000000000000000000000000000000082
+:10BEC0000000000000000000000000000000000072
+:10BED0000000000000000000000000000000000062
+:10BEE0000000000000000000000000000000000052
+:10BEF0000000000000000000000000000000000042
+:10BF00000000000000000000000000000000000031
+:10BF10000000000000000000000000000000000021
+:10BF20000000000000000000000000000000000011
+:10BF30000000000000000000000000000000000001
+:10BF400000000000000000000000000000000000F1
+:10BF500000000000000000000000000000000000E1
+:10BF600000000000000000000000000000000000D1
+:10BF700000000000000000000000000000000000C1
+:10BF800000000000000000000000000000000000B1
+:10BF900000000000000000000000000000000000A1
+:10BFA0000000000000000000000000000000000091
+:10BFB0000000000000000000000000000000000081
+:10BFC0000000000000000000000000000000000071
+:10BFD0000000000000000000000000000000000061
+:10BFE0000000000000000000000000000000000051
+:10BFF0000000000000000000000000000000000041
+:10C000000000000000000000000000000000000030
+:10C010000000000000000000000000000000000020
+:10C020000000000000000000000000000000000010
+:10C030000000000000000000000000000000000000
+:10C0400000000000000000000000000000000000F0
+:10C0500000000000000000000000000000000000E0
+:10C0600000000000000000000000000000000000D0
+:10C0700000000000000000000000000000000000C0
+:10C0800000000000000000000000000000000000B0
+:10C0900000000000000000000000000000000000A0
+:10C0A0000000000000000000000000000000000090
+:10C0B0000000000000000000000000000000000080
+:10C0C0000000000000000000000000000000000070
+:10C0D0000000000000000000000000000000000060
+:10C0E0000000000000000000000000000000000050
+:10C0F0000000000000000000000000000000000040
+:10C10000000000000000000000000000000000002F
+:10C11000000000000000000000000000000000001F
+:10C12000000000000000000000000000000000000F
+:10C1300000000000000000000000000000000000FF
+:10C1400000000000000000000000000000000000EF
+:10C1500000000000000000000000000000000000DF
+:10C1600000000000000000000000000000000000CF
+:10C1700000000000000000000000000000000000BF
+:10C1800000000000000000000000000000000000AF
+:10C19000000000000000000000000000000000009F
+:10C1A000000000000000000000000000000000008F
+:10C1B000000000000000000000000000000000007F
+:10C1C000000000000000000000000000000000006F
+:10C1D000000000000000000000000000000000005F
+:10C1E000000000000000000000000000000000004F
+:10C1F000000000000000000000000000000000003F
+:10C20000000000000000000000000000000000002E
+:10C21000000000000000000000000000000000001E
+:10C22000000000000000000000000000000000000E
+:10C2300000000000000000000000000000000000FE
+:10C2400000000000000000000000000000000000EE
+:10C2500000000000000000000000000000000000DE
+:10C2600000000000000000000000000000000000CE
+:10C2700000000000000000000000000000000000BE
+:10C2800000000000000000000000000000000000AE
+:10C29000000000000000000000000000000000009E
+:10C2A000000000000000000000000000000000008E
+:10C2B000000000000000000000000000000000007E
+:10C2C000000000000000000000000000000000006E
+:10C2D000000000000000000000000000000000005E
+:10C2E000000000000000000000000000000000004E
+:10C2F000000000000000000000000000000000003E
+:10C30000000000000000000000000000000000002D
+:10C31000000000000000000000000000000000001D
+:10C32000000000000000000000000000000000000D
+:10C3300000000000000000000000000000000000FD
+:10C3400000000000000000000000000000000000ED
+:10C3500000000000000000000000000000000000DD
+:10C3600000000000000000000000000000000000CD
+:10C3700000000000000000000000000000000000BD
+:10C3800000000000000000000000000000000000AD
+:10C39000000000000000000000000000000000009D
+:10C3A000000000000000000000000000000000008D
+:10C3B000000000000000000000000000000000007D
+:10C3C000000000000000000000000000000000006D
+:10C3D000000000000000000000000000000000005D
+:10C3E000000000000000000000000000000000004D
+:10C3F000000000000000000000000000000000003D
+:10C40000000000000000000000000000000000002C
+:10C41000000000000000000000000000000000001C
+:10C42000000000000000000000000000000000000C
+:10C4300000000000000000000000000000000000FC
+:10C4400000000000000000000000000000000000EC
+:10C4500000000000000000000000000000000000DC
+:10C4600000000000000000000000000000000000CC
+:10C4700000000000000000000000000000000000BC
+:10C4800000000000000000000000000000000000AC
+:10C49000000000000000000000000000000000009C
+:10C4A000000000000000000000000000000000008C
+:10C4B000000000000000000000000000000000007C
+:10C4C000000000000000000000000000000000006C
+:10C4D000000000000000000000000000000000005C
+:10C4E000000000000000000000000000000000004C
+:10C4F000000000000000000000000000000000003C
+:10C50000000000000000000000000000000000002B
+:10C51000000000000000000000000000000000001B
+:10C52000000000000000000000000000000000000B
+:10C5300000000000000000000000000000000000FB
+:10C5400000000000000000000000000000000000EB
+:10C5500000000000000000000000000000000000DB
+:10C5600000000000000000000000000000000000CB
+:10C5700000000000000000000000000000000000BB
+:10C5800000000000000000000000000000000000AB
+:10C59000000000000000000000000000000000009B
+:10C5A000000000000000000000000000000000008B
+:10C5B000000000000000000000000000000000007B
+:10C5C000000000000000000000000000000000006B
+:10C5D000000000000000000000000000000000005B
+:10C5E000000000000000000000000000000000004B
+:10C5F000000000000000000000000000000000003B
+:10C60000000000000000000000000000000000002A
+:10C61000000000000000000000000000000000001A
+:10C62000000000000000000000000000000000000A
+:10C6300000000000000000000000000000000000FA
+:10C6400000000000000000000000000000000000EA
+:10C6500000000000000000000000000000000000DA
+:10C6600000000000000000000000000000000000CA
+:10C6700000000000000000000000000000000000BA
+:10C6800000000000000000000000000000000000AA
+:10C69000000000000000000000000000000000009A
+:10C6A000000000000000000000000000000000008A
+:10C6B000000000000000000000000000000000007A
+:10C6C000000000000000000000000000000000006A
+:10C6D000000000000000000000000000000000005A
+:10C6E000000000000000000000000000000000004A
+:10C6F000000000000000000000000000000000003A
+:10C700000000000000000000000000000000000029
+:10C710000000000000000000000000000000000019
+:10C720000000000000000000000000000000000009
+:10C7300000000000000000000000000000000000F9
+:10C7400000000000000000000000000000000000E9
+:10C7500000000000000000000000000000000000D9
+:10C7600000000000000000000000000000000000C9
+:10C7700000000000000000000000000000000000B9
+:10C7800000000000000000000000000000000000A9
+:10C790000000000000000000000000000000000099
+:10C7A0000000000000000000000000000000000089
+:10C7B0000000000000000000000000000000000079
+:10C7C0000000000000000000000000000000000069
+:10C7D0000000000000000000000000000000000059
+:10C7E0000000000000000000000000000000000049
+:10C7F0000000000000000000000000000000000039
+:10C800000000000000000000000000000000000028
+:10C810000000000000000000000000000000000018
+:10C820000000000000000000000000000000000008
+:10C8300000000000000000000000000000000000F8
+:10C8400000000000000000000000000000000000E8
+:10C8500000000000000000000000000000000000D8
+:10C8600000000000000000000000000000000000C8
+:10C8700000000000000000000000000000000000B8
+:10C8800000000000000000000000000000000000A8
+:10C890000000000000000000000000000000000098
+:10C8A0000000000000000000000000000000000088
+:10C8B0000000000000000000000000000000000078
+:10C8C0000000000000000000000000000000000068
+:10C8D0000000000000000000000000000000000058
+:10C8E0000000000000000000000000000000000048
+:10C8F0000000000000000000000000000000000038
+:10C900000000000000000000000000000000000027
+:10C910000000000000000000000000000000000017
+:10C920000000000000000000000000000000000007
+:10C9300000000000000000000000000000000000F7
+:10C9400000000000000000000000000000000000E7
+:10C9500000000000000000000000000000000000D7
+:10C9600000000000000000000000000000000000C7
+:10C9700000000000000000000000000000000000B7
+:10C9800000000000000000000000000000000000A7
+:10C990000000000000000000000000000000000097
+:10C9A0000000000000000000000000000000000087
+:10C9B0000000000000000000000000000000000077
+:10C9C0000000000000000000000000000000000067
+:10C9D0000000000000000000000000000000000057
+:10C9E0000000000000000000000000000000000047
+:10C9F0000000000000000000000000000000000037
+:10CA00000000000000000000000000000000000026
+:10CA10000000000000000000000000000000000016
+:10CA20000000000000000000000000000000000006
+:10CA300000000000000000000000000000000000F6
+:10CA400000000000000000000000000000000000E6
+:10CA500000000000000000000000000000000000D6
+:10CA600000000000000000000000000000000000C6
+:10CA700000000000000000000000000000000000B6
+:10CA800000000000000000000000000000000000A6
+:10CA90000000000000000000000000000000000096
+:10CAA0000000000000000000000000000000000086
+:10CAB0000000000000000000000000000000000076
+:10CAC0000000000000000000000000000000000066
+:10CAD0000000000000000000000000000000000056
+:10CAE0000000000000000000000000000000000046
+:10CAF0000000000000000000000000000000000036
+:10CB00000000000000000000000000000000000025
+:10CB10000000000000000000000000000000000015
+:10CB20000000000000000000000000000000000005
+:10CB300000000000000000000000000000000000F5
+:10CB400000000000000000000000000000000000E5
+:10CB500000000000000000000000000000000000D5
+:10CB600000000000000000000000000000000000C5
+:10CB700000000000000000000000000000000000B5
+:10CB800000000000000000000000000000000000A5
+:10CB90000000000000000000000000000000000095
+:10CBA0000000000000000000000000000000000085
+:10CBB0000000000000000000000000000000000075
+:10CBC0000000000000000000000000000000000065
+:10CBD0000000000000000000000000000000000055
+:10CBE0000000000000000000000000000000000045
+:10CBF0000000000000000000000000000000000035
+:10CC00000000000000000000000000000000000024
+:10CC10000000000000000000000000000000000014
+:10CC20000000000000000000000000000000000004
+:10CC300000000000000000000000000000000000F4
+:10CC400000000000000000000000000000000000E4
+:10CC500000000000000000000000000000000000D4
+:10CC600000000000000000000000000000000000C4
+:10CC700000000000000000000000000000000000B4
+:10CC800000000000000000000000000000000000A4
+:10CC90000000000000000000000000000000000094
+:10CCA0000000000000000000000000000000000084
+:10CCB0000000000000000000000000000000000074
+:10CCC0000000000000000000000000000000000064
+:10CCD0000000000000000000000000000000000054
+:10CCE0000000000000000000000000000000000044
+:10CCF0000000000000000000000000000000000034
+:10CD00000000000000000000000000000000000023
+:10CD10000000000000000000000000000000000013
+:10CD20000000000000000000000000000000000003
+:10CD300000000000000000000000000000000000F3
+:10CD400000000000000000000000000000000000E3
+:10CD500000000000000000000000000000000000D3
+:10CD600000000000000000000000000000000000C3
+:10CD700000000000000000000000000000000000B3
+:10CD800000000000000000000000000000000000A3
+:10CD90000000000000000000000000000000000093
+:10CDA0000000000000000000000000000000000083
+:10CDB0000000000000000000000000000000000073
+:10CDC0000000000000000000000000000000000063
+:10CDD0000000000000000000000000000000000053
+:10CDE0000000000000000000000000000000000043
+:10CDF0000000000000000000000000000000000033
+:10CE00000000000000000000000000000000000022
+:10CE10000000000000000000000000000000000012
+:10CE20000000000000000000000000000000000002
+:10CE300000000000000000000000000000000000F2
+:10CE400000000000000000000000000000000000E2
+:10CE500000000000000000000000000000000000D2
+:10CE600000000000000000000000000000000000C2
+:10CE700000000000000000000000000000000000B2
+:10CE800000000000000000000000000000000000A2
+:10CE90000000000000000000000000000000000092
+:10CEA0000000000000000000000000000000000082
+:10CEB0000000000000000000000000000000000072
+:10CEC0000000000000000000000000000000000062
+:10CED0000000000000000000000000000000000052
+:10CEE0000000000000000000000000000000000042
+:10CEF0000000000000000000000000000000000032
+:10CF00000000000000000000000000000000000021
+:10CF10000000000000000000000000000000000011
+:10CF20000000000000000000000000000000000001
+:10CF300000000000000000000000000000000000F1
+:10CF400000000000000000000000000000000000E1
+:10CF500000000000000000000000000000000000D1
+:10CF600000000000000000000000000000000000C1
+:10CF700000000000000000000000000000000000B1
+:10CF800000000000000000000000000000000000A1
+:10CF90000000000000000000000000000000000091
+:10CFA0000000000000000000000000000000000081
+:10CFB0000000000000000000000000000000000071
+:10CFC0000000000000000000000000000000000061
+:10CFD0000000000000000000000000000000000051
+:10CFE0000000000000000000000000000000000041
+:10CFF0000000000000000000000000000000000031
+:10D000000000000000000000000000000000000020
+:10D010000000000000000000000000000000000010
+:10D020000000000000000000000000000000000000
+:10D0300000000000000000000000000000000000F0
+:10D0400000000000000000000000000000000000E0
+:10D0500000000000000000000000000000000000D0
+:10D0600000000000000000000000000000000000C0
+:10D0700000000000000000000000000000000000B0
+:10D0800000000000000000000000000000000000A0
+:10D090000000000000000000000000000000000090
+:10D0A0000000000000000000000000000000000080
+:10D0B0000000000000000000000000000000000070
+:10D0C0000000000000000000000000000000000060
+:10D0D0000000000000000000000000000000000050
+:10D0E0000000000000000000000000000000000040
+:10D0F0000000000000000000000000000000000030
+:10D10000000000000000000000000000000000001F
+:10D11000000000000000000000000000000000000F
+:10D1200000000000000000000000000000000000FF
+:10D1300000000000000000000000000000000000EF
+:10D1400000000000000000000000000000000000DF
+:10D1500000000000000000000000000000000000CF
+:10D1600000000000000000000000000000000000BF
+:10D1700000000000000000000000000000000000AF
+:10D18000000000000000000000000000000000009F
+:10D19000000000000000000000000000000000008F
+:10D1A000000000000000000000000000000000007F
+:10D1B000000000000000000000000000000000006F
+:10D1C000000000000000000000000000000000005F
+:10D1D000000000000000000000000000000000004F
+:10D1E000000000000000000000000000000000003F
+:10D1F000000000000000000000000000000000002F
+:10D20000000000000000000000000000000000001E
+:10D21000000000000000000000000000000000000E
+:10D2200000000000000000000000000000000000FE
+:10D2300000000000000000000000000000000000EE
+:10D2400000000000000000000000000000000000DE
+:10D2500000000000000000000000000000000000CE
+:10D2600000000000000000000000000000000000BE
+:10D2700000000000000000000000000000000000AE
+:10D28000000000000000000000000000000000009E
+:10D29000000000000000000000000000000000008E
+:10D2A000000000000000000000000000000000007E
+:10D2B000000000000000000000000000000000006E
+:10D2C000000000000000000000000000000000005E
+:10D2D000000000000000000000000000000000004E
+:10D2E000000000000000000000000000000000003E
+:10D2F000000000000000000000000000000000002E
+:10D30000000000000000000000000000000000001D
+:10D31000000000000000000000000000000000000D
+:10D3200000000000000000000000000000000000FD
+:10D3300000000000000000000000000000000000ED
+:10D3400000000000000000000000000000000000DD
+:10D3500000000000000000000000000000000000CD
+:10D3600000000000000000000000000000000000BD
+:10D3700000000000000000000000000000000000AD
+:10D38000000000000000000000000000000000009D
+:10D39000000000000000000000000000000000008D
+:10D3A000000000000000000000000000000000007D
+:10D3B000000000000000000000000000000000006D
+:10D3C000000000000000000000000000000000005D
+:10D3D000000000000000000000000000000000004D
+:10D3E000000000000000000000000000000000003D
+:10D3F000000000000000000000000000000000002D
+:10D40000000000000000000000000000000000001C
+:10D41000000000000000000000000000000000000C
+:10D4200000000000000000000000000000000000FC
+:10D4300000000000000000000000000000000000EC
+:10D4400000000000000000000000000000000000DC
+:10D4500000000000000000000000000000000000CC
+:10D4600000000000000000000000000000000000BC
+:10D4700000000000000000000000000000000000AC
+:10D48000000000000000000000000000000000009C
+:10D49000000000000000000000000000000000008C
+:10D4A000000000000000000000000000000000007C
+:10D4B000000000000000000000000000000000006C
+:10D4C000000000000000000000000000000000005C
+:10D4D000000000000000000000000000000000004C
+:10D4E000000000000000000000000000000000003C
+:10D4F000000000000000000000000000000000002C
+:10D50000000000000000000000000000000000001B
+:10D51000000000000000000000000000000000000B
+:10D5200000000000000000000000000000000000FB
+:10D5300000000000000000000000000000000000EB
+:10D5400000000000000000000000000000000000DB
+:10D5500000000000000000000000000000000000CB
+:10D5600000000000000000000000000000000000BB
+:10D5700000000000000000000000000000000000AB
+:10D58000000000000000000000000000000000009B
+:10D59000000000000000008000000000000000000B
+:10D5A000000000000000000000000000000000007B
+:10D5B00000000000000000000000000A0000000061
+:10D5C0000000000000000000100000030000000048
+:10D5D0000000000D0000000D3C02080024427340D2
+:10D5E0003C030800246377CCAC4000000043202BB0
+:10D5F0001480FFFD244200043C1D080037BD7FFC61
+:10D6000003A0F0213C100800261032103C1C08003A
+:10D61000279C73400E0010FE000000000000000D6B
+:10D6200030A5FFFF30C600FF274301808F4201B8BD
+:10D630000440FFFE24020002AC640000A465000860
+:10D64000A066000AA062000B3C021000AC67001844
+:10D6500003E00008AF4201B83C0360008C624FF861
+:10D660000440FFFE3C020200AC644FC0AC624FC4F9
+:10D670003C02100003E00008AC624FF89482000CFA
+:10D680002486001400A0382100021302000210803A
+:10D690000082402100C8102B1040005700000000FD
+:10D6A00090C300002C6200095040005190C200015C
+:10D6B000000310803C030800246372F00043102133
+:10D6C0008C420000004000080000000090C30001F0
+:10D6D0002402000A1462003A000000000106102330
+:10D6E0002C42000A1440003624C600028CE20000DE
+:10D6F00034420100ACE2000090C2000090C300017F
+:10D7000090C4000290C5000300031C000002160034
+:10D710000043102500042200004410250045102578
+:10D7200024C60004ACE2000490C2000090C30001D3
+:10D7300090C4000290C500030002160000031C0004
+:10D740000043102500042200004410250045102548
+:10D7500024C600040A000CB8ACE2000890C3000123
+:10D76000240200041462001624C6000290C20000C5
+:10D7700090C400018CE30000000212000044102558
+:10D780003463000424C60002ACE2000C0A000CB8AA
+:10D79000ACE3000090C300012402000314620008FF
+:10D7A00024C600028CE2000090C3000024C60001E1
+:10D7B00034420008A0E300100A000CB8ACE20000FC
+:10D7C00003E000082402000190C3000124020002CB
+:10D7D0001062000224C40002010020210A000CB8DB
+:10D7E000008030210A000CB824C6000190C200015C
+:10D7F0000A000CB800C2302103E00008000010212C
+:10D8000027BDFFE8AFBF0014AFB000100E00130239
+:10D8100000808021936200052403FFFE0200202186
+:10D82000004310248FBF00148FB00010A3620005C6
+:10D830000A00130B27BD001827BDFFE8AFB000108A
+:10D84000AFBF00140E000F3C0080802193620000E7
+:10D8500024030050304200FF14430004240201005E
+:10D86000AF4201800A000D3002002021AF4001804C
+:10D87000020020218FBF00148FB000100A000FE7B4
+:10D8800027BD001827BDFF80AFBE0078AFB700747A
+:10D89000AFB20060AFBF007CAFB60070AFB5006C38
+:10D8A000AFB40068AFB30064AFB1005CAFB0005874
+:10D8B0008F5001283C0208008C4231A02403FF80D5
+:10D8C0009365003F0202102100431024AF42002460
+:10D8D0003C0208008C4231A09364000530B200FF86
+:10D8E000020210213042007F034218210004202749
+:10D8F0003C02000A0062182130840001AF8300144A
+:10D900000000F0210000B82114800053AFA00050A7
+:10D9100093430116934401128F450104306300FFC5
+:10D920003C020001308400FF00A2282403431021A0
+:10D9300003441821245640002467400014A001CD60
+:10D940002402000193620000304300FF2402002003
+:10D950001062000524020050106200060000000062
+:10D960000A000D74000000000000000D0A000D7D8B
+:10D97000AFA000303C1E080027DE738C0A000D7D2E
+:10D98000AFA000303C0208008C4200DC24420001C1
+:10D990003C010800AC2200DC0E00139F00000000D8
+:10D9A0000A000F318FBF007C8F4201043C0300202E
+:10D9B00092D3000D004310240002202B00042140CC
+:10D9C000AFA400308F4301043C02004000621824E1
+:10D9D000146000023485004000802821326200205B
+:10D9E000AFA500301440000234A6008000A0302112
+:10D9F00010C0000BAFA6003093C500088F67004C25
+:10DA00000200202100052B0034A5008130A5F08103
+:10DA10000E000C9B30C600FF0A000F2E0000000015
+:10DA20009362003E304200401040000F2402000488
+:10DA300056420007240200120200202100E02821A3
+:10DA40000E0013F702C030210A000F318FBF007C97
+:10DA500016420005000000000E000D2100002021EC
+:10DA60000A000F318FBF007C9743011A96C4000E45
+:10DA700093620035326500043075FFFF00442004D6
+:10DA8000AFA400548ED1000410A000158ED400085D
+:10DA90009362003E3042004010400007000000004A
+:10DAA0000E0013E0022020211040000D00000000B5
+:10DAB0000A000F2E000000008F6200440222102393
+:10DAC0000440016A000000008F6200480222102317
+:10DAD00004410166240400160A000E218FC20004CE
+:10DAE0008F6200480222102304400008000000005A
+:10DAF0003C0208008C423100244200013C01080035
+:10DB0000AC2231000A000F23000000008F620040A9
+:10DB100002221023184000128F8400143C020800D7
+:10DB20008C423100327300FC0000A8212442000125
+:10DB30003C010800AC2231008F6300409482011C3C
+:10DB4000022318233042FFFF0043102A50400010E8
+:10DB50002402000C8F6200400A000DF20222102302
+:10DB60009483011C9762003C0043102B1040000678
+:10DB7000000000009482011C00551023A482011CA7
+:10DB80000A000DF72402000CA480011C2402000CE2
+:10DB9000AFA200308F620040005120231880000D9A
+:10DBA00002A4102A1440012600000000149500066B
+:10DBB00002A410233A620001304200011440012007
+:10DBC0000000000002A41023022488210A000E098C
+:10DBD0003055FFFF00002021326200021040001A81
+:10DBE000326200109362003E30420040504000110B
+:10DBF0008FC200040E00130202002021240200182C
+:10DC0000A362003F936200052403FFFE020020216F
+:10DC1000004310240E00130BA362000524040039F6
+:10DC2000000028210E0013C9240600180A000F3036
+:10DC300024020001240400170040F809000000003D
+:10DC40000A000F302402000110400108000000000B
+:10DC50008F63004C8F620054028210231C4001032A
+:10DC600002831023044200010060A021AFA4001829
+:10DC7000AFB10010AFB50014934201208F65004092
+:10DC80009763003C304200FF034210210044102102
+:10DC90008FA400543063FFFF244240000083182B00
+:10DCA0008FA40030AFA20020AFA50028008320255C
+:10DCB000AFA40030AFA50024AFA0002CAFB4003457
+:10DCC0009362003E30420008504000118FC20000B5
+:10DCD00002C0202127A500380E000CB2AFA00038EA
+:10DCE0005440000B8FC200008FA200383042010068
+:10DCF000504000078FC200008FA3003C8F6200607D
+:10DD00000062102304430001AF6300608FC2000073
+:10DD10000040F80927A400108FA200303042000212
+:10DD200054400001327300FE9362003E30420040D6
+:10DD3000104000378FA200248F6200541682001A10
+:10DD40003262000124020014124200102A4200151F
+:10DD500010400006240200162402000C12420007A4
+:10DD6000326200010A000E7D000000001242000530
+:10DD7000326200010A000E7D000000000A000E78E9
+:10DD80002417000E0A000E78241700100A000E7CDB
+:10DD900024170012936200232403FFBD00431024C4
+:10DDA000A362002332620001104000198FA20024F8
+:10DDB0002402000C1242000E2A42000D1040000600
+:10DDC0002402000E2402000A124200078FA200243F
+:10DDD0000A000E9524420001124200088FA200247E
+:10DDE0000A000E95244200010A000E932417000831
+:10DDF0002402000E16E20002241700162417001059
+:10DE00008FA2002424420001AFA200248FA200248C
+:10DE10008FA300148F76004000431021AF620040B2
+:10DE20008F8200149442011C104000090000000081
+:10DE30008F6200488F6400409763003C00441023C9
+:10DE40003063FFFF0043102A104000088FA20054E7
+:10DE5000936400368F6300403402FFFC008210049C
+:10DE600000621821AF6300488FA200548FA60030D3
+:10DE70000282902130C200081040000E0000000015
+:10DE80008F6200581642000430C600FF9742011A04
+:10DE90005040000134C6001093C500088FA700341D
+:10DEA0000200202100052B0034A500800E000C9BF1
+:10DEB00030A5F0808F620040005610231840001BF0
+:10DEC0008FA200183C0208008C42319830420010AA
+:10DED0001040000D24020001976200681440000AFF
+:10DEE000240200018F8200149442011C1440000699
+:10DEF00024020001A76200689742007A244200646D
+:10DF00000A000EE9A7620012A76200120E001302B7
+:10DF1000020020219362007D2403000102002021E1
+:10DF2000344200010A000EE7AFA300501840000A77
+:10DF3000000000000E001302020020219362007D09
+:10DF40002403000102002021AFA30050344200044A
+:10DF50000E00130BA362007D9362003E304200402E
+:10DF60001440000C326200011040000A0000000062
+:10DF70008F6300408FC20004240400182463000152
+:10DF80000040F809AF6300408FA200300A000F3054
+:10DF9000304200048F620058105200100000000050
+:10DFA0008F620018022210231C4000082404000184
+:10DFB0008F62001816220009000000008F62001C0A
+:10DFC000028210230440000500000000AF720058D8
+:10DFD000AFA40050AF710018AF74001C12E0000B2A
+:10DFE0008FA200500E00130202002021A377003FF1
+:10DFF0000E00130B0200202102E030212404003720
+:10E000000E0013C9000028218FA200501040000309
+:10E01000000000000E000CA90200202112A0000543
+:10E02000000018218FA2003030420004504000113F
+:10E0300000601021240300010A000F30006010214D
+:10E040000E001302020020219362007D02002021B5
+:10E05000344200040E00130BA362007D0E000CA9D5
+:10E06000020020210A000F3024020001AF400044CA
+:10E07000240200018FBF007C8FBE00788FB7007430
+:10E080008FB600708FB5006C8FB400688FB30064DA
+:10E090008FB200608FB1005C8FB0005803E00008C1
+:10E0A00027BD00808F4201B80440FFFE2402080013
+:10E0B000AF4201B803E00008000000003C02000885
+:10E0C00003421021944200483084FFFF2484001250
+:10E0D0003045FFFF10A0001700A4102B10400016C1
+:10E0E00024020003934201202403001AA343018B5E
+:10E0F000304200FF2446FFFE8F82000000A6182B4E
+:10E100003863000100021382004310241040000510
+:10E110008F84000434820001A746019403E00008C4
+:10E12000AF8200042402FFFE0082102403E00008F6
+:10E13000AF8200042402000303E00008A342018B25
+:10E1400027BDFFE0AFB10014AFB00010AFBF0018A3
+:10E1500030B0FFFF30D1FFFF8F4201B80440FFFE17
+:10E1600000000000AF440180AF4400200E000F42C9
+:10E17000020020218F8300008F840004A750019AA1
+:10E18000A750018EA74301908F8300083082800042
+:10E19000AF4301A8A75101881040000E8F820004F0
+:10E1A00093420116304200FC24420004005A102120
+:10E1B0008C4240003042FFFF144000068F82000472
+:10E1C0003C02FFFF34427FFF00821024AF82000434
+:10E1D0008F8200042403BFFF00431024A74201A63E
+:10E1E0009743010C8F42010400031C003042FFFFE3
+:10E1F00000621825AF4301AC3C021000AF4201B8E9
+:10E200008FBF00188FB100148FB0001003E000081A
+:10E2100027BD00208F470070934201128F830000BA
+:10E2200027BDFFF0304200FF00022882306201006B
+:10E23000000030211040004324A40003306240005D
+:10E24000104000103062200000041080005A10219D
+:10E250008C43400024A4000400041080AFA30000FD
+:10E26000005A10218C424000AFA2000493420116D4
+:10E27000304200FC005A10218C4240000A000FC0BE
+:10E28000AFA200081040002F0000302100041080D1
+:10E29000005A10218C43400024A400040004108084
+:10E2A000AFA30000005A10218C424000AFA000082C
+:10E2B000AFA200048FA80008000030210000202138
+:10E2C000240A00083C0908002529010003A41021A4
+:10E2D000148A000300042A001100000A0000000054
+:10E2E00090420000248400012C83000C00A2102125
+:10E2F00000021080004910218C4200001460FFF3DE
+:10E3000000C230263C0408008C8431048F42007027
+:10E310002C83002010600009004738233C030800CC
+:10E32000246331080004108000431021248300017D
+:10E33000AC4700003C010800AC233104AF86000864
+:10E340002406000100C0102103E0000827BD0010D2
+:10E350003C0208008C42003827BDFFD0AFB5002436
+:10E36000AFB40020AFB10014AFBF0028AFB3001CA2
+:10E37000AFB20018AFB00010000088213C150800B3
+:10E3800026B50038144000022454FFFF0000A021ED
+:10E390009742010E8F8400003042FFFF308340001F
+:10E3A0001060000A245200043C0200200082102465
+:10E3B00050400007308280008F8200042403BFFF9A
+:10E3C000008318240A0010103442100030828000AC
+:10E3D0001040000A3C020020008210241040000778
+:10E3E0008F8200043C03FFFF34637FFF0083182407
+:10E3F00034428000AF820004AF8300000E000F980B
+:10E400000000000014400007000000009743011EB8
+:10E410009742011C3063FFFF0002140000621825C0
+:10E42000AF8300089742010C8F4340003045FFFF47
+:10E430003402FFFF14620003000000000A001028ED
+:10E44000241100208F42400030420100544000015E
+:10E45000241100108F8400003082100050400014FE
+:10E4600036310001308200201440000B3C021000C5
+:10E47000008210245040000E363100013C030E0093
+:10E480003C020DFF008318243442FFFF0043102B91
+:10E4900050400007363100013C0208008C42002C3D
+:10E4A000244200013C010800AC22002C363100055A
+:10E4B0003C0608008CC6003454C000238F85000041
+:10E4C0008F820004304240005440001F8F850000BE
+:10E4D0003C021F01008210243C0310005443001A28
+:10E4E0008F85000030A20200144000178F850000C5
+:10E4F0003250FFFF363100028F4201B80440FFFE68
+:10E5000000000000AF400180020020210E000F42F9
+:10E51000AF4000208F8300042402BFFFA750019A60
+:10E52000006218248F820000A750018EA751018835
+:10E53000A74301A6A74201903C021000AF4201B8D8
+:10E540000A0010F5000010213C02100000A2102467
+:10E550001040003A0000000010C0000F0000000052
+:10E5600030A201001040000C3C0302003C020F00EE
+:10E5700000A2102410430008000000008F82000851
+:10E58000005410240055102190420004244200043D
+:10E590000A00109F000221C00000000000051602C2
+:10E5A0003050000F3A0300022E4203EF38420001C0
+:10E5B0002C6300010062182414600073240200011F
+:10E5C0003C0308008C6300D02E06000C386200016A
+:10E5D0002C4200010046102414400015001021C0F8
+:10E5E0002602FFFC2C4200045440001100002021B0
+:10E5F000386200022C420001004610241040000343
+:10E60000000512420A00109F000020210010182B64
+:10E610000043102450400006001021C000002021BB
+:10E620003245FFFF0E000F633226FFFB001021C0B2
+:10E630003245FFFF0A0010F2362600028F424000EA
+:10E640003C0308008C630024304201001040004667
+:10E6500030620001322200043070000D14400002CC
+:10E660002413000424130002000512C238420001E2
+:10E670002E4303EF304200013863000100431025B0
+:10E68000104000033231FFFB2402FFFB0202802412
+:10E6900010C000183202000130A201001040001525
+:10E6A000320200013C020F0000A210243C030200D1
+:10E6B0001043000F8F8200082403FFFE0203802412
+:10E6C00000541024005510219042000402333025DC
+:10E6D0002442000412000002000221C03226FFFF83
+:10E6E0000E000F633245FFFF1200002700001021CB
+:10E6F000320200011040000D320200042402000129
+:10E7000012020002023330253226FFFF00002021D2
+:10E710000E000F633245FFFF2402FFFE0202802439
+:10E7200012000019000010213202000410400016EF
+:10E7300024020001240200041202000202333025E8
+:10E740003226FFFF3245FFFF0E000F632404010055
+:10E750002402FFFB020280241200000B00001021A3
+:10E760000A0010F5240200011040000700001021EB
+:10E770003245FFFF36260002000020210E000F6305
+:10E7800000000000000010218FBF00288FB500247A
+:10E790008FB400208FB3001C8FB200188FB100140B
+:10E7A0008FB0001003E0000827BD003027BDFFD068
+:10E7B000AFB000103C04600CAFBF002CAFB6002817
+:10E7C000AFB50024AFB40020AFB3001CAFB2001847
+:10E7D000AFB100148C8250002403FF7F3C1A8000EC
+:10E7E000004310243442380CAC8250002402000351
+:10E7F0003C106000AF4200088E0208083C1B8008F5
+:10E800003C010800AC2000203042FFF038420010EC
+:10E810002C4200010E001B8DAF8200183C04FFFF4C
+:10E820003C020400348308063442000CAE0219484E
+:10E83000AE03194C3C0560168E0219808CA30000B3
+:10E840003442020000641824AE0219803C02535383
+:10E850001462000334A47C008CA200040050202128
+:10E860008C82007C8C830078AF820010AF83000C18
+:10E870008F55000032A200031040FFFD32A20001BC
+:10E880001040013D32A200028F420128AF42002019
+:10E890008F4201048F430100AF8200000E000F3C45
+:10E8A000AF8300043C0208008C4200C01040000806
+:10E8B0008F8400003C0208008C4200C42442000106
+:10E8C0003C010800AC2200C40A00126900000000EC
+:10E8D0003C020010008210241440010C8F830004BD
+:10E8E0003C0208008C4200203C0308008C63003886
+:10E8F00000008821244200013C010800AC220020D5
+:10E900003C16080026D60038146000022474FFFF6D
+:10E910000000A0219742010E308340003042FFFFEB
+:10E920001060000A245200043C02002000821024DF
+:10E9300050400007308280008F8200042403BFFF14
+:10E94000008318240A0011703442100030828000C5
+:10E950001040000A3C0200200082102410400007F2
+:10E960008F8200043C03FFFF34637FFF0083182481
+:10E9700034428000AF820004AF8300000E000F9885
+:10E980000000000014400007000000009743011E33
+:10E990009742011C3063FFFF00021400006218253B
+:10E9A000AF8300089742010C8F4340003045FFFFC2
+:10E9B0003402FFFF14620003000000000A00118807
+:10E9C000241100208F4240003042010054400001D9
+:10E9D000241100108F840000308210005040001479
+:10E9E00036310001308200201440000B3C02100040
+:10E9F000008210245040000E363100013C030E000E
+:10EA00003C020DFF008318243442FFFF0043102B0B
+:10EA100050400007363100013C0208008C42002CB7
+:10EA2000244200013C010800AC22002C36310005D4
+:10EA30003C0608008CC6003454C000238F850000BB
+:10EA40008F820004304240005440001F8F85000038
+:10EA50003C021F01008210243C0310005443001AA2
+:10EA60008F85000030A20200144000178F8500003F
+:10EA70003250FFFF363100028F4201B80440FFFEE2
+:10EA800000000000AF400180020020210E000F4274
+:10EA9000AF4000208F8300042402BFFFA750019ADB
+:10EAA000006218248F820000A750018EA7510188B0
+:10EAB000A74301A6A74201903C021000AF4201B853
+:10EAC0000A001267000010213C02100000A210246E
+:10EAD0001040003A0000000010C0000F00000000CD
+:10EAE00030A201001040000C3C0302003C020F0069
+:10EAF00000A2102410430008000000008F820008CC
+:10EB000000541024005610219042000424420004B6
+:10EB10000A0011FF000221C00000000000051602DB
+:10EB20003050000F3A0300022E4203EF384200013A
+:10EB30002C63000100621824146000852402000187
+:10EB40003C0308008C6300D02E06000C38620001E4
+:10EB50002C4200010046102414400015001021C072
+:10EB60002602FFFC2C42000454400011000020212A
+:10EB7000386200022C42000100461024504000037D
+:10EB8000000512420A0011FF000020210010182B7E
+:10EB90000043102450400006001021C00000202136
+:10EBA0003245FFFF0E000F633226FFFB001021C02D
+:10EBB0003245FFFF0A001252362600028F42400003
+:10EBC0003C0308008C6300243042010010400046E2
+:10EBD00030620001322200043070000D1440000247
+:10EBE0002413000424130002000512C2384200015D
+:10EBF0002E4303EF3042000138630001004310252B
+:10EC0000104000033231FFFB2402FFFB020280248C
+:10EC100010C000183202000130A20100104000159F
+:10EC2000320200013C020F0000A210243C0302004B
+:10EC30001043000F8F8200082403FFFE020380248C
+:10EC40000054102400561021904200040233302555
+:10EC50002442000412000002000221C03226FFFFFD
+:10EC60000E000F633245FFFF120000390000102133
+:10EC7000320200011040000D3202000424020001A3
+:10EC800012020002023330253226FFFF000020214D
+:10EC90000E000F633245FFFF2402FFFE02028024B4
+:10ECA0001200002B00001021320200041040002846
+:10ECB0002402000124020004120200020233302563
+:10ECC0003226FFFF3245FFFF0E000F6324040100D0
+:10ECD0002402FFFB020280241200001D000010210C
+:10ECE0000A001267240200015040001900001021A0
+:10ECF0003245FFFF36260002000020210E000F6380
+:10ED0000000000000A001267000010212402BFFF6B
+:10ED1000006210241040000800000000240287FF59
+:10ED200000621024144000083C020060008210249D
+:10ED300010400005000000000E000D34000000002F
+:10ED40000A001267000000000E0012C70000000059
+:10ED5000104000063C0240008F4301243C0260202A
+:10ED6000AC430014000000003C024000AF420138F8
+:10ED70000000000032A200021040FEBD00000000B2
+:10ED80008F4201403C044000AF4200208F430148C5
+:10ED90003C02700000621824106400420000000071
+:10EDA0000083102B144000063C0260003C0220004F
+:10EDB000106200073C0240000A0012C3000000007D
+:10EDC0001062003C3C0240000A0012C30000000038
+:10EDD0008F4501408F4601448F42014800021402D2
+:10EDE000304300FF240200041462000A274401801B
+:10EDF0008F4201B80440FFFE2402001CAC850000D5
+:10EE0000A082000B3C021000AF4201B80A0012C3FE
+:10EE10003C0240002402000914620012000616029F
+:10EE2000000229C0AF4500208F4201B80440FFFE18
+:10EE30002402000124030003AF450180A343018B9A
+:10EE4000A740018EA740019AA7400190AF4001A8BA
+:10EE5000A7420188A74201A6AF4001AC3C021000C6
+:10EE6000AF4201B88F4201B80440FFFE000000002D
+:10EE7000AC8500008F42014800021402A482000801
+:10EE800024020002A082000B8F420148A4820010DD
+:10EE90003C021000AC860024AF4201B80A0012C345
+:10EEA0003C0240000E001310000000000A0012C3D4
+:10EEB0003C0240000E001BC2000000003C0240006B
+:10EEC000AF420178000000000A00112F000000008E
+:10EED0008F4201003042003E144000112402000124
+:10EEE000AF4000488F420100304207C0104000058B
+:10EEF00000000000AF40004CAF40005003E00008AD
+:10EF000024020001AF400054AF4000408F42010096
+:10EF10003042380054400001AF4000442402000158
+:10EF200003E00008000000008F4201B80440FFFE2B
+:10EF300024020001AF440180AF400184A74501884D
+:10EF4000A342018A24020002A342018B9742014A94
+:10EF500014C00004A7420190AF4001A40A0012EFC0
+:10EF60003C0210008F420144AF4201A43C02100059
+:10EF7000AF4001A803E00008AF4201B88F4201B8DA
+:10EF80000440FFFE24020002AF440180AF4401842C
+:10EF9000A7450188A342018AA342018B9742014AF7
+:10EFA000A7420190AF4001A48F420144AF4201A8A3
+:10EFB0003C02100003E00008AF4201B83C029000A0
+:10EFC0003442000100822025AF4400208F420020FF
+:10EFD0000440FFFE0000000003E000080000000005
+:10EFE0003C028000344200010082202503E000083A
+:10EFF000AF44002027BDFFE8AFBF0014AFB0001042
+:10F000008F50014093430149934201489344014882
+:10F01000306300FF304200FF00021200006228252A
+:10F020002402001910620076308400802862001AE1
+:10F030001040001C24020020240200081062007707
+:10F04000286200091040000E2402000B2402000177
+:10F0500010620034286200025040000524020006BD
+:10F0600050600034020020210A00139A00000000C2
+:10F0700010620030020020210A00139A00000000F4
+:10F080001062003B2862000C504000022402000E77
+:10F090002402000910620056020020210A00139A7F
+:10F0A0000000000010620056286200211040000F8E
+:10F0B000240200382402001C106200582862001D3F
+:10F0C000104000062402001F2402001B1062004CA6
+:10F0D000000000000A00139A000000001062004ABD
+:10F0E000020020210A00139A00000000106200456F
+:10F0F0002862003910400007240200802462FFCB00
+:10F100002C42000210400045020020210A00139604
+:10F110000000302110620009000000000A00139A6C
+:10F12000000000001480003D020020210A0013901E
+:10F130008FBF00140A001396240600018F4201B805
+:10F140000440FFFE24020002A342018BA745018870
+:10F150009742014AA74201908F420144A74201927F
+:10F160003C021000AF4201B80A00139C8FBF00148C
+:10F170009742014A144000290000000093620005F4
+:10F180003042000414400025000000000E0013026D
+:10F190000200202193620005020020213442000475
+:10F1A0000E00130BA36200059362000530420004B9
+:10F1B00014400002000000000000000D93620000F7
+:10F1C00024030020304200FF14430014000000001C
+:10F1D0008F4201B80440FFFE24020005AF500180B9
+:10F1E000A342018B3C0210000A00139AAF4201B8FF
+:10F1F0008FBF00148FB000100A0012F227BD001854
+:10F200000000000D02002021000030218FBF0014FB
+:10F210008FB000100A0012DD27BD00180000000D9D
+:10F220008FBF00148FB0001003E0000827BD001846
+:10F2300027BDFFE8AFBF00100E000F3C000000002C
+:10F24000AF4001808FBF0010000020210A000FE7AF
+:10F2500027BD00183084FFFF30A5FFFF00001821F4
+:10F260001080000700000000308200011040000202
+:10F2700000042042006518210A0013AB0005284055
+:10F2800003E000080060102110C0000624C6FFFF44
+:10F290008CA2000024A50004AC8200000A0013B573
+:10F2A0002484000403E000080000000010A000080F
+:10F2B00024A3FFFFAC860000000000000000000057
+:10F2C0002402FFFF2463FFFF1462FFFA248400047A
+:10F2D00003E0000800000000308300FF30A500FFBD
+:10F2E00030C600FF274701808F4201B80440FFFE6F
+:10F2F000000000008F42012834634000ACE20000AF
+:10F3000024020001ACE00004A4E30008A0E2000A2B
+:10F3100024020002A0E2000B3C021000A4E5001051
+:10F32000ACE00024ACE00028A4E6001203E00008F2
+:10F33000AF4201B827BDFFE8AFBF00109362003FA6
+:10F3400024030012304200FF1043000D00803021E2
+:10F350008F620044008210230440000A8FBF001017
+:10F360008F620048240400390000282100C21023C5
+:10F3700004410004240600120E0013C9000000001E
+:10F380008FBF00102402000103E0000827BD001811
+:10F3900027BDFFC8AFB20030AFB1002CAFBF003403
+:10F3A000AFB0002890C5000D0080902130A400105F
+:10F3B0001080000B00C088218CC300088F620054AD
+:10F3C0001062000730A20005144000B524040001BB
+:10F3D0000E000D21000020210A0014BB0040202156
+:10F3E00030A200051040000930A30012108000ACCC
+:10F3F000240400018E2300088F620054146200A9C7
+:10F400008FBF00340A00142C240400382402001298
+:10F41000146200A3240400010220202127A500106B
+:10F420000E000CB2AFA000101040001102402021CD
+:10F430008E220008AF620084AF6000400E0013020D
+:10F44000000000009362007D024020213442002031
+:10F450000E00130BA362007D0E000CA902402021B8
+:10F46000240400382405008D0A0014B82406001274
+:10F470009362003E304200081040000F8FA200103F
+:10F4800030420100104000078FA300148F6200601B
+:10F490000062102304430008AF6300600A001441B7
+:10F4A00000000000AF6000609362003E2403FFF79D
+:10F4B00000431024A362003E9362003E30420008E5
+:10F4C000144000022406000300003021936200343F
+:10F4D000936300378F640084304200FF306300FF85
+:10F4E00000661821000318800043282100A4202B67
+:10F4F0001080000B000000009763003C8F620084C6
+:10F500003063FFFF004510230062182B14600004D5
+:10F51000000000008F6200840A00145D0045802313
+:10F520009762003C3050FFFF8FA300103062000450
+:10F5300010400004000628808FA2001C0A001465F9
+:10F540000202102B2E02021850400003240202185F
+:10F550000A00146E020510233063000410600003DB
+:10F56000004510238FA2001C00451023004080217D
+:10F570002C42008054400001241000800E00130231
+:10F580000240202124020001AF62000C9362003E81
+:10F59000001020403042007FA362003E8E22000413
+:10F5A00024420001AF620040A770003C8F6200500F
+:10F5B0009623000E00431021AF6200588F62005066
+:10F5C00000441021AF62005C8E220004AF6200187C
+:10F5D0008E220008AF62001C8FA20010304200088B
+:10F5E0005440000A93A20020A360003693620036C4
+:10F5F0002403FFDFA36200359362003E0043102422
+:10F60000A362003E0A0014988E220008A36200350F
+:10F610008E220008AF62004C8F6200248F6300408E
+:10F6200000431021AF6200489362000024030050A1
+:10F63000304200FF144300122403FF803C02080004
+:10F640008C4231A00242102100431024AF42002816
+:10F650003C0208008C4231A08E2400083C03000CC0
+:10F66000024210213042007F03421021004310214A
+:10F67000AC4400D88E230008AF820014AC4300DCF9
+:10F680000E00130B02402021240400380000282122
+:10F690002406000A0E0013C9000000002404000123
+:10F6A0008FBF00348FB200308FB1002C8FB0002894
+:10F6B0000080102103E0000827BD003827BDFFF8B7
+:10F6C00027420180AFA20000308A00FF8F4201B8BC
+:10F6D0000440FFFE000000008F4601283C020800A5
+:10F6E0008C4231A02403FF80AF86004800C2102165
+:10F6F00000431024AF4200243C0208008C4231A099
+:10F700008FA900008FA8000000C210213042007FA6
+:10F71000034218213C02000A00621821946400D4BC
+:10F720008FA700008FA5000024020002AF83001401
+:10F73000A0A2000B8FA30000354260003084FFFFC1
+:10F74000A4E200083C021000AD260000AD04000455
+:10F75000AC60002427BD0008AF4201B803E00008F8
+:10F76000240200018F88003C938200288F830014BC
+:10F770003C07080024E7779800481023304200FF38
+:10F78000304900FC246500888F860040304A000321
+:10F790001120000900002021248200048CA3000015
+:10F7A000304400FF0089102AACE3000024A50004C7
+:10F7B0001440FFF924E70004114000090000202153
+:10F7C0002482000190A30000304400FF008A102B27
+:10F7D000A0E3000024A500011440FFF924E7000184
+:10F7E00030C20003144000048F85003C3102000346
+:10F7F0001040000D0000000010A0000900002021B2
+:10F800002482000190C30000304400FF0085102BCB
+:10F81000A0E3000024C600011440FFF924E7000122
+:10F8200003E00008000000001100FFFD000020219F
+:10F83000248200048CC30000304400FF0088102B99
+:10F84000ACE3000024C600041440FFF924E70004E0
+:10F8500003E00008000000008F83003C9382002832
+:10F8600030C600FF30A500FF00431023304300FFE7
+:10F870008F820014008038210043102114C0000240
+:10F88000244800880083382130E20003144000053A
+:10F8900030A2000314400003306200031040000D4A
+:10F8A0000000000010A000090000202124820001B7
+:10F8B00090E30000304400FF0085102BA1030000FE
+:10F8C00024E700011440FFF92508000103E00008C7
+:10F8D0000000000010A0FFFD000020212482000491
+:10F8E0008CE30000304400FF0085102BAD030000C6
+:10F8F00024E700041440FFF92508000403E0000891
+:10F90000000000000080482130AAFFFF30C600FF41
+:10F9100030E7FFFF274801808F4201B80440FFFE17
+:10F920008F820048AD0200008F420124AD02000426
+:10F930008D220020A5070008A102000A240200165B
+:10F94000A102000B934301208D2200088D240004A6
+:10F95000306300FF004310219783003A00441021D8
+:10F960008D250024004310233C0308008C6331A044
+:10F970008F840014A502000C246300E82402FFFF1A
+:10F98000A50A000EA5030010A5060012AD0500187B
+:10F99000AD020024948201142403FFF73042FFFFDC
+:10F9A000AD0200288C820118AD02002C3C02100030
+:10F9B000AD000030AF4201B88D220020004310247A
+:10F9C00003E00008AD2200208F82001430E7FFFF23
+:10F9D00000804821904200D330A5FFFF30C600FFD1
+:10F9E0000002110030420F0000E238252748018054
+:10F9F0008F4201B80440FFFE8F820048AD02000034
+:10FA00008F420124AD0200048D220020A5070008CA
+:10FA1000A102000A24020017A102000B9343012057
+:10FA20008D2200088D240004306300FF0043102164
+:10FA30009783003A004410218F8400140043102360
+:10FA40003C0308008C6331A0A502000CA505000E44
+:10FA5000246300E8A5030010A5060012AD00001401
+:10FA60008D220024AD0200188C82005CAD02001CC7
+:10FA70008C820058AD0200202402FFFFAD0200245A
+:10FA8000948200E63042FFFFAD02002894820060BD
+:10FA9000948300BE30427FFF3063FFFF00021200FC
+:10FAA00000431021AD02002C3C021000AD000030DC
+:10FAB000AF4201B8948200BE2403FFF700A21021D8
+:10FAC000A48200BE8D2200200043102403E0000821
+:10FAD000AD220020274301808F4201B80440FFFE81
+:10FAE0008F8200249442001C3042FFFF000211C0AC
+:10FAF000AC62000024020019A062000B3C0210005E
+:10FB0000AC60003003E00008AF4201B88F87002CE2
+:10FB100030C300FF8F4201B80440FFFE8F820048CF
+:10FB200034636000ACA2000093820044A0A20005F0
+:10FB30008CE20010A4A20006A4A300088C8200207E
+:10FB40002403FFF7A0A2000A24020002A0A2000BD7
+:10FB50008CE20000ACA200108CE20004ACA2001405
+:10FB60008CE2001CACA200248CE20020ACA2002895
+:10FB70008CE2002CACA2002C8C820024ACA20018D9
+:10FB80003C021000AF4201B88C82002000431024D8
+:10FB900003E00008AC8200208F86001427BDFFE838
+:10FBA000AFBF0014AFB0001090C20063304200201D
+:10FBB0001040000830A500FF8CC2007C2403FFDF4A
+:10FBC00024420001ACC2007C90C2006300431024B8
+:10FBD000A0C2006310A000238F830014275001806F
+:10FBE000020028210E0015D6240600828F82001400
+:10FBF000904200633042004050400019A38000440E
+:10FC00008F83002C8F4201B80440FFFE8F82004892
+:10FC1000AE02000024026082A60200082402000254
+:10FC2000A202000B8C620008AE0200108C62000C75
+:10FC3000AE0200148C620014AE0200188C62001830
+:10FC4000AE0200248C620024AE0200288C620028E0
+:10FC5000AE02002C3C021000AF4201B8A380004469
+:10FC60008F8300148FBF00148FB000109062006368
+:10FC700027BD00183042007FA06200639782003ADF
+:10FC80008F86003C8F850014938300280046102344
+:10FC9000A782003AA4A000E490A400638F820040F1
+:10FCA000AF83003C2403FFBF0046102100832024C3
+:10FCB000AF820040A0A400638F820014A04000BD6A
+:10FCC0008F82001403E00008A44000BE8F8A001455
+:10FCD00027BDFFE0AFB10014AFB000108F88003C2B
+:10FCE000AFBF00189389001C954200E430D100FF9B
+:10FCF0000109182B0080802130AC00FF3047FFFF46
+:10FD00000000582114600003310600FF012030215B
+:10FD1000010958239783003A0068102B1440003CD7
+:10FD20000000000014680007240200018E02002079
+:10FD30002403FFFB34E7800000431024AE020020C0
+:10FD40002402000134E70880158200053165FFFFB9
+:10FD50000E001554020020210A00169102002021F5
+:10FD60000E001585020020218F8400482743018062
+:10FD70008F4201B80440FFFE24020018AC6400006A
+:10FD8000A062000B8F840014948200E6A46200102D
+:10FD90003C021000AC600030AF4201B894820060B9
+:10FDA00024420001A4820060948200603C030800A9
+:10FDB0008C63318830427FFF5443000F02002021C2
+:10FDC000948200602403800000431024A482006019
+:10FDD0009082006090830060304200FF000211C2F8
+:10FDE00000021027000211C03063007F0062182556
+:10FDF000A083006002002021022028218FBF00186C
+:10FE00008FB100148FB000100A0015F927BD002033
+:10FE1000914200632403FF8000431025A142006348
+:10FE20009782003A3048FFFF110000209383001CA6
+:10FE30008F840014004B1023304600FF948300E4AD
+:10FE40002402EFFF0168282B00621824A48300E439
+:10FE500014A000038E020020010058210000302170
+:10FE60002403FFFB34E7800000431024AE0200208F
+:10FE700024020001158200053165FFFF0E001554B4
+:10FE8000020020210A0016B99783003A0E0015855A
+:10FE9000020020219783003A8F82003CA780003A1D
+:10FEA00000431023AF82003C9383001C8F82001418
+:10FEB0008FBF00188FB100148FB0001027BD002035
+:10FEC00003E00008A04300BD938200442403000126
+:10FED00027BDFFE8004330042C420020AFB00010E3
+:10FEE000AFBF00142410FFFE10400005274501801D
+:10FEF0003C0208008C4231900A0016D600461024BD
+:10FF00003C0208008C423194004610241440000743
+:10FF1000240600848F8300142410FFFF9062006287
+:10FF20003042000F34420040A06200620E0015D63D
+:10FF300000000000020010218FBF00148FB00010DD
+:10FF400003E0000827BD00188F83002427BDFFE0D1
+:10FF5000AFB20018AFB10014AFB00010AFBF001CBB
+:10FF60009062000D00A0902130D100FF3042007F50
+:10FF7000A062000D8F8500148E4300180080802140
+:10FF80008CA2007C146200052402000E90A2006383
+:10FF9000344200200A0016FFA0A200630E0016C51E
+:10FFA000A38200442403FFFF104300472404FFFF03
+:10FFB00052200045000020218E4300003C0200102A
+:10FFC00000621024504000043C020008020020217E
+:10FFD0000A00170E24020015006210245040000988
+:10FFE0008E45000002002021240200140E0016C5D8
+:10FFF000A38200442403FFFF104300332404FFFFC7
+:020000021000EC
+:100000008E4500003C02000200A2102410400016A1
+:100010003C0200048F8600248CC200148CC30010A4
+:100020008CC40014004310230044102B50400005E2
+:10003000020020218E43002C8CC2001010620003AD
+:10004000020020210A00173F240200123C02000493
+:1000500000A210245040001C00002021020020219A
+:100060000A00173F2402001300A2102410400006CB
+:100070008F8300248C620010504000130000202168
+:100080000A001739020020218C6200105040000441
+:100090008E42002C020020210A00173F240200118A
+:1000A00050400009000020210200202124020017F6
+:1000B0000E0016C5A38200442403FFFF1043000274
+:1000C0002404FFFF000020218FBF001C8FB2001806
+:1000D0008FB100148FB000100080102103E00008E1
+:1000E00027BD00208F83001427BDFFD8AFB40020A8
+:1000F000AFB3001CAFB20018AFB10014AFB0001026
+:10010000AFBF0024906200638F91002C2412FFFF88
+:100110003442004092250000A06200638E2200104D
+:100120000080982130B0003F105200060360A021EB
+:100130002402000D0E0016C5A38200441052005484
+:100140002404FFFF8F8300148E2200188C63007C30
+:1001500010430007026020212402000E0E0016C585
+:10016000A38200442403FFFF104300492404FFFF3F
+:1001700024040020120400048F83001490620063A2
+:1001800034420020A06200638F85003410A000205C
+:1001900000000000560400048F8200140260202139
+:1001A0000A0017902402000A9683000A9442006015
+:1001B0003042FFFF144300048F8200202404FFFD1F
+:1001C0000A0017B7AF82003C3C0208008C42318C19
+:1001D0000045102B14400006026020210000282159
+:1001E0000E001646240600010A0017B70000202161
+:1001F0002402002D0E0016C5A38200442403FFFF35
+:10020000104300232404FFFF0A0017B70000202139
+:10021000160400058F8400148E2300142402FFFFAF
+:100220005062001802602021948200602442000184
+:10023000A4820060948200603C0308008C633188D3
+:1002400030427FFF5443000F0260202194820060FF
+:100250002403800000431024A48200609082006088
+:1002600090830060304200FF000211C2000210279C
+:10027000000211C03063007F00621825A083006077
+:10028000026020210E0015F9240500010000202144
+:100290008FBF00248FB400208FB3001C8FB20018D2
+:1002A0008FB100148FB000100080102103E000080F
+:1002B00027BD00288F83001427BDFFE8AFB00010D2
+:1002C000AFBF0014906200638F87002C00808021F4
+:1002D000344200408CE60010A06200633C0308003A
+:1002E0008C6331B030C23FFF0043102B1040004EF2
+:1002F0008F8500302402FF8090A3000D004310245E
+:10030000304200FF504000490200202100061382C5
+:10031000304800032402000255020044020020215C
+:1003200094A2001C8F85001424030023A4A20114AE
+:100330008CE60000000616023042003F1043001019
+:100340003C0300838CE300188CA2007C1062000642
+:100350002402000E0E0016C5A38200442403FFFFF2
+:10036000104300382404FFFF8F8300149062006361
+:1003700034420020A06200630A0017FC8F8300242F
+:1003800000C31024144300078F83002490A200624E
+:100390003042000F34420020A0A20062A38800383F
+:1003A0008F8300249062000D3042007FA062000D18
+:1003B0008F83003410600018020020218F840030E9
+:1003C0008C8200100043102B1040000924020018FA
+:1003D000020020210E0016C5A38200442403FFFF63
+:1003E000104300182404FFFF0A00182400002021F5
+:1003F0008C820010240500010200202100431023FC
+:100400008F830024240600010E001646AC62001003
+:100410000A001824000020210E0015F9240500010F
+:100420000A00182400002021020020212402000DCF
+:100430008FBF00148FB0001027BD00180A0016C52A
+:10044000A38200448FBF00148FB0001000801021E1
+:1004500003E0000827BD001827BDFFC8AFB2002089
+:10046000AFBF0034AFB60030AFB5002CAFB400283A
+:10047000AFB30024AFB1001CAFB000188F46012805
+:100480003C0308008C6331A02402FF80AF86004843
+:1004900000C318213065007F03452821006218241D
+:1004A0003C02000AAF43002400A2282190A200626F
+:1004B00000809021AF850014304200FF000211023D
+:1004C000A382003890A200BC304200021440000217
+:1004D00024030034240300308F820014A3830028F7
+:1004E000938300388C4200C0A3800044AF82003C5C
+:1004F000240200041062031C8F84003C8E4400041C
+:10050000508003198F84003C8E4200103083FFFF1F
+:10051000A784003A106002FFAF8200408F8400146D
+:100520002403FF809082006300621024304200FFA9
+:10053000144002CF9785003A9383003824020002CA
+:1005400030B6FFFF14620005000088219382002866
+:100550002403FFFD0A001B19AF82003C8F82003C80
+:1005600002C2102B144002A18F8400400E0014EC34
+:1005700000000000938300283C040800248477983E
+:10058000240200341462002EAF84002C3C0A0800C0
+:100590008D4A77C82402FFFFAFA2001000803821E7
+:1005A0002405002F3C09080025297398240800FF22
+:1005B0002406FFFF90E2000024A3FFFF00062202B2
+:1005C00000C21026304200FF0002108000491021B6
+:1005D0008C420000306500FF24E7000114A8FFF5FD
+:1005E0000082302600061027AFA20014AFA2001030
+:1005F0000000282127A7001027A6001400C51023FB
+:100600009044000324A2000100A71821304500FFF8
+:100610002CA200041440FFF9A06400008FA2001077
+:100620001142000724020005024020210E0016C5D9
+:10063000A38200442403FFFF104300642404FFFF4F
+:100640003C0208009042779C104000098F82001401
+:10065000024020212402000C0E0016C5A382004493
+:100660002403FFFF104300592404FFFF8F8200146E
+:10067000A380001C3C0308008C63779C8C440080A2
+:100680003C0200FF3442FFFF006218240083202B4D
+:1006900010800008AF83003402402021240200199A
+:1006A0000E0016C5A38200442403FFFF1043004739
+:1006B0002404FFFF8F87003C9782003A8F85003427
+:1006C000AF8700200047202310A0003BA784003AFA
+:1006D0008F86001430A200030002102390C300BCD8
+:1006E0003050000300B0282100031882307300014D
+:1006F0000013108000A228213C0308008C6331A065
+:100700008F8200483084FFFF0085202B004310219A
+:1007100010800011244200888F84002C1082000E6B
+:100720003C033F013C0208008C42779800431024B0
+:100730003C0325001443000630E500FF8C820000D6
+:10074000ACC200888C8200100A0018E9ACC2009884
+:100750000E001529000030219382001C8F850014A3
+:100760008F830040020238218F82003CA387001C47
+:1007700094A400E4006218218F82003434841000B5
+:10078000AF83004000503021A4A400E41260000EAA
+:10079000AF86003C24E20004A382001C94A200E483
+:1007A00024C30004AF83003C34422000A4A200E430
+:1007B0000A001906000020218F820040AF80003C13
+:1007C00000471021AF820040000020212414FFFFC9
+:1007D000109402112403FFFF3C0808008D0877A83D
+:1007E0003C0208008C4231B03C03080090637798CB
+:1007F00031043FFF0082102B1040001B3067003F88
+:100800003C0208008C4231A88F83004800042180FC
+:1008100000621821006418213062007F0342282101
+:100820003C02000C00A228213C020080344200015E
+:100830003066007800C230252402FF800062102458
+:10084000AF42002830640007AF4208048F820014D2
+:100850000344202124840940AF460814AF850024B6
+:10086000AF840030AC4301189383003824020003A6
+:10087000146201CF240200012402002610E201D1FB
+:1008800028E2002710400013240200322402002234
+:1008900010E201CC28E200231040000824020024CA
+:1008A0002402002010E201B82402002110E20147D6
+:1008B000024020210A001AFB2402000B10E201C1B1
+:1008C0002402002510E20010024020210A001AFB39
+:1008D0002402000B10E201AE28E2003310400006B3
+:1008E0002402003F2402003110E2009A024020213D
+:1008F0000A001AFB2402000B10E201A5024020218D
+:100900000A001AFB2402000B8F90002C3C03080005
+:100910008C6331B08F8500308E0400100000A82158
+:100920008CB3001430823FFF0043102B8CB10020A9
+:100930005040018F0240202190A3000D2402FF802F
+:1009400000431024304200FF504001890240202122
+:10095000000413823042000314400185024020212C
+:1009600094A3001C8F8200148E040028A443011459
+:100970008CA20010026218231064000302402021A0
+:100980000A00197C2402001F8F82003400621021AB
+:100990000262102B104000088F83002402402021A7
+:1009A000240200180E0016C5A382004410540174DE
+:1009B0002404FFFF8F8300248F8400348C62001096
+:1009C0000224882100441023AC6200108F8200149E
+:1009D000AC7100208C4200680051102B10400009BF
+:1009E0008F830030024020212402001D0E0016C516
+:1009F000A38200442403FFFF104301612404FFFF8E
+:100A00008F8300308E0200248C6300241043000783
+:100A1000024020212402001C0E0016C5A3820044BF
+:100A20002403FFFF104301562404FFFF8F8400249A
+:100A30008C82002424420001AC8200241233000482
+:100A40008F8200148C4200685622000E8E02000035
+:100A50008E0200003C030080004310241440000D6F
+:100A60002402001A024020210E0016C5A382004471
+:100A70002403FFFF104301422404FFFF0A0019BAB8
+:100A80008E0200143C0300800043102450400003F9
+:100A90008E020014AC8000208E0200142411FFFF8F
+:100AA0001051000E3C0308003C0208008C423190BB
+:100AB000004310242403001B14400007A3830044B8
+:100AC0000E0016C5024020211051012D2404FFFF05
+:100AD0000A0019CB8E030000A38000448E0300009F
+:100AE0003C02000100621024104000123C02008011
+:100AF0000062102414400008024020212402001A41
+:100B00000E0016C5A38200442403FFFF1043011CFE
+:100B10002404FFFF02402021020028210E0016E5D8
+:100B2000240600012403FFFF104301152404FFFFE6
+:100B3000241500018F83002402A0302102402021CF
+:100B40009462003624050001244200010A001ADFE5
+:100B5000A46200368F90002C3C0308008C6331B0F7
+:100B60008E13001032623FFF0043102B10400089AB
+:100B70008F8400302402FF809083000D00431024F6
+:100B8000304200FF104000842402000D0013138245
+:100B900030420003240300011443007F2402000DAF
+:100BA0009082000D30420008544000048F820034CF
+:100BB000024020210A001A102402002450400004A0
+:100BC0008E03000C024020210A001A102402002784
+:100BD0008C82002054620006024020218E0300080F
+:100BE0008C820024506200098E02001402402021F1
+:100BF000240200200E0016C5A38200441054007188
+:100C00002403FFFF0A001A458F8400242411FFFFEC
+:100C1000145100048F860014024020210A001A405B
+:100C2000240200258E0300188CC2007C1062000391
+:100C30002402000E0A001A40024020218E030024E4
+:100C40008C82002810620003240200210A001A404E
+:100C5000024020218E0500288C82002C10A2000367
+:100C60002402001F0A001A40024020218E03002C9B
+:100C700014600003240200230A001A4002402021CD
+:100C80008CC200680043102B104000032402002691
+:100C90000A001A40024020218C82001400651821AD
+:100CA0000043102B104000088F84002402402021B4
+:100CB000240200220E0016C5A382004410510041F8
+:100CC0002403FFFF8F8400242403FFF79082000D8C
+:100CD00000431024A082000D8F8600143C030800FE
+:100CE0008C6331AC8F82004894C400E08F8500246F
+:100CF0000043102130847FFF000420400044102175
+:100D00003043007F034320213C03000E0083202159
+:100D10002403FF8000431024AF42002CA493000062
+:100D20008CA2002824420001ACA200288CA2002C36
+:100D30008E03002C00431021ACA2002C8E02002C4C
+:100D4000ACA200308E020014ACA2003494A2003A8F
+:100D500024420001A4A2003A94C600E03C0208002C
+:100D60008C4231B024C4000130837FFF1462000F35
+:100D700000803021240280000082302430C2FFFF36
+:100D8000000213C2304200FF000210270A001A7E40
+:100D9000000233C02402000D024020210E0016C5BF
+:100DA000A38200440A001A84004018218F82001494
+:100DB00002402021240500010E0015F9A44600E0A0
+:100DC000000018210A001B16006088218F90002C5B
+:100DD0003C0308008C6331B08E05001030A23FFF49
+:100DE0000043102B104000612402FF808F840030EC
+:100DF0009083000D00431024304200FF5040005CFF
+:100E0000024020218F8200341040000B0005138225
+:100E10008F8200149763000A944200603042FFFF03
+:100E200014430005000513828F8200202404FFFD77
+:100E30000A001AF3AF82003C304200031440000E57
+:100E40000000000092020002104000058E03002402
+:100E500050600015920300030A001AAF02402021DF
+:100E60008C82002450620010920300030240202173
+:100E70000A001AB72402000F9082000D30420008C9
+:100E80005440000992030003024020212402001074
+:100E90000E0016C5A38200442403FFFF1043003850
+:100EA0002404FFFF92030003240200025462000C9A
+:100EB000920200038F820034544000099202000322
+:100EC000024020212402002C0E0016C5A3820044FB
+:100ED0002403FFFF1043002A2404FFFF92020003B3
+:100EE0000200282102402021384600102CC60001B3
+:100EF0002C4200010E0016E5004630252410FFFFAD
+:100F00001050001F2404FFFF8F8300341060001373
+:100F1000024020213C0208008C42318C0043102BFF
+:100F200014400007000000000000282124060001F2
+:100F30000E001646000000000A001AF300002021EF
+:100F40002402002D0E0016C5A38200441050000C90
+:100F50002404FFFF0A001AF3000020210E0015F9F7
+:100F6000240500010A001AF300002021024020217C
+:100F70002402000D0E0016C5A3820044004020216B
+:100F80000A001B16008088211514000E00000000C6
+:100F90000E00174C024020210A001B160040882139
+:100FA0000E0016C5A38200440A001B1600408821CB
+:100FB00014620017022018212402002314E2000505
+:100FC0002402000B0E0017C0024020210A001B164D
+:100FD0000040882102402021A38200440E0016C553
+:100FE0002411FFFF0A001B170220182130A500FF63
+:100FF0000E001529240600019783003A8F82003CD9
+:10100000A780003A00431023AF82003C0220182141
+:101010001220003E9782003A2402FFFD5462003EF7
+:101020008E4300208E4200048F830014005610234C
+:10103000AE420004906200633042007FA062006311
+:101040008E4200208F840014A780003A34420002B0
+:10105000AE420020A48000E4908200632403FFBF1E
+:1010600000431024A08200630A001B598E43002015
+:101070009082006300621024304200FF1040002381
+:101080009782003A90820088908300BD2485008872
+:101090003042003F2444FFE02C820020A383001C48
+:1010A00010400019AF85002C2402000100821804B2
+:1010B000306200191440000C3C02800034420002EF
+:1010C000006210241440000B306200201040000F1A
+:1010D0009782003A90A600010240202124050001D9
+:1010E0000A001B5330C60001024020210A001B5297
+:1010F00024050001024020210000282124060001CF
+:101100000E001646000000009782003A1440FD04CD
+:101110008F8400148E4300203062000410400012BF
+:101120008F84003C2402FFFB00621024AE420020AA
+:10113000274301808F4201B80440FFFE8F820048A0
+:10114000AC6200008F420124AC6200042402608380
+:10115000A462000824020002A062000B3C021000FE
+:10116000AF4201B88F84003C8F8300148FBF0034DE
+:101170008FB600308FB5002C8FB400288FB30024B9
+:101180008FB200208FB1001C8FB000182402000124
+:1011900027BD003803E00008AC6400C030A500FFA4
+:1011A0002403000124A900010069102B1040000C49
+:1011B00000004021240A000100A31023004A380443
+:1011C00024630001308200010069302B10400002CE
+:1011D000000420420107402554C0FFF800A310235B
+:1011E00003E00008010010213C020800244260A432
+:1011F0003C010800AC22738C3C02080024425308D6
+:101200003C010800AC2273902402000627BDFFE0D9
+:101210003C010800A02273943C021EDCAFB200180F
+:10122000AFB10014AFBF001CAFB0001034526F411B
+:1012300000008821240500080E001B7A02202021CE
+:10124000001180803C07080024E773980002160014
+:1012500002071821AC6200000000282124A200012E
+:101260003045FFFF8C6200002CA6000804410002FC
+:10127000000220400092202614C0FFF8AC64000059
+:10128000020780218E0400000E001B7A2405002036
+:10129000262300013071FFFF2E2301001460FFE5BB
+:1012A000AE0200008FBF001C8FB200188FB1001477
+:1012B0008FB0001003E0000827BD002027BDFFD835
+:1012C000AFB3001CAFB20018AFBF0020AFB1001425
+:1012D000AFB000108F5101408F48014800089402C0
+:1012E000324300FF311300FF8F4201B80440FFFE7C
+:1012F00027500180AE1100008F420144AE0200046D
+:1013000024020002A6120008A202000B240200140C
+:10131000AE1300241062002528620015104000085A
+:101320002402001524020010106200302402001272
+:10133000106200098FBF00200A001CB58FB3001C8B
+:101340001062007024020022106200378FBF00205C
+:101350000A001CB58FB3001C3C0208008C4231A06F
+:101360002403FF800222102100431024AF420024F6
+:101370003C0208008C4231A0022210213042007F42
+:10138000034218213C02000A00621821166000BCCA
+:10139000AF830014906200623042000F344200308C
+:1013A000A06200620A001CB48FBF00203C046000F1
+:1013B0008C832C083C02F0033442FFFF00621824A7
+:1013C000AC832C083C0208008C4231A08C832C0892
+:1013D000244200740002108200021480006218256A
+:1013E000AC832C080A001CB48FBF00203C0208000C
+:1013F0008C4231A02403FF800222102100431024DC
+:10140000AF4200243C0208008C4231A03C03000A99
+:10141000022210213042007F03421021004310219C
+:101420000A001CB3AF8200143C0208008C4231A0B9
+:101430002405FF800222102100451024AF42002421
+:101440003C0208008C4231A0022210213042007F71
+:10145000034218213C02000A0062182190620063D6
+:1014600000A21024304200FF10400085AF8300141A
+:1014700024620088944300123C0208008C4231A888
+:1014800030633FFF00031980022210210043102126
+:101490003043007F03432021004510243C03000C0F
+:1014A00000832021AF4200289082000D00A210246A
+:1014B000304200FF10400072AF8400249082000D83
+:1014C000304200101440006F8FBF00200E0015C87E
+:1014D000000000008F4201B80440FFFE0000000041
+:1014E000AE1100008F420144AE020004240200024B
+:1014F000A6120008A202000BAE1300240A001CB4BE
+:101500008FBF00202406FF8002261024AF42002057
+:101510003C0208008C4231A031043FFF00042180CE
+:101520000222102100461024AF4200243C03080090
+:101530008C6331A83C0208008C4231A03227007F26
+:101540000223182102221021006418213042007F5A
+:101550003064007F034228213C02000A0066182400
+:1015600000A22821034420213C02000C00822021FB
+:10157000AF4300283C020008034718210062902175
+:10158000AF850014AF8400240E0015C8010080212F
+:101590008F4201B80440FFFE8F8200248F84001424
+:1015A000274501809042000DACB10000A4B00006B8
+:1015B000000216000002160300021027000237C2C4
+:1015C00014C00016248200889442001232033FFFA8
+:1015D00030423FFF14430012240260829083006374
+:1015E0002402FF8000431024304200FF5040000CD2
+:1015F00024026082908200623042000F3442004038
+:10160000A082006224026084A4A200082402000DCB
+:10161000A0A200050A001C9E3C0227002402608252
+:10162000A4A20008A0A000053C02270000061C00A0
+:101630000062182524020002A0A2000BACA3001037
+:10164000ACA00014ACA00024ACA00028ACA0002CDE
+:101650008E42004C8F840024ACA200189083000DB1
+:101660002402FF8000431024304200FF1040000598
+:101670008FBF00209082000D3042007FA082000DBD
+:101680008FBF00208FB3001C8FB200188FB10014E1
+:101690008FB000103C02100027BD002803E00008B6
+:1016A000AF4201B80800343008003430080033A8D5
+:1016B000080033E0080034140800343808003438D7
+:1016C00008003438080033180A0001240000000024
+:1016D000000000000000000D747061362E322E33C1
+:1016E00000000000060203010000000000000000EE
+:1016F00000000000000000000000000000000000EA
+:1017000000000000000000000000000000000000D9
+:1017100000000000000000000000000000000000C9
+:1017200000000000000000000000000000000000B9
+:1017300000000000000000000000000000000000A9
+:101740000000000000000000000000000000000099
+:101750000000000000000000000000001000000376
+:10176000000000000000000D0000000D3C02080019
+:1017700024421C003C03080024632094AC40000079
+:101780000043202B1480FFFD244200043C1D080070
+:1017900037BD2FFC03A0F0213C1008002610049058
+:1017A0003C1C0800279C1C000E00015C000000008F
+:1017B0000000000D3084FFFF308200078F85001885
+:1017C00010400002248300073064FFF800853021B8
+:1017D00030C41FFF03441821247B4000AF85001C48
+:1017E000AF84001803E00008AF4400843084FFFF9A
+:1017F000308200078F8500208F860028104000026D
+:10180000248300073064FFF8008520210086182B10
+:1018100014600002AF8500240086202303442821A1
+:1018200034068000AF840020AF44008000A6202151
+:1018300003E00008AF84003827BDFFD8AFB3001C19
+:10184000AFB20018AFB00010AFBF0024AFB400209B
+:10185000AFB100143C0860088D1450002418FF7FBD
+:101860003C1A8000029898243672380CAD12500051
+:101870008F5100083C07601C3C08600036300001B6
+:10188000AF500008AF800018AF400080AF40008428
+:101890008CE600088D0F08083C0760168CEC0000F1
+:1018A00031EEFFF039CA00103C0DFFFF340B800011
+:1018B0003C030080034B48212D440001018D282466
+:1018C0003C0253533C010800AC230420AF8900388C
+:1018D000AF860028AF840010275B400014A20003ED
+:1018E00034E37C008CF90004032818218C7F007CF1
+:1018F0008C6500783C0280003C0B08008D6B048CEA
+:101900003C0A08008D4A048834520070AF85003CC0
+:10191000AF9F00403C13080026731C440240A021E6
+:101920008E4800008F46000038C30001306400017B
+:1019300010800017AF880034028048218D2F0000EE
+:101940003C0508008CA5045C3C1808008F1804585E
+:1019500001E8102300A280210000C8210202402BD0
+:1019600003198821022838213C010800AC30045CAE
+:101970003C010800AC2704588F4E000039CD00010F
+:1019800031AC00011580FFED01E04021AF8F003444
+:101990008E5100003C0708008CE7045C3C0D0800F9
+:1019A0008DAD04580228802300F0602100007021D2
+:1019B0000190302B01AE1821006620213C01080067
+:1019C000AC2C045C3C010800AC2404588F46010890
+:1019D0008F47010030C92000AF860000AF87000CA0
+:1019E0001120000A00C040213C1808008F18042C68
+:1019F000270800013C010800AC28042C3C184000DA
+:101A0000AF5801380A000196000000009749010410
+:101A100000002821014550213122FFFF0162582199
+:101A20000162F82B015F502130D902003C0108000F
+:101A3000AC2B048C3C010800AC2A0488172000154C
+:101A400024040F0010E400130000000024080D001F
+:101A500010E8023B30CD000611A0FFE93C18400021
+:101A6000936E00002409001031C400F01089027147
+:101A700024020070108202E58F880014250F0001F7
+:101A8000AF8F00143C184000AF5801380A0001968F
+:101A900000000000974C01041180FFD93C18400061
+:101AA00030C34000146000A1000000008F460178A0
+:101AB00004C0FFFE8F87003824100800240F0008A0
+:101AC0008CE30008AF500178A74F0140A7400142C6
+:101AD000974E01048F86000031C9FFFF30CD000111
+:101AE00011A002E1012040212531FFFE241800024F
+:101AF000A75801463228FFFFA75101483C190800AA
+:101B00008F39043C172002D08F8C000C30DF00206E
+:101B100017E00002240400092404000130C20C0074
+:101B2000240504005045000134840004A744014A00
+:101B30003C1108008E3104203C1800483C10000184
+:101B40000238182530CF00020070282511E000046B
+:101B5000000018213C19010000B9282524030001C8
+:101B600030DF000453E00005AF8300083C0600109E
+:101B700000A6282524030001AF830008AF4510000C
+:101B80000000000000000000000000000000000055
+:101B90008F83000810600023000000008F451000B4
+:101BA00004A1FFFE000000001060001E0000000005
+:101BB0008F4410003C0C0020008C102410400019B1
+:101BC0008F8E000031CD000211A000160000000031
+:101BD000974F101415E000130000000097591008EB
+:101BE0003338FFFF271100060011188200033080F0
+:101BF00000C7282132300001322300031200032CD9
+:101C00008CA200000000000D00C7F821AFE2000028
+:101C10003C0508008CA5043024A600013C01080006
+:101C2000AC2604308F6D00003402FFFFAF8D00043E
+:101C30008CEC0000118202A6000020218CED000037
+:101C400031AC01001180028A000000003C02080053
+:101C50008C4204743C0308008C63044C3C1F080055
+:101C60008FFF04703C1808008F1804480048382182
+:101C70000068802100E8282B03E430210208402B73
+:101C80000304882100C57021022878213C01080046
+:101C9000AC30044C3C010800AC2F04483C01080067
+:101CA000AC2704743C010800AC2E04708F8400182B
+:101CB0000120302131290007249F000833F91FFF3C
+:101CC00003594021AF84001CAF990018251B400028
+:101CD000AF590084112000038F83002024C2000725
+:101CE0003046FFF88F84002800C3282100A4302B41
+:101CF00014C00002AF83002400A428230345602100
+:101D0000340D8000018D10213C0F1000AF850020A4
+:101D1000AF820038AF450080AF4F01788F88001444
+:101D2000250F00010A0001EFAF8F00148F62000839
+:101D30008F670000240500300007760231C300F0F1
+:101D4000106500A7240F0040546FFF4C8F880014CB
+:101D50008F4B01780560FFFE0000000030CA0200D2
+:101D600015400003000612820000000D00061282DA
+:101D7000304D0003000D4900012D18210003808023
+:101D8000020D402100086080019380218E1F000019
+:101D900017E00002000000000000000D8F6E00043C
+:101DA00005C202BD92070006920E000592020004D1
+:101DB0003C090001000E18800070F8218FED00181A
+:101DC000277100082448000501A96021000830821D
+:101DD000AFEC0018022020210E00059E26050014FD
+:101DE000920A00068F7900043C0B7FFF000A2080D6
+:101DF000009178218DF800043566FFFF0326282422
+:101E000003053821ADE70004920E0005920D000491
+:101E1000960C0008000E10800051C8218F2300008E
+:101E2000974901043C07FFFF006758243128FFFF52
+:101E3000010DF82103EC50233144FFFF01643025EC
+:101E4000AF260000920300072418000110780275E5
+:101E5000240F0003106F0285000000008E050010A3
+:101E60002419000AA7590140A7450142921800040D
+:101E70008F860000240F0001A7580144A7400146A7
+:101E80009747010430D100023C050041A7470148B3
+:101E900000001821A74F014A1220000330CB000494
+:101EA0003C0501412403000151600005AF83000897
+:101EB0003C06001000A6282524030001AF8300087B
+:101EC000AF4510000000000000000000000000000E
+:101ED000000000008F8A000811400004000000008C
+:101EE0008F4410000481FFFE000000008F6B000093
+:101EF000920800043C1108008E310444AF8B0004AA
+:101F000097590104311800FF3C0E08008DCE0440A3
+:101F10003325FFFF0305382102276021000010212F
+:101F2000250F000A31E8FFFF0187482B01C2682115
+:101F300001A9F821311000073C010800AC2C044431
+:101F40003C010800AC3F0440120000038F8C0018D5
+:101F50002506000730C8FFF8010C682131BF1FFFBC
+:101F6000AF8C001CAF9F0018AF5F00849744010442
+:101F7000035F80213084FFFF308A00071140000397
+:101F8000261B4000248900073124FFF88F8200209F
+:101F90008F850028008220210085702B15C000024B
+:101FA000AF820024008520233C0B08008D6B048C3D
+:101FB0003C0A08008D4A04880344882134038000C9
+:101FC000022310213C0F1000AF840020AF820038A4
+:101FD000AF440080AF4F01780A0002968F8800144A
+:101FE0008F5001780600FFFE30D10200162000035A
+:101FF000000612820000000D00061282305F00030E
+:10200000001F1900007F302100062080009FC8219A
+:1020100000194880013380218E180000130000024F
+:10202000000000000000000D8F6C000C058001FB1B
+:102030008F870038240E0001AE0E00008CE30008EC
+:10204000A20000078F65000400055402314D00FF17
+:1020500025A80005000830822CCB00411560000245
+:10206000A20A00040000000D8F7800043C03FFFF6B
+:1020700000E02821330BFFFF256C000B000C1082C1
+:1020800000022080008748218D3F000026040014B4
+:10209000A618000803E3C8240E00059EAD39000011
+:1020A0008F4F01083C11100001F1382410E001AB02
+:1020B00000000000974D01049208000725AAFFECDC
+:1020C000350600023144FFFFA2060007960600080D
+:1020D0002CC7001354E0000592030007921100077B
+:1020E000362F0001A20F00079203000724180001F9
+:1020F000107801C224090003106901D58F880038C7
+:1021000030CBFFFF257100020011788331E400FF1E
+:1021100000042880A20F000500A848218D2D000092
+:10212000974A01043C0EFFFF01AEF8243143FFFF44
+:10213000006B1023244CFFFE03ECC825AD390000D2
+:10214000920600053C03FFF63462FFFF30D800FF23
+:102150000018388000F08821922F00143C04FF7F83
+:102160003487FFFF31EE000F01C65821316500FFB3
+:1021700000055080015068218DAC00200148F821F5
+:10218000A20B00060182C824AE0C000CAFF9000CB3
+:10219000920900068E11000C032778240009C080E4
+:1021A0000310702195C60026030828210227202449
+:1021B000AE04000CADCF0020ADC60024ACA60010CC
+:1021C0008F8800003C0B08008D6B048C3C0A0800D3
+:1021D0008D4A0488241F001024190002A75F0140C3
+:1021E000A7400142A7400144A7590146974901046D
+:1021F00024070001310600022538FFFEA7580148D8
+:102200003C050009A747014A10C00003000018213F
+:102210003C05010924030001310C00045180000534
+:10222000AF8300083C08001000A828252403000103
+:10223000AF830008AF451000000000000000000060
+:1022400000000000000000009205000424AE00021F
+:1022500031CD0007000D182330620007AE020010D8
+:102260008F90000812000004000000008F4F100043
+:1022700005E1FFFE000000008F7100008F8E001846
+:102280003C0308008C630444AF91000497450104AB
+:1022900025CF001031E61FFF30A2FFFFAF8E001CDC
+:1022A000AF860018AF4600842449FFFE3C0C0800AE
+:1022B0008D8C0440974D010401208021000947C303
+:1022C0000070C02131A9FFFF0310F82B0188C8213D
+:1022D000033F202103463821313100073C0108002B
+:1022E000AC3804443C010800AC2404401220000334
+:1022F00024FB40002527000730E9FFF88F860020E7
+:102300008F8400280126382100E4C02B170000022A
+:10231000AF86002400E438230347202134198000CD
+:10232000009910213C0F1000AF870020AF820038C9
+:10233000AF470080AF4F01780A0002968F880014E3
+:102340009747010410E0FDAE3C1840008F5801781B
+:102350000700FFFE30C5400010A000033C1F00082E
+:102360000000000D3C1F0008AF5F01402410080072
+:102370008F860000AF5001789744010430D90001E6
+:10238000132000ED3086FFFF24CCFFFE240D000259
+:10239000A74D0146A74C01488F9100182408000D55
+:1023A000A748014A8F630000262F000831E21FFF73
+:1023B0000342702130C90007AF830004AF91001CB5
+:1023C000AF82001800C03821AF4200841120000302
+:1023D00025DB400024D800073307FFF88F85002055
+:1023E0008F84002800E5302100C4382B14E000025F
+:1023F000AF85002400C430238F8400140346F821E5
+:10240000340C8000AF86002003EC8021AF460080B2
+:10241000249900013C0610003C184000AF460178AA
+:10242000AF900038AF990014AF5801380A000196F8
+:10243000000000008F630000975101043067FFFF28
+:102440003228FFFF8F4F017805E0FFFE30EC0007D8
+:10245000000CF82333F0000724F9FFFE2404000ADF
+:10246000A7440140A7500142A7590144A740014693
+:10247000A74801488F45010830B800201700000226
+:10248000240300092403000130CD0002A743014AC0
+:102490003C04004111A00003000018213C0401414C
+:1024A0002403000130C9000451200005AF83000857
+:1024B0003C0600100086202524030001AF8300089D
+:1024C000AF44100000000000000000000000000009
+:1024D000000000008F8E000811C000040000000002
+:1024E0008F4210000441FFFE000000008F7F0000BB
+:1024F000276400088F91003CAF9F0004948500087A
+:102500009490000A9499000C30AFFFFF0010C400B3
+:102510003323FFFF11F100A6030320253C0E080022
+:102520008DCE04443C0C08008D8C044000E88821CA
+:102530002626FFFE01C628210000682100A6F82BF0
+:10254000018D2021009F80213C010800AC2504441E
+:102550003C010800AC30044024E200083042FFFF98
+:102560003047000710E000038F830018244F000756
+:1025700031E2FFF83106FFFF30C800070043802139
+:1025800032191FFF0359C021AF83001CAF990018F7
+:10259000271B4000AF590084110000038F8C0020DE
+:1025A00024C5000730A6FFF88F84002800CC28211E
+:1025B00000A4F82B17E00002AF8C002400A428230D
+:1025C000AF850020AF4500803C0408008C840434B3
+:1025D00003454821340E8000012E6821108000053B
+:1025E000AF8D0038939100172406000E12260011BB
+:1025F0002407043F3C021000AF4201788F8800148A
+:10260000250F00010A0001EFAF8F00140E0005C472
+:1026100000E020218F8800143C0B08008D6B048C97
+:102620003C0A08008D4A0488250F00010A0001EFCA
+:10263000AF8F00143C021000A7470148AF42017859
+:102640000A0004CE8F88001424040F001184003D7A
+:1026500030CE002015C0000224030009240300012D
+:102660000A00021AA743014A0A00020DA7400146C8
+:1026700094EF000894F1000A94F0000C8F8C003C59
+:10268000001174003207FFFF31EDFFFF11AC00377E
+:1026900001C720253C1808008F1804443C0F08008F
+:1026A0008DEF0440000080210308682101A8382B29
+:1026B00001F0702101C760213C010800AC2D0444E9
+:1026C0003C010800AC2C04400A00027A8F840018F8
+:1026D0003C0208008C42047C3C0308008C630454D8
+:1026E0003C1F08008FFF04783C1808008F18045026
+:1026F000004838210068802100E8282B03E43021BD
+:102700000208402B0304882100C57021022878218B
+:102710003C010800AC3004543C010800AC2F0450CC
+:102720003C010800AC27047C3C010800AC2E047876
+:102730000A00027A8F840018A74001460A00043577
+:102740008F91001830CD002015A0FFC52403000D87
+:10275000240300050A00021AA743014A974E010408
+:1027600025C5FFF00A00038130A4FFFF8F980040C9
+:102770001498FFC8000010213C0508008CA5046CCB
+:102780003C1F08008FFF046800A8C8210328302BD5
+:1027900003E22021008640213C010800AC39046C92
+:1027A0003C010800AC2804680A00027A8F840018F3
+:1027B0008F8C0040148CFF5900E8C8213C18080099
+:1027C0008F18046C3C1108008E3104682723FFFE2B
+:1027D00003034821000010210123302B0222702125
+:1027E00001C668213C010800AC29046C3C010800CA
+:1027F000AC2D04680A0004A524E200088F88003884
+:102800003C03FFFF8D02000C0043F82403E4C825BD
+:10281000AD19000C0A00038F30CBFFFF0A0003C381
+:10282000AE000000974A0104920400048E26000CBA
+:10283000014458212579FFF200C7C0243325FFFF4A
+:1028400003053825AE27000C0A0002E68E050010AD
+:102850003C0DFFFF8D0A0010014D582401646025D6
+:10286000AD0C00100A00038F30CBFFFF974301042B
+:10287000920E00048E290010006E1021244DFFEEF0
+:102880000127602431A8FFFF0188F825AE3F001022
+:102890000A0002E68E0500108E0F000CAE0000004C
+:1028A00000078880023028210A0002B8ACAF00205F
+:1028B0001460000D3058FFFF3C04FFFF0044682403
+:1028C00001A47026000E602B000D102B004CF82484
+:1028D00013E00002000000000000000D8CAF0000BB
+:1028E0000A00025001E410253B03FFFF0003882B80
+:1028F0000018802B0211202410800002000000002C
+:102900000000000D8CB900000A0002503722FFFFC2
+:102910003084FFFF30A5FFFF108000070000182162
+:10292000308200011040000200042042006518219E
+:102930001480FFFB0005284003E000080060102120
+:1029400010C00007000000008CA2000024C6FFFF9A
+:1029500024A50004AC82000014C0FFFB2484000402
+:1029600003E000080000000010A0000824A3FFFFFF
+:10297000AC86000000000000000000002402FFFF01
+:102980002463FFFF1462FFFA2484000403E00008BC
+:1029900000000000308EFFFF30D8FFFF00057C00F4
+:1029A00001F8602539CDFFFF01AC5021014C582BB7
+:1029B000014B4821000944023127FFFF00E8302184
+:1029C0000006240230C5FFFF00A418213862FFFF73
+:1029D00003E000083042FFFF3C0C08008D8C0484AB
+:1029E000240BFF8027BDFFD001845021014B4824D8
+:1029F000AF4900203C0808008D080484AFB20020D5
+:102A0000AFB00018AFBF0028AFB30024AFB1001CB7
+:102A1000936600040104382130E4007F009A1021FD
+:102A20003C0300080043902130C500200360802152
+:102A30003C080111277B000814A000022646007004
+:102A40002646006C9213000497510104920F000473
+:102A50003267000F322EFFFF31ED004001C72823FF
+:102A600011A0000500004821925900BC3338000431
+:102A70001700009000000000924300BC307F00046B
+:102A800013E0000F0000000010A0000D0000000087
+:102A9000960E0002240AFF8000A7602125CDFFFECC
+:102AA000A74D1016920B0004014B2024308200FF2A
+:102AB00010400085010C40253C0F0400010F40250B
+:102AC0008F5301780660FFFE2404000AA7440140EA
+:102AD000960D00022404000931AC0007000C5823B5
+:102AE000316A0007A74A0142960200022443FFFE12
+:102AF000A7430144A7400146975F0104A75F01482F
+:102B00008F590108333800205300000124040001CC
+:102B1000920F000431EE001015C000023483001043
+:102B200000801821A743014A0000000000000000B7
+:102B30000000000000000000AF481000000000008E
+:102B40000000000000000000000000008F51100095
+:102B50000621FFFE3113FFFF12600003000000009A
+:102B60008F481018ACC8000096030006307FFFFFA6
+:102B700027F900020019988200138880023B302157
+:102B80008CD800001520005700183402920300046E
+:102B90002405FF8000A3F82433F100FF1220002C4D
+:102BA00000000000924700BC30F2000212400028F2
+:102BB00000000000974B100C2562FFFEA742101684
+:102BC000000000003C0A040035490030AF49100005
+:102BD00000000000000000000000000000000000F5
+:102BE0008F4C10000581FFFE000000009749100C7B
+:102BF0008F51101C00C020213127FFFF24F200302C
+:102C0000001218820003288000BBF8213226FFFF43
+:102C1000AFF100000E0005B300112C020013C880B4
+:102C2000033B98218E78000000027400AFB80010BA
+:102C30008FA80010310FFFFFAFAF00108FA400105E
+:102C400001C46825AFAD00108FA60010AE6600006D
+:102C500097730008976D000A9766000C8F8A003CF6
+:102C6000000D5C0030CCFFFF3262FFFF104A0036DF
+:102C7000016C2025960600023C10100024D30008A9
+:102C80000E00013B3264FFFF974C01040E00014926
+:102C90003184FFFFAF5001788FBF00288FB300242D
+:102CA0008FB200208FB1001C8FB0001803E0000825
+:102CB00027BD003010A0FF700000000024A5FFFC1D
+:102CC0000A0005EC240900048CD10000AF51101853
+:102CD0008F5301780660FF7A2404000A0A00060177
+:102CE0000000000000A7C8218F8800388F4E101CFC
+:102CF0000019C0820018788001E82021AC8E000005
+:102D0000000E2C0200C020210E0005B331C6FFFFCB
+:102D1000023B28218CAD000000025400004030210D
+:102D2000AFAD00108FAC0010318BFFFFAFAB0010C8
+:102D30008FA2001001424825AFA900108FA70010F4
+:102D40000A000631ACA700008F8F0040148FFFC926
+:102D50000000000097420104960B00023C050800A9
+:102D60008CA5046C3049FFFF316AFFFF3C1108005D
+:102D70008E310468012A382124F2FFFE00B240217E
+:102D80000012FFC30112C82B023FC02103192021EA
+:102D90003C010800AC28046C3C010800AC24046829
+:102DA0000A00066B0000000000A4102B1040000970
+:102DB000240300010005284000A4102B04A00003F8
+:102DC000000318405440FFFC000528401060000735
+:102DD000000000000085302B14C0000200031842E0
+:102DE000008520231460FFFB0005284203E0000853
+:102DF000008010218F85002C27BDFFE800053027BB
+:102E00002CC300012CA400020083102510400003F5
+:102E1000AFBF00102405007FAF85002C00052827D8
+:102E200030A5FFFF0E000592240426F58F830030A5
+:102E3000240402BD004030210083382B10E000093B
+:102E400024050001000420400083102B04800003AF
+:102E5000000528405440FFFC0004204010A000085A
+:102E600000C350210064402B1500000200052842D9
+:102E70000064182314A0FFFB0004204200C350216B
+:102E80008FBF0010000A4C02312200FF27BD00183E
+:102E9000AF8A002C03E00008AF8900300A00002A46
+:102EA00000000000000000000000000D7478703683
+:102EB0002E322E3300000000060203000000000046
+:102EC000000001360000EA60000000000000000081
+:102ED00000000000000000000000000000000000F2
+:102EE00000000000000000000000000000000000E2
+:102EF00000000000000000000000000000000016BC
+:102F000000000000000000000000000000000000C1
+:102F100000000000000000000000000000000000B1
+:102F200000000000000000000000000000000000A1
+:102F3000000000000000138800000000000005DC15
+:102F4000000000000000000010000003000000006E
+:102F50000000000D0000000D3C02080024423C204F
+:102F60003C03080024633DD4AC4000000043202B08
+:102F70001480FFFD244200043C1D080037BD7FFC87
+:102F800003A0F0213C100800261000A83C1C0800FB
+:102F9000279C3C200E0002BA000000000000000D3B
+:102FA0008F8300383C088000350700708CE50000F6
+:102FB000008330253C02900000C22025AF85003000
+:102FC000AF4400208F4900200520FFFE3C03800015
+:102FD000346200708C4500008F8600303C19080078
+:102FE0008F39007C3C0E08008DCE007800A620238F
+:102FF00003245821000078210164682B01CF60214F
+:10300000018D50213C010800AC2B007C3C010800E4
+:10301000AC2A007803E00008000000000A0000412C
+:10302000240400018F8400383C05800034A2000194
+:103030000082182503E00008AF43002003E00008E9
+:10304000000010213084FFFF30A5FFFF1080000733
+:1030500000001821308200011040000200042042CC
+:10306000006518211480FFFB0005284003E00008DC
+:103070000060102110C00007000000008CA20000BA
+:1030800024C6FFFF24A50004AC82000014C0FFFB8F
+:103090002484000403E000080000000010A00008E1
+:1030A00024A3FFFFAC860000000000000000000029
+:1030B0002402FFFF2463FFFF1462FFFA248400044C
+:1030C00003E0000800000000308AFFFF93A800130F
+:1030D000A74A014497490E1630C600FF3C02100073
+:1030E000A7490146AF450148A3460152A748015AE6
+:1030F000AF4701608FA400188FA30014A7440158A4
+:10310000AF43015403E00008AF42017803E0000838
+:10311000000000003C038000346200708C49000015
+:103120008F8800002484000727BDFFF83084FFF853
+:10313000AF890030974D008A31ACFFFFAFAC000083
+:103140008FAB0000016850232547FFFF30E61FFFCB
+:1031500000C4282B14A0FFF73C0C8000358B0070B6
+:103160008D6A00003C0708008CE700843C060800DC
+:103170008CC6008000081082014918230002788064
+:1031800000E370210000202101C3C82B00C4C0212E
+:1031900001FA4021031948212502400027BD0008FB
+:1031A0003C010800AC2E00843C010800AC290080E2
+:1031B00003E00008000000008F8200002486000762
+:1031C00030C5FFF800A2182130641FFF03E000089B
+:1031D000AF8400008F8700388F8A004027BDFFB87A
+:1031E0008F860044AFB60040AFBF0044AFB5003C8F
+:1031F000AFB40038AFB30034AFB20030AFB1002C81
+:10320000AFB000288F4501048D4900ACAF47008066
+:103210008CC8002000A938230000B021AF480E1050
+:103220008F440E1000004821AF440E148CC20024BD
+:10323000AF420E188F430E18AF430E1C10E001254D
+:103240002D230001936B0008116000D400000000E2
+:10325000976E001031CDFFFF00ED602B158000CF81
+:103260000000000097700010320FFFFFAF4F0E00FC
+:103270008F520000325100081220FFFD00000000B4
+:1032800097540E088F460E043285FFFF30B30001BD
+:1032900012600132000000000000000D30B8A040B4
+:1032A00024150040131500C030A9A0001120012DE5
+:1032B00000000000937F000813E0000800000000F9
+:1032C00097630010306BFFFF00CB402B1100000311
+:1032D00030AC00401180012300000000A785003CB5
+:1032E000AF8600349366000800E02821AFA70020D5
+:1032F00014C0012427B30020AF60000C9782003C6B
+:103300003047400014E00002240300162403000E9E
+:1033100024194007A363000AAF790014938A003E82
+:103320008F740014315800070018AA4002959025A8
+:10333000AF7200149784003C8F700014309100101D
+:1033400002117825AF6F0014978E003C31CD000834
+:1033500011A00147000028218F6700143C021000D3
+:103360003C0C810000E22825AF65001497460E0A48
+:103370002408000E3405FFFC30C3FFFF006C582505
+:10338000AF6B0004A3680002937F000A27E90004E2
+:10339000A369000A9786003C9363000A30CC1F00A3
+:1033A000000C598301634021251F0028A37F0009D9
+:1033B00097490E0CA769001093790009272A00028B
+:1033C000315800070018A82332B10007A371000B81
+:1033D00093740009976400108F910034978F003C1C
+:1033E000329200FF024480210205702131ED00403D
+:1033F00011A0000531C4FFFF0091282B3C12800072
+:1034000010A000140000A0210224382B14E0011B9E
+:103410008FA500208F4D0E14AF4D0E108F420E1C45
+:10342000AF420E18AF440E008F4F000031EE00087F
+:1034300011C0FFFD0000000097540E080080882195
+:1034400000009021A794003C8F500E04241400012A
+:10345000AF900034976400103095FFFF8E68000035
+:103460000111F82317E00009AE7F00008F650014FA
+:103470008F8B004434A60040AF6600148F4C0E10B2
+:10348000AD6C00208F430E18AD63002493670008D5
+:1034900014E000D2000000000E00009E2404001082
+:1034A0008F8900483C08320000402821312600FF67
+:1034B0000006FC0003E8502525390001AF990048BB
+:1034C000AC4A0000937800099370000A330400FFAF
+:1034D00000047400320F00FF01CF6825AC4D0004DA
+:1034E0008F820048064000EAACA20008ACA0000CA5
+:1034F0009783003C306B0008156000022628000608
+:1035000026280002974E0E148F450E1C8F6700046C
+:10351000936D000231C4FFFF31A200FFAFA2001083
+:103520008F6C0014AFA800180E00008BAFAC001415
+:10353000240400100E0000C7000000008E7200007E
+:1035400016400005000000008F6400142405FFBF32
+:1035500000859824AF7300148F79000C033538214F
+:10356000AF67000C9375000816A00008000000006B
+:1035700012800006000000008F7F00143C0BEFFF5C
+:103580003568FFFE03E84824AF690014A3740008FF
+:103590008FA500200A00024602202021AF470E001E
+:1035A0000A0000F5000000008F5901780720FFFE97
+:1035B000241F08008F840000AF5F0178974B008ABA
+:1035C000316AFFFF014448232528FFFF31021FFF16
+:1035D0002C4300081460FFF9000000008F8E0048A3
+:1035E0008F8D003800C048210344202125C60001EA
+:1035F000240C0F00AF86004800E9382324864000E1
+:1036000031CA00FF11AC0005240800019391003E6F
+:103610003230000700107A4035E80001000AAC00A3
+:103620003C18010002B8A025AC9440008F930048DC
+:1036300030B2003630A40008ACD3000410800097EC
+:1036400001123025974E0E0A8F8D00003C0281003A
+:1036500031CCFFFF25AB0008018240253C03100060
+:1036600031651FFF25390006241F000EAF48016099
+:1036700000C33025A75F015AAF850000A759015844
+:1036800014E0000A8F93003824120F0052720002D7
+:103690002416000134C600408F580E108F94004449
+:1036A000AE9800208F550E18AE9500248F450E144D
+:1036B000AF4501448F590E1CAF590148A34A01522E
+:1036C0003C0A1000AF460154AF4A017814E0FEDD19
+:1036D0002D2300010076A025128000178FBF004423
+:1036E0008F84003824160F0010960084000000001C
+:1036F0008F45017804A0FFFE24150F001095006E81
+:10370000000000008F470E14240202403C1F1000EE
+:10371000AF4701448F440E1CAF440148A3400152FF
+:10372000A740015AAF400160A7400158AF42015481
+:10373000AF5F01788FBF00448FB600408FB5003C6B
+:103740008FB400388FB300348FB200308FB1002CAB
+:103750008FB0002803E0000827BD004814C0FED049
+:1037600030B8A0408F420E148F84004400004821DE
+:10377000AC8200208F510E1CAC9100240A00020E76
+:103780002D2300018F910034978A003C3C12800069
+:103790000220A821315800401700FF300000A0216E
+:1037A000976900108F9200343139FFFF13320035D2
+:1037B00000002021008048211480FEA000A03821B4
+:1037C0008F420E148F840044AC8200208F510E1C57
+:1037D000AC9100240A00020E2D230001936A000917
+:1037E0009378000B315000FF330F00FF020F702160
+:1037F00025C2000A3050FFFF0E00009E020020216B
+:103800008F8600483C1F410024CD0001AF8D004849
+:10381000936C000930C600FF00064400318300FFAE
+:10382000246B0002010B4825013FC825AC5900005C
+:103830008F67000C97440E1400F22825AC45000455
+:103840008F450E1C8F670004936A00023084FFFFCF
+:10385000315800FFAFB800108F6F0014AFB10018DF
+:103860000E00008BAFAF00140A0001A60200202159
+:10387000AF6000040A00013EA36000020A00024695
+:1038800000002021000090210A0001702414000192
+:103890003C1280000A000195ACB2000C8F91000030
+:1038A00025240002A744015826300008320F1FFFCC
+:1038B0000A0001F9AF8F0000AF40014C1120002C2D
+:1038C000000000008F590E10AF5901448F430E18AD
+:1038D000240200403C1F1000AF430148A3400152A6
+:1038E000A740015AAF400160A7400158AF420154C0
+:1038F000AF5F01780A0002278FBF00441120000645
+:103900000000000097460E0830CC004015800002F1
+:10391000000000000000000D8F4D017805A0FFFEA3
+:103920000000000097530E103C120500240E2000EA
+:10393000326AFFFF0152C025AF58014C8F4F0E1461
+:103940003C021000AF4F01448F500E1CAF50014895
+:10395000A34001528F840038A740015AAF40016054
+:10396000A7400158AF4E01540A000215AF4201783A
+:103970008F490E14AF4901448F430E1C0A00028E7A
+:10398000240200403C0E20FF27BDFFE03C1A8000CF
+:103990003C0F800835CDFFFDAFBF001CAFB2001853
+:1039A000AFB10014AFB00010AF8F0040AF4D0E00AC
+:1039B0000000000000000000000000000000000007
+:1039C000000000003C0C00FF358BFFFDAF4B0E00EC
+:1039D0003C0660048CC95000240AFF7F3C11600043
+:1039E000012A40243507380CACC750008E24043817
+:1039F00024050009AF4500083083FFFF38622F71AE
+:103A00002450C0B3AF8000480E000068AF800000B3
+:103A100052000001AE20442C0E0004353C11800001
+:103A20000E000ED9363000708F8A00403C1208001C
+:103A300026523C88020088218E0800008F5F00001B
+:103A40003BF900013338000113000017AF88003044
+:103A5000022048218D2700003C0F08008DEF006CEC
+:103A60003C0C08008D8C006800E8C02301F8282178
+:103A70000000682100B8302B018D582101664021DB
+:103A80003C010800AC25006C3C010800AC28006833
+:103A90008F44000038830001306200011440FFEDC4
+:103AA00000E04021AF8700308E0C00003C0508008C
+:103AB0008CA5006C3C0408008C84006801883023CD
+:103AC00000A638210000102100E6402B00821821BA
+:103AD0000068F8213C010800AC27006C3C0108009C
+:103AE000AC3F00688F49010025590088AF99004418
+:103AF000AF890038AF4900208E070000AF87003043
+:103B00008F4D017805A0FFFE000000008E0600002A
+:103B10003C0B08008D6B00743C0408008C84007022
+:103B200000C728230165F8210000102103E5402B80
+:103B30000082382100E8C821240908003C0108005F
+:103B4000AC3F00743C010800AC390070AF4901780B
+:103B500093580108A398003E938F003E31EE000178
+:103B600015C000158F830038240E0D00106E00194B
+:103B7000240F0F00106F001D00000000915900007D
+:103B800024180050332900FF113800043C1F400066
+:103B9000AF5F01380A0002E7000000000E00090EC6
+:103BA000000000008F8A00403C1F4000AF5F0138DA
+:103BB0000A0002E700000000938D003E31AC0006D1
+:103BC000000C51000E0000CE0152D8210A00034320
+:103BD0008F8A00403C1B0800277B3D080E0000CE6A
+:103BE000000000000A0003438F8A00403C1B0800CD
+:103BF000277B3D280E0000CE000000000A00034392
+:103C00008F8A004090AA00018FAB00108CAC00108E
+:103C10003C0300FF8D680004AD6C00208CAD0014E7
+:103C200000E060213462FFFFAD6D00248CA7001816
+:103C30003C09FF000109C024AD6700288CAE001CC0
+:103C40000182C82403197825AD6F0004AD6E002CE5
+:103C50008CAD0008314A00FFAD6D001C94A9000234
+:103C60003128FFFFAD68001090A70000A56000029A
+:103C7000A1600004A167000090A30002306200FF71
+:103C80000002198210600005240500011065000E75
+:103C90000000000003E00008A16A00018CD80028A1
+:103CA000354A0080AD7800188CCF0014AD6F001439
+:103CB0008CCE0030AD6E00088CC4002CA16A0001CF
+:103CC00003E00008AD64000C8CCD001CAD6D001845
+:103CD0008CC90014AD6900148CC80024AD680008BC
+:103CE0008CC70020AD67000C8CC200148C8300646C
+:103CF0000043C82B13200007000000008CC20014F2
+:103D0000144CFFE400000000354A008003E0000886
+:103D1000A16A00018C8200640A000399000000007F
+:103D200090AA000027BDFFF88FA9001CA3AA0000DD
+:103D30008FAE00003C0FFF808FA8001835E2FFFF18
+:103D40008CCD002C01C26024AFAC0000A120000487
+:103D500000E06021A7A000028FB800008D270004BA
+:103D60000188182100A0582100C05021006D28268C
+:103D70003C06FF7F3C0F00FF2CAD000135EEFFFF3E
+:103D800034D9FFFF3C02FF0003193024000D1DC091
+:103D9000010EC82400E2C02400C370250319782551
+:103DA000AD2E0000AD2F00048D450024AFAE000005
+:103DB000AD2500088D4D00202405FFFFAD2D000C22
+:103DC000956800023107FFFFAD27001091660018CB
+:103DD00030C200FF000219C2506000018D4500345E
+:103DE000AD2500148D67000827BD0008AD27001C15
+:103DF0008C8B00CCAD2C0028AD20002CAD2B0024EA
+:103E0000AD20001803E00008AD20002027BDFFE032
+:103E1000AFB20018AFB10014AFB00010AFBF001CBC
+:103E20009098000000C088213C0D00FF330F007FF8
+:103E3000A0CF0000908E000135ACFFFF3C0AFF00D0
+:103E4000A0CE000194A6001EA22000048CAB00149A
+:103E50008E29000400A08021016C2824012A40241E
+:103E60000080902101052025A6260002AE24000432
+:103E700026050020262400080E00007624060002F5
+:103E800092470000260500282624001400071E0083
+:103E90000003160324060004044000032403FFFF6C
+:103EA000965900023323FFFF0E000076AE23001068
+:103EB000262400248FBF001C8FB200188FB100147D
+:103EC0008FB0001024050003000030210A0000809C
+:103ED00027BD002027BDFFD8AFB1001CAFB0001830
+:103EE000AFBF002090A80000240200018FB0003C6A
+:103EF0003103003F00808821106200148FAA00382F
+:103F0000240B0005506B0016AFAA001000A0202162
+:103F100000C028210E0003DC02003021922400BCE6
+:103F2000308300021060000326060030ACC00000A1
+:103F300024C600048FBF00208FB1001C8FB0001872
+:103F400000C0102103E0000827BD002801403821EF
+:103F50000E00035AAFB000100A0004200000000059
+:103F60000E0003A1AFB000140A00042000000000FE
+:103F70003C02000A034218213C04080024843D6CE2
+:103F80002405001A000030210A000080AF8300548D
+:103F90003C038000346200708C48000000A058216F
+:103FA00000C04821308A00FFAF8800308F4401787C
+:103FB0000480FFFE3C0C8000358600708CC500003C
+:103FC0003C0308008C6300743C1808008F180070D4
+:103FD00000A82023006468210000C82101A4782BD8
+:103FE0000319702101CF60213C010800AC2D007441
+:103FF0003C010800AC2C00708F480E14AF480144FF
+:10400000AF47014CA34A0152A74B01589346010800
+:1040100030C5000854A0000135291000934B090059
+:1040200024070050316A00FF11470007000000001C
+:104030008F450E1CAF450148AF4901543C091000A3
+:1040400003E00008AF490178934D010831A800084A
+:104050001100001000000000934F010831EE001025
+:1040600051C00001352900083C04080090843DD06F
+:10407000A34401508F4309A4AF4301488F4209A0D4
+:10408000AF420144AF4901543C09100003E000086D
+:10409000AF4901783C1908008F393D8C333800084E
+:1040A0005700FFF1352900080A00047300000000E2
+:1040B00024070040AF470814AF4008108F4209445E
+:1040C0008F4309508F4409548F45095C8F46094C32
+:1040D000AF820064AF830050AF84004CAF85005CBA
+:1040E00003E00008AF8600609346010930C5007FF9
+:1040F000000518C0000521400083102103E00008DE
+:10410000244200883C09080091293D9124A800021E
+:104110003C05110000093C0000E8302500C51825C9
+:1041200024820008AC83000003E00008AC80000497
+:104130009347010B8F4A002C974F09083C18000E3B
+:104140000358482131EEFFFF000E41C0AF48002C5C
+:1041500097430908952C001A008040212403000190
+:10416000318BFFFFAC8B00008D2D001C00A058216F
+:1041700000C06021AC8D00048D24002030E7004099
+:10418000AD04000891220019304400031083004858
+:104190002885000214A00062240600021086005642
+:1041A00024190003109900660000000010E0003A96
+:1041B000000000003C07080094E73D8624E200016F
+:1041C000934F0934934709219525002A31EE00FFCA
+:1041D000000E488230ED00FF978700580009360036
+:1041E000000D1C003044FFFF00C310250044C02513
+:1041F00000A778213C19400003197025000F4C00DE
+:10420000AD090004AD0E0000934D09203C030006EB
+:1042100025090014000D360000C32025AD04000858
+:104220008F59092C24E5000130A27FFFAD19000C45
+:104230008F580930A782005825020028AD180010B9
+:104240008F4F0938AD0F0014AD2B00048F4E09407D
+:10425000AD2E0008934D09373C05080090A53D9010
+:104260008F4409488F46094031A700FF00EC182110
+:10427000008678230003C7000005CC0003196025E1
+:1042800031E8FFFC01885825AD2B000CAD20001053
+:1042900003E00008AF4A002C3C0D080095AD3D86B8
+:1042A0003C0E080095CE3D800A0004C901AE1021E5
+:1042B0003C05080094A53D8A3C06080094C63D8054
+:1042C0003C18080097183D7C952E002400A6782104
+:1042D00001F86823000E240025A2FFF200821825B1
+:1042E00024190800AD03000CAD190014AD00001036
+:1042F0000A0004C4250800189526002495250028E6
+:104300000006C40000057C00370E810035ED080072
+:10431000AD0E000CAD0D00100A0004C425080014F9
+:104320001480FFA200000000952400240004140063
+:1043300034430800AD03000C0A0004C42508001033
+:104340003C03080094633D8A3C05080094A53D8029
+:104350003C06080094C63D7C953900249538002819
+:10436000006520210086782300196C000018740075
+:1043700025E2FFEE01C2202535A3810024190800A3
+:10438000AD03000CAD040010AD190018AD00001411
+:104390000A0004C42508001C03E00008240201F4FC
+:1043A00027BDFFE8AFB00010AFBF00140E000060E3
+:1043B0000080802124050040AF4508148F83005001
+:1043C0008F84004C8F85005C0070182100641023DE
+:1043D00018400004AF830050AF6300548F66005450
+:1043E000AF86004C1200000C000000008F440074E7
+:1043F000936800813409FA002D07000710E00005DA
+:1044000000891021936C0081240B01F4018B50046E
+:1044100001441021AF62000C8F4E095C01C5682376
+:1044200019A000048FBF00148F4F095CAF8F005C90
+:104430008FBF00148FB000100A00006227BD001863
+:104440008F8400648F8300508F82004CAF640044DF
+:10445000AF63005003E00008AF6200543C038000EB
+:10446000346200708C43000027BDFFF8308700FFE6
+:1044700030A900FF30C800FFAF8300308F440178BF
+:104480000480FFFE3C028000345900708F38000029
+:10449000A3A700033C0708008CE700748FAC000062
+:1044A0003C0608008CC60070030378233C0E7FFF97
+:1044B00000EFC82135CDFFFF00005021018D2824D9
+:1044C00000CA1821000847C0032F202B00A8102580
+:1044D0000064C021AFA200003C010800AC390074A8
+:1044E0003C010800AC380070934F010AA3A0000201
+:1044F0003C0E80FFA3AF00018FAC0000312B007F8A
+:1045000035CDFFFF018D4824000B5600012A4025C0
+:10451000240730002406FF803C05100027BD00085A
+:10452000AF48014CAF470154A7400158A346015280
+:1045300003E00008AF45017827BDFFE8AFBF0014D6
+:10454000AFB000108F6500743C068000309000FF13
+:1045500000A620250E000060AF6400749363000580
+:10456000346200080E000062A362000502002021F0
+:104570008FBF00148FB00010240500052406000131
+:104580000A00057027BD001827BDFFE03C0380002E
+:10459000AFB00010AFBF0018AFB1001434620070AC
+:1045A0008C470000309000FF30A800FFAF8700303C
+:1045B0008F4401780480FFFE3C18800037110070A2
+:1045C0008E2F00003C0D08008DAD00743C0A0800E1
+:1045D0008D4A007001E7702301AE282100005821A8
+:1045E00000AE302B014B4821012638213C01080048
+:1045F000AC250074000088213C010800AC27007045
+:104600001100000F000000008F6200742619FFFFE8
+:104610003208007F0002FE0233E5007F150000062D
+:10462000332200FF2407FF800207202624A3FFFF78
+:1046300000838025320200FF0040802124111008F1
+:104640000E000060000000008F49081831250004AA
+:1046500014A0FFFD3218007F001878C000187140C8
+:1046600001CF682125AC0088AF4C0818274A098083
+:104670008D4B0020AF4B01448D460024AF460148CE
+:10468000A35001500E000062A740015802201021E3
+:104690008FBF00188FB100148FB0001003E0000826
+:1046A00027BD002027BDFFE8308400FFAFBF00100A
+:1046B0000E0005BB30A500FF8F8300508FBF001098
+:1046C000344500402404FF903C02100027BD001830
+:1046D000AF43014CA3440152AF45015403E000082D
+:1046E000AF4201789343093E306200081040000D4C
+:1046F0003C0901013528080AAC8800008F47007486
+:10470000AC8700043C06080090C63D9030C5001000
+:1047100050A00006AC8000088F6A0060AC8A0008D8
+:104720002484000C03E00008008010210A00062207
+:104730002484000C27BDFFE8AFBF0014AFB0001009
+:104740009346093F00A050210005288000853823AA
+:1047500030C200FF240300063C09080095293D866D
+:1047600024E8FFD824050004104300372406000283
+:104770009750093C3C0F020400063400320EFFFF44
+:1047800001CF6825AC8D0000934C093E318B002091
+:104790001160000800000000934309363C02010349
+:1047A000345F0300307900FF033FC0252405000873
+:1047B000AC98000493430934935909210005F88209
+:1047C000306200FF0002C082332F00FF00186E002D
+:1047D000000F740001AE6025018920253C094000CE
+:1047E00000898025ACF0FFD8934309378F4F0948E3
+:1047F0008F580940306200FF004AC821033F7021F2
+:1048000001F86023000E6F0001A650253185FFFCE2
+:10481000001F58800145482501683821AD09002056
+:104820000E00006024F00028240400040E00006242
+:10483000A364003F020010218FBF00148FB000104E
+:1048400003E0000827BD00180A0006352406001200
+:1048500027BDFFD024090010AFB60028AFB5002453
+:10486000AFB40020AFB10014AFB000103C0108009D
+:10487000A0293D90AFBF002CAFB3001CAFB2001811
+:1048800097480908309400FF3C02000E3107FFFFF3
+:10489000000731C0AF46002C974409089344010B30
+:1048A00030B500FF03428021308300300000B0218A
+:1048B0001060012500008821240C00043C01080040
+:1048C000A02C3D90934B093E000B5600000A2E038E
+:1048D00004A0016000000000AF400048934F010BAE
+:1048E00031EE002011C00006000000009358093E80
+:1048F00000189E0000139603064001890000000086
+:104900009344010B30830040106000038F930050EC
+:104910008F8200502453FFFF9347093E30E6000882
+:1049200014C0000224120003000090219619002CEC
+:1049300093580934934F0937A7990058330C00FF57
+:1049400031EE00FF024E6821000D5880016C5021AD
+:10495000015140213C010800A4283D869205001821
+:1049600030A900FF010918213C010800A4233D885B
+:104970009211001816200002000000000000000D37
+:104980003C010800A4233D8A3C010800A4203D808E
+:104990003C010800A4203D7C935F010B3063FFFFC6
+:1049A00033F00040120000022464000A2464000B6B
+:1049B0003091FFFF0E00009E022020219358010B32
+:1049C0003C08080095083D8A0040202100185982C3
+:1049D000316700010E00049A01072821934C010B56
+:1049E0008F4B002C974E09083C0F000E034F4021BF
+:1049F00031CDFFFF000D51C0AF4A002C974309088D
+:104A00009505001A004038212404000130A9FFFF59
+:104A1000AC4900008D06001C00404821318A00404E
+:104A2000AC4600048D020020ACE20008910300199E
+:104A300030630003106400EC28790002172001188D
+:104A4000241000021070010C241F0003107F011EAF
+:104A500000000000114000DE000000003C090800DA
+:104A600095293D8625220001935F0934934E092143
+:104A70009504002A33F900FF0019C08231CF00FFEE
+:104A8000978E005800184600000F6C00010D80251D
+:104A90003045FFFF02051025008E50213C034000E9
+:104AA00000433025000A6400ACEC0004ACE60000D2
+:104AB000935F09203C19000624EC0014001FC60077
+:104AC00003197825ACEF00088F48092C25CD00018B
+:104AD00031A57FFFACE8000C8F500930A785005846
+:104AE00024E80028ACF000108F4409380100802130
+:104AF000ACE40014AD9300048F530940AD9300085B
+:104B0000934A09373C19080093393D908F4309486F
+:104B10008F460940314200FF0052F82100667023A1
+:104B2000001F7F000019C40001F8282531CDFFFCCB
+:104B300000AD2025AD84000CAD800010AF4B002CE3
+:104B4000934B093E317300081260000D3C060101D1
+:104B500034CC080AACEC00288F530074AD13000469
+:104B60003C0B0800916B3D903167001050E0000352
+:104B7000AD0000088F6A0060AD0A00082510000C27
+:104B800012C0003D000000009343093F24160006B8
+:104B900024060004306200FF105600C924070002FA
+:104BA0009758093C3C0F0204330DFFFF01AF40252D
+:104BB000AE0800009345093E30A400201080000894
+:104BC00000000000935309363C0B0103357F0300BE
+:104BD000327900FF033F7025AE0E00042406000862
+:104BE000934F093493480921312AFFFF31ED00FF2B
+:104BF000000D1082310300FF0002B60000032C00FC
+:104C000002C56025018A9825001220803C094000D9
+:104C10000204502302695825AD4BFFD8935F093732
+:104C20008F4F09488F58094033F900FF0332702134
+:104C30000006B08201D668210007440001F828234D
+:104C4000000D1F000068302530A2FFFC2547FFD86B
+:104C500000C260250016808002074821ACEC0020CD
+:104C6000253000280E00006024120004A372003FCB
+:104C70000E000062000000009347010B30F200407C
+:104C8000124000053C1900FF8E180000372EFFFF70
+:104C9000030E3024AE0600000E0000C702202021C3
+:104CA0003C10080092103D90321100031220000FBA
+:104CB00002A028218F89005025330001AF930050B6
+:104CC000AF7300508F6B00540173F8231BE0000298
+:104CD000026020218F640054AF6400548F4C007434
+:104CE000258401F4AF64000C02A028210280202159
+:104CF000A76000680E0005BB3C1410008F850050B3
+:104D000034550006AF45014C8F8A00488FBF002CF8
+:104D10008FB3001C25560001AF9600488FB20018D3
+:104D2000A34A01528FB60028AF5501548FB1001429
+:104D3000AF5401788FB500248FB400208FB00010DD
+:104D400003E0000827BD00309358093E00189E007C
+:104D500000139603064200362411000293440923EF
+:104D6000308300021060FEDD8F8600608F8200506D
+:104D700014C2FEDA000000000E0000600000000017
+:104D80009369003F24070016312800FF1107000C2B
+:104D9000240500083C0C0800918C3D90358B0001E7
+:104DA0003C010800A02B3D90936A003F314300FF77
+:104DB00010650065240D000A106D005E2402000CD1
+:104DC0000E000062000000000A00069000000000D3
+:104DD0003C09080095293D863C0A0800954A3D801B
+:104DE0000A0006F3012A10213C09080095293D8A92
+:104DF0003C04080094843D803C06080094C63D7C39
+:104E000095030024012410210046F8230003CC0060
+:104E100027F0FFF20330C025240F0800ACF8000C87
+:104E2000ACEF0014ACE000100A0006EE24E7001816
+:104E30003C010800A0313D90935F093E241600011B
+:104E400033F900201720FEA5241100080A0006905F
+:104E5000241100048F6E00848F4D094011A0FE9E26
+:104E6000AF8E0050240F00143C010800A02F3D908D
+:104E70000A00068F00000000950E0024950D002802
+:104E8000000E6400000D2C003589810034A6080056
+:104E9000ACE9000CACE600100A0006EE24E70014B2
+:104EA0001460FEEC000000009502002400021C00CB
+:104EB00034640800ACE4000C0A0006EE24E700109D
+:104EC0000A000741240700123C02080094423D8A70
+:104ED0003C06080094C63D803C03080094633D7C7A
+:104EE00095100024951900280046F82103E3C023FB
+:104EF00000106C0000197400270FFFEE01CF282569
+:104F000035AC8100ACEC000CACE5001024070800C7
+:104F1000AD2700182527001C0A0006EEAD2000145E
+:104F20008F7F004CAF7F00548F7900540A000699A0
+:104F3000AF790050A362003F0E0000620000000045
+:104F40000A00069000000000240200140A0008274E
+:104F5000A362003F27BDFFE8308400FFAFBF001011
+:104F60000E0005BB30A500FF9378007E9379007F8B
+:104F7000936E00809368007A332F00FF001866005C
+:104F8000000F6C0031CB00FF018D4825000B520053
+:104F90008FBF0010012A3825310600FF344470000D
+:104FA00000E628252402FF813C03100027BD0018DD
+:104FB000AF45014CAF440154A342015203E0000845
+:104FC000AF43017827BDFFD8AFB20018AFB10014CE
+:104FD000AFB00010AFBF0020AFB3001C9342010977
+:104FE000308600FF30B000FF000618C23204000215
+:104FF0003071000114800005305200FF93670005F6
+:1050000030E5000810A0000D30C80010024020213B
+:105010000E0005A702202821240400018FBF0020D4
+:105020008FB3001C8FB200188FB100148FB0001026
+:105030000080102103E0000827BD00281500003281
+:105040000000000093430109000028213062007F26
+:10505000000220C00002F94003E49821267900886C
+:10506000033B98218E7800248E6F0008130F0046B2
+:10507000000000008F640084241800020004FD82F8
+:1050800033F900031338007C0000000093660083AE
+:10509000934A0109514600043205007C10A00060CB
+:1050A000000000003205007C14A0005302402021C3
+:1050B00016200006320400018E7F00248F5901045F
+:1050C00017F9FFD600002021320400011080000AE9
+:1050D000024020218F4209408F9300641053000644
+:1050E000000000000E00066D022028218F430940B9
+:1050F000AF630044024020210E0006020220282156
+:105100000A000860240400013C0908008D2900649D
+:10511000252600013C010800AC26006416000012A0
+:10512000000000008F6D00843C0E00C001AE6024C2
+:1051300015800005024020210E00082E02202821A3
+:105140000A00086024040001240500040E00057014
+:1051500024060001024020210E00082E02202821F2
+:105160000A000860240400010E000041240400012C
+:10517000936B007D020B50250E000062A36A007D38
+:105180000A0008A38F6D00848F6600748F480104A5
+:105190008E67002400064E021507FFB63126007FF9
+:1051A000936B008326440001308A007F1146004340
+:1051B000316300FF5464FFB08F6400842645000112
+:1051C00030B1007F30A200FF122600042405000148
+:1051D000004090210A00087624110001240FFF806E
+:1051E000024F702401CF9026324200FF00409021F0
+:1051F0000A000876241100010E00066D0220282105
+:10520000321800301300FFAA321000820240202121
+:105210000E0005A7022028210A00086024040001CE
+:105220008F6E00743C0F80002405000301CF902591
+:10523000AF72007493710083240600010E000570A4
+:10524000322400FF0E00004124040001936D007D14
+:10525000020D60250E000062A36C007D3C0B08006F
+:105260008D6B0054257000013C010800AC300054E7
+:105270000A000860240400018F6800743C09800063
+:105280002405000401093825AF6700749363008387
+:10529000240600010E000570306400FF0E0000417E
+:1052A000240400019362007D020298250E00006232
+:1052B000A373007D0A00086024040001324D0080C1
+:1052C00039AC0080546CFF6C8F6400840A0008C9FC
+:1052D0002645000127BDFFC83C0A0008AFBF0030CB
+:1052E000AFB5002CAFB40028AFB30024AFB200209C
+:1052F000AFB1001CAFB00018034AD8212409004008
+:10530000AF490814AF4008108F4209448F43095039
+:105310008F4609548F47095C8F48094C9344010814
+:105320009345010BAF820064308400FF30A500FF7D
+:10533000AF830050AF86004CAF87005C0E00084A78
+:10534000AF8800601440017D8FBF0030A760006807
+:10535000934D0900240B00503C15080026B53D482C
+:1053600031AC00FF3C12080026523D58118B00035F
+:10537000000000000000A8210000902193510109C5
+:105380008F9F005024040010322E007F000E68C052
+:10539000000E6140018D282124B40088AF54081804
+:1053A0008F4901048F4A09A43C0B000E034BC02116
+:1053B000012A10233C010800AC223D6C8F430958A0
+:1053C0003C010800A0243D9097470908007F302346
+:1053D0003C010800AC263D7030E8FFFF0008C9C062
+:1053E0003C010800AC3F3D94AF59002C974209089E
+:1053F0009710002C8EB10000930F001803749821B1
+:10540000A7900058AF9300440220F80931F000FF44
+:10541000304E000215C001B2304F000111E0014FC3
+:10542000000000009343093E3066000814C00002EB
+:10543000241400030000A0218F5809A424130001A4
+:105440003C010800AC383D98934F0934935109371B
+:1054500031EC00FF322E00FF028E6821000D288003
+:1054600000AC5021015058213C010800A42B3D887C
+:105470003C010800A42A3D8693490934312200FFEB
+:1054800002022021249000103C010800A4303D8439
+:10549000240700068F9F00503C010800AC273D8C7C
+:1054A0008F88005C8F59095800008021011F282334
+:1054B00004A00149033F20230480014700A4302BAE
+:1054C00010C00149000000003C010800AC253D70FF
+:1054D0008E4200000040F809000000003043000246
+:1054E000146000F80040882130440001548000100E
+:1054F0008E4200043C0908008D293D743C0AC0001E
+:10550000012A8025AF500E008F45000030AB000807
+:105510001160FFFD00000000974D0E0824100001EF
+:10552000A78D003C8F4C0E04AF8C00348E420004DB
+:105530000040F8090000000002228825322E0002F7
+:1055400015C00180000000003C09080095293D7C41
+:105550003C06080094C63D883C0A0800954A3D7EFA
+:105560003C1908008F393D74012660213C18080061
+:105570008F183D983C03080094633D92018A2021D6
+:105580008F4E09400329F821248F000203E32821CC
+:10559000031968213C010800A42C3D8AAF8E0064E9
+:1055A0003C010800AC2D3D983C010800A4253D803D
+:1055B0000E00009E31E4FFFF8F870048004020214D
+:1055C0003C010800A0273D918E42000824E800011C
+:1055D000AF8800480040F809000000009344010B28
+:1055E0008F4C002C974A09083C0B000E034B4021BE
+:1055F0003149FFFF000919C08F8B0050AF43002CC9
+:10560000974309089506001A00403821308A004067
+:1056100030DFFFFFAC5F00008D19001C0040482107
+:10562000AC5900048D180020AC580008910F0019E7
+:1056300031E30003107300F0000000002862000254
+:105640001440010924050002106500FD240D00032B
+:10565000106D010D00000000114000D90000000095
+:105660003C0A0800954A3D8625420001934D0934C5
+:1056700093580921950E002A31A300FF00032082D0
+:10568000331F00FF9798005800047E00001FCC00D5
+:1056900001F940253049FFFF0109102501D83021CB
+:1056A0003C0540000045502500066C00ACED0004B0
+:1056B000ACEA0000934309203C04000624ED0014EA
+:1056C0000003FE0003E4C825ACF900088F49092C4B
+:1056D000270F000131EE7FFFACE9000C8F48093045
+:1056E000A78E005824E90028ACE800108F4509383F
+:1056F00001204021ACE50014ADAB00048F4209400D
+:10570000ADA20008934B09373C1F080093FF3D9062
+:105710008F4309488F4A0940316600FF00D4202199
+:10572000006A78230004C700001FCC000319282555
+:1057300031EEFFFC00AE1025ADA2000CADA00010B4
+:10574000AF4C002C934C093E318B00085160000F88
+:105750008E58000C3C06010134CA080AACEA002845
+:105760008F4B0074AD2B00043C0C0800918C3D90D5
+:105770003187001050E00003AD2000088F62006008
+:10578000AD2200082528000C8E58000C0300F809F3
+:10579000010020213C19080097393D8A3C1F080070
+:1057A00097FF3D7E033F782125E900020E0000C7E8
+:1057B0003124FFFF3C0E08008DCE3D6C3C080800F4
+:1057C0008D083D7401C828233C010800AC253D6CC0
+:1057D00014A00006000000003C0308008C633D8C10
+:1057E000346400403C010800AC243D8C1200007081
+:1057F0008F8C00448F470E108F900044AE0700201E
+:105800008F4D0E18AE0D00243C10080096103D8000
+:105810000E0000600000000024020040AF420814A7
+:105820008F8600508F8A004C00D01821006A5823C0
+:1058300019600004AF830050AF6300548F650054BB
+:10584000AF85004C1200000C000000008F44007473
+:10585000936800813409FA002D0E000711C000057D
+:1058600000891821937F0081241901F403F9780439
+:1058700001E41821AF63000C8F44095C8F83005C46
+:105880000083C0231B000003000000008F50095C50
+:10589000AF90005C0E000062000000008F8C005092
+:1058A0008E4700103C010800AC2C3D9400E0F80944
+:1058B000000000003C0D08008DAD3D6C55A0FEF5CC
+:1058C000240700068F450024975909088F8B006430
+:1058D0008F9400503C0F001F978200588F86005411
+:1058E0008F93004C3328FFFF35E9FF8000A9502437
+:1058F000000871C032320100AF4E0024A4C2002C57
+:10590000AF4A0024AF6B0044AF740050AF73005433
+:105910001640008032380010570000868EA4000424
+:10592000322300405460001B8EB100088EB0000C82
+:105930000200F809000000008FBF00308FB5002C76
+:105940008FB400288FB300248FB200208FB1001CC9
+:105950008FB0001803E0000827BD00389347010905
+:105960008F8800380007FE0003E8C825AF59008083
+:105970008F5809A08F5309A4AFB80010AF580E1468
+:105980008FB40010AF540E10AF530E1C0A00096202
+:10599000AF530E180220F809000000008EB0000C72
+:1059A0000200F809000000000A000AA88FBF0030BA
+:1059B000A5800020A59300220A000A5BAD93002475
+:1059C0003C09080095293D863C06080094C63D80A8
+:1059D0000A0009F4012610213C010800AC203D70AA
+:1059E0000A00098E8E4200003C010800AC243D7084
+:1059F0000A00098E8E4200003C03080094633D8A31
+:105A00003C04080094843D803C1F080097FF3D7CC7
+:105A1000951800240064C821033F782300186C0007
+:105A200025EEFFF201AE2825AC45000C240208004B
+:105A3000ACE20014ACE000100A0009EF24E7001803
+:105A400095060024950900280006240000091C0082
+:105A5000349F810034790800ACFF000CACF90010D1
+:105A60000A0009EF24E700141460FEFB00000000A8
+:105A70009518002400187C0035EE0800ACEE000CF0
+:105A80000A0009EF24E700103C07080094E73D8076
+:105A90003C04080094843D8A3C03080094633D7CE8
+:105AA00095190024951800280087F82103E378232E
+:105AB0002407080000192C0000186C0025EEFFEEEA
+:105AC00001AE302534A28100AD2700182527001C27
+:105AD000AD22000CAD2600100A0009EFAD20001425
+:105AE00093520109000028210E000602324400FFF3
+:105AF0008FBF00308FB5002C8FB400288FB30024E7
+:105B00008FB200208FB1001C8FB0001803E0000896
+:105B100027BD0038935F010933E400FF0E00066DD6
+:105B200000002821323800105300FF7E322300404D
+:105B30008EA400040080F809000000000A000AA2F8
+:105B4000322300401200FF5F000000008F540E144B
+:105B50008F920044AE5400208F530E1C0A000A8A14
+:105B6000AE5300248F82001C008040213C040100C1
+:105B70009047008530E3002010600009000000001D
+:105B80003C0708008CE73D948F83001800E3202336
+:105B9000048000089389000414E30003010020211D
+:105BA00003E00008008010213C04010003E000082D
+:105BB000008010211120000B006738238F8C0020FB
+:105BC00024090034918B00BC316A0002514000016D
+:105BD0002409003000E9682B15A0FFF10100202105
+:105BE00000E938232419FFFC00B9C02400F9782407
+:105BF00000F8702B15C0FFEA01E8202130C2000335
+:105C00000002182314C00012306900030000302184
+:105C100000A9702101C6682100ED602B1180FFE012
+:105C20003C0401002D2F00010006482B01053821FE
+:105C300001E9302414C0FFDA24E4FFFC2419FFFC3E
+:105C400000B9C0240308202103E0000800801021CF
+:105C50008F8B002024060004916A00BC31440004AC
+:105C60001480FFEC00A970210A000B5E00003021B7
+:105C700027BDFFE8AFBF00108F460100934A01091E
+:105C80003C1F08008FFF00902407FF80314F00FF6A
+:105C900031E8007F0008614003E6C821032CC021E1
+:105CA00027090120012770243C010800A02F3DD0C6
+:105CB000AF4E080C3C0D08008DAD00903C040080F8
+:105CC0003482000301A65821016C182124650120AB
+:105CD00030AA007801424025AF48081C3C1F08004C
+:105CE0008FFF00908F88004003E6C0213319000722
+:105CF00003074824033A7821AF49002825E909C061
+:105D0000952E00023C0D08008DAD008C3C0A080069
+:105D10008D4A009031CC3FFF01A61821000C59801C
+:105D2000006B282100A72024AF44002C95220002FC
+:105D30003C1F08008FFF008C9107008530593FFF02
+:105D400003E678210019C1800146702101F868211D
+:105D500031CC007F31AB007F019A2821017A50219C
+:105D60003C03000C3C04000E00A328210144102138
+:105D700030E6002027470980AF82002CAF88001C46
+:105D8000AF890024AF85002010C00006AF8700282F
+:105D90008D0200508CA4010C0044302318C0007701
+:105DA00000000000910C0085240DFFDF018D3824D8
+:105DB000A10700858F8B001C8F8900248F87002806
+:105DC0008D65004CAF850018912F000D31EE00203D
+:105DD00011C000170000000024090001A38900047D
+:105DE000AF80000C8CE400248F85000C240A00088E
+:105DF000AF800008AF8000103C010800A42A3D7E5F
+:105E00003C010800A4203D920E000B32000030211E
+:105E10008F8500248FBF0010AF82001490A8000D62
+:105E200027BD00180008394203E0000830E20001F5
+:105E3000913F00022418000133F900FF001921826C
+:105E400010980039240800021088005B8F86002C0F
+:105E50008CE5002414A0001B8F9F002091220000DD
+:105E6000240A00053046003F10CA00472404000100
+:105E70008F860008A3840004AF860010AF86000C54
+:105E80008CE400248F85000C240A00083C010800E3
+:105E9000A42A3D7E3C010800A4203D920E000B3256
+:105EA000000000008F8500248FBF0010AF82001417
+:105EB00090A8000D27BD00180008394203E0000833
+:105EC00030E200018CF800088CF900248FEE00C449
+:105ED000A38000048CE40024AF8E000C8F85000C9E
+:105EE0008F86000803197823240A0008AF8F00105A
+:105EF0003C010800A42A3D7E3C010800A4203D92FC
+:105F00000E000B32000000008F8500248FBF0010B0
+:105F1000AF82001490A8000D27BD00180008394278
+:105F200003E0000830E20001912300003062003FEE
+:105F3000104400278F8500208CE400241480002169
+:105F4000000000008D2E00183C187FFF8F85002078
+:105F5000370FFFFF01CF1824AF8300088F9F000881
+:105F60008CA8008403E8C82B1720000203E020213E
+:105F70008CA400840A000BEDAF8400088CA3010CF4
+:105F80000A000BCBAF8300188D2C00188F860008F9
+:105F90003C0D7FFF8F89002035A3FFFF018358242C
+:105FA00024040001AF8B0010AD2000CCA3840004BA
+:105FB0000A000BF9AF86000C8CCA00140A000BED26
+:105FC000AF8A00088CA300C80A000C30AF83000819
+:105FD0008F84002C8CAC00648C8D0014018D582BA8
+:105FE00011600004000000008CA200640A000C3064
+:105FF000AF8200088C8200140A000C30AF820008C7
+:106000008F85000C27BDFFE0AFBF0018AFB10014B3
+:1060100014A00007AFB000108F86002424020005F2
+:1060200090C400003083003F106200B68F840020CF
+:106030008F91000800A080218F8C00283C0508006B
+:106040008CA53D708D8B000431663FFF00C5502B41
+:106050005540000100C02821938D000411A0007359
+:1060600000B0F82B8F98002024040034930F00BC5C
+:1060700031EE000251C000012404003000A4C82BFE
+:10608000172000D10000000000A4282300B0F82B46
+:106090003C010800A4243D7C17E000680200202198
+:1060A0003C0308008C633D6C0083102B54400001BE
+:1060B000008018218F8800243C010800AC233D7427
+:1060C000000048219104000D308300205060000141
+:1060D0008F490E188F8300140123382B10E00059CC
+:1060E000000000003C0408008C843D7400895821A5
+:1060F000006B502B114000560090602B006930233C
+:1061000000C020213C010800AC263D7412000003B1
+:10611000241FFFFC1090008A32270003009FC82430
+:106120003C010800AC393D743C010800A4203D92BC
+:106130008F84000C120400078F830020AF910008A9
+:10614000020020218C7100CCAF90000C26300001A1
+:10615000AC7000CC3C0208008C423D748F8A001069
+:10616000240700180082202301422823AF84000C5A
+:1061700010800002AF850010240700108F86001CDD
+:106180003C010800A0273D902407004090CC0085EA
+:10619000318B00C0116700408F8D001414A00015D2
+:1061A00000002021934A01098F420974314500FF04
+:1061B0000002260224A300013090007F3071007F8E
+:1061C0001230007A2407FF80A0C300833C09080036
+:1061D0008D293D8C8F880024240D0002352C000869
+:1061E0003C010800A02D3DD13C010800AC2C3D8CA9
+:1061F00024040010910E000D31C6002010C00005CF
+:1062000000801821240800013C010800AC283D74DE
+:10621000348300018FBF00188FB100148FB00010BD
+:106220000060102103E0000827BD00203C010800A9
+:10623000A4203D7C13E0FF9A020020210A000C817B
+:1062400000A020213C0408008C843D740090602B49
+:106250001180FFAE000000003C0F080095EF3D7C70
+:1062600001E4702101C6682B11A000072C820004F4
+:106270003C1F60008FF954043338003F1700FFE5DE
+:10628000240300422C8200041040FFA0240300429B
+:106290000A000CDF8FBF0018152DFFC000000000A2
+:1062A0008CDF00743C0380002405FF8003E3C825D5
+:1062B000ACD9007490D80085240E0004240400108A
+:1062C000330F003F01E54025A0C800858F880024DA
+:1062D0003C010800A02E3DD1240300019106000DD1
+:1062E00030C9002015200003000000003C03080016
+:1062F0008C633D743C010800AC233D6C0A000CD655
+:10630000000000008F8700108C88008400E8282B94
+:1063100014A0000200E088218C910084240900016F
+:10632000A38900048F440E18022028210E000B328E
+:1063300002203021022080210A000C67AF82001465
+:1063400000071823306600033C010800A4263D9294
+:10635000122000058F8C0020918B00BC316A000454
+:106360001540001524CD00043C0F080095EF3D9228
+:1063700001E4702100AE302B50C0FF6E8F84000C02
+:106380002C85000514A0FFA32403004230980003CD
+:1063900017000002009818232483FFFC3C0108002A
+:1063A000AC233D740A000CA30000000000A7582491
+:1063B0000A000CCB016718263C010800A42D3D9271
+:1063C0000A000D33000000003C010800AC203D74C1
+:1063D0000A000CDE240300428F83001014600007C3
+:1063E000000010218F88002424050005910600007C
+:1063F00030C400FF108500030000000003E0000827
+:1064000000000000910A0018314900FF000939C25C
+:1064100014E0FFFA8F85001C3C04080094843D7C46
+:106420003C0308008C633D943C1908008F393D748F
+:106430003C0F080095EF3D920064C0218CAD0054E4
+:106440000319702101CF6021018D58231960001DAF
+:1064500000000000910E001C8F8C002C974B0E103A
+:1064600031CD00FF8D850004016D30238D88000043
+:1064700030CEFFFF000E510000AAC82100003821D5
+:1064800001072021032A182B0083C021AD990004A5
+:10649000AD980000918F000A01CF6821A18D000AFC
+:1064A0008F88002C974B0E12A50B0008950A003818
+:1064B00025490001A50900389107000D34E60008C0
+:1064C000A106000D03E000080000000027BDFFE06A
+:1064D000938700048F8F00248FAD00143C0E7FFF44
+:1064E0008F89000C35C8FFFFAFBF001CAFB000188C
+:1064F00001A8182491EA000D000717C03C1FBFFF38
+:10650000006258252D2E00018F90001837F9FFFFEB
+:106510003C1808008F183D943C0F080095EF3D8A09
+:1065200001796824000E47803C07EFFF3C05F0FF2F
+:1065300001A818253149002034E2FFFF34ACFFFFE9
+:106540000310582327A500102406000225EA0002A4
+:1065500000621824008080211520000200004021E4
+:106560008F480E1CA7AA0012056000372407000000
+:1065700030FF00FF001FCF008F8B001C00793825F3
+:10658000AFA70014916F00853C08080091083D9169
+:106590003C18DFFF31EE00C0370AFFFF000E182B5A
+:1065A0003C1F080097FF3D8400EA6824A3A800115F
+:1065B0000003174001A248258FB90010AFA90014AD
+:1065C0003C0A0800914A3D93A7BF00168FA800140B
+:1065D000032CC0243C0B01003C0F0FFF030B1825BC
+:1065E0003147000335EEFFFF010C68240007160059
+:1065F000006EF8243C09700001A2C82503E9582563
+:10660000AFB90014AFAB00100E000076A3A00015C8
+:106610008F8C0024260200089186000D30C40020D3
+:10662000108000068FBF001C3C05080094A53D802B
+:1066300024B0FFFF3C010800A4303D808FB000185B
+:1066400003E0000827BD00208F9800140118502B8C
+:106650005540FFC7240700010A000DB630FF00FFB8
+:106660009382000427BDFFE0AFBF00181040000F69
+:10667000008050218F880024240B00058F8900089A
+:10668000910700008F8400200100282130E3003FA3
+:106690008F86002C106B000800003821AFA9001075
+:1066A0000E00040EAFAA0014A38000048FBF0018D0
+:1066B00003E0000827BD00208D1900183C0F0800DA
+:1066C0008DEF3D748F9800103C027FFF8D08001401
+:1066D000345FFFFF033F682401F8702101AE60239F
+:1066E00001883821AFA900100E00040EAFAA0014D3
+:1066F0000A000E04A38000048F8700243C050800D4
+:1067000094A53D923C0208008C423D8C90E6000D21
+:106710000005240030C300201060002C00444025F8
+:106720008F85001C00006021240B000190A30085D0
+:1067300000004821240A00013C0F800035EE007063
+:106740008DC70000AF8700308F5801780700FFFE2B
+:106750003C038000347900708F3800003C0508004D
+:106760008CA500743C0D08008DAD007003077823E4
+:1067700000AF38210000102100EF302B01A22021B2
+:10678000008618213C010800AC2700743C01080079
+:10679000AC230070AF4B01483C1908008F393D9481
+:1067A000A7490144A74A0146AF59014C3C0B0800D8
+:1067B000916B3D91A34B0152AF4801543C0810002E
+:1067C000A74C015803E00008AF4801788F4B0E1C1E
+:1067D0003C0A08008D4A3D7497490E16974D0E14D9
+:1067E00001456021312AFFFF0A000E2731A9FFFF72
+:1067F0008F8300249064000D308200201040002917
+:10680000000000000000482100005021000040214D
+:106810003C07800034EB00708D670000AF870030CC
+:106820008F4C01780580FFFE3C0D800035AC007078
+:106830008D8B00003C0508008CA500743C0408000A
+:106840008C8400700167302300A67821000010219D
+:1068500001E6C82B0082C021031970213C01080009
+:10686000AC2F00743C010800AC2E0070AF49014809
+:106870003C0D08008DAD3D94A7480144240900401B
+:10688000A74A01463C081000240AFF91AF4D014C75
+:10689000A34A0152AF490154A740015803E0000840
+:1068A000AF4801788F490E1897460E1297450E1083
+:1068B00030CAFFFF0A000E5D30A8FFFF8F8300245F
+:1068C00027BDFFF89064000D308200201040003A90
+:1068D00000000000240B000100004821240A0001F0
+:1068E0003C088000350700708CE30000AF83003067
+:1068F0008F4C01780580FFFE3C0E80003C040800B0
+:1069000090843DD035C700708CEC00003C05080039
+:106910008CA50074A3A400033C1908008F390070F3
+:106920008FAD00000183302300A638210000102124
+:106930000322782100E6C02B01F8602101AE40253A
+:10694000AFA800003C010800AC2700743C0108001F
+:10695000AC2C00709346010A3C04080090843DD1A1
+:10696000A3A00002A3A600018FA300003C0580FFA6
+:106970003099007F34A2FFFF006278240019C6001E
+:1069800001F87025240D3000AF4E014C27BD0008E2
+:10699000AF4D0154A7400158AF4B0148A7490144EE
+:1069A000A74A01463C091000240AFF80A34A01526D
+:1069B00003E00008AF4901788F4B0E1897460E127E
+:1069C00097450E1030CAFFFF0A000E9130A9FFFF55
+:1069D0008F85001C2402008090A40085308300C0B5
+:1069E000106200058F8600208F8800088F87000CBA
+:1069F000ACC800C8ACC700C403E000080000000039
+:106A00003C0A0800254A39543C09080025293A2047
+:106A10003C08080025082DD43C07080024E73B3437
+:106A20003C06080024C637C43C05080024A5353CB4
+:106A30003C040800248431643C0308002463385C6F
+:106A40003C020800244236303C010800AC2A3D508C
+:106A50003C010800AC293D4C3C010800AC283D48F5
+:106A60003C010800AC273D543C010800AC263D64C5
+:106A70003C010800AC253D5C3C010800AC243D58BD
+:106A80003C010800AC233D683C010800AC223D609D
+:086A900003E000080000000013
+:00000001FF
diff --git a/firmware/bnx2/bnx2-mips-09-6.2.1b.fw.ihex b/firmware/bnx2/bnx2-mips-09-6.2.1b.fw.ihex
new file mode 100644
index 000000000000..43d7c4f3d3d4
--- /dev/null
+++ b/firmware/bnx2/bnx2-mips-09-6.2.1b.fw.ihex
@@ -0,0 +1,6496 @@
+:10000000080001180800000000005594000000C816
+:1000100000000000000000000000000008005594EF
+:10002000000000380000565C080000A00800000036
+:100030000000574400005694080059200000008436
+:100040000000ADD808005744000001C00000AE5CBD
+:100050000800321008000000000092580000B01C98
+:10006000000000000000000000000000080092589E
+:100070000000033C000142740800049008000400E2
+:10008000000012FC000145B000000000000000006C
+:1000900000000000080016FC00000004000158AC3D
+:1000A000080000A80800000000003D00000158B052
+:1000B00000000000000000000000000008003D00FB
+:1000C00000000030000195B00A000046000000006A
+:1000D000000000000000000D636F6D362E322E31DF
+:1000E00062000000060201020000000000000003A0
+:1000F000000000C800000032000000030000000003
+:1001000000000000000000000000000000000000EF
+:1001100000000010000001360000EA600000000549
+:1001200000000000000000000000000000000008C7
+:1001300000000000000000000000000000000000BF
+:1001400000000000000000000000000000000000AF
+:10015000000000000000000000000000000000009F
+:10016000000000020000000000000000000000008D
+:10017000000000000000000000000000000000007F
+:10018000000000000000000000000010000000005F
+:10019000000000000000000000000000000000005F
+:1001A000000000000000000000000000000000004F
+:1001B000000000000000000000000000000000003F
+:1001C000000000000000000000000000000000002F
+:1001D000000000000000000000000000000000001F
+:1001E0000000000010000003000000000000000DEF
+:1001F0000000000D3C020800244256083C030800A1
+:1002000024635754AC4000000043202B1480FFFDB2
+:10021000244200043C1D080037BD9FFC03A0F021D0
+:100220003C100800261001183C1C0800279C5608AA
+:100230000E000256000000000000000D27BDFFB4B4
+:10024000AFA10000AFA20004AFA30008AFA4000C50
+:10025000AFA50010AFA60014AFA70018AFA8001CF0
+:10026000AFA90020AFAA0024AFAB0028AFAC002C90
+:10027000AFAD0030AFAE0034AFAF0038AFB8003C28
+:10028000AFB90040AFBC0044AFBF00480E001544FA
+:10029000000000008FBF00488FBC00448FB90040B1
+:1002A0008FB8003C8FAF00388FAE00348FAD003078
+:1002B0008FAC002C8FAB00288FAA00248FA90020C0
+:1002C0008FA8001C8FA700188FA600148FA5001000
+:1002D0008FA4000C8FA300088FA200048FA1000040
+:1002E00027BD004C3C1B60108F7A5030377B502864
+:1002F00003400008AF7A00008F82002427BDFFE092
+:10030000AFB00010AFBF0018AFB100148C42000CAA
+:100310003C1080008E110100104000348FBF001887
+:100320000E000D84000000008F85002024047FFF54
+:100330000091202BACB100008E030104960201084D
+:1003400000031C003042FFFF00621825ACA300042C
+:100350009202010A96030114304200FF3063FFFF4E
+:100360000002140000431025ACA200089603010C03
+:100370009602010E00031C003042FFFF00621825A8
+:10038000ACA3000C960301109602011200031C009E
+:100390003042FFFF00621825ACA300108E02011846
+:1003A000ACA200148E02011CACA20018148000083C
+:1003B0008F820024978200003C0420050044182509
+:1003C00024420001ACA3001C0A0000C6A782000062
+:1003D0003C0340189442001E00431025ACA2001CB0
+:1003E0000E000DB8240400018FBF00188FB1001457
+:1003F0008FB000100000102103E0000827BD00208E
+:100400003C0780008CE202B834E50100044100089A
+:10041000240300013C0208008C42006024420001D9
+:100420003C010800AC22006003E0000800601021DD
+:100430003C0208008C42005C8CA4002094A30016AF
+:100440008CA6000494A5000E24420001ACE40280B6
+:100450002463FFFC3C010800AC22005C3C0210005D
+:10046000A4E30284A4E5028600001821ACE6028819
+:10047000ACE202B803E000080060102127BDFFE0F5
+:100480003C028000AFB0001034420100AFBF001C3E
+:10049000AFB20018AFB100148C43000094450008BF
+:1004A0002462FE002C42038110400003000381C23D
+:1004B0000A00010226100004240201001462000553
+:1004C0003C1180003C02800890420004305000FF44
+:1004D0003C11800036320100964300143202000FB6
+:1004E00000021500004310253C0308008C63004403
+:1004F00030A40004AE220080246300013C01080007
+:10050000AC2300441080000730A200028FBF001C03
+:100510008FB200188FB100148FB000100A0000CE07
+:1005200027BD00201040002D0000182130A20080BF
+:1005300010400005362200708E44001C0E000C672F
+:10054000240500A0362200708C4400008F82000C2D
+:10055000008210232C43012C10600004AF82001095
+:10056000240300010A000145AF84000C8E42000400
+:100570003C036020AF84000CAC6200143C02080015
+:100580008C42005850400015000018218C62000475
+:10059000240301FE304203FF144300100000182121
+:1005A0002E020004104000032E0200080A00014041
+:1005B0000000802114400003000000000A000140F8
+:1005C0002610FFF90000000D2402000202021004B0
+:1005D0003C036000AC626914000018218FBF001C4E
+:1005E0008FB200188FB100148FB00010006010217E
+:1005F00003E0000827BD00203C0480008C8301003C
+:1006000024020100506200033C0280080000000D3B
+:100610003C02800890430004000010213063000F6A
+:1006200000031D0003E00008AC8300800004188074
+:100630002782FF9C00621821000410C00044102390
+:100640008C640000000210C03C030800246356E4E0
+:10065000004310213C038000AC64009003E00008DC
+:10066000AF8200243C0208008C42011410400019A3
+:100670003084400030A2007F000231C03C02020002
+:100680001080001400A218253C026020AC43001426
+:100690003C0408008C8456B83C0308008C630110AD
+:1006A0003C02800024050900AC4500200086202182
+:1006B000246300013C028008AC4400643C01080053
+:1006C000AC2301103C010800AC2456B803E000083C
+:1006D000000000003C02602003E00008AC4500146C
+:1006E00003E000080000102103E0000800001021D2
+:1006F00030A2000810400008240201003C0208005B
+:100700008C42010C244200013C010800AC22010C87
+:1007100003E0000800000000148200080000000050
+:100720003C0208008C4200FC244200013C0108000D
+:10073000AC2200FC0A0001A330A200203C02080009
+:100740008C420084244200013C010800AC22008459
+:1007500030A200201040000830A200103C02080027
+:100760008C420108244200013C010800AC2201082F
+:1007700003E0000800000000104000080000000036
+:100780003C0208008C420104244200013C010800A4
+:10079000AC22010403E00008000000003C02080055
+:1007A0008C420100244200013C010800AC220100FF
+:1007B00003E000080000000027BDFFE0AFB1001417
+:1007C0003C118000AFB20018AFBF001CAFB00010EA
+:1007D0003632010096500008320200041040000733
+:1007E000320300028FBF001C8FB200188FB10014BB
+:1007F0008FB000100A0000CE27BD00201060000B53
+:10080000020028218E2401000E00018A0000000051
+:100810003202008010400003240500A10E000C6786
+:100820008E44001C0A0001E3240200018E2301040F
+:100830008F82000810430006020028218E24010048
+:100840000E00018A000000008E220104AF82000821
+:10085000000010218FBF001C8FB200188FB1001450
+:100860008FB0001003E0000827BD00202C82000498
+:1008700014400002000018212483FFFD240200021E
+:10088000006210043C03600003E00008AC626914DD
+:1008900027BDFFE0AFBF001CAFB20018AFB100141E
+:1008A000AFB000103C048000948201083043700017
+:1008B000240220001062000A2862200154400052E5
+:1008C0008FBF001C24024000106200482402600018
+:1008D0001062004A8FBF001C0A0002518FB200183C
+:1008E00034820100904300098C5000189451000C90
+:1008F000240200091062001C0000902128620009F7
+:10090000144000218F8200242402000A5062001249
+:10091000323100FF2402000B1062000F00000000C3
+:100920002402000C146200188F8200243C0208008C
+:100930008C4256B824030900AC83002000501021DB
+:100940003C038008AC6200643C010800AC2256B84D
+:100950000A0002508FBF001C0E0001E900102602A1
+:100960000A0002308F8200240E0001E900102602E6
+:100970003C0380089462001A8C72000C3042FFFF26
+:10098000020280258F8200248C42000C5040001E01
+:100990008FBF001C0E000D84000000003C02800090
+:1009A00034420100944300088F82002400031C009D
+:1009B0009444001E8F82002000641825AC50000073
+:1009C00024040001AC510004AC520008AC40000CFF
+:1009D000AC400010AC400014AC4000180E000DB844
+:1009E000AC43001C0A0002508FBF001C0E000440E4
+:1009F000000000000A0002508FBF001C0E000C9F78
+:100A0000000000008FBF001C8FB200188FB10014CF
+:100A10008FB000100000102103E0000827BD002067
+:100A200027BDFFD8AFB400203C036010AFBF002447
+:100A3000AFB3001CAFB20018AFB10014AFB00010DC
+:100A40008C6450002402FF7F3C1408002694563822
+:100A5000008220243484380CAC6450003C028000B6
+:100A6000240300370E0014B0AC4300083C07080014
+:100A700024E70618028010212404001D2484FFFFAF
+:100A8000AC4700000481FFFD244200043C02080042
+:100A9000244207C83C010800AC2256403C02080032
+:100AA000244202303C030800246306203C04080072
+:100AB000248403B43C05080024A506F03C06080085
+:100AC00024C62C9C3C010800AC2256803C02080045
+:100AD000244205303C010800AC2756843C01080044
+:100AE000AC2656943C010800AC23569C3C010800FF
+:100AF000AC2456A03C010800AC2556A43C010800DB
+:100B0000AC2256A83C010800AC23563C3C0108002E
+:100B1000AC2456443C010800AC2056603C0108005F
+:100B2000AC2556643C010800AC2056703C0108001E
+:100B3000AC27567C3C010800AC2656903C010800CE
+:100B4000AC2356980E00056E00000000AF80000C2C
+:100B50003C0280008C5300008F8300043C0208009C
+:100B60008C420020106200213262000700008821C0
+:100B70002792FF9C3C100800261056E43C02080017
+:100B80008C42002024050001022518040043202483
+:100B90008F820004004310245044000C26310001D1
+:100BA00010800008AF9000248E4300003C028000BB
+:100BB000AC4300900E000D4BAE05000C0A0002C1C4
+:100BC00026310001AE00000C263100012E22000269
+:100BD000261000381440FFE9265200043C020800A9
+:100BE0008C420020AF820004326200071040FFD91F
+:100BF0003C028000326200011040002D326200028F
+:100C00003C0580008CA2010000002021ACA2002045
+:100C10008CA301042C42078110400008ACA300A85B
+:100C200094A2010824032000304270001443000302
+:100C30003C02800890420005304400FF0E0001593C
+:100C4000000000003C0280009042010B304300FF96
+:100C50002C62001E54400004000310800E00018628
+:100C60000A0002EC00000000005410218C42000039
+:100C70000040F80900000000104000043C02800021
+:100C80008C4301043C026020AC4300143C02080089
+:100C90008C4200343C0440003C03800024420001AC
+:100CA000AC6401383C010800AC220034326200021E
+:100CB00010400010326200043C1080008E0201409F
+:100CC000000020210E000159AE0200200E00038317
+:100CD000000000003C024000AE0201783C02080027
+:100CE0008C420038244200013C010800AC2200384C
+:100CF000326200041040FF973C0280003C108000EC
+:100D00008E020180000020210E000159AE02002059
+:100D10008E03018024020F00546200073C02800809
+:100D20008E0201883C0300E03042FFFF00431025A3
+:100D30000A000328AE020080344200809042000086
+:100D400024030050304200FF14430007000000005D
+:100D50000E000362000000001440000300000000C9
+:100D60000E000971000000003C0208008C42003CAB
+:100D70003C0440003C03800024420001AC6401B804
+:100D80003C010800AC22003C0A0002A33C028000A7
+:100D90003C02900034420001008220253C02800089
+:100DA000AC4400203C0380008C6200200440FFFE25
+:100DB0000000000003E00008000000003C0280008A
+:100DC000344300010083202503E00008AC440020E8
+:100DD00027BDFFE0AFB10014AFB000100080882144
+:100DE000AFBF00180E00033230B000FF8F83FF94B6
+:100DF000022020219062002502028025A07000259B
+:100E00008C7000183C0280000E00033D020280241A
+:100E10001600000B8FBF00183C0480008C8201F884
+:100E20000440FFFE348201C024030002AC510000E4
+:100E3000A04300043C021000AC8201F88FBF0018F0
+:100E40008FB100148FB0001003E0000827BD002010
+:100E500027BDFFE83C028000AFBF00103442018094
+:100E6000944300048C4400083063020010600005C5
+:100E7000000028210E00100C000000000A0003787A
+:100E8000240500013C02FF000480000700821824B2
+:100E90003C02040014620004240500018F82FF94C8
+:100EA00090420008240500018FBF001000A010210F
+:100EB00003E0000827BD00188F82FF982405000179
+:100EC000A040001A3C028000344201400A00034264
+:100ED0008C4400008F85FF9427BDFFE0AFBF001C4E
+:100EE000AFB20018AFB10014AFB0001090A2000074
+:100EF000304400FF38830020388200300003182B74
+:100F00000002102B0062182410600003240200501D
+:100F1000148200A88FBF001C90A20005304200017F
+:100F2000104000A48FBF001C3C02800034420140EE
+:100F3000904200082443FFFF2C6200051040009EF1
+:100F40008FB20018000310803C030800246355ACE6
+:100F5000004310218C420000004000080000000007
+:100F60003C028000345101400E0003328E24000008
+:100F70008F92FF948E2200048E50000C1602000205
+:100F800024020001AE42000C0E00033D8E2400003E
+:100F90008E220004145000068FBF001C8FB2001870
+:100FA0008FB100148FB000100A000F7827BD002009
+:100FB0008E42000C0A000419000000003C0480006E
+:100FC0003482014094A300108C4200043063FFFF80
+:100FD0001443001C0000000024020001A4A2001021
+:100FE0008C8202380441000F3C0380003C02003F29
+:100FF0003448F0003C0760003C06FFC08CE22BBC8C
+:1010000000461824004810240002130200031D8229
+:10101000106200583C0280008C8202380440FFF7C6
+:101020003C038000346201408C44000034620200C2
+:10103000AC4400003C021000AC6202380A00043BE1
+:101040008FBF001C94A200100A00041900000000C9
+:10105000240200201482000F3C0280003C03800028
+:1010600094A20012346301408C6300043042FFFFFD
+:10107000146200050000000024020001A4A2001276
+:101080000A0004028FBF001C94A200120A00041977
+:1010900000000000345101400E0003328E24000095
+:1010A0008F92FF948E230004964200123050FFFF6F
+:1010B0001603000224020001A64200120E00033DA6
+:1010C0008E2400008E220004160200068FBF001C32
+:1010D0008FB200188FB100148FB000100A00037C8B
+:1010E00027BD0020964200120A00041900000000EB
+:1010F0003C03800094A20014346301408C6300041C
+:101100003042FFFF14620008240200018FBF001C60
+:101110008FB200188FB100148FB00010A4A2001479
+:101120000A00146327BD002094A20014144000217B
+:101130008FBF001C0A000435000000003C03800043
+:1011400094A20016346301408C6300043042FFFF18
+:101150001462000D240200018FBF001C8FB2001822
+:101160008FB100148FB00010A4A200160A000B1457
+:1011700027BD00209442007824420004A4A200105D
+:101180000A00043B8FBF001C94A200162403000138
+:101190003042FFFF144300078FBF001C3C020800D1
+:1011A0008C420070244200013C010800AC22007017
+:1011B0008FBF001C8FB200188FB100148FB00010C9
+:1011C00003E0000827BD002027BDFFD8AFB20018FC
+:1011D0008F92FF94AFB10014AFBF0020AFB3001CDB
+:1011E000AFB000103C028000345101008C5001006F
+:1011F0009242000092230009304400FF2402001FA5
+:10120000106200AB28620020104000192402003850
+:101210002862000A1040000D2402000B286200081A
+:101220001040002E8F820024046001042862000216
+:101230001440002A8F820024240200061062002637
+:101240008FBF00200A00055F8FB3001C1062006092
+:101250002862000B144000FA8FBF00202402000E09
+:10126000106200788F8200240A00055F8FB3001C93
+:10127000106200D2286200391040000A2402008067
+:1012800024020036106200E528620037104000C3D7
+:1012900024020035106200D98FBF00200A00055FCC
+:1012A0008FB3001C1062002D2862008110400006E0
+:1012B000240200C824020039106200C98FBF002038
+:1012C0000A00055F8FB3001C106200A28FBF0020D0
+:1012D0000A00055F8FB3001C8F8200248C42000C33
+:1012E000104000D78FBF00200E000D8400000000CA
+:1012F0003C038000346301008C6200008F85002075
+:10130000946700089466000CACA200008C64000492
+:101310008F82002400063400ACA400049448001E10
+:101320008C62001800073C0000E83825ACA20008D9
+:101330008C62001C24040001ACA2000C9062000A24
+:1013400000C23025ACA60010ACA00014ACA0001860
+:10135000ACA7001C0A00051D8FBF00208F8200244F
+:101360008C42000C104000B68FBF00200E000D8490
+:10137000000000008F820024962400089625000CAF
+:101380009443001E000422029626000E8F82002045
+:10139000000426000083202500052C003C0300806B
+:1013A00000A6282500832025AC400000AC400004A6
+:1013B000AC400008AC40000CAC450010AC40001440
+:1013C000AC400018AC44001C0A00051C24040001B9
+:1013D0009622000C14400018000000009242000504
+:1013E0003042001014400014000000000E000332D0
+:1013F0000200202192420005020020213442001008
+:101400000E00033DA242000592420000240300208A
+:10141000304200FF10430089020020218FBF0020CE
+:101420008FB3001C8FB200188FB100148FB0001062
+:101430000A00107527BD00280000000D0A00055E97
+:101440008FBF00208C42000C1040007D8FBF002019
+:101450000E000D84000000008E2200048F84002006
+:101460009623000CAC8200003C0280089445002CBE
+:101470008F82002400031C0030A5FFFF9446001E4D
+:101480003C02400E0065182500C23025AC830004E4
+:10149000AC800008AC80000CAC800010AC80001464
+:1014A000AC800018AC86001C0A00051C2404000156
+:1014B0000E000332020020218F93FF9802002021AA
+:1014C0000E00033DA660000C020020210E00034226
+:1014D000240500018F8200248C42000C104000582B
+:1014E0008FBF00200E000D84000000009622000C2B
+:1014F0008F83002000021400AC700000AC62000476
+:10150000AC6000088E4400388F820024AC64000C6C
+:101510008E46003C9445001E3C02401FAC66001005
+:1015200000A228258E62000424040001AC6200148D
+:10153000AC600018AC65001C8FBF00208FB3001C8E
+:101540008FB200188FB100148FB000100A000DB8D0
+:1015500027BD0028240200201082003A8FB3001C0F
+:101560000E000F5E00000000104000358FBF00200D
+:101570003C0480008C8201F80440FFFE348201C0EC
+:1015800024030002AC500000A04300043C02100001
+:10159000AC8201F80A00055E8FBF00200200202106
+:1015A0008FBF00208FB3001C8FB200188FB10014C2
+:1015B0008FB000100A000EA727BD00289625000C4A
+:1015C000020020218FBF00208FB3001C8FB20018B3
+:1015D0008FB100148FB000100A000ECC27BD002878
+:1015E000020020218FB3001C8FB200188FB10014AD
+:1015F0008FB000100A000EF727BD00289225000DBD
+:10160000020020218FB3001C8FB200188FB100148C
+:101610008FB000100A000F4827BD002802002021CB
+:101620008FBF00208FB3001C8FB200188FB1001441
+:101630008FB000100A000F1F27BD00288FBF0020A9
+:101640008FB3001C8FB200188FB100148FB0001040
+:1016500003E0000827BD00283C0580008CA202782A
+:101660000440FFFE34A2024024030002AC44000008
+:10167000A04300043C02100003E00008ACA2027882
+:10168000A380001803E00008A38000193C03800039
+:101690008C6202780440FFFE8F82001CAC62024024
+:1016A00024020002A06202443C02100003E0000891
+:1016B000AC6202783C02600003E000088C425404F3
+:1016C0009083003024020005008040213063003FF9
+:1016D0000000482114620005000050219082004C57
+:1016E0009483004E304900FF306AFFFFAD00000CCC
+:1016F000AD000010AD000024950200148D05001C03
+:101700008D0400183042FFFF004910230002110031
+:10171000000237C3004038210086202300A2102B8E
+:101720000082202300A72823AD05001CAD0400186B
+:10173000A5090014A5090020A50A001603E0000869
+:10174000A50A002203E000080000000027BDFFD822
+:10175000AFB200183C128008AFB40020AFB3001C39
+:10176000AFB10014AFBF0024AFB00010365101007C
+:101770003C0260008C4254049222000C3C1408008D
+:10178000929400F7304300FF2402000110620032FF
+:101790000080982124020002146200353650008037
+:1017A0000E00143D000000009202004C2403FF8054
+:1017B0003C0480003042007F000211C024420240FD
+:1017C0000262102100431824AC8300949245000863
+:1017D0009204004C3042007F3C03800614850007D1
+:1017E000004380212402FFFFA22200112402FFFFF8
+:1017F000A62200120A0005D22402FFFF9602002052
+:10180000A222001196020022A62200128E020024BB
+:101810003C048008AE2200143485008090A2004C65
+:1018200034830100A06200108CA2003CAC6200185E
+:101830008C820068AC6200F48C820064AC6200F0C0
+:101840008C82006CAC6200F824020001A0A2006847
+:101850000A0005EE3C0480080E001456000000004B
+:1018600036420080A04000680A0005EE3C04800873
+:10187000A2000068A20000690A0006293C02800854
+:10188000348300808C62003834850100AC62006CC7
+:1018900024020001A062006990A200D59083000894
+:1018A000305100FF3072007F12320019001111C058
+:1018B00024420240026210212403FF8000431824C6
+:1018C0003C048000AC8300943042007F3C038006DF
+:1018D000004380218E02000C1040000D02002021E8
+:1018E0000E00057E0000000026220001305100FF9E
+:1018F0009203003C023410260002102B0002102339
+:101900003063007F022288240A0005F8A203003C0D
+:101910003C088008350401008C8200E03507008017
+:10192000ACE2003C8C8200E0AD02000090E5004C8F
+:10193000908600D590E3004C908400D52402FF806F
+:1019400000A228243063007F308400FF00A62825F1
+:101950000064182A1060000230A500FF38A500803E
+:10196000A0E5004CA10500093C0280089043000E50
+:10197000344400803C058000A043000A8C8300189A
+:101980003C027FFF3442FFFF00621824AC83001842
+:101990008CA201F80440FFFE00000000ACB301C0BF
+:1019A0008FBF00248FB400208FB3001C8FB20018AB
+:1019B0008FB100148FB0001024020002A0A201C455
+:1019C00027BD00283C02100003E00008ACA201F88B
+:1019D00090A2000024420001A0A200003C030800E5
+:1019E0008C6300F4304200FF144300020080302179
+:1019F000A0A0000090A200008F84001C000211C073
+:101A00002442024024830040008220212402FF80DF
+:101A1000008220243063007F3C02800A006218218B
+:101A20003C028000AC44002403E00008ACC300008A
+:101A300094820006908300058C85000C8C86001033
+:101A40008C8700188C88001C8C8400203C010800C6
+:101A5000A42256C63C010800A02356C53C0108003C
+:101A6000AC2556CC3C010800AC2656D03C01080001
+:101A7000AC2756D83C010800AC2856DC3C010800D5
+:101A8000AC2456E003E00008000000003C0280089F
+:101A9000344201008C4400343C038000346504006F
+:101AA000AC6400388C420038AF850028AC62003C42
+:101AB0003C020005AC6200300000000000000000A5
+:101AC00003E00008000000003C020006308400FF34
+:101AD000008220253C028000AC4400300000000061
+:101AE00000000000000000003C0380008C62000049
+:101AF000304200101040FFFD3462040003E0000893
+:101B0000AF82002894C200003C080800950800CA73
+:101B100030E7FFFF0080482101021021A4C200002D
+:101B200094C200003042FFFF00E2102B544000013D
+:101B3000A4C7000094A200003C0308008C6300CC02
+:101B400024420001A4A2000094A200003042FFFF42
+:101B5000144300073C0280080107102BA4A00000DA
+:101B60005440000101003821A4C700003C02800855
+:101B7000344601008CC3002894A200003C0480007D
+:101B80003042FFFE000210C000621021AC82003C17
+:101B90008C82003C006218231860000400000000E2
+:101BA0008CC200240A0006BA244200018CC2002420
+:101BB000AC8200383C020050344200103C038000EC
+:101BC000AC620030000000000000000000000000D7
+:101BD0008C620000304200201040FFFD0000000039
+:101BE00094A200003C04800030420001000210C0BA
+:101BF000004410218C430400AD2300008C420404F7
+:101C0000AD2200043C02002003E00008AC8200305A
+:101C100027BDFFE0AFB20018AFB10014AFB00010A5
+:101C2000AFBF001C94C2000000C080213C1208001D
+:101C3000965200C624420001A6020000960300004E
+:101C400094E2000000E03021144300058FB1003021
+:101C50000E00068F024038210A0006F10000000045
+:101C60008C8300048C82000424420040046100073D
+:101C7000AC8200048C8200040440000400000000D8
+:101C80008C82000024420001AC8200009602000019
+:101C90003042FFFF50520001A600000096220000D3
+:101CA00024420001A62200003C02800834420100C8
+:101CB000962300009442003C144300048FBF001C94
+:101CC00024020001A62200008FBF001C8FB2001862
+:101CD0008FB100148FB0001003E0000827BD002072
+:101CE00027BDFFE03C028008AFBF0018344201006E
+:101CF0008C4800343C03800034690400AC68003830
+:101D00008C42003830E700FFAF890028AC62003C0D
+:101D10003C020005AC620030000000000000000042
+:101D200000000000000000000000000000000000B3
+:101D30008C82000C8C82000C97830016AD22000070
+:101D40008C82001000604021AD2200048C820018BB
+:101D5000AD2200088C82001CAD22000C8CA2001465
+:101D6000AD2200108C820020AD220014908200056C
+:101D7000304200FF00021200AD2200188CA20018B1
+:101D8000AD22001C8CA2000CAD2200208CA2001001
+:101D9000AD2200248CA2001CAD2200288CA20020C1
+:101DA000AD22002C3402FFFFAD260030AD20003400
+:101DB000506200013408FFFFAD28003850E00011E8
+:101DC0003C0280083C048008348401009482005066
+:101DD0003042FFFFAD22003C9483004494850044D0
+:101DE000240200013063FFFF000318C200641821C1
+:101DF0009064006430A5000700A210040A00075C8C
+:101E00000044102534420100AD20003C94430044BE
+:101E1000944400443063FFFF000318C2006218219D
+:101E200030840007906500642402000100821004E1
+:101E30000002102700451024A0620064000000008A
+:101E400000000000000000003C0200063442004098
+:101E50003C038000AC620030000000000000000085
+:101E6000000000008C620000304200101040FFFDB6
+:101E70003C06800834C201503463040034C7014A70
+:101E800034C4013434C5014034C60144AFA200104B
+:101E90000E0006D2AF8300288FBF001803E00008B1
+:101EA00027BD00208F8300143C0608008CC600E884
+:101EB0008F82001C30633FFF000319800046102111
+:101EC000004310212403FF80004318243C068000B7
+:101ED000ACC300283042007F3C03800C004330211B
+:101EE00090C2000D30A500FF0000382134420010E0
+:101EF000A0C2000D8F8900143C028008344201000A
+:101F00009443004400091382304800032402000176
+:101F1000A4C3000E1102000B2902000210400005AC
+:101F2000240200021100000C240300010A0007A48F
+:101F30000000182111020006000000000A0007A49A
+:101F4000000018218CC2002C0A0007A424430001C1
+:101F50008CC20014244300018CC200180043102BD3
+:101F60005040000A240700012402002714A20003A5
+:101F70003C0380080A0007B1240700013463010014
+:101F80009462004C24420001A462004C00091382B8
+:101F9000304300032C620002104000090080282119
+:101FA000146000040000000094C200340A0007C15D
+:101FB0003046FFFF8CC600380A0007C10080282188
+:101FC000000030213C040800248456C00A000706A3
+:101FD0000000000027BDFF90AFB60068AFB50064F9
+:101FE000AFB40060AFB3005CAFB20058AFB1005403
+:101FF000AFBF006CAFB000508C9000000080B021EB
+:102000003C0208008C4200E8960400328F83001CDA
+:102010002414FF8030843FFF0062182100042180D7
+:1020200000641821007410243C13800000A090214B
+:1020300090A50000AE620028920400323C02800CA1
+:102040003063007F00628821308400C02402004099
+:10205000148200320000A8218E3500388E2200182C
+:102060001440000224020001AE2200189202003C3B
+:10207000304200201440000E8F83001C000511C068
+:102080002442024000621821306400783C02008043
+:102090000082202500741824AE630800AE64081086
+:1020A0008E2200188E03000800431021AE22001873
+:1020B0008E22002C8E230018244200010062182B6F
+:1020C0001060004300000000924200002442000122
+:1020D000A24200003C0308008C6300F4304200FF81
+:1020E00050430001A2400000924200008F84001C77
+:1020F000000211C024420240248300403063007F6C
+:10210000008220213C02800A0094202400621821D1
+:10211000AE6400240A0008D2AEC30000920300326D
+:102120002402FFC000431024304200FF1440000589
+:1021300024020001AE220018962200340A00084250
+:102140003055FFFF8E22001424420001AE220018F9
+:102150009202003000021600000216030441001C27
+:10216000000000009602003227A400100080282101
+:10217000A7A20016960200320000302124070001B9
+:102180003042FFFFAF8200140E000706AFA0001C14
+:10219000960200328F83001C3C0408008C8400E807
+:1021A00030423FFF000211800064182100621821B4
+:1021B00000741024AE62002C3063007F3C02800E5D
+:1021C000006218219062000D3042007FA062000D75
+:1021D0009222000D304200105040007892420000E0
+:1021E0003C028008344401009482004C8EC30000FD
+:1021F0003C130800967300C62442FFFFA482004CE3
+:10220000946200329623000E3054FFFF3070FFFFBF
+:102210003C0308008C6300D000701807A7A30038A7
+:102220009482003E3063FFFF3042FFFF14620007DC
+:10223000000000008C8200303C038000244200300B
+:10224000AC62003C0A00086A8C82002C9482004038
+:102250003042FFFF5462000927A400408C820038FE
+:102260003C03800024420030AC62003C8C8200348D
+:10227000AC6200380A0008793C03800027A50038CA
+:1022800027A60048026038210E00068FA7A000484C
+:102290008FA300403C02800024630030AC43003830
+:1022A0008FA30044AC43003C3C0380003C0200058B
+:1022B000AC6200303C028008344401009482004249
+:1022C000346304003042FFFF0202102B1440000769
+:1022D000AF8300289482004E9483004202021021B2
+:1022E000004310230A00088F3043FFFF9483004E01
+:1022F00094820042026318210050102300621823C8
+:102300003063FFFF3C028008344401009482003CAB
+:102310003042FFFF14430003000000000A00089F42
+:10232000240300019482003C3042FFFF0062102B26
+:10233000144000058F8200289482003C0062102324
+:102340003043FFFF8F820028AC550000AC400004F2
+:10235000AC540008AC43000C3C02000634420010B0
+:102360003C038000AC620030000000000000000070
+:10237000000000008C620000304200101040FFFDA1
+:102380003C04800834840100001018C20064182145
+:102390009065006432020007240600010046100424
+:1023A00000451025A0620064948300429622000E2E
+:1023B00050430001A386001892420000244200010D
+:1023C000A24200003C0308008C6300F4304200FF8E
+:1023D00050430001A2400000924200008F84001C84
+:1023E000000211C0244202402483004000822021C8
+:1023F0002402FF80008220243063007F3C02800A98
+:10240000006218213C028000AC440024AEC30000EE
+:102410008FBF006C8FB600688FB500648FB400600A
+:102420008FB3005C8FB200588FB100548FB0005052
+:1024300003E0000827BD007027BDFFD8AFB3001C24
+:10244000AFB20018AFB10014AFB00010AFBF0020A2
+:102450000080982100E0802130B1FFFF0E000D8444
+:1024600030D200FF0000000000000000000000006B
+:102470008F8200208F830024AC510000AC520004F6
+:10248000AC530008AC40000CAC400010AC40001451
+:10249000AC4000189463001E02038025AC50001C61
+:1024A0000000000000000000000000002404000103
+:1024B0008FBF00208FB3001C8FB200188FB10014A3
+:1024C0008FB000100A000DB827BD002830A5FFFF0F
+:1024D0000A0008DC30C600FF3C02800834430100DB
+:1024E0009462000E3C080800950800C63046FFFFC5
+:1024F00014C000043402FFFF946500EA0A000929B1
+:102500008F84001C10C20027000000009462004E5F
+:102510009464003C3045FFFF00A6102300A6182B52
+:102520003087FFFF106000043044FFFF00C5102318
+:1025300000E210233044FFFF0088102B1040000EF3
+:1025400000E810233C028008344401002403000109
+:1025500034420080A44300162402FFFFA482000E30
+:10256000948500EA8F84001C0000302130A5FFFF15
+:102570000A0009013C0760200044102A10400009AD
+:102580003C0280083443008094620016304200010F
+:10259000104000043C0280009442007E244200145B
+:1025A000A462001603E000080000000027BDFFE061
+:1025B0003C028008AFBF001CAFB0001834420100DD
+:1025C000944300429442004C104000193068FFFFD1
+:1025D0009383001824020001146200298FBF001C9D
+:1025E0003C06800834D00100000810C200501021C1
+:1025F000904200643103000734C70148304200FFB5
+:10260000006210073042000134C9014E34C4012C6D
+:1026100034C5013E1040001634C601420E0006D2F9
+:10262000AFA90010960200420A0009463048FFFF99
+:102630003C028008344401009483004494820042A8
+:102640001043000F8FBF001C94820044A4820042FC
+:1026500094820050A482004E8C820038AC820030FC
+:1026600094820040A482003E9482004AA4820048E2
+:102670008FBF001C8FB000180A00090427BD00207E
+:102680008FB0001803E0000827BD002027BDFFA081
+:10269000AFB1004C3C118000AFBF0058AFB3005445
+:1026A000AFB20050AFB000483626018890C2000398
+:1026B0003044007FA3A400108E32018090C200003D
+:1026C0003043007F240200031062003BAF92001CE5
+:1026D00028620004104000062402000424020002C4
+:1026E000106200098FBF00580A000B0F8FB300540F
+:1026F0001062004D240200051062014E8FBF005889
+:102700000A000B0F8FB30054000411C002421021C5
+:102710002404FF8024420240004410242643004049
+:10272000AE2200243063007F3C02800A0062182140
+:102730009062003CAFA3003C00441025A062003C26
+:102740008FA3003C9062003C304200401040016C7E
+:102750008FBF00583C108008A3800018361001007D
+:102760008E0200E08C63003427A4003C27A50010F3
+:10277000004310210E0007C3AE0200E093A2001038
+:102780003C038000A20200D58C6202780440FFFE68
+:102790008F82001CAC62024024020002A06202444C
+:1027A0003C021000AC6202780E0009390000000003
+:1027B0000A000B0E8FBF00583C05800890C3000133
+:1027C00090A2000B1443014E8FBF005834A4008028
+:1027D0008C8200189082004C90A200083C0260009D
+:1027E0008C4254048C8300183C027FFF3442FFFF6C
+:1027F000006218243C0208008C4200B4AC8300182C
+:102800003C038000244200013C010800AC2200B4DB
+:102810008C6201F80440FFFE8F82001CAC6201C094
+:102820000A000AD6240200023C10800890C300016E
+:102830009202000B144301328FBF005827A40018E6
+:1028400036050110240600033C0260008C4254044B
+:102850000E000E470000000027A40028360501F0F6
+:102860000E000E47240600038FA200283603010045
+:10287000AE0200648FA2002CAE0200688FA200306E
+:10288000AE02006C93A40018906300D52402FF8070
+:102890000082102400431025304900FF3084007F5F
+:1028A0003122007F0082102A544000013929008023
+:1028B000000411C0244202402403FF800242102180
+:1028C00000431024AE220094264200403042007F94
+:1028D0003C038006004340218FA3001C2402FFFF1D
+:1028E000AFA800403C130800927300F71062003359
+:1028F00093A2001995030014304400FF3063FFFFDA
+:102900000064182B106000100000000095040014F3
+:102910008D07001C8D0600183084FFFF0044202323
+:102920000004210000E438210000102100E4202BE5
+:1029300000C2302100C43021AD07001CAD060018D4
+:102940000A000A2F93A20019950400148D07001C99
+:102950008D0600183084FFFF008220230004210030
+:10296000000010210080182100C2302300E4202B39
+:1029700000C4302300E33823AD07001CAD06001867
+:1029800093A200198FA30040A462001497A2001A1A
+:10299000A46200168FA2001CAC6200108FA2001C63
+:1029A000AC62000C93A20019A462002097A2001A46
+:1029B000A46200228FA2001CAC6200243C048008A8
+:1029C000348300808C6200388FA20020012088218F
+:1029D000AC62003C8FA20020AC82000093A20018E1
+:1029E000A062004C93A20018A0820009A0600068B9
+:1029F00093A20018105100512407FF803229007F54
+:102A0000000911C024420240024210213046007FDA
+:102A10003C03800000471024AC6200943C02800616
+:102A200000C2302190C2003CAFA60040000020212F
+:102A300000471025A0C2003C8FA80040950200026C
+:102A4000950300148D07001C3042FFFF3063FFFF29
+:102A50008D060018004310230002110000E2382107
+:102A600000E2102B00C4302100C23021AD07001C51
+:102A7000AD06001895020002A5020014A50000167C
+:102A80008D020008AD0200108D020008AD02000C9E
+:102A900095020002A5020020A50000228D02000878
+:102AA000AD0200249102003C304200401040001A68
+:102AB000262200013C108008A3A90038A38000183A
+:102AC000361001008E0200E08D03003427A4004080
+:102AD00027A50038004310210E0007C3AE0200E016
+:102AE00093A200383C038000A20200D58C620278D9
+:102AF0000440FFFE8F82001CAC62024024020002F0
+:102B0000A06202443C021000AC6202780E00093957
+:102B100000000000262200013043007F14730004EF
+:102B2000004020212403FF8002231024004320269C
+:102B300093A200180A000A4B309100FF93A40018DA
+:102B40008FA3001C2402FFFF1062000A308900FFDF
+:102B500024820001248300013042007F14530005C9
+:102B6000306900FF2403FF800083102400431026F7
+:102B7000304900FF3C028008904200080120882173
+:102B8000305000FF123000193222007F000211C0C5
+:102B900002421021244202402403FF8000431824F3
+:102BA0003C048000AC8300943042007F3C038006EC
+:102BB000004310218C43000C004020211060000BCA
+:102BC000AFA200400E00057E000000002623000199
+:102BD0002405FF803062007F145300020225202468
+:102BE000008518260A000AAF307100FF3C048008F7
+:102BF000348400808C8300183C027FFF3442FFFF46
+:102C000000621824AC8300183C0380008C6201F839
+:102C10000440FFFE00000000AC7201C0240200026C
+:102C2000A06201C43C021000AC6201F80A000B0E65
+:102C30008FBF00583C04800890C300019082000BB5
+:102C40001443002F8FBF0058349000809202000878
+:102C500030420040104000200000000092020008B6
+:102C60000002160000021603044100050240202164
+:102C70000E000ECC240500930A000B0E8FBF0058E7
+:102C80009202000924030018304200FF1443000D93
+:102C900002402021240500390E000E64000030217E
+:102CA0000E0003328F84001C8F82FF9424030012D5
+:102CB000A04300090E00033D8F84001C0A000B0E88
+:102CC0008FBF0058240500360E000E64000030212E
+:102CD0000A000B0E8FBF00580E0003320240202165
+:102CE000920200058F84001C344200200E00033D38
+:102CF000A20200050E0010758F84001C8FBF0058C3
+:102D00008FB300548FB200508FB1004C8FB0004889
+:102D100003E0000827BD00603C0280083445010044
+:102D20003C0280008C42014094A3000E0000302140
+:102D300000402021AF82001C3063FFFF3402FFFF00
+:102D4000106200063C0760202402FFFFA4A2000ED0
+:102D500094A500EA0A00090130A5FFFF03E000087E
+:102D60000000000027BDFFC83C0280003C06800830
+:102D7000AFB5002CAFB1001CAFBF0030AFB400281E
+:102D8000AFB30024AFB20020AFB00018345101003F
+:102D900034C501008C4301008E2200148CA400E491
+:102DA0000000A821AF83001C0044102318400052EB
+:102DB000A38000188E22001400005021ACA200E471
+:102DC00090C3000890A200D53073007FA3A200102A
+:102DD0008CB200E08CB400E4304200FF1053003BA2
+:102DE00093A200108F83001C2407FF80000211C0F3
+:102DF0000062102124420240246300400047102456
+:102E00003063007F3C0980003C08800A006818217C
+:102E1000AD2200248C62003427A4001427A50010E2
+:102E2000024280210290102304400028AFA3001426
+:102E30009062003C00E21024304200FF1440001970
+:102E4000020090219062003C34420040A062003CAD
+:102E50008F86001C93A3001024C200403042007FE4
+:102E6000004828213C0208008C4200F42463000141
+:102E7000306400FF14820002A3A30010A3A000107E
+:102E800093A20010AFA50014000211C0244202401A
+:102E900000C2102100471024AD2200240A000B4577
+:102EA00093A200100E0007C3000000003C0280083F
+:102EB00034420100AC5000E093A30010240A00014A
+:102EC000A04300D50A000B4593A200102402000184
+:102ED000154200093C0380008C6202780440FFFE2A
+:102EE0008F82001CAC62024024020002A0620244F5
+:102EF0003C021000AC6202789222000B2403000214
+:102F0000304200FF144300720000000096220008C7
+:102F1000304300FF24020082146200402402008437
+:102F20003C028000344901008D22000C95230006EC
+:102F3000000216023063FFFF3045003F24020027E5
+:102F400010A2000FAF83001428A200281040000830
+:102F5000240200312402002110A2000924020025CD
+:102F600010A20007938200190A000BBD00000000A8
+:102F700010A20007938200190A000BBD0000000098
+:102F80000E000777012020210A000C3D0000000000
+:102F90003C0380008C6202780440FFFE8F82001C9C
+:102FA000AC62024024020002A06202443C02100013
+:102FB000AC6202780A000C3D000000009523000678
+:102FC000912400058D25000C8D2600108D270018FA
+:102FD0008D28001C8D290020244200013C0108009E
+:102FE000A42356C63C010800A02456C53C01080095
+:102FF000AC2556CC3C010800AC2656D03C0108005C
+:10300000AC2756D83C010800AC2856DC3C0108002F
+:10301000AC2956E00A000C3DA38200191462000A94
+:10302000240200813C02800834420100944500EAF9
+:10303000922600058F84001C30A5FFFF30C600FFDC
+:103040000A000BFE3C0760211462005C00000000D7
+:103050009222000A304300FF306200201040000737
+:10306000306200403C02800834420100944500EA8E
+:103070008F84001C0A000BFC24060040104000074F
+:10308000000316003C02800834420100944500EA27
+:103090008F84001C0A000BFC24060041000216036A
+:1030A000044100463C02800834420100944500EA95
+:1030B0008F84001C2406004230A5FFFF3C076019E6
+:1030C0000E000901000000000A000C3D0000000095
+:1030D0009222000B24040016304200FF1044000628
+:1030E0003C0680009222000B24030017304200FFB0
+:1030F000144300320000000034C5010090A2000B10
+:10310000304200FF1444000B000080218CA20020FC
+:103110008CA400202403FF800043102400021140EF
+:103120003084007F004410253C032000004310251C
+:10313000ACC2083094A2000800021400000214037C
+:10314000044200012410000194A2000830420080D3
+:103150005040001A0200A82194A20008304220002A
+:10316000504000160200A8218CA300183C021C2D20
+:10317000344219ED106200110200A8213C0208003F
+:103180008C4200D4104000053C0280082403000457
+:1031900034420100A04300FC3C028008344201009C
+:1031A000944500EA8F84001C2406000630A5FFFF2A
+:1031B0000E0009013C0760210200A8210E00093918
+:1031C000000000009222000A304200081040000473
+:1031D00002A010210E0013790000000002A01021AF
+:1031E0008FBF00308FB5002C8FB400288FB3002420
+:1031F0008FB200208FB1001C8FB0001803E00008D0
+:1032000027BD00382402FF80008220243C02900069
+:1032100034420007008220253C028000AC4400209C
+:103220003C0380008C6200200440FFFE0000000090
+:1032300003E00008000000003C0380002402FF803F
+:10324000008220243462000700822025AC64002024
+:103250008C6200200440FFFE0000000003E0000834
+:103260000000000027BDFFD8AFB3001CAFB10014B1
+:10327000AFB00010AFBF0020AFB200183C1180000B
+:103280003C0280088E32002034530100AE2400201E
+:10329000966300EA000514003C074000004738250B
+:1032A00000A08021000030210E0009013065FFFFE1
+:1032B000240200A1160200022402FFFFA2620009FC
+:1032C000AE3200208FBF00208FB3001C8FB20018D9
+:1032D0008FB100148FB0001003E0000827BD002854
+:1032E0003C0280082403000527BDFFE834420100AA
+:1032F000A04300FCAFBF00103C0280008C420100E4
+:10330000240500A1004020210E000C67AF82001CA4
+:103310003C0380008C6202780440FFFE8F82001C18
+:103320008FBF001027BD0018AC62024024020002CB
+:10333000A06202443C021000AC62027803E0000884
+:103340000000000027BDFFE83C068000AFBF001072
+:1033500034C7010094E20008304400FF3883008243
+:10336000388200842C6300012C4200010062182581
+:103370001060002D24020083938200195040003B0E
+:103380008FBF00103C020800904256CC8CC4010054
+:103390003C06080094C656C63045003F38A30032AC
+:1033A00038A2003F2C6300012C4200010062182566
+:1033B000AF84001CAF860014A380001914600007BE
+:1033C00000E020212402002014A2001200000000CE
+:1033D0003402FFFF14C2000F00000000240200208E
+:1033E00014A2000500E028218CE300142402FFFF52
+:1033F0005062000B8FBF00103C040800248456C0AC
+:10340000000030210E000706240700010A000CD638
+:103410008FBF00100E000777000000008FBF001064
+:103420000A00093927BD001814820004240200850F
+:103430008CC501040A000CE1000020211482000662
+:103440002482FF808CC50104240440008FBF00103B
+:103450000A00016727BD0018304200FF2C4200021D
+:1034600010400004240200228FBF00100A000B2726
+:1034700027BD0018148200048F8200248FBF001023
+:103480000A000C8627BD00188C42000C1040001E5C
+:1034900000E0282190E300092402001814620003D0
+:1034A000240200160A000CFC240300081462000722
+:1034B00024020017240300123C02800834420080DA
+:1034C000A04300090A000D0994A7000854620007F0
+:1034D00094A700088F82FF942404FFFE9043000508
+:1034E00000641824A043000594A7000890A6001BC0
+:1034F0008CA4000094A500068FBF001000073C00BC
+:103500000A0008DC27BD00188FBF001003E0000888
+:1035100027BD00188F8500243C04800094A2002A57
+:103520008CA30034000230C02402FFF000C210243B
+:1035300000621821AC83003C8CA200303C03800068
+:10354000AC8200383C02005034420010AC620030C3
+:103550000000000000000000000000008C6200007D
+:10356000304200201040FFFD30C20008104000062D
+:103570003C0280008C620408ACA200208C62040C27
+:103580000A000D34ACA200248C430400ACA300203C
+:103590008C420404ACA200243C0300203C028000C6
+:1035A000AC4300303C0480008C8200300043102487
+:1035B0001440FFFD8F8600243C020040AC820030A6
+:1035C00094C3002A94C2002894C4002C94C5002EF1
+:1035D00024630001004410213064FFFFA4C20028CE
+:1035E00014850002A4C3002AA4C0002A03E0000836
+:1035F000000000008F84002427BDFFE83C05800404
+:1036000024840010AFBF00100E000E472406000AED
+:103610008F840024948200129483002E3042000F85
+:10362000244200030043180424027FFF0043102BB0
+:1036300010400002AC8300000000000D0E000D13CE
+:10364000000000008F8300248FBF001027BD0018EA
+:10365000946200149463001A3042000F00021500B7
+:10366000006218253C02800003E00008AC4300A083
+:103670008F8300243C028004944400069462001A64
+:103680008C650000A4640016004410233042FFFF44
+:103690000045102B03E00008384200018F8400240D
+:1036A0003C0780049486001A8C85000094E2000692
+:1036B000A482001694E3000600C310233042FFFFEB
+:1036C0000045102B384200011440FFF8A483001677
+:1036D00003E00008000000008F8400243C02800406
+:1036E000944200069483001A8C850000A482001680
+:1036F000006210233042FFFF0045102B38420001CA
+:103700005040000D8F850024006030213C0780046C
+:1037100094E20006A482001694E3000600C310237E
+:103720003042FFFF0045102B384200011440FFF8E3
+:10373000A48300168F8500243C03800034620400BB
+:103740008CA40020AF820020AC6400388CA200243E
+:10375000AC62003C3C020005AC62003003E00008B3
+:10376000ACA000048F8400243C0300068C8200047B
+:1037700000021140004310253C038000AC62003081
+:103780000000000000000000000000008C6200004B
+:10379000304200101040FFFD34620400AC80000491
+:1037A00003E00008AF8200208F86002427BDFFE0E1
+:1037B000AFB10014AFB00010AFBF00188CC300044D
+:1037C0008CC500248F820020309000FF94C4001A22
+:1037D00024630001244200202484000124A7002047
+:1037E000ACC30004AF820020A4C4001AACC70024FC
+:1037F00004A100060000882104E2000594C2001A1A
+:103800008CC2002024420001ACC2002094C2001AE5
+:1038100094C300282E040001004310262C4200010E
+:10382000004410245040000594C2001A24020001F4
+:10383000ACC2000894C2001A94C300280010202BC8
+:10384000004310262C4200010044102514400007BC
+:10385000000000008CC20008144000042402001084
+:103860008CC300041462000F8F8500240E000DA786
+:10387000241100018F820024944300289442001AEE
+:1038800014430003000000000E000D1300000000B0
+:10389000160000048F8500240E000D840000000037
+:1038A0008F85002494A2001E94A4001C24420001D1
+:1038B0003043FFFF14640002A4A2001EA4A0001E57
+:1038C0001200000A3C02800494A2001494A3001A7F
+:1038D0003042000F00021500006218253C028000F3
+:1038E000AC4300A00A000E1EACA0000894420006E3
+:1038F00094A3001A8CA40000A4A200160062102356
+:103900003042FFFF0044102B384200011040000DF0
+:1039100002201021006030213C07800494E2000660
+:10392000A4A2001694E3000600C310233042FFFF58
+:103930000044102B384200011440FFF8A4A30016E5
+:10394000022010218FBF00188FB100148FB000101B
+:1039500003E0000827BD002003E00008000000008D
+:103960008F82002C3C03000600021140004310250A
+:103970003C038000AC62003000000000000000004A
+:10398000000000008C620000304200101040FFFD7B
+:1039900034620400AF82002803E00008AF80002CEE
+:1039A00003E000080000102103E000080000000010
+:1039B0003084FFFF30A5FFFF0000182110800007B2
+:1039C000000000003082000110400002000420428C
+:1039D000006518210A000E3D0005284003E000089C
+:1039E0000060102110C0000624C6FFFF8CA200005A
+:1039F00024A50004AC8200000A000E4724840004C1
+:103A000003E000080000000010A0000824A3FFFF4E
+:103A1000AC86000000000000000000002402FFFF50
+:103A20002463FFFF1462FFFA2484000403E000080B
+:103A3000000000003C0280083442008024030001A2
+:103A4000AC43000CA4430010A4430012A443001490
+:103A500003E00008A44300168F82002427BDFFD88E
+:103A6000AFB3001CAFB20018AFB10014AFB000107C
+:103A7000AFBF00208C47000C248200802409FF8007
+:103A80003C08800E3043007F008080213C0A80008B
+:103A9000004920240068182130B100FF30D200FF17
+:103AA00010E000290000982126020100AD44002CFE
+:103AB000004928243042007F004820219062000005
+:103AC00024030050304200FF1443000400000000B3
+:103AD000AD45002C948200EA3053FFFF0E000D84A8
+:103AE000000000008F8200248F83002000112C0032
+:103AF0009442001E001224003484000100A22825F4
+:103B00003C02400000A22825AC7000008FBF0020BE
+:103B1000AC6000048FB20018AC7300088FB10014C1
+:103B2000AC60000C8FB3001CAC6400108FB00010B0
+:103B3000AC60001424040001AC60001827BD00280C
+:103B40000A000DB8AC65001C8FBF00208FB3001CAD
+:103B50008FB200188FB100148FB0001003E000087E
+:103B600027BD00283C06800034C201009043000FAE
+:103B7000240200101062000E2865001110A000073A
+:103B800024020012240200082405003A10620006F4
+:103B90000000302103E0000800000000240500358B
+:103BA0001462FFFC000030210A000E6400000000D7
+:103BB0008CC200748F83FF9424420FA003E000089E
+:103BC000AC62000C27BDFFE8AFBF00100E0003423F
+:103BD000240500013C0480088FBF0010240200016E
+:103BE00034830080A462001227BD00182402000163
+:103BF00003E00008A080001A27BDFFE0AFB2001864
+:103C0000AFB10014AFB00010AFBF001C30B2FFFF67
+:103C10000E000332008088213C028008345000806E
+:103C20009202000924030004304200FF1443000CF8
+:103C30003C028008124000082402000A0E000E5BBD
+:103C400000000000920200052403FFFE0043102440
+:103C5000A202000524020012A20200093C02800810
+:103C600034420080022020210E00033DA0400027A6
+:103C700016400003022020210E000EBF00000000AD
+:103C800002202021324600FF8FBF001C8FB2001897
+:103C90008FB100148FB00010240500380A000E64A4
+:103CA00027BD002027BDFFE0AFBF001CAFB200184A
+:103CB000AFB10014AFB000100E00033200808021BD
+:103CC0000E000E5B000000003C02800834450080BE
+:103CD00090A2000924120018305100FF1232000394
+:103CE0000200202124020012A0A2000990A20005D7
+:103CF0002403FFFE004310240E00033DA0A2000594
+:103D00000200202124050020163200070000302187
+:103D10008FBF001C8FB200188FB100148FB000103D
+:103D20000A00034227BD00208FBF001C8FB200187D
+:103D30008FB100148FB00010240500390A000E6402
+:103D400027BD002027BDFFE83C028000AFB0001077
+:103D5000AFBF0014344201009442000C2405003629
+:103D60000080802114400012304600FF0E00033214
+:103D7000000000003C02800834420080240300124E
+:103D8000A043000990430005346300100E000E5B51
+:103D9000A04300050E00033D020020210200202167
+:103DA0000E000342240500200A000F3C0000000022
+:103DB0000E000E64000000000E00033202002021FD
+:103DC0003C0280089043001B2405FF9F0200202135
+:103DD000006518248FBF00148FB00010A043001B93
+:103DE0000A00033D27BD001827BDFFE0AFBF001844
+:103DF000AFB10014AFB0001030B100FF0E000332BD
+:103E0000008080213C02800824030012344200809C
+:103E10000E000E5BA04300090E00033D02002021AE
+:103E200002002021022030218FBF00188FB1001422
+:103E30008FB00010240500350A000E6427BD002055
+:103E40003C0480089083000E9082000A1443000B0B
+:103E5000000028218F82FF942403005024050001D4
+:103E600090420000304200FF1443000400000000B4
+:103E70009082000E24420001A082000E03E00008A0
+:103E800000A010213C0380008C6201F80440FFFE7A
+:103E900024020002AC6401C0A06201C43C02100014
+:103EA00003E00008AC6201F827BDFFE0AFB20018E4
+:103EB0003C128008AFB10014AFBF001CAFB00010BF
+:103EC00036510080922200092403000A304200FF8C
+:103ED0001443003E000000008E4300048E22003890
+:103EE000506200808FBF001C92220000240300500B
+:103EF000304200FF144300253C0280008C42014008
+:103F00008E4300043642010002202821AC43001CED
+:103F10009622005C8E2300383042FFFF00021040E2
+:103F200000621821AE23001C8E4300048E2400384A
+:103F30009622005C006418233042FFFF0003184300
+:103F4000000210400043102A10400006000000004C
+:103F50008E4200048E230038004310230A000FAA6B
+:103F6000000220439622005C3042FFFF0002204006
+:103F70003C0280083443010034420080ACA4002C91
+:103F8000A040002424020001A062000C0E000F5E7D
+:103F900000000000104000538FBF001C3C02800056
+:103FA0008C4401403C0380008C6201F80440FFFE19
+:103FB00024020002AC6401C0A06201C43C021000F3
+:103FC000AC6201F80A0010078FBF001C92220009A2
+:103FD00024030010304200FF144300043C02800020
+:103FE0008C4401400A000FEE0000282192220009B3
+:103FF00024030016304200FF14430006240200147C
+:10400000A22200093C0280008C4401400A001001F9
+:104010008FBF001C8E2200388E23003C00431023EB
+:10402000044100308FBF001C92220027244200016F
+:10403000A2220027922200272C42000414400016DE
+:104040003C1080009222000924030004304200FF4B
+:10405000144300093C0280008C4401408FBF001CC7
+:104060008FB200188FB100148FB000102405009398
+:104070000A000ECC27BD00208C440140240500938B
+:104080008FBF001C8FB200188FB100148FB00010CA
+:104090000A000F4827BD00208E0401400E000332A5
+:1040A000000000008E4200042442FFFFAE420004E4
+:1040B0008E22003C2442FFFFAE22003C0E00033D56
+:1040C0008E0401408E0401408FBF001C8FB2001887
+:1040D0008FB100148FB00010240500040A000342C1
+:1040E00027BD00208FB200188FB100148FB00010D0
+:1040F00003E0000827BD00203C0680008CC2018838
+:104100003C038008346500809063000E00021402B6
+:10411000304400FF306300FF1464000E3C0280084E
+:1041200090A20026304200FF104400098F82FF94C5
+:10413000A0A400262403005090420000304200FF5B
+:1041400014430006000000000A0005A18CC4018091
+:104150003C02800834420080A044002603E00008AE
+:104160000000000027BDFFE030E700FFAFB20018FD
+:10417000AFBF001CAFB10014AFB0001000809021A1
+:1041800014E0000630C600FF000000000000000D33
+:10419000000000000A001060240001163C038008A3
+:1041A0009062000E304200FF14460023346200800B
+:1041B00090420026304200FF1446001F000000001D
+:1041C0009062000F304200FF1446001B0000000008
+:1041D0009062000A304200FF144600038F90FF9463
+:1041E0000000000D8F90FF948F82FF983C1180009B
+:1041F000AE05003CAC450000A066000A0E0003328C
+:104200008E240100A20000240E00033D8E24010034
+:104210003C0380008C6201F80440FFFE240200028F
+:10422000AC7201C0A06201C43C021000AC6201F893
+:104230000A0010618FBF001C000000000000000D8C
+:10424000000000002400013F8FBF001C8FB2001847
+:104250008FB100148FB0001003E0000827BD0020CC
+:104260008F83FF943C0280008C44010034420100A3
+:104270008C65003C9046001B0A00102724070001B3
+:104280003C0280089043000E9042000A0043102632
+:10429000304200FF03E000080002102B27BDFFE0C2
+:1042A0003C028008AFB10014AFB00010AFBF0018DF
+:1042B0003450008092020005240300303042003068
+:1042C00014430085008088218F8200248C42000CDA
+:1042D000104000828FBF00180E000D840000000007
+:1042E0008F860020ACD100009202000892030009E2
+:1042F000304200FF00021200306300FF004310252F
+:10430000ACC200049202004D000216000002160327
+:1043100004410005000000003C0308008C630048D5
+:104320000A00109F3C1080089202000830420040B2
+:10433000144000030000182192020027304300FFC0
+:104340003C108008361100809222004D00031E00B0
+:10435000304200FF0002140000621825ACC30008C0
+:104360008E2400308F820024ACC4000C8E250034D3
+:104370009443001E3C02C00BACC50010006218251F
+:104380008E22003800002021ACC200148E22003C96
+:10439000ACC200180E000DB8ACC3001C8E020004A5
+:1043A0008F8400203C058000AC8200008E2200201B
+:1043B000AC8200048E22001CAC8200088E220058C1
+:1043C0008CA3007400431021AC82000C8E22002CC0
+:1043D000AC8200108E2200408E23004400021400A4
+:1043E00000431025AC8200149222004D240300806B
+:1043F000304200FF1443000400000000AC800018AD
+:104400000A0010E38F8200248E23000C2402000196
+:104410001062000E2402FFFF92220008304200408A
+:104420001440000A2402FFFF8E23000C8CA20074AB
+:10443000006218233C0208000062102414400002AD
+:10444000000028210060282100051043AC820018DC
+:104450008F820024000020219443001E3C02C00CE7
+:10446000006218258F8200200E000DB8AC43001C9E
+:104470003C038008346201008C4200008F850020DC
+:10448000346300808FBF0018ACA20000ACA0000411
+:104490008C6400488F8200248FB10014ACA4000803
+:1044A000ACA0000CACA00010906300059446001E68
+:1044B0003C02400D00031E0000C23025ACA30014D6
+:1044C0008FB00010ACA0001824040001ACA6001CA2
+:1044D0000A000DB827BD00208FBF00188FB100144F
+:1044E0008FB0001003E0000827BD00203C028000D0
+:1044F0009443007C3C02800834460100308400FF75
+:104500003065FFFF2402000524A34650A0C4000C20
+:104510005482000C3065FFFF90C2000D2C42000752
+:104520001040000724A30A0090C3000D24020014C9
+:104530000062100400A210210A00111F3045FFFF85
+:104540003065FFFF3C0280083442008003E0000831
+:10455000A44500143C03800834680080AD05003891
+:10456000346701008CE2001C308400FF00A210239D
+:104570001840000330C600FF24A2FFFCACE2001C80
+:1045800030820001504000083C0380088D02003C4E
+:1045900000A2102304410012240400058C620004D0
+:1045A00010A2000F3C0380088C62000414A2001EBD
+:1045B000000000003C0208008C4200D8304200207D
+:1045C000104000093C0280083462008090630008BB
+:1045D0009042004C144300043C0280082404000470
+:1045E0000A00110900000000344300803442010039
+:1045F000A040000C24020001A462001410C0000AB4
+:104600003C0280008C4401003C0380008C6201F875
+:104610000440FFFE24020002AC6401C0A06201C499
+:104620003C021000AC6201F803E00008000000004A
+:1046300027BDFFE800A61823AFBF00101860008058
+:10464000308800FF3C02800834470080A0E000244E
+:1046500034440100A0E000278C82001C00A210233B
+:1046600004400056000000008CE2003C94E3005C33
+:104670008CE4002C004530233063FFFF00C3182179
+:104680000083202B1080000400E018218CE2002C15
+:104690000A00117800A2102194E2005C3042FFFF72
+:1046A00000C2102100A21021AC62001C3C02800854
+:1046B000344400809482005C8C83001C3042FFFFF5
+:1046C0000002104000A210210043102B10400004F3
+:1046D000000000008C82001C0A00118B3C06800840
+:1046E0009482005C3042FFFF0002104000A21021C3
+:1046F0003C06800834C3010034C70080AC82001C33
+:10470000A060000CACE500388C62001C00A21023F5
+:104710001840000224A2FFFCAC62001C3102000120
+:10472000104000083C0380088CE2003C00A21023EB
+:1047300004410012240400058CC2000410A20010E1
+:104740008FBF00108C62000414A2004F8FBF0010B6
+:104750003C0208008C4200D8304200201040000A81
+:104760003C02800834620080906300089042004C54
+:10477000144300053C028008240400048FBF00108D
+:104780000A00110927BD001834430080344201009B
+:10479000A040000C24020001A46200143C0280002E
+:1047A0008C4401003C0380008C6201F80440FFFE51
+:1047B000240200020A0011D8000000008CE2001C54
+:1047C000004610230043102B54400001ACE5001CB0
+:1047D00094E2005C3042FFFF0062102B144000079F
+:1047E0002402000294E2005C8CE3001C3042FFFFD4
+:1047F00000621821ACE3001C24020002ACE5003882
+:104800000E000F5EA082000C1040001F8FBF001032
+:104810003C0280008C4401003C0380008C6201F863
+:104820000440FFFE24020002AC6401C0A06201C487
+:104830003C021000AC6201F80A0011F08FBF0010BA
+:1048400031020010104000108FBF00103C028008A1
+:10485000344500808CA3001C94A2005C00661823E1
+:104860003042FFFF006218213C023FFF3444FFFF4B
+:104870000083102B544000010080182100C3102138
+:10488000ACA2001C8FBF001003E0000827BD001879
+:1048900027BDFFE800C0402100A63023AFBF0010B5
+:1048A00018C00026308A00FF3C028008344900808E
+:1048B0008D24001C8D23002C008820230064182BDD
+:1048C0001060000F344701008CE2002000461021E8
+:1048D000ACE200208CE200200044102B1440000BBE
+:1048E0003C023FFF8CE2002000441023ACE2002099
+:1048F0009522005C3042FFFF0A0012100082202146
+:10490000ACE00020008620213C023FFF3443FFFF43
+:104910000064102B54400001006020213C028008FC
+:104920003442008000851821AC43001CA0400024C4
+:10493000A04000270A0012623C03800831420010A8
+:10494000104000433C0380083C06800834C40080CB
+:104950008C82003C004810235840003E34660080A2
+:104960009082002424420001A0820024908200242E
+:104970003C0308008C630024304200FF0043102BEE
+:10498000144000688FBF001034C201008C42001C2C
+:1049900000A2102318400063000000008CC3000434
+:1049A0009482005C006818233042FFFF0003184324
+:1049B000000210400043102A1040000500000000D3
+:1049C0008CC20004004810230A0012450002104364
+:1049D0009482005C3042FFFF000210403C068008D9
+:1049E000AC82002C34C5008094A2005C8CA4002C06
+:1049F00094A3005C3042FFFF00021040008220219F
+:104A00003063FFFF0083202101041021ACA2001CB1
+:104A10008CC2000434C60100ACC2001C2402000297
+:104A20000E000F5EA0C2000C1040003E8FBF0010B1
+:104A30003C0280008C4401003C0380008C6201F841
+:104A40000440FFFE240200020A001292000000004F
+:104A500034660080ACC50038346401008C82001CD0
+:104A600000A210231840000224A2FFFCAC82001C0C
+:104A7000314200015040000A3C0380088CC2003CD7
+:104A800000A2102304430014240400058C620004D7
+:104A900014A200033C0380080A00128424040005C9
+:104AA0008C62000414A2001F8FBF00103C0208009B
+:104AB0008C4200D8304200201040000A3C0280089E
+:104AC00034620080906300089042004C144300055B
+:104AD0003C028008240400048FBF00100A00110962
+:104AE00027BD00183443008034420100A040000C70
+:104AF00024020001A46200143C0280008C440100E6
+:104B00003C0380008C6201F80440FFFE2402000296
+:104B1000AC6401C0A06201C43C021000AC6201F8A8
+:104B20008FBF001003E0000827BD001827BDFFE875
+:104B30003C0A8008AFBF0010354900808D22003C40
+:104B400000C04021308400FF004610231840009D23
+:104B500030E700FF354701002402000100A63023A2
+:104B6000A0E0000CA0E0000DA522001418C0002455
+:104B7000308200108D23001C8D22002C0068182329
+:104B80000043102B1040000F000000008CE20020BA
+:104B900000461021ACE200208CE200200043102BE4
+:104BA0001440000B3C023FFF8CE200200043102326
+:104BB000ACE200209522005C3042FFFF0A0012C1E7
+:104BC00000621821ACE00020006618213C023FFF83
+:104BD0003446FFFF00C3102B5440000100C01821D1
+:104BE0003C0280083442008000651821AC43001C60
+:104BF000A0400024A04000270A00130F3C038008B7
+:104C0000104000403C0380088D22003C00481023E7
+:104C10005840003D34670080912200242442000166
+:104C2000A1220024912200243C0308008C6300246C
+:104C3000304200FF0043102B1440009A8FBF001039
+:104C40008CE2001C00A21023184000960000000017
+:104C50008D4300049522005C006818233042FFFF5A
+:104C600000031843000210400043102A10400005C2
+:104C7000012020218D420004004810230A0012F276
+:104C8000000210439522005C3042FFFF00021040FA
+:104C90003C068008AC82002C34C5008094A2005CE5
+:104CA0008CA4002C94A3005C3042FFFF0002104053
+:104CB000008220213063FFFF0083182101031021AF
+:104CC000ACA2001C8CC2000434C60100ACC2001CA3
+:104CD000240200020E000F5EA0C2000C1040007102
+:104CE0008FBF00103C0280008C4401003C03800018
+:104CF0008C6201F80440FFFE240200020A0013390E
+:104D00000000000034670080ACE500383466010024
+:104D10008CC2001C00A210231840000224A2FFFC39
+:104D2000ACC2001C30820001504000083C038008E7
+:104D30008CE2003C00A2102304430051240400052F
+:104D40008C62000410A2003E3C0380088C620004C8
+:104D500054A200548FBF00103C0208008C4200D8BF
+:104D600030420020104000063C028008346200807F
+:104D7000906300089042004C104300403C028008C1
+:104D80003443008034420100A040000C24020001A2
+:104D9000A46200143C0280008C4401003C038000AB
+:104DA0008C6201F80440FFFE24020002AC6401C0E2
+:104DB000A06201C43C021000AC6201F80A00137743
+:104DC0008FBF001024020005A120002714E2000A72
+:104DD0003C038008354301009062000D2C42000620
+:104DE000504000053C0380089062000D2442000101
+:104DF000A062000D3C03800834670080ACE50038F9
+:104E0000346601008CC2001C00A21023184000026E
+:104E100024A2FFFCACC2001C308200015040000AFA
+:104E20003C0380088CE2003C00A2102304410014E3
+:104E3000240400058C62000414A200033C038008D3
+:104E40000A00136E240400058C62000414A20015ED
+:104E50008FBF00103C0208008C4200D83042002076
+:104E60001040000A3C028008346200809063000811
+:104E70009042004C144300053C02800824040004C6
+:104E80008FBF00100A00110927BD001834430080AD
+:104E900034420100A040000C24020001A46200146E
+:104EA0008FBF001003E0000827BD00183C0B8008EE
+:104EB00027BDFFE83C028000AFBF00103442010074
+:104EC000356A00809044000A356901008C45001461
+:104ED0008D4800389123000C308400FF0105102319
+:104EE0001C4000B3306700FF2CE20006504000B1C8
+:104EF0008FBF00102402000100E2300430C2000322
+:104F00005440000800A8302330C2000C144000A117
+:104F100030C20030144000A38FBF00100A00143BC1
+:104F20000000000018C00024308200108D43001CD7
+:104F30008D42002C006818230043102B1040000FF6
+:104F4000000000008D22002000461021AD2200202C
+:104F50008D2200200043102B1440000B3C023FFF29
+:104F60008D22002000431023AD2200209542005CDA
+:104F70003042FFFF0A0013AF00621821AD2000206D
+:104F8000006618213C023FFF3446FFFF00C3102B90
+:104F90005440000100C018213C02800834420080C7
+:104FA00000651821AC43001CA0400024A04000274D
+:104FB0000A0013FD3C038008104000403C038008B9
+:104FC0008D42003C004810231840003D34670080AB
+:104FD0009142002424420001A14200249142002475
+:104FE0003C0308008C630024304200FF0043102B78
+:104FF000144000708FBF00108D22001C00A21023EF
+:105000001840006C000000008D6300049542005CB5
+:10501000006818233042FFFF0003184300021040CD
+:105020000043102A10400005014020218D62000439
+:10503000004810230A0013E0000210439542005C70
+:105040003042FFFF000210403C068008AC82002C7A
+:1050500034C5008094A2005C8CA4002C94A3005C56
+:105060003042FFFF00021040008220213063FFFF2A
+:105070000083182101031021ACA2001C8CC2000483
+:1050800034C60100ACC2001C240200020E000F5EF8
+:10509000A0C2000C104000478FBF00103C028000EF
+:1050A0008C4401003C0380008C6201F80440FFFE48
+:1050B000240200020A00142D000000003467008062
+:1050C000ACE50038346601008CC2001C00A210233D
+:1050D0001840000224A2FFFCACC2001C3082000178
+:1050E0005040000A3C0380088CE2003C00A21023E0
+:1050F00004430014240400058C62000414A200037D
+:105100003C0380080A00141F240400058C6200047C
+:1051100014A200288FBF00103C0208008C4200D867
+:10512000304200201040000A3C02800834620080B7
+:10513000906300089042004C144300053C02800834
+:10514000240400048FBF00100A00110927BD0018B5
+:105150003443008034420100A040000C24020001CE
+:10516000A46200143C0280008C4401003C038000D7
+:105170008C6201F80440FFFE24020002AC6401C00E
+:10518000A06201C43C021000AC6201F80A00143BAA
+:105190008FBF00108FBF0010010030210A00115A8C
+:1051A00027BD0018010030210A00129927BD001800
+:1051B0008FBF001003E0000827BD00183C038008E3
+:1051C0003464010024020003A082000C8C620004FD
+:1051D00003E00008AC82001C3C05800834A300807A
+:1051E0009062002734A501002406004324420001F8
+:1051F000A0620027906300273C0208008C42004810
+:10520000306300FF146200043C07602194A500EAAB
+:105210000A00090130A5FFFF03E0000800000000BC
+:1052200027BDFFE8AFBF00103C0280000E00144411
+:105230008C4401803C02800834430100A060000CD3
+:105240008C4200048FBF001027BD001803E0000847
+:10525000AC62001C27BDFFE03C028008AFBF001815
+:10526000AFB10014AFB000103445008034460100E7
+:105270003C0880008D09014090C3000C8CA4003CC8
+:105280008CA200381482003B306700FF9502007C3E
+:1052900090A30027146000093045FFFF2402000599
+:1052A00054E200083C04800890C2000D2442000132
+:1052B000A0C2000D0A00147F3C048008A0C0000DAD
+:1052C0003C048008348201009042000C2403000555
+:1052D000304200FF1443000A24A205DC348300801E
+:1052E000906200272C4200075040000524A20A00CB
+:1052F00090630027240200140062100400A2102111
+:105300003C108008361000803045FFFF012020212E
+:105310000E001444A60500149602005C8E030038AB
+:105320003C1180003042FFFF000210400062182153
+:10533000AE03001C0E0003328E24014092020025B1
+:1053400034420040A20200250E00033D8E2401409D
+:105350008E2401403C0380008C6201F80440FFFE73
+:1053600024020002AC6401C0A06201C43C0210002F
+:10537000AC6201F88FBF00188FB100148FB000101D
+:1053800003E0000827BD00203C0360103C02080039
+:1053900024420174AC62502C8C6250003C048000AA
+:1053A00034420080AC6250003C0208002442547C2D
+:1053B0003C010800AC2256003C020800244254384C
+:1053C0003C010800AC2256043C020002AC840008F8
+:1053D000AC82000C03E000082402000100A0302190
+:1053E0003C1C0800279C56083C0200023C050400B7
+:1053F00000852826008220260004102B2CA5000101
+:105400002C840001000210803C0308002463560035
+:105410000085202500431821108000030000102182
+:10542000AC6600002402000103E000080000000058
+:105430003C1C0800279C56083C0200023C05040066
+:1054400000852826008220260004102B2CA50001B0
+:105450002C840001000210803C03080024635600E5
+:105460000085202500431821108000050000102130
+:105470003C02080024425438AC62000024020001BF
+:1054800003E00008000000003C0200023C030400AE
+:1054900000821026008318262C4200012C63000194
+:1054A000004310251040000B000028213C1C080080
+:1054B000279C56083C0380008C62000824050001EC
+:1054C00000431025AC6200088C62000C00441025DB
+:1054D000AC62000C03E0000800A010213C1C080096
+:1054E000279C56083C0580008CA3000C0004202754
+:1054F000240200010064182403E00008ACA3000C9F
+:105500003C020002148200063C0560008CA208D018
+:105510002403FFFE0043102403E00008ACA208D0DF
+:105520003C02040014820005000000008CA208D098
+:105530002403FFFD00431024ACA208D003E00008C0
+:10554000000000003C02601A344200108C430080CE
+:1055500027BDFFF88C440084AFA3000093A3000094
+:10556000240200041462001AAFA4000493A20001F4
+:105570001040000797A300023062FFFC3C0380004C
+:10558000004310218C4200000A001536AFA200042F
+:105590003062FFFC3C03800000431021AC4400005B
+:1055A000A3A000003C0560008CA208D02403FFFEED
+:1055B0003C04601A00431024ACA208D08FA300045E
+:1055C0008FA2000034840010AC830084AC82008081
+:1055D00003E0000827BD000827BDFFE8AFBF0010AB
+:1055E0003C1C0800279C56083C0280008C43000CA1
+:1055F0008C420004004318243C0200021060001496
+:10560000006228243C0204003C04000210A00005B3
+:10561000006210243C0208008C4256000A00155B10
+:1056200000000000104000073C0404003C02080099
+:105630008C4256040040F809000000000A00156082
+:10564000000000000000000D3C1C0800279C5608CC
+:105650008FBF001003E0000827BD0018800802403B
+:1056600080080100800800808008000000000C8095
+:105670000000320008000E9808000EF408000F88A1
+:1056800008001028080010748008010080080080BD
+:10569000800800000A000028000000000000000050
+:1056A0000000000D6370362E322E316200000000C3
+:1056B00006020104000000000000000000000000DD
+:1056C000000000000000000038003C000000000066
+:1056D00000000000000000000000000000000020AA
+:1056E00000000000000000000000000000000000BA
+:1056F00000000000000000000000000000000000AA
+:10570000000000000000000021003800000000013F
+:105710000000002B000000000000000400030D400A
+:105720000000000000000000000000000000000079
+:105730000000000000000000100000030000000056
+:105740000000000D0000000D3C020800244259AC8E
+:105750003C03080024635BF4AC4000000043202BB2
+:105760001480FFFD244200043C1D080037BD9FFC4F
+:1057700003A0F0213C100800261000A03C1C0800EB
+:10578000279C59AC0E0002F6000000000000000D3E
+:1057900027BDFFB4AFA10000AFA20004AFA3000873
+:1057A000AFA4000CAFA50010AFA60014AFA700185F
+:1057B000AFA8001CAFA90020AFAA0024AFAB0028FF
+:1057C000AFAC002CAFAD0030AFAE0034AFAF00389F
+:1057D000AFB8003CAFB90040AFBC0044AFBF004819
+:1057E0000E000820000000008FBF00488FBC00445E
+:1057F0008FB900408FB8003C8FAF00388FAE0034B7
+:105800008FAD00308FAC002C8FAB00288FAA002406
+:105810008FA900208FA8001C8FA700188FA6001446
+:105820008FA500108FA4000C8FA300088FA2000486
+:105830008FA1000027BD004C3C1B60188F7A5030B0
+:10584000377B502803400008AF7A000000A01821E1
+:1058500000801021008028213C0460003C0760008B
+:105860002406000810600006348420788C42000072
+:10587000ACE220088C63000003E00008ACE3200CDD
+:105880000A000F8100000000240300403C02600079
+:1058900003E00008AC4320003C0760008F86000452
+:1058A0008CE520740086102100A2182B14600007DC
+:1058B000000028218F8AFDA024050001A1440013C7
+:1058C0008F89000401244021AF88000403E0000810
+:1058D00000A010218F84FDA08F8500049086001306
+:1058E00030C300FF00A31023AF82000403E00008D0
+:1058F000A08000138F84FDA027BDFFE8AFB000108B
+:10590000AFBF001490890011908700112402002875
+:10591000312800FF3906002830E300FF2485002CE1
+:105920002CD00001106200162484001C0E00006EB2
+:10593000000000008F8FFDA03C05600024020204DF
+:1059400095EE003E95ED003C000E5C0031ACFFFF93
+:10595000016C5025ACAA2010520000012402000462
+:10596000ACA22000000000000000000000000000C9
+:105970008FBF00148FB0001003E0000827BD00188F
+:105980000A0000A6000028218F85FDA027BDFFD8B2
+:10599000AFBF0020AFB3001CAFB20018AFB100140E
+:1059A000AFB000100080982190A4001124B0001C1A
+:1059B00024B1002C308300FF386200280E000090D4
+:1059C0002C5200010E00009800000000020020216F
+:1059D0001240000202202821000028210E00006E43
+:1059E000000000008F8DFDA03C0880003C05600099
+:1059F00095AC003E95AB003C02683025000C4C0095
+:105A0000316AFFFF012A3825ACA7201024020202C8
+:105A1000ACA6201452400001240200028FBF0020D7
+:105A20008FB3001C8FB200188FB100148FB000101C
+:105A300027BD002803E00008ACA2200027BDFFE03E
+:105A4000AFB20018AFB10014AFB00010AFBF001C70
+:105A50003C1160008E2320748F82000430D0FFFF41
+:105A600030F2FFFF1062000C2406008F0E00006E63
+:105A7000000000003C06801F0010440034C5FF00F9
+:105A80000112382524040002AE2720100000302126
+:105A9000AE252014AE2420008FBF001C8FB200184A
+:105AA0008FB100148FB0001000C0102103E0000877
+:105AB00027BD002027BDFFE0AFB0001030D0FFFFB2
+:105AC000AFBF0018AFB100140E00006E30F1FFFF41
+:105AD00000102400009180253C036000AC70201071
+:105AE0008FBF00188FB100148FB000102402000483
+:105AF000AC62200027BD002003E000080000102158
+:105B000027BDFFE03C046018AFBF0018AFB1001420
+:105B1000AFB000108C8850002403FF7F34028071E6
+:105B20000103382434E5380C241F00313C1980006F
+:105B3000AC8550003C11800AAC8253BCAF3F0008DA
+:105B40000E00054CAF9100400E00050A3C116000AC
+:105B50000E00007D000000008E3008083C0F570941
+:105B60002418FFF00218602435EEE00035EDF00057
+:105B7000018E5026018D58262D4600012D69000109
+:105B8000AF86004C0E000D09AF8900503C06601630
+:105B90008CC700003C0860148D0500A03C03FFFF8B
+:105BA00000E320243C02535300052FC2108200550D
+:105BB00034D07C00960201F2A780006C10400003F4
+:105BC000A780007C384B1E1EA78B006C960201F844
+:105BD000104000048F8D0050384C1E1EA78C007C96
+:105BE0008F8D005011A000058F83004C240E0020E3
+:105BF000A78E007CA78E006C8F83004C1060000580
+:105C00009785007C240F0020A78F007CA78F006C55
+:105C10009785007C2CB8008153000001240500808A
+:105C20009784006C2C91040152200001240404008C
+:105C30001060000B3C0260008FBF00188FB1001491
+:105C40008FB0001027BD0020A784006CA785007CC2
+:105C5000A380007EA780007403E00008A780009264
+:105C60008C4704382419103C30FFFFFF13F9000360
+:105C700030A8FFFF1100004624030050A380007EDF
+:105C80009386007E50C00024A785007CA780007CFE
+:105C90009798007CA780006CA7800074A780009272
+:105CA0003C010800AC3800800E00078700000000AF
+:105CB0003C0F60008DED0808240EFFF03C0B600ED9
+:105CC000260C0388356A00100000482100002821B6
+:105CD00001AE20243C105709AF8C0010AF8A004859
+:105CE000AF89001810900023AF8500148FBF0018F3
+:105CF0008FB100148FB0001027BD002003E0000812
+:105D0000AF80005400055080014648218D260004D4
+:105D10000A00014800D180219798007CA784006C7C
+:105D2000A7800074A78000923C010800AC38008076
+:105D30000E000787000000003C0F60008DED080892
+:105D4000240EFFF03C0B600E260C0388356A001011
+:105D5000000048210000282101AE20243C105709F2
+:105D6000AF8C0010AF8A0048AF8900181490FFDF95
+:105D7000AF85001424110001AF9100548FBF0018AB
+:105D80008FB100148FB0001003E0000827BD002081
+:105D90000A00017BA383007E3083FFFF8F880040D1
+:105DA0008F87003C000321403C0580003C020050EE
+:105DB000008248253C0660003C0A010034AC040027
+:105DC0008CCD08E001AA58241160000500000000F5
+:105DD0008CCF08E024E7000101EA7025ACCE08E092
+:105DE0008D19001001805821ACB900388D180014AD
+:105DF000ACB8003CACA9003000000000000000007E
+:105E00000000000000000000000000000000000092
+:105E100000000000000000003C0380008C640000D3
+:105E2000308200201040FFFD3C0F60008DED08E047
+:105E30003C0E010001AE18241460FFE100000000D8
+:105E4000AF87003C03E00008AF8B00588F8500400F
+:105E5000240BFFF03C06800094A7001A8CA90024B4
+:105E600030ECFFFF000C38C000EB5024012A402129
+:105E7000ACC8003C8CA400248CC3003C00831023DD
+:105E800018400033000000008CAD002025A2000166
+:105E90003C0F0050ACC2003835EE00103C068000CC
+:105EA000ACCE003000000000000000000000000048
+:105EB00000000000000000000000000000000000E2
+:105EC000000000003C0480008C9900003338002062
+:105ED0001300FFFD30E20008104000173C0980006D
+:105EE0008C880408ACA800108C83040CACA30014AC
+:105EF0003C1900203C188000AF19003094AE001807
+:105F000094AF001C01CF3021A4A6001894AD001A54
+:105F100025A70001A4A7001A94AB001A94AC001E98
+:105F2000118B00030000000003E0000800000000E7
+:105F300003E00008A4A0001A8D2A0400ACAA0010F7
+:105F40008D240404ACA400140A0002183C1900209B
+:105F50008CA200200A0002003C0F00500A0001EE53
+:105F60000000000027BDFFE8AFBF00100E000232A6
+:105F7000000000008F8900408FBF00103C038000AC
+:105F8000A520000A9528000A9527000427BD0018BF
+:105F90003105FFFF30E6000F0006150000A22025A6
+:105FA00003E00008AC6400803C0508008CA50020DC
+:105FB0008F83000C27BDFFE8AFB00010AFBF001407
+:105FC00010A300100000802124040001020430040A
+:105FD00000A6202400C3102450440006261000010F
+:105FE000001018802787FDA41480000A006718217C
+:105FF000261000012E0900025520FFF38F83000CAC
+:10600000AF85000C8FBF00148FB0001003E00008B4
+:1060100027BD00188C6800003C058000ACA8002457
+:106020000E000234261000013C0508008CA500205B
+:106030000A0002592E0900022405000100851804F7
+:106040003C0408008C84002027BDFFC8AFBF00348B
+:1060500000831024AFBE0030AFB7002CAFB60028CD
+:10606000AFB50024AFB40020AFB3001CAFB200182E
+:10607000AFB1001410400051AFB000108F84004049
+:10608000948700069488000A00E8302330D5FFFF8B
+:1060900012A0004B8FBF0034948B0018948C000A20
+:1060A000016C50233142FFFF02A2482B1520000251
+:1060B00002A02021004020212C8F000515E00002C5
+:1060C00000809821241300040E0001C102602021E9
+:1060D0008F87004002609021AF80004494F4000A52
+:1060E000026080211260004E3291FFFF3C1670006A
+:1060F0003C1440003C1E20003C1760008F99005863
+:106100008F380000031618241074004F0283F82BF8
+:1061100017E0003600000000107E00478F86004424
+:1061200014C0003A2403000102031023022320219B
+:106130003050FFFF1600FFF13091FFFF8F870040C6
+:106140003C1100203C108000AE11003094EB000A9E
+:106150003C178000024B5021A4EA000A94E9000A8F
+:1061600094E800043123FFFF3106000F00062D00E4
+:106170000065F025AEFE008094F3000A94F6001846
+:1061800012D30036001221408CFF00148CF4001052
+:1061900003E468210000C02101A4782B029870213B
+:1061A00001CF6021ACED0014ACEC001002B238233A
+:1061B00030F5FFFF16A0FFB88F8400408FBF00347A
+:1061C0008FBE00308FB7002C8FB600288FB500240B
+:1061D0008FB400208FB3001C8FB200188FB1001451
+:1061E0008FB0001003E0000827BD00381477FFCC03
+:1061F0008F8600440E000EE202002021004018218C
+:106200008F86004410C0FFC9020310230270702360
+:106210008F87004001C368210A0002E431B2FFFF0A
+:106220008F86004414C0FFC93C1100203C10800040
+:106230000A0002AEAE1100300E00046602002021FA
+:106240000A0002DB00401821020020210E0009395B
+:10625000022028210A0002DB004018210E0001EE76
+:10626000000000000A0002C702B2382327BDFFC8A1
+:10627000AFB7002CAFB60028AFB50024AFB40020F4
+:10628000AFB3001CAFB20018AFB10014AFB0001034
+:10629000AFBF00300E00011B241300013C047FFF40
+:1062A0003C0380083C0220003C010800AC20007048
+:1062B0003496FFFF34770080345200033C1512C03F
+:1062C000241400013C1080002411FF800E000245C0
+:1062D000000000008F8700488F8B00188F89001402
+:1062E0008CEA00EC8CE800E8014B302B01092823F4
+:1062F00000A6102314400006014B18231440000E82
+:106300003C05800002A3602B1180000B0000000000
+:106310003C0560008CEE00EC8CED00E88CA4180CC1
+:10632000AF8E001804800053AF8D00148F8F0010C3
+:10633000ADF400003C0580008CBF00003BF900017B
+:10634000333800011700FFE13C0380008C6201003C
+:1063500024060C0010460009000000008C680100B3
+:106360002D043080548000103C0480008C690100B2
+:106370002D2331811060000C3C0480008CAA0100A8
+:1063800011460004000020218CA6010024C5FF81D5
+:1063900030A400FF8E0B01000E000269AE0B00243A
+:1063A0000A00034F3C0480008C8D01002DAC3300AB
+:1063B00011800022000000003C0708008CE70098D4
+:1063C00024EE00013C010800AC2E00983C04800043
+:1063D0008C8201001440000300000000566000148D
+:1063E0003C0440008C9F01008C9801000000982123
+:1063F00003F1C82400193940330F007F00EF7025E6
+:1064000001D26825AC8D08308C8C01008C85010090
+:10641000258B0100017130240006514030A3007F1C
+:106420000143482501324025AC8808303C04400037
+:10643000AE0401380A00030E000000008C99010030
+:10644000240F0020AC99002092F80000330300FFD5
+:10645000106F000C241F0050547FFFDD3C048000AF
+:106460008C8401000E00154E000000000A00034F4E
+:106470003C04800000963824ACA7180C0A000327BF
+:106480008F8F00108C8501000E0008F72404008017
+:106490000A00034F3C04800000A4102B24030001D9
+:1064A00010400009000030210005284000A4102BF6
+:1064B00004A00003000318405440FFFC00052840DE
+:1064C0005060000A0004182B0085382B54E00004AB
+:1064D0000003184200C33025008520230003184222
+:1064E0001460FFF9000528420004182B03E000089F
+:1064F00000C310213084FFFF30C600FF3C0780003E
+:106500008CE201B80440FFFE00064C000124302557
+:106510003C08200000C820253C031000ACE00180AE
+:10652000ACE50184ACE4018803E00008ACE301B809
+:106530003C0660008CC5201C2402FFF03083020062
+:10654000308601001060000E00A2282434A500014E
+:106550003087300010E0000530830C0034A50004C3
+:106560003C04600003E00008AC85201C1060FFFDC7
+:106570003C04600034A5000803E00008AC85201C42
+:1065800054C0FFF334A500020A0003B03087300086
+:1065900027BDFFE8AFB00010AFBF00143C0760009C
+:1065A000240600021080001100A080218F83005873
+:1065B0000E0003A78C6400188F8200580000202171
+:1065C000240600018C45000C0E000398000000001A
+:1065D0001600000224020003000010218FBF0014E7
+:1065E0008FB0001003E0000827BD00188CE8201CC5
+:1065F0002409FFF001092824ACE5201C8F870058EE
+:106600000A0003CD8CE5000C3C02600E00804021A6
+:1066100034460100240900180000000000000000BA
+:10662000000000003C0A00503C0380003547020097
+:10663000AC68003834640400AC65003CAC670030E2
+:106640008C6C0000318B00201160FFFD2407FFFFE0
+:106650002403007F8C8D00002463FFFF248400044A
+:10666000ACCD00001467FFFB24C60004000000004E
+:10667000000000000000000024A402000085282B78
+:106680003C0300203C0E80002529FFFF010540212E
+:10669000ADC300301520FFE00080282103E0000892
+:1066A000000000008F82005827BDFFD8AFB3001C48
+:1066B000AFBF0020AFB20018AFB10014AFB00010F0
+:1066C00094460002008098218C5200182CC300814F
+:1066D0008C4800048C4700088C51000C8C49001039
+:1066E000106000078C4A00142CC4000414800013AE
+:1066F00030EB000730C5000310A0001000000000C0
+:106700002410008B02002021022028210E00039873
+:10671000240600031660000224020003000010217A
+:106720008FBF00208FB3001C8FB200188FB10014F0
+:106730008FB0001003E0000827BD00281560FFF1AE
+:106740002410008B3C0C80003C030020241F00011F
+:10675000AD830030AF9F0044000000000000000047
+:10676000000000002419FFF024D8000F031978243A
+:106770003C1000D0AD88003801F0702524CD000316
+:106780003C08600EAD87003C35850400AD8E0030BE
+:10679000000D38823504003C3C0380008C6B000007
+:1067A000316200201040FFFD0000000010E00008F2
+:1067B00024E3FFFF2407FFFF8CA800002463FFFFF2
+:1067C00024A50004AC8800001467FFFB24840004A7
+:1067D0003C05600EACA60038000000000000000080
+:1067E000000000008F8600543C0400203C0780001D
+:1067F000ACE4003054C000060120202102402021DA
+:106800000E0003A7000080210A00041D02002021C1
+:106810000E0003DD01402821024020210E0003A7C5
+:10682000000080210A00041D0200202127BDFFE096
+:10683000AFB200183092FFFFAFB10014AFBF001C21
+:10684000AFB000101640000D000088210A0004932C
+:106850000220102124050003508500278CE5000C40
+:106860000000000D262800013111FFFF24E2002066
+:106870000232802B12000019AF8200588F82004430
+:10688000144000168F8700583C0670003C0320001F
+:106890008CE5000000A62024148300108F84006083
+:1068A000000544023C09800000A980241480FFE90F
+:1068B000310600FF2CCA000B5140FFEB26280001D7
+:1068C000000668803C0E080025CE575801AE6021B6
+:1068D0008D8B0000016000080000000002201021E4
+:1068E0008FBF001C8FB200188FB100148FB0001042
+:1068F00003E0000827BD00200E0003982404008454
+:106900001600FFD88F8700580A000474AF8000601B
+:10691000020028210E0003BF240400018F870058C5
+:106920000A000474AF820060020028210E0003BF39
+:10693000000020210A0004A38F8700580E000404E1
+:10694000020020218F8700580A000474AF82006083
+:1069500030AFFFFF000F19C03C0480008C9001B8DD
+:106960000600FFFE3C1920043C181000AC83018097
+:10697000AC800184AC990188AC9801B80A00047518
+:106980002628000190E2000390E30002000020218D
+:106990000002FE0000033A0000FF2825240600083C
+:1069A0000E000398000000001600FFDC2402000324
+:1069B0008F870058000010210A000474AF82006025
+:1069C00090E8000200002021240600090A0004C308
+:1069D00000082E0090E4000C240900FF308500FF21
+:1069E00010A900150000302190F9000290F8000372
+:1069F000308F00FF94EB000400196E000018740043
+:106A0000000F62000186202501AE5025014B28258C
+:106A10003084FF8B0A0004C32406000A90E30002BE
+:106A200090FF0004000020210003360000DF28252D
+:106A30000A0004C32406000B0A0004D52406008BB8
+:106A4000000449C23127003F000443423C02800059
+:106A500000082040240316802CE60020AC43002CC4
+:106A600024EAFFE02482000114C0000330A900FFE3
+:106A700000801021314700FF000260803C0D800043
+:106A8000240A0001018D20213C0B000E00EA28049D
+:106A9000008B302111200005000538278CCE000026
+:106AA00001C5382503E00008ACC700008CD8000001
+:106AB0000307782403E00008ACCF000027BDFFE007
+:106AC000AFB10014AFB00010AFBF00183C076000BA
+:106AD0008CE408083402F0003C1160003083F000C0
+:106AE000240501C03C04800E000030211062000625
+:106AF000241000018CEA08083149F0003928E00030
+:106B00000008382B000780403C0D0200AE2D081411
+:106B1000240C16803C0B80008E2744000E000F8B47
+:106B2000AD6C002C120000043C02169124050001FB
+:106B3000120500103C023D2C345800E0AE384408E9
+:106B40003C1108008E31007C8FBF00183C066000AD
+:106B500000118540360F16808FB100148FB00010E1
+:106B60003C0E020027BD0020ACCF442003E000080B
+:106B7000ACCE08103C0218DA345800E0AE384408B5
+:106B80003C1108008E31007C8FBF00183C0660006D
+:106B900000118540360F16808FB100148FB00010A1
+:106BA0003C0E020027BD0020ACCF442003E00008CB
+:106BB000ACCE08100A0004EB240500010A0004EB27
+:106BC0000000282124020400A7820024A780001CC2
+:106BD000000020213C06080024C65A582405FFFF67
+:106BE00024890001000440803124FFFF01061821A0
+:106BF0002C87002014E0FFFAAC6500002404040098
+:106C0000A7840026A780001E000020213C06080063
+:106C100024C65AD82405FFFF248D0001000460809B
+:106C200031A4FFFF018658212C8A00201540FFFA6D
+:106C3000AD650000A7800028A7800020A780002263
+:106C4000000020213C06080024C65B582405FFFFF5
+:106C5000249900010004C0803324FFFF030678213B
+:106C60002C8E000415C0FFFAADE500003C05600065
+:106C70008CA73D002403E08F00E31024344601403C
+:106C800003E00008ACA63D002487007F000731C266
+:106C900024C5FFFF000518C2246400013082FFFFF5
+:106CA000000238C0A78400303C010800AC27003047
+:106CB000AF80002C0000282100002021000030219E
+:106CC0002489000100A728213124FFFF2CA81701E7
+:106CD000110000032C8300801460FFF924C600011A
+:106CE00000C02821AF86002C10C0001DA786002AF6
+:106CF00024CAFFFF000A11423C08080025085B581F
+:106D00001040000A00002021004030212407FFFF2E
+:106D1000248E00010004688031C4FFFF01A86021B7
+:106D20000086582B1560FFFAAD87000030A2001FC7
+:106D30005040000800043080240300010043C804D0
+:106D400000041080004878212738FFFF03E0000886
+:106D5000ADF8000000C820212405FFFFAC8500002D
+:106D600003E000080000000030A5FFFF30C6FFFF71
+:106D700030A8001F0080602130E700FF0005294295
+:106D80000000502110C0001D24090001240B000147
+:106D900025180001010B2004330800FF0126782686
+:106DA000390E00202DED00012DC2000101A2182591
+:106DB0001060000D014450250005C880032C4021BF
+:106DC0000100182110E0000F000A20278D040000A8
+:106DD000008A1825AD03000024AD00010000402109
+:106DE0000000502131A5FFFF252E000131C9FFFF12
+:106DF00000C9102B1040FFE72518000103E0000830
+:106E0000000000008D0A0000014440240A0005D162
+:106E1000AC68000027BDFFE830A5FFFF30C6FFFFCC
+:106E2000AFB00010AFBF001430E7FFFF00005021EB
+:106E30003410FFFF0000602124AF001F00C0482174
+:106E4000241800012419002005E0001601E010219B
+:106E50000002F943019F682A0009702B01AE40240B
+:106E600011000017000C18800064102110E00005CC
+:106E70008C4B000000F840040008382301675824B8
+:106E800000003821154000410000402155600016E7
+:106E90003169FFFF258B0001316CFFFF05E1FFEC3D
+:106EA00001E0102124A2003E0002F943019F682A5C
+:106EB0000009702B01AE40241500FFEB000C188078
+:106EC000154600053402FFFF020028210E0005B51B
+:106ED00000003821020010218FBF00148FB0001075
+:106EE00003E0000827BD00181520000301601821E9
+:106EF000000B1C0224080010306A00FF154000053A
+:106F0000306E000F250D000800031A0231A800FFA3
+:106F1000306E000F15C00005307F000325100004FF
+:106F200000031902320800FF307F000317E000055C
+:106F3000386900012502000200031882304800FF72
+:106F4000386900013123000110600004310300FFA3
+:106F5000250A0001314800FF310300FF000C6940A1
+:106F600001A34021240A000110CAFFD53110FFFF00
+:106F7000246E000131C800FF1119FFC638C9000195
+:106F80002D1F002053E0001C258B0001240D000163
+:106F90000A000648240E002051460017258B0001E8
+:106FA00025090001312800FF2D0900205120001281
+:106FB000258B000125430001010D5004014B1024D5
+:106FC000250900011440FFF4306AFFFF3127FFFF5D
+:106FD00010EE000C2582FFFF304CFFFF0000502117
+:106FE0003410FFFF312800FF2D0900205520FFF24B
+:106FF00025430001258B0001014648260A000602B0
+:10700000316CFFFF00003821000050210A000654B7
+:107010003410FFFF27BDFFD8AFB0001030F0FFFFE6
+:10702000AFB10014001039423211FFE000071080A8
+:10703000AFB3001C00B1282330D3FFFFAFB200185C
+:1070400030A5FFFF00809021026030210044202104
+:10705000AFBF00200E0005E03207001F022288218A
+:107060003403FFFF0240202102002821026030216A
+:1070700000003821104300093231FFFF02201021A7
+:107080008FBF00208FB3001C8FB200188FB1001487
+:107090008FB0001003E0000827BD00280E0005E0B7
+:1070A0000000000000408821022010218FBF002036
+:1070B0008FB3001C8FB200188FB100148FB0001076
+:1070C00003E0000827BD0028000424003C03600002
+:1070D000AC603D0810A00002348210063482101605
+:1070E00003E00008AC623D0427BDFFE0AFB0001034
+:1070F000309000FF2E020006AFBF001810400008BD
+:10710000AFB10014001030803C03080024635784A2
+:1071100000C328218CA400000080000800000000AB
+:10712000000020218FBF00188FB100148FB0001015
+:107130000080102103E0000827BD00209791002A5D
+:1071400016200051000020213C020800904200332C
+:107150000A0006BB00000000978D002615A0003134
+:10716000000020210A0006BB2402000897870024A3
+:1071700014E0001A00001821006020212402000100
+:107180001080FFE98FBF0018000429C2004530219C
+:1071900000A6582B1160FFE43C0880003C0720004B
+:1071A000000569C001A76025AD0C00203C038008E4
+:1071B0002402001F2442FFFFAC6000000441FFFDD9
+:1071C0002463000424A5000100A6702B15C0FFF560
+:1071D000000569C00A0006A58FBF00189787001C2C
+:1071E0003C04080024845A58240504000E0006605C
+:1071F00024060001978B002424440001308AFFFFFD
+:107200002569FFFF2D48040000402821150000409B
+:10721000A789002424AC3800000C19C00A0006B964
+:10722000A780001C9787001E3C04080024845AD8BD
+:10723000240504000E00066024060001979900262C
+:10724000244400013098FFFF272FFFFF2F0E04007A
+:107250000040882115C0002CA78F0026A780001EA3
+:107260003A020003262401003084FFFF0E00068D41
+:107270002C4500010011F8C027F00100001021C0CA
+:107280000A0006BB240200089785002E978700227B
+:107290003C04080024845B580E00066024060001AC
+:1072A0009787002A8F89002C2445000130A8FFFF12
+:1072B00024E3FFFF0109302B0040802114C0001897
+:1072C000A783002AA7800022978500300E000F7543
+:1072D00002002021244A05003144FFFF0E00068DE4
+:1072E000240500013C05080094A500320E000F752E
+:1072F00002002021244521003C0208009042003376
+:107300000A0006BB000521C00A0006F3A784001E80
+:1073100024AC3800000C19C00A0006B9A784001C70
+:107320000A00070DA7850022308400FF27BDFFE873
+:107330002C820006AFBF0014AFB000101040001543
+:1073400000A03821000440803C0308002463579CBF
+:10735000010328218CA40000008000080000000028
+:1073600024CC007F000751C2000C59C23170FFFFCE
+:107370002547C40030E5FFFF2784001C02003021B0
+:107380000E0005B52407000197860028020620217B
+:10739000A78400288FBF00148FB0001003E00008FE
+:1073A00027BD00183C0508008CA50030000779C2F5
+:1073B0000E00038125E4DF003045FFFF3C04080098
+:1073C00024845B58240600010E0005B52407000143
+:1073D000978E002A8FBF00148FB0001025CD0001BA
+:1073E00027BD001803E00008A78D002A0007C9C2C6
+:1073F0002738FF00001878C231F0FFFF3C04080076
+:1074000024845AD802002821240600010E0005B564
+:1074100024070001978D0026260E0100000E84002F
+:1074200025AC00013C0B6000A78C0026AD603D0838
+:1074300036040006000030213C0760008CE23D0469
+:10744000305F000617E0FFFD24C9000100061B00A5
+:10745000312600FF006440252CC50004ACE83D0443
+:1074600014A0FFF68FBF00148FB0001003E00008D7
+:1074700027BD0018000751C22549C8002406000195
+:10748000240700013C04080024845A580E0005B566
+:107490003125FFFF978700248FBF00148FB00010A5
+:1074A00024E6000127BD001803E00008A786002499
+:1074B0003C0660183C090800252900FCACC9502C8A
+:1074C0008CC850003C0580003C020002350700805B
+:1074D000ACC750003C04080024841FE03C030800B3
+:1074E00024631F98ACA50008ACA2000C3C01080066
+:1074F000AC2459A43C010800AC2359A803E00008BF
+:107500002402000100A030213C1C0800279C59AC3B
+:107510003C0C04003C0B0002008B3826008C4026FB
+:107520002CE200010007502B2D050001000A4880C5
+:107530003C030800246359A4004520250123182199
+:107540001080000300001021AC660000240200013E
+:1075500003E00008000000003C1C0800279C59AC18
+:107560003C0B04003C0A0002008A3026008B3826BF
+:107570002CC200010006482B2CE5000100094080C8
+:107580003C030800246359A4004520250103182169
+:1075900010800005000010213C0C0800258C1F986D
+:1075A000AC6C00002402000103E0000800000000B1
+:1075B0003C0900023C080400008830260089382677
+:1075C0002CC30001008028212CE400010083102539
+:1075D0001040000B000030213C1C0800279C59ACD7
+:1075E0003C0A80008D4E00082406000101CA68256F
+:1075F000AD4D00088D4C000C01855825AD4B000C9D
+:1076000003E0000800C010213C1C0800279C59AC76
+:107610003C0580008CA6000C0004202724020001F9
+:1076200000C4182403E00008ACA3000C3C020002D4
+:107630001082000B3C0560003C070400108700032B
+:107640000000000003E00008000000008CA908D042
+:10765000240AFFFD012A402403E00008ACA808D05A
+:107660008CA408D02406FFFE0086182403E000083E
+:10767000ACA308D03C05601A34A600108CC300806F
+:1076800027BDFFF88CC50084AFA3000093A40000C1
+:107690002402001010820003AFA5000403E00008DC
+:1076A00027BD000893A7000114E0001497AC000266
+:1076B00097B800023C0F8000330EFFFC01CF682119
+:1076C000ADA50000A3A000003C0660008CC708D058
+:1076D0002408FFFE3C04601A00E82824ACC508D04A
+:1076E0008FA300048FA200003499001027BD00086A
+:1076F000AF22008003E00008AF2300843C0B800031
+:10770000318AFFFC014B48218D2800000A00080C3B
+:10771000AFA8000427BDFFE8AFBF00103C1C080065
+:10772000279C59AC3C0580008CA4000C8CA2000462
+:107730003C0300020044282410A0000A00A31824DF
+:107740003C0604003C0400021460000900A610245A
+:107750001440000F3C0404000000000D3C1C080015
+:10776000279C59AC8FBF001003E0000827BD00180C
+:107770003C0208008C4259A40040F80900000000B7
+:107780003C1C0800279C59AC0A0008358FBF00102C
+:107790003C0208008C4259A80040F8090000000093
+:1077A0000A00083B000000003C0880008D0201B880
+:1077B0000440FFFE35090180AD2400003C031000A9
+:1077C00024040040AD250004A1240008A1260009DE
+:1077D000A527000A03E00008AD0301B83084FFFFCD
+:1077E0000080382130A5FFFF000020210A00084555
+:1077F000240600803087FFFF8CA400002406003898
+:107800000A000845000028218F8300788F860070C9
+:107810001066000B008040213C07080024E75B68ED
+:10782000000328C000A710218C440000246300013D
+:10783000108800053063000F5466FFFA000328C06B
+:1078400003E00008000010213C07080024E75B6CFF
+:1078500000A7302103E000088CC200003C03900028
+:1078600034620001008220253C038000AC640020CB
+:107870008C65002004A0FFFE0000000003E000086B
+:10788000000000003C0280003443000100832025FA
+:1078900003E00008AC44002027BDFFE0AFB10014B6
+:1078A0003091FFFFAFB00010AFBF001812200013DF
+:1078B00000A080218CA20000240400022406020003
+:1078C0001040000F004028210E0007250000000096
+:1078D00000001021AE000000022038218FBF0018E8
+:1078E0008FB100148FB0001000402021000028212B
+:1078F000000030210A00084527BD00208CA20000AE
+:10790000022038218FBF00188FB100148FB00010F3
+:107910000040202100002821000030210A000845F5
+:1079200027BD002000A010213087FFFF8CA5000498
+:107930008C4400000A000845240600068F83FD9C45
+:1079400027BDFFE8AFBF0014AFB00010906700087C
+:10795000008010210080282130E600400000202116
+:1079600010C000088C5000000E0000BD0200202155
+:10797000020020218FBF00148FB000100A000548BC
+:1079800027BD00180E0008A4000000000E0000BD76
+:1079900002002021020020218FBF00148FB00010B0
+:1079A0000A00054827BD001827BDFFE0AFB0001052
+:1079B0008F90FD9CAFBF001CAFB20018AFB1001498
+:1079C00092060001008088210E00087230D2000467
+:1079D00092040005001129C2A6050000348300406E
+:1079E000A20300050E00087C022020210E00054A9B
+:1079F0000220202124020001AE02000C02202821D6
+:107A0000A602001024040002A602001224060200AE
+:107A1000A60200140E000725A60200161640000F4D
+:107A20008FBF001C978C00743C0B08008D6B007896
+:107A30002588FFFF3109FFFF256A0001012A382B45
+:107A400010E00006A78800743C0F6006240E0016A4
+:107A500035ED0010ADAE00508FBF001C8FB2001886
+:107A60008FB100148FB0001003E0000827BD002084
+:107A700027BDFFE0AFB10014AFBF0018AFB00010DA
+:107A80001080000400A088212402008010820007DA
+:107A9000000000000000000D8FBF00188FB100141F
+:107AA0008FB0001003E0000827BD00200E00087210
+:107AB00000A020218F86FD9C0220202190C500057A
+:107AC0000E00087C30B000FF2403003E1603FFF1D7
+:107AD0003C0680008CC401780480FFFE34C801405D
+:107AE000240900073C071000AD11000002202021EE
+:107AF000A10900048FBF00188FB100148FB00010CF
+:107B0000ACC701780A0008C527BD002027BDFFE0EB
+:107B1000AFB00010AFBF0018AFB100143C10800030
+:107B20008E110020000000000E00054AAE04002067
+:107B3000AE1100208FBF00188FB100148FB000105D
+:107B400003E0000827BD00203084FFFF00803821BB
+:107B50002406003500A020210A0008450000282145
+:107B60003084FFFF008038212406003600A0202149
+:107B70000A0008450000282127BDFFD0AFB500242A
+:107B80003095FFFFAFB60028AFB40020AFBF002C88
+:107B9000AFB3001CAFB20018AFB10014AFB000100B
+:107BA00030B6FFFF12A000270000A0218F920058DE
+:107BB0008E4300003C0680002402004000033E0289
+:107BC00000032C0230E4007F006698241482001D1C
+:107BD00030A500FF8F8300682C68000A1100001098
+:107BE0008F8D0044000358803C0C0800258C57B84A
+:107BF000016C50218D4900000120000800000000A8
+:107C000002D4302130C5FFFF0E0008522404008446
+:107C1000166000028F920058AF8000688F8D00447C
+:107C20002659002026980001032090213314FFFFDD
+:107C300015A00004AF9900580295202B1480FFDC9A
+:107C400000000000028010218FBF002C8FB600289A
+:107C50008FB500248FB400208FB3001C8FB20018A2
+:107C60008FB100148FB0001003E0000827BD003072
+:107C70002407003414A70149000000009247000EB9
+:107C80008F9FFDA08F90FD9C24181600A3E700197C
+:107C90009242000D3C0880003C07800CA3E20018D3
+:107CA000964A00123C0D60003C117FFFA60A005C62
+:107CB000964400103623FFFF240200053099FFFF91
+:107CC000AE1900548E46001CAD1800288CEF000041
+:107CD0008DAE444801E6482601C93021AE06003881
+:107CE0008E05003824CB00013C0E7F00AE05003C21
+:107CF0008E0C003CAFEC0004AE0B00208E13002075
+:107D0000AE13001CA3E0001BAE03002CA3E2001284
+:107D10008E4A001424130050AE0A00348E0400343E
+:107D2000AFE400148E590018AE1900489258000CA8
+:107D3000A218004E920D000835AF0020A20F0008D7
+:107D40008E090018012E282434AC4000AE0C001817
+:107D5000920B0000317200FF1253027F2403FF8058
+:107D60003C04080024845BE80E0008AA0000000020
+:107D70003C1108008E315BE80E00087202202021C1
+:107D80002405000424080001A2050025022020216A
+:107D90000E00087CA20800053C0580008CB001782C
+:107DA0000600FFFE8F92005834AE0140240F0002FF
+:107DB0003C091000ADD10000A1CF0004ACA90178AE
+:107DC0000A000962AF8000682CAD003751A0FF9413
+:107DD0008F8D0044000580803C110800263157E05B
+:107DE000021178218DEE000001C0000800000000A3
+:107DF0002411000414B1008C3C0780003C080800EA
+:107E00008D085BE88F86FD9CACE800208E4500085D
+:107E10008F99FDA0240D0050ACC500308E4C000899
+:107E2000ACCC00508E4B000CACCB00348E43001019
+:107E3000ACC300388E4A0010ACCA00548E42001405
+:107E4000ACC2003C8E5F0018AF3F00048E50001C97
+:107E5000ACD0002090C40000309800FF130D024AFF
+:107E6000000000008CC400348CD00030009030231F
+:107E700004C000F12404008C126000EE2402000310
+:107E80000A000962AF8200682419000514B900666F
+:107E90003C0580003C0808008D085BE88F86FD9C4F
+:107EA000ACA800208E4C00048F8AFDA0240720007F
+:107EB000ACCC001C924B000824120008A14B001906
+:107EC0008F82005890430009A14300188F85005805
+:107ED00090BF000A33E400FF1092001028890009C7
+:107EE000152000BA240E0002240D0020108D000B76
+:107EF000340780002898002117000008240740005C
+:107F000024100040109000053C0700012419008057
+:107F1000109900023C070002240740008CC20018A0
+:107F20003C03FF00004350240147F825ACDF001854
+:107F300090B2000BA0D200278F8300589464000CED
+:107F4000108001FE000000009467000C3C1F8000C0
+:107F50002405FFBFA4C7005C9063000E2407000443
+:107F6000A0C300088F820058904A000FA0CA0009E1
+:107F70008F8900588D3200108FE400740244C823AA
+:107F8000ACD900588D300014ACD0002C95380018B6
+:107F9000330DFFFFACCD00409531001A322FFFFFAB
+:107FA000ACCF00448D2E001CACCE00489128000EB2
+:107FB000A0C8000890CC000801855824126001B6C2
+:107FC000A0CB00088F9200580A000962AF870068B2
+:107FD0002406000614A600143C0E80003C0F080086
+:107FE0008DEF5BE88F85FD98ADCF00208E4900189E
+:107FF0008F86FD9C8F8BFDA0ACA900008CC800383B
+:1080000024040005ACA800048CCC003C1260008164
+:10801000AD6C00000A000962AF84006824110007FB
+:1080200010B1004B240400063C05080024A55BE8C1
+:108030000E000881240400818F9200580013102B39
+:108040000A000962AF820068241F002314BFFFF6F4
+:108050003C0C80003C0508008CA55BE88F8BFDA0E4
+:10806000AD8500208F91FD9C8E4600042564002084
+:1080700026450014AE260028240600030E000F81BA
+:10808000257000308F87005802002021240600034D
+:108090000E000F8124E500083C04080024845BE8FE
+:1080A0000E0008AA0000000092230000240A0050DD
+:1080B000306200FF544AFFE18F9200580E000F6CAF
+:1080C000000000000A000A6A8F920058240800335A
+:1080D00014A800323C0380003C1108008E315BE89C
+:1080E0008F8FFDA0AC7100208E420008240D002867
+:1080F0008F89FD9CADE200308E4A000C24060009F9
+:10810000ADEA00348E5F0010ADFF00388E440014DD
+:10811000ADE400208E590018ADF900248E58001CE3
+:10812000ADF80028A1ED00118E4E00041260003160
+:10813000AD2E00288F9200580A000962AF860068B1
+:10814000240D002214ADFFB8000000002404000735
+:108150003C1008008E105BE83C188000AF10002037
+:108160005660FEAEAF8400683C04080024845BE8DF
+:108170000E0008AA241300508F84FD9C90920000EA
+:10818000325900FF1333014B000000008F9200585A
+:10819000000020210A000962AF8400683C05080045
+:1081A00024A55BE80E000858240400810A000A6A2E
+:1081B0008F92005802D498213265FFFF0E000852BA
+:1081C000240400840A0009628F920058108EFF5325
+:1081D000240704002887000310E00179241100041B
+:1081E000240F0001548FFF4D240740000A000A228B
+:1081F000240701003C05080024A55BE80E0008A444
+:10820000240400828F920058000030210A00096285
+:10821000AF8600683C04080024845BE88CC2003808
+:108220000E0008AA8CC3003C8F9200580A000AC0B6
+:1082300000002021240400823C05080024A55BE8FE
+:108240000E0008A4000000008F92005800001021CA
+:108250000A000962AF8200688E5000048F91FD9C75
+:108260003C078000ACF00020922C00050200282181
+:10827000318B0002156001562404008A8F92FDA004
+:108280002404008D9245001B30A6002014C001502C
+:1082900002002821922E00092408001231C900FF93
+:1082A0001128014B240400810E00087202002021D5
+:1082B0009258001B240F000402002021370D0042B9
+:1082C000A24D001B0E00087CA22F00253C0580005B
+:1082D0008CA401780480FFFE34B90140241F000201
+:1082E000AF300000A33F00048F9200583C101000F4
+:1082F000ACB001780A000A6B0013102B8E500004FA
+:108300008F91FD9C3C038000AC700020922A0005F8
+:108310000200282131420002144000172404008A80
+:10832000922C00092412000402002821318B00FF46
+:1083300011720011240400810E0008720200202135
+:108340008F89FDA0240800122405FFFE912F001B39
+:108350000200202135EE0020A12E001BA2280009DA
+:108360009226000500C538240E00087CA2270005CF
+:1083700002002821000020210E0009330000000027
+:108380000A000A6A8F9200588E4C00043C07800055
+:108390003C10080026105BE8ACEC00203C01080013
+:1083A000AC2C5BE8924B0003317100041220013BBE
+:1083B0008F84FD9C24020006A0820009924F001BBE
+:1083C000240EFFC031E9003F012E4025A08800089F
+:1083D0009245000330A6000114C0013200000000E5
+:1083E0008E420008AE0200083C0208008C425BF09E
+:1083F000104001318F90FDA0000219C28F8DFD9CAD
+:10840000A603000C8E4A000C24180001240400145A
+:10841000AE0A002C8E420010AE02001C965F0016C1
+:10842000A61F003C96590014A619003EADB8000CDA
+:10843000A5B80010A5B80012A5B80014A5B800167C
+:1084400012600144A2040011925100033232000272
+:108450002E5300018F920058266200080A0009621C
+:10846000AF8200688E4400043C1980003C068008FE
+:10847000AF2400208E45000890D80000240D005045
+:10848000331100FF122D009C2407008824060009E8
+:108490000E000845000000000A000A6A8F9200588A
+:1084A0008E5000043C0980003C118008AD30002053
+:1084B0009228000024050050310400FF10850110AF
+:1084C0002407008802002021000028210E00084512
+:1084D0002406000E922D00002418FF80020028219F
+:1084E00001B8802524040004240600300E0007256E
+:1084F000A23000000A000A6A8F9200588E500004D1
+:108500008F91FDA03C028000AC500020923F001BE8
+:1085100033F900101320006C240700810200202191
+:10852000000028212406001F0E000845000000005E
+:108530000A000A6A8F9200588E44001C0E00085DE3
+:1085400000000000104000E3004048218F880058E0
+:1085500024070089012020218D05001C240600012C
+:108560000E000845000000000A000A6A8F920058B9
+:10857000964900023C10080026105BE831280004F0
+:10858000110000973C0460008E4E001C3C0F8000E0
+:10859000ADEE00203C010800AC2E5BE896470002DF
+:1085A00030E40001148000E6000000008E42000468
+:1085B000AE0200083C1008008E105BF0120000ECC8
+:1085C0003C0F80008F92FD9C241000018E4E0018FD
+:1085D0008F8DFDA08F9FFD9801CF4825AE490018D3
+:1085E000A2400005AE50000C3C0808008D085BF06E
+:1085F0008F840058A6500010000839C2A6500012FF
+:10860000A6500014A6500016A5A7000C8C8C0008DC
+:108610008F8B00588F8A0058ADAC002C8D63000CF6
+:1086200024070002ADA3001C91460010A1A6001172
+:108630008F82005890450011A3E500088F990058DB
+:1086400093380012A258004E8F910058922F0013B9
+:10865000A1AF00128F920058964E0014A5AE003CB8
+:1086600096490016A5A9003E8E480018ADA8001432
+:108670005660FD6AAF8700683C05080024A55BE8EA
+:108680000E000881000020218F9200580000382140
+:108690000A000962AF8700683C05080024A55BE872
+:1086A0000E0008A4240400828F9200580A000A4D8C
+:1086B000000038210E000F6C000000008F9200585F
+:1086C0000A000AC0000020210E00087202002021CA
+:1086D0009223001B02002021346A00100E00087C47
+:1086E000A22A001B000038210200202100002821BE
+:1086F0000A000BA52406001F9242000C305F000107
+:1087000013E0000300000000964A000EA4CA002CEB
+:10871000924B000C316300025060000600003821CB
+:108720008E470014964C0012ACC7001CA4CC001A53
+:10873000000038210A000B7F240600093C050800D0
+:1087400024A55BE80E0008A42404008B8F92005837
+:108750000A000A4D0013382B3C0C08008D8C5BE896
+:1087600024DFFFFE25930100326B007F016790211B
+:1087700002638824AD110028AE4600E0AE4000E45C
+:108780000A0009B3AE5F001CACC000543C0D0800E9
+:108790008DAD5BE83C18800C37090100ACED00287A
+:1087A0008E510014AD3100E08E4F0014AD2F00E467
+:1087B0008E4E001025C7FFFE0A0009F4AD27001CED
+:1087C0005491FDD6240740000A000A222407100015
+:1087D0000E00092D000000000A000A6A8F9200585E
+:1087E0008C83442C3C12DEAD3651BEEF3C010800B8
+:1087F000AC205BE810710062000000003C196C6264
+:1088000037387970147800082404000297850074C2
+:108810009782006C2404009200A2F82B13E0001948
+:1088200002002821240400020E00069524050200FF
+:108830003C068000ACC200203C010800AC225BE892
+:108840001040000D8F8C0058240A002824040003D7
+:10885000918B0010316300FF546A00012404000171
+:108860000E0000810000000010400004240400837A
+:108870000A000BC28F920058240400833C050800B4
+:1088800024A55BE80E000881000000008F920058CC
+:108890000013382B0A000962AF8700680A000B49F1
+:1088A000240200128E4400080E00085D0000000043
+:1088B0000A000B55AE0200083C05080024A55BE841
+:1088C0000E000858240400878F9200580A000B728B
+:1088D0000013102B240400040E000695240500301C
+:1088E0001440002A004048218F8800582407008344
+:1088F000012020218D05001C0A000BB32406000175
+:108900008F8300788F8600701066FEEE000038219D
+:108910003C07080024E75B6C000320C00087282187
+:108920008CAE000011D0005D246F000131E3000F18
+:108930005466FFFA000320C00A000B8C00003821A7
+:108940008E4400040E00085D000000000A000BC801
+:10895000AE0200083C05080024A55BE80E0008A450
+:10896000240400828F9200580A000B72000010212C
+:108970003C05080024A55BE80A000C7C2404008761
+:108980008C83442C0A000C5B3C196C628F88005865
+:108990003C0780083C0C8000240B0050240A000196
+:1089A000AD820020A0EB0000A0EA000191030004CA
+:1089B000A0E3001891040005A0E400199106000648
+:1089C0003C04080024845B6CA0E6001A91020007B6
+:1089D0003C06080024C65B68A0E2001B9105000865
+:1089E000A0E5001C911F0009A0FF001D9119000ABD
+:1089F000A0F9001E9118000BA0F8001F9112000CA6
+:108A0000A0F200209111000DA0F100219110000EA4
+:108A1000A0F00022910F000FA0EF0023910E001094
+:108A2000A0EE0024910D0011A0ED0025950C00147E
+:108A3000A4EC0028950B00168F8A00708F920078A6
+:108A4000A4EB002A95030018000A10C02545000178
+:108A5000A4E3002C8D1F001C0044C0210046C82147
+:108A600030A5000FAF3F0000AF09000010B20006B4
+:108A7000AF850070000038218D05001C01202021E9
+:108A80000A000BB32406000124AD000131A7000F3A
+:108A9000AF8700780A000CF9000038213C06080076
+:108AA00024C65B680086902100003821ACA000003D
+:108AB0000A000B8CAE4000003C0482013C036000C5
+:108AC00034820E02AC603D68AF80009803E000087D
+:108AD000AC623D6C27BDFFE8AFB000103090FFFFE7
+:108AE000001018422C620041AFBF00141440000275
+:108AF00024040080240300403C010800AC300060E6
+:108B00003C010800AC2300640E000F7500602821B2
+:108B1000244802BF2409FF8001092824001039805D
+:108B2000001030408FBF00148FB0001000A720212C
+:108B300000861821AF8300803C010800AC25005856
+:108B40003C010800AC24005C03E0000827BD0018CD
+:108B5000308300FF30C6FFFF30E400FF3C08800098
+:108B60008D0201B80440FFFE000354000144382583
+:108B70003C09600000E920253C031000AD050180A0
+:108B8000AD060184AD04018803E00008AD0301B81F
+:108B90008F8500583C0A6012354800108CAC0004E8
+:108BA0003C0D600E35A60010318B00062D690001CA
+:108BB000AD0900C48CA70004ACC731808CA20008AA
+:108BC00094A40002ACC231848CA3001C0460000396
+:108BD000A784009003E00008000000008CAF00189C
+:108BE000ACCF31D08CAE001C03E00008ACCE31D449
+:108BF0008F8500588F87FF288F86FF308CAE00044A
+:108C00003C0F601235E80010ACEE00788CAD000827
+:108C1000ACED007C8CAC0010ACCC004C8CAB000CF0
+:108C2000ACCB004894CA00543C0208008C4200447B
+:108C300025490001A4C9005494C400543083FFFFA7
+:108C400010620017000000003C0208008C42004047
+:108C5000A4C200528CA30018ACE300308CA2001414
+:108C6000ACE2002C8CB90018ACF900388CB80014B8
+:108C700024050001ACF800348D0600BC50C5001975
+:108C80008D0200B48D0200B8A4E2004894E40048CC
+:108C9000A4E4004A94E800EA03E000083102FFFF80
+:108CA0003C0208008C420024A4C00054A4C200521C
+:108CB0008CA30018ACE300308CA20014ACE2002CB2
+:108CC0008CB90018ACF900388CB8001424050001E8
+:108CD000ACF800348D0600BC54C5FFEB8D0200B823
+:108CE0008D0200B4A4E2004894E40048A4E4004AE1
+:108CF00094E800EA03E000083102FFFF8F86005885
+:108D00003C0480008CC900088CC80008000929C0F8
+:108D1000000839C0AC87002090C30007306200040F
+:108D20001040003EAF85009490CB0007316A0008E8
+:108D30001140003D8F87FF2C8CCD000C8CCE001491
+:108D400001AE602B11800036000000008CC2000CC8
+:108D5000ACE200708CCB00188F85FF288F88FF3025
+:108D6000ACEB00748CCA00102402FFF8ACAA00D847
+:108D70008CC9000CAD0900608CC4001CACA400D0F0
+:108D800090E3007C0062C824A0F9007C90D8000722
+:108D9000330F000811E000040000000090ED007C9B
+:108DA00035AC0001A0EC007C90CF000731EE000153
+:108DB00011C000060000000090E3007C241800347D
+:108DC00034790002A0F9007CACB800DC90C2000746
+:108DD0003046000210C000040000000090E8007C53
+:108DE00035040004A0E4007C90ED007D3C0B600E97
+:108DF000356A001031AC003FA0EC007D8D4931D4C4
+:108E00003127000110E00002240E0001A0AE00098D
+:108E100094AF00EA03E0000831E2FFFF8F87FF2CE8
+:108E20000A000DAF8CC200140A000DB0ACE0007057
+:108E30008F8C005827BDFFD8AFB3001CAFB200180D
+:108E4000AFB00010AFBF0020AFB10014918F00157C
+:108E50003C13600E3673001031EB000FA38B009CA7
+:108E60008D8F00048D8B0008959F0012959900103E
+:108E70009584001A9598001E958E001C33EDFFFF17
+:108E8000332AFFFF3089FFFF3308FFFF31C7FFFFA1
+:108E90003C010800AC2D00243C010800AC29004432
+:108EA0003C010800AC2A0040AE683178AE67317CE6
+:108EB00091850015959100163C12601236520010F3
+:108EC00030A200FF3230FFFFAE623188AE5000B4F6
+:108ED00091830014959F0018240600010066C804C1
+:108EE00033F8FFFFAE5900B8AE5800BC918E0014A5
+:108EF000AF8F00843C08600631CD00FFAE4D00C04E
+:108F0000918A00159584000E3C07600A314900FFE4
+:108F1000AF8B00883084FFFFAE4900C835110010C8
+:108F20000E000D1034F004103C0208008C4200606A
+:108F30003C0308008C6300643C0608008CC60058A3
+:108F40003C0508008CA5005C8F8400808FBF00204A
+:108F5000AE23004CAE65319CAE030054AE4500DC40
+:108F6000AE6231A0AE6331A4AE663198AE22004845
+:108F70008FB3001CAE0200508FB10014AE4200E06F
+:108F8000AE4300E4AE4600D88FB000108FB2001898
+:108F90000A00057D27BD0028978500929783007CF5
+:108FA00027BDFFE8AFB0001000A3102BAFBF001427
+:108FB000240400058F900058104000552409000239
+:108FC0000E0006958F850080AF8200942404000374
+:108FD0001040004F240900023C0680000E00008172
+:108FE000ACC2002024070001240820001040004DDE
+:108FF00024040005978E00928F8AFF2C24090050CC
+:1090000025C50001A7850092A14900003C0D08007C
+:109010008DAD0064240380008F84FF28000D66005E
+:10902000AD4C0018A5400006954B000A8F85FF3017
+:109030002402FF8001633024A546000A915F000AE4
+:109040000000482103E2C825A159000AA0A0000899
+:10905000A140004CA08000D5961800029783009094
+:109060003C020004A49800EA960F00022418FFBFF7
+:1090700025EE2401A48E00BE8E0D0004ACAD00448C
+:109080008E0C0008ACAC0040A4A00050A4A000547A
+:109090008E0B000C240C0030AC8B00288E060010C8
+:1090A000AC860024A480003EA487004EA487005014
+:1090B000A483003CAD420074AC8800D8ACA800602A
+:1090C000A08700FC909F00D433F9007FA09900D4C2
+:1090D000909000D402187824A08F00D4914E007C88
+:1090E00035CD0001A14D007C938B009CAD480070F4
+:1090F000AC8C00DCA08B00D68F8800888F87008422
+:10910000AC8800C4AC8700C8A5400078A540007AB0
+:109110008FBF00148FB000100120102103E0000861
+:1091200027BD00188F8500940E0007258F860080CC
+:109130000A000E9F2409000227BDFFE0AFB0001017
+:109140008F900058AFB10014AFBF00188E09000413
+:109150000E00054A000921C08E0800048F84FF28F4
+:109160008F82FF30000839C03C068000ACC7002069
+:10917000948500EA904300131460001C30B1FFFF97
+:109180008F8CFF2C918B0008316A00401540000B3A
+:10919000000000008E0D0004022030218FBF001857
+:1091A0008FB100148FB00010240400220000382179
+:1091B000000D29C00A000D2F27BD00200E000098C9
+:1091C000000000008E0D0004022030218FBF001827
+:1091D0008FB100148FB00010240400220000382149
+:1091E000000D29C00A000D2F27BD00200E000090A1
+:1091F000000000008E0D0004022030218FBF0018F7
+:109200008FB100148FB00010240400220000382118
+:10921000000D29C00A000D2F27BD002027BDFFE04B
+:10922000AFB200183092FFFFAFB00010AFBF001C0C
+:10923000AFB100141240001E000080218F8600583C
+:109240008CC500002403000600053F02000514023F
+:1092500030E4000714830016304500FF2CA80006F8
+:1092600011000040000558803C0C0800258C58BCBB
+:10927000016C50218D490000012000080000000011
+:109280008F8E0098240D000111CD005024020002A1
+:10929000AF820098260900013130FFFF24C800206A
+:1092A0000212202B010030211480FFE5AF88005806
+:1092B000020010218FBF001C8FB200188FB1001464
+:1092C0008FB0001003E0000827BD00209387007EC8
+:1092D00054E00034000030210E000DE700000000D3
+:1092E0008F8600580A000EFF240200018F87009825
+:1092F0002405000210E50031240400130000282199
+:1093000000003021240700010E000D2F0000000096
+:109310000A000F008F8600588F83009824020002F5
+:109320001462FFF6240400120E000D9A00000000E3
+:109330008F85009400403021240400120E000D2F70
+:10934000000038210A000F008F8600588F83009894
+:109350002411000310710029241F0002107FFFCE8A
+:1093600026090001240400100000282100003021FB
+:109370000A000F1D240700018F91009824060002A7
+:109380001626FFF9240400100E000E410000000014
+:10939000144000238F9800588F8600580A000EFF53
+:1093A00024020003240400140E000D2F00002821C5
+:1093B0008F8600580A000EFF240200020E000EA93C
+:1093C000000000000A000F008F8600580E000D3FBD
+:1093D00000000000241900022404001400002821C9
+:1093E0000000302100003821AF9900980E000D2FA9
+:1093F000000000000A000F008F8600580E000D5775
+:10940000000000008F8500942419000200403021E4
+:1094100024040010000038210A000F56AF9900986C
+:109420000040382124040010970F0002000028217A
+:109430000E000D2F31E6FFFF8F8600580A000F0047
+:10944000AF9100988F84FF2C3C077FFF34E6FFFF2D
+:109450008C8500182402000100A61824AC83001893
+:1094600003E00008A08200053084FFFF30A5FFFF65
+:109470001080000700001821308200011040000217
+:1094800000042042006518211480FFFB00052840DD
+:1094900003E000080060102110C000070000000079
+:1094A0008CA2000024C6FFFF24A50004AC820000AB
+:1094B00014C0FFFB2484000403E000080000000047
+:1094C00010A0000824A3FFFFAC86000000000000ED
+:1094D000000000002402FFFF2463FFFF1462FFFA74
+:1094E0002484000403E0000800000000000411C010
+:1094F00003E000082442024027BDFFE8AFB000109F
+:1095000000808021AFBF00140E000F9600A0202124
+:1095100000504821240AFF808FBF00148FB0001034
+:10952000012A30243127007F3C08800A3C042100B6
+:1095300000E8102100C428253C03800027BD001846
+:10954000AC650024AF820038AC400000AC6500245C
+:1095500003E00008AC4000403C0D08008DAD005811
+:1095600000056180240AFF8001A45821016C482174
+:10957000012A30243127007F3C08800C3C04210064
+:1095800000E8102100C428253C038000AC650028B9
+:10959000AF82003403E00008AC40002430A5FFFF98
+:1095A0003C0680008CC201B80440FFFE3C086015F8
+:1095B00000A838253C031000ACC40180ACC0018475
+:1095C000ACC7018803E00008ACC301B83C0D08003B
+:1095D0008DAD005800056180240AFF8001A4582148
+:1095E000016C4021010A4824000931403107007F05
+:1095F00000C728253C04200000A418253C02800058
+:10960000AC43083003E00008AF80003427BDFFE81A
+:10961000AFB0001000808021AFBF00140E000F9685
+:1096200000A0202100504821240BFF80012B502452
+:10963000000A39403128007F3C0620008FBF00140B
+:109640008FB0001000E8282534C2000100A21825C0
+:109650003C04800027BD0018AC83083003E00008FC
+:10966000AF8000383C0580088CA700603C0680086D
+:109670000087102B144000112C8340008CA8006040
+:109680002D0340001060000F240340008CC90060CF
+:109690000089282B14A00002008018218CC30060D0
+:1096A00000035A42000B30803C0A0800254A59202A
+:1096B00000CA202103E000088C8200001460FFF340
+:1096C0002403400000035A42000B30803C0A08008B
+:1096D000254A592000CA202103E000088C8200009E
+:1096E0003C05800890A60008938400AB24C20001CA
+:1096F000304200FF3043007F1064000C0002382726
+:10970000A0A200083C0480008C85017804A0FFFE24
+:109710008F8A00A0240900023C081000AC8A014096
+:10972000A089014403E00008AC8801780A00101BFE
+:1097300030E2008027BDFFD8AFB200188F9200A49E
+:10974000AFBF0020AFB3001CAFB00010AFB100142A
+:109750008F9300348E5900283C1000803C0EFFEFA0
+:10976000AE7900008E580024A260000A35CDFFFFBC
+:10977000AE7800049251002C3C0BFF9F356AFFFF2E
+:10978000A271000C8E6F000C3C080040A271000B0F
+:1097900001F06025018D4824012A382400E8302595
+:1097A000AE66000C8E450004AE6000183C0400FF5D
+:1097B000AE6500148E43002C3482FFFFA6600008C3
+:1097C0000062F824AE7F00108E5900088F9000A030
+:1097D000964E0012AE7900208E51000C31D83FFF1A
+:1097E00000187980AE7100248E4D001401F06021C4
+:1097F00031CB0001AE6D00288E4A0018000C41C22A
+:10980000000B4B80AE6A002C8E46001C01093821EB
+:10981000A667001CAE660030964500028E4400200C
+:10982000A665001EAE64003492430033306200042B
+:1098300054400006924700003C0280083443010077
+:109840008C7F00D0AE7F0030924700008F860038BA
+:10985000A0C700309245003330A4000250800007BA
+:10986000925100018F880038240BFF80910A00304C
+:10987000014B4825A1090030925100018F9000381A
+:10988000240CFFBF2404FFDFA21100318F8D0038AC
+:109890003C1880083711008091AF003C31EE007F0A
+:1098A000A1AE003C8F890038912B003C016C502404
+:1098B000A12A003C8F9F00388E68001493E6003C7C
+:1098C0002D0700010007114000C4282400A218251C
+:1098D000A3E3003C8F87003896590012A4F90032A8
+:1098E0008E450004922E007C30B0000300107823D7
+:1098F00031ED000300AD102131CC000215800002D3
+:1099000024460034244600303C0280083443008062
+:10991000907F007C00BFC824333800041700000289
+:1099200024C2000400C010218F98003824190002BE
+:10993000ACE20034A3190000924F003F8F8E003834
+:109940003C0C8008358B0080A1CF00018F9100383E
+:10995000924D003F8E440004A62D0002956A005CE3
+:109960000E000FF43150FFFF00024B800209382532
+:109970003C08420000E82825AE2500048E4400384B
+:109980008F850038ACA400188E460034ACA6001CAD
+:10999000ACA0000CACA00010A4A00014A4A0001661
+:1099A000A4A00020A4A00022ACA000248E62001479
+:1099B00050400001240200018FBF00208FB3001C23
+:1099C0008FB200188FB100148FB00010ACA2000845
+:1099D0000A00101327BD002827BDFFC83C058008DA
+:1099E00034A40080AFBF0034AFBE0030AFB7002C4E
+:1099F000AFB60028AFB50024AFB40020AFB3001C51
+:109A0000AFB20018AFB10014AFB00010948300786B
+:109A10009482007A104300512405FFFF0080F0215A
+:109A20000A0011230080B821108B004D8FBF003435
+:109A30008F8600A03C1808008F18005C2411FF805E
+:109A40003C1680000306782101F18024AED0002C62
+:109A500096EE007A31EC007F3C0D800E31CB7FFF1B
+:109A6000018D5021000B4840012AA82196A4000036
+:109A70003C0808008D0800582405FF8030953FFF02
+:109A800001061821001539800067C8210325F82434
+:109A90003C02010003E290253338007F3C11800C2A
+:109AA000AED20028031190219250000D320F000415
+:109AB00011E0003702E0982196E3007A96E8007AF8
+:109AC00096E5007A2404800031077FFF24E300013B
+:109AD00030627FFF00A4F82403E2C825A6F9007ACB
+:109AE00096E6007A3C1408008E94006030D67FFF22
+:109AF00012D400C1000000008E5800188F8400A00E
+:109B000002A028212713FFFF0E000FCEAE53002C1A
+:109B100097D5007897D4007A12950010000028217C
+:109B20003C098008352401003C0A8008914800085F
+:109B3000908700D53114007F30E400FF0284302B81
+:109B400014C0FFB9268B0001938E00AB268C000158
+:109B5000008E682115ACFFB78F8600A08FBF003440
+:109B60008FBE00308FB7002C8FB600288FB5002431
+:109B70008FB400208FB3001C8FB200188FB1001477
+:109B80008FB0001000A0102103E0000827BD0038AE
+:109B900000C020210E000F99028028218E4B00105A
+:109BA0008E4C00308F84003824090002016C502351
+:109BB000AE4A0010A089000096E3005C8E4400309D
+:109BC0008F9100380E000FF43070FFFF00024380C9
+:109BD000020838253C02420000E22825AE25000498
+:109BE0008E5F00048F8A00388E590000240B000815
+:109BF000AD5F001CAD590018AD40000CAD40001029
+:109C00009246000A240400052408C00030D000FF5A
+:109C1000A550001496580008A55800169251000A45
+:109C20003C188008322F00FFA54F0020964E0008F8
+:109C300037110100A54E0022AD400024924D000BCB
+:109C400031AC00FFA54C0002A14B00018E49003051
+:109C50008F830038240BFFBFAC690008A06400307C
+:109C60008F9000382403FFDF9607003200E8282495
+:109C700000B51025A6020032921F003233F9003FD2
+:109C800037260040A20600328F8C0038AD800034A9
+:109C90008E2F00D0AD8F0038918E003C3C0F7FFF9F
+:109CA00031CD007FA18D003C8F84003835EEFFFF61
+:109CB000908A003C014B4824A089003C8F850038E5
+:109CC00090A8003C01033824A0A7003C8E42003439
+:109CD0008F9100383C038008AE2200408E59002C42
+:109CE0008E5F0030033F3023AE26004492300048A0
+:109CF0003218007FA23800488F8800388E4D00301F
+:109D00008D0C004801AE582401965024014B482583
+:109D1000AD0900489244000AA104004C964700088F
+:109D20008F850038A4A7004E8E5000308E4400303E
+:109D30000E0003818C65006092F9007C0002F940FE
+:109D4000004028210002110003E2302133360002D6
+:109D500012C00003020680210005B0800216802197
+:109D6000926D007C31B30004126000020005708027
+:109D7000020E80218E4B00308F8800382405800031
+:109D8000316A0003000A4823312400030204182129
+:109D9000AD03003496E4007A96F0007A96F1007AEA
+:109DA00032027FFF2447000130FF7FFF0225C824D5
+:109DB000033F3025A6E6007A96F8007A3C120800A8
+:109DC0008E520060330F7FFF11F200180000000078
+:109DD0008F8400A00E000FCE02A028218F8400A047
+:109DE0000E000FDE028028210E001013000000007C
+:109DF0000A00111F0000000096F1007A022480245E
+:109E0000A6F0007A92EF007A92EB007A31EE00FF32
+:109E1000000E69C2000D6027000C51C03169007F3F
+:109E2000012A20250A001119A2E4007A96E6007A98
+:109E300000C5C024A6F8007A92EF007A92F3007A67
+:109E400031F200FF001271C2000E6827000DB1C090
+:109E5000326C007F01962825A2E5007A0A0011D015
+:109E60008F8400A03C0380003084FFFF30A5FFFFFB
+:109E7000AC640018AC65001C03E000088C620014A0
+:109E800027BDFFA03C068008AFBF005CAFBE0058F6
+:109E9000AFB70054AFB60050AFB5004CAFB40048F8
+:109EA000AFB30044AFB20040AFB1003CAFB0003838
+:109EB00034C80100910500D590C700083084FFFF29
+:109EC00030A500FF30E2007F0045182AAFA4001043
+:109ED000A7A00018A7A0002610600055AFA000148E
+:109EE00090CA00083149007F00A9302324D3FFFF26
+:109EF0000013802B8FB400100014902B02128824C2
+:109F0000522000888FB300143C03800894790052DB
+:109F1000947E00508FB60010033EC0230018BC0092
+:109F2000001714030016FC0002C2A82A16A00002A3
+:109F3000001F2C030040282100133C0000072403CD
+:109F400000A4102A5440000100A020212885000907
+:109F500014A000020080A021241400083C0C8008FA
+:109F60008D860048001459808D88004C3C03800089
+:109F70003169FFFF3C0A0010012A202534710400DA
+:109F8000AC660038AF9100A4AC68003CAC64003013
+:109F900000000000000000000000000000000000C1
+:109FA00000000000000000000000000000000000B1
+:109FB0008C6E000031CD002011A0FFFD0014782A26
+:109FC00001F01024104000390000A8213C16800840
+:109FD00092D700083C1280008E44010032F6007FC8
+:109FE0000E000F9902C028218E3900108E44010006
+:109FF0000000902133373FFF0E000FB102E028210F
+:10A00000923800003302003F2C500008520000102C
+:10A0100000008821000210803C030800246358E4FB
+:10A020000043F8218FFE000003C00008000000007C
+:10A0300090CF0008938C00AB31EE007F00AE682318
+:10A04000018D58210A0012172573FFFF0000882197
+:10A050003C1E80008FC401000E000FCE02E02821BC
+:10A060008FC401000E000FDE02C028211220000F55
+:10A070000013802B8F8B00A426A400010004AC00E9
+:10A08000027298230015AC032578004002B4B02A70
+:10A090000013802B241700010300882102D0102414
+:10A0A000AF9800A41440FFC9AFB700143C07800864
+:10A0B00094E200508FAE00103C05800002A288217F
+:10A0C0003C060020A4F10050ACA6003094F40050EF
+:10A0D00094EF005201D51823306CFFFF11F4001EDD
+:10A0E000AFAC00108CEF004C001561808CF500487F
+:10A0F00001EC28210000202100AC582B02A4C02133
+:10A10000030BB021ACE5004CACF600488FB4001056
+:10A110000014902B021288241620FF7C3C03800838
+:10A120008FB300148FBF005C8FBE00583A620001ED
+:10A130008FB700548FB600508FB5004C8FB40048D5
+:10A140008FB300448FB200408FB1003C8FB0003815
+:10A1500003E0000827BD006094FE00548CF2004428
+:10A1600033C9FFFE0009C8C00259F821ACBF003C4A
+:10A170008CE800448CAD003C010D50231940003B9D
+:10A18000000000008CF7004026E20001ACA200387D
+:10A190003C05005034A700103C038000AC67003041
+:10A1A00000000000000000000000000000000000AF
+:10A1B000000000000000000000000000000000009F
+:10A1C0008C7800003316002012C0FFFD3C1180087F
+:10A1D000962200543C1580003C068008304E000159
+:10A1E000000E18C0007578218DEC04003C070800B3
+:10A1F0008CE700443C040020ACCC00488DF40404FF
+:10A20000240B0001ACD4004C10EB0260AEA4003073
+:10A21000963900523C0508008CA5004000B99021F9
+:10A22000A6320052963F005427ED0001A62D00549F
+:10A230009626005430C4FFFF5487FF2F8FB40010C0
+:10A2400030A5FFFF0E0011F4A62000543C070800C3
+:10A250008CE70024963E00520047B82303D74823DA
+:10A26000A62900520A0012198FB400108CE2004097
+:10A270000A0012BE00000000922400012407000121
+:10A280003085007F14A7001C97AD00268E2B00148C
+:10A29000240CC000316A3FFF01AC48243C06080092
+:10A2A0008CC60060012A402531043FFF0086882BC0
+:10A2B00012200011A7A800263C0508008CA5005814
+:10A2C0008F9100A0000439802402FF8000B1182182
+:10A2D0000067F82103E2F02433F8007F3C1280008D
+:10A2E0003C19800EAE5E002C0319702191D0000D38
+:10A2F000360F0004A1CF000D0E001028241200011B
+:10A30000241100013C1E80008FC401000E000FCEFE
+:10A3100002E028218FC401000E000FDE02C02821B8
+:10A320001620FF558F8B00A40A0012860013802B85
+:10A330008F8600A490C80001310400201080019194
+:10A34000241000013C048008348B0080916A007C5A
+:10A350008F9E0034AFA0002C314900011120000F66
+:10A36000AFB000288CCD00148C8E006001AE602B45
+:10A370001580000201A038218C8700603C188008FD
+:10A38000370300808C70007000F0782B15E000021D
+:10A3900000E020218C640070AFA4002C3C028008F7
+:10A3A000344500808CD200148CBF0070025FC82B33
+:10A3B00017200002024020218CA400708FA7002CDF
+:10A3C0000087182310600003AFA3003024050002AB
+:10A3D000AFA500288FA400280264882B162000BA9D
+:10A3E000000018218CD000388FCE000C3C0F00806C
+:10A3F000AFD000008CCD00343C0CFF9F01CF58251E
+:10A40000AFCD000490CA003F3586FFFF01662024CF
+:10A410003C0900203C08FFEFA3CA000B0089382547
+:10A420003511FFFF00F118243C0500088F8700A4B8
+:10A430000065C825AFD9000C8CE20014AFC000182D
+:10A440008FA60030AFC200148CF800188FB0002C1B
+:10A450003C1FFFFBAFD8001C8CEF000837F2FFFF5A
+:10A4600003326824AFCF00248CEC000C020670216C
+:10A47000AFCD000CA7C00038A7C0003AAFCE002C6B
+:10A48000AFCC0020AFC000288CEA00148FAB002CAA
+:10A49000014B48230126402311000011AFC80010D2
+:10A4A00090EB003D8FC900048FC80000000B5100E5
+:10A4B000012A28210000102100AA882B010218215E
+:10A4C0000071F821AFC50004AFDF000090F2003D3D
+:10A4D000A3D2000A8F9900A497380006A7D80008D5
+:10A4E0008F910038240800023C038008A228000055
+:10A4F0003465008094BF005C8FA4002C33F0FFFF14
+:10A500000E000FF48F9200380002CB808F8500A4DC
+:10A51000021978253C18420001F87025AE4E00045F
+:10A520008F8400388CAD0038AC8D00188CAC0034B2
+:10A53000AC8C001CAC80000CAC800010A48000141B
+:10A54000A4800016A4800020A4800022AC800024F7
+:10A5500090A6003F8FA7002CA486000250E0019235
+:10A56000240700018FA200305040000290A2003D5D
+:10A5700090A2003E244A0001A08A00018F84003886
+:10A580008FA9002CAC8900083C128008364D008051
+:10A5900091AC007C3186000214C000022407003414
+:10A5A000240700308F8500A43C198008373F0080C5
+:10A5B00090B0000093F9007C240E0004A0900030BD
+:10A5C0008F8F00A48FB8002C8F8D003891F200017E
+:10A5D0003304000301C46023A1B200318F8E003820
+:10A5E0008F8600A42402C00095CA003294C90012CC
+:10A5F0008FAB002C0142402431233FFF010388250B
+:10A60000A5D1003291D000323185000300EBF82152
+:10A610003218003F370F0040A1CF00328FA4002C2A
+:10A6200003E5382133280004108000028F850038AC
+:10A6300000E838213C0A8008ACA700343549010005
+:10A640008D2800D08FA3002C2419FFBFACA80038A0
+:10A6500090B1003C2C640001240FFFDF3227007F03
+:10A66000A0A7003C8F98003800049140931F003C45
+:10A6700003F98024A310003C8F8C0038918E003C9D
+:10A6800001CF682401B23025A186003C8F8900A447
+:10A690008F8800388D2B0020AD0B00408D220024C8
+:10A6A000AD0200448D2A0028AD0A00488D23002CFD
+:10A6B0000E001013AD03004C8FB1002824070002D8
+:10A6C000122700118FA300280003282B00058023E8
+:10A6D0000270982400608021006090210A00126FAF
+:10A6E0000010882B962900128F8400A00000902172
+:10A6F0003125FFFFA7A900180E000FC22411000189
+:10A700000A00131D3C1E80003C0B80003C12800898
+:10A710008D640100924900088F92FF340E000F995A
+:10A720003125007F8F9900388FA700288FA4003033
+:10A73000A3270000965F005C33F0FFFF0E000FF4CC
+:10A740008F91003800026B80020D80253C0842008A
+:10A750008F8D00A402085025AE2A00048DA5003874
+:10A760008F8A003800007821000F1100AD450018D5
+:10A770008DB800343C047FFF3488FFFFAD58001CC7
+:10A7800091A6003E8D4C001C8D4900180006190052
+:10A79000000677020183C821004E58250323882B29
+:10A7A000012B382100F1F821AD59001CAD5F0018D4
+:10A7B000AD40000CAD40001091B0003E8FA40030C1
+:10A7C00024090005A550001495A500042419C00013
+:10A7D00000884024A545001691B8003EA5580020E9
+:10A7E00095AF0004A54F0022AD40002491AE003F7C
+:10A7F000A54E000291A6003E91AC003D01861023BB
+:10A80000244B0001A14B00018F9100388FA3003031
+:10A810003C028008344B0100AE230008A22900301E
+:10A820008F8C00388F8700A4959F003294F000121F
+:10A830002407FFBF033FC02432053FFF03057825EF
+:10A84000A58F0032918E00322418FFDF31CD003FFA
+:10A8500035A60040A18600328F910038240DFFFFFD
+:10A86000240CFF80AE2000348D6A00D0AE2A003860
+:10A870009223003C3069007FA229003C8F90003871
+:10A880003C0380009219003C0327F824A21F003CDF
+:10A890008F8E003891C5003C00B87824A1CF003CD1
+:10A8A0008F8A00383C0E8008AD4D00408FA6002CEA
+:10A8B000AD46004491420048004C5825A14B004849
+:10A8C0008F9000388F9900A48E09004801238824B6
+:10A8D00002283825AE070048933F003EA21F004CD7
+:10A8E0008F9800A48F8F003897050004A5E5004ECF
+:10A8F0000E0003818DC500609246007C8FAC003055
+:10A9000000026940000291000040282130CB000283
+:10A9100001B21021156000AA018230213C0E80088E
+:10A9200035C20080904C007C31830004106000032D
+:10A930008FB900300005788000CF3021241F00043B
+:10A940008F910038332D000303ED8023320800037C
+:10A9500000C85021AE2A00343C188000A7C500383A
+:10A960003C0680088F04010090DE00080E000FDE18
+:10A9700033C5007F0E001013000000000A00140D04
+:10A980008FA300288F9800348CC90038241F00033F
+:10A99000A7000008AF0900008CC50034A300000A1E
+:10A9A0008F9900A4AF0500043C080080932D003F60
+:10A9B000A31F000C8F0A000C3C02FF9FA30D000B8D
+:10A9C0000148F0253451FFFF3C12FFEF8F9900A49E
+:10A9D00003D170243646FFFF01C61824AF03000CD4
+:10A9E0008F2C0014972900128F8400A0AF0C001048
+:10A9F0008F2F0014AF000018AF000020AF0F00141D
+:10AA0000AF0000248F270018312F3FFF000F59801F
+:10AA1000AF0700288F2500080164F821312D0001BF
+:10AA2000AF0500308F31000C8F920038001F51C2EB
+:10AA3000000D438001481021241E00023C068008BE
+:10AA4000A702001CA7000034AF11002CA25E00007A
+:10AA500034D20080964E005C8F9900383C0342004F
+:10AA600031CCFFFF01833825AF2700048F8B00A472
+:10AA7000240500012402C0008D640038240700343E
+:10AA8000AF2400188D690034AF29001CAF20000CE2
+:10AA9000AF200010A7200014A7200016A720002038
+:10AAA000A7200022AF200024A7300002A325000128
+:10AAB0008F8800388F9F00A4AD10000893ED000030
+:10AAC000A10D00308F8A00A48F98003891510001A9
+:10AAD000A31100318F8B0038957E003203C27024A1
+:10AAE00001CF6025A56C0032916300323064003FD5
+:10AAF000A16400329249007C3125000214A00002BA
+:10AB00008F840038240700303C198008AC8700345B
+:10AB1000373201008E5F00D0240AFFBF020090216F
+:10AB2000AC9F0038908D003C31A8007FA088003C8D
+:10AB30008F9E003893C2003C004A8824A3D1003C79
+:10AB40008F8300380010882B9066003C34CE0020A4
+:10AB5000A06E003C8F8400A48F9800388C8C00205D
+:10AB6000AF0C00408C8F0024AF0F00448C8700286E
+:10AB7000AF0700488C8B002CAF0B004C0E0010135D
+:10AB80003C1E80000A0012700000000094C80052B1
+:10AB90003C0A08008D4A002401488821A4D10052B3
+:10ABA0000A0012198FB40010A08700018F840038AA
+:10ABB000240B0001AC8B00080A0013BE3C12800875
+:10ABC000000520800A0014A200C4302127BDFFE048
+:10ABD0003C0D8008AFB20018AFB00010AFBF001C32
+:10ABE000AFB1001435B200808E4C001835A80100BA
+:10ABF000964B000695A70050910900FC000C5602E8
+:10AC0000016728233143007F312600FF240200031F
+:10AC1000AF8300A8AF8400A010C2001B30B0FFFFBC
+:10AC2000910600FC2412000530C200FF10520033D0
+:10AC300000000000160000098FBF001C8FB2001832
+:10AC40008FB100148FB00010240D0C003C0C80005C
+:10AC500027BD002003E00008AD8D00240E0011FB8D
+:10AC6000020020218FBF001C8FB200188FB100148A
+:10AC70008FB00010240D0C003C0C800027BD00207C
+:10AC800003E00008AD8D0024965800789651007AB4
+:10AC9000924E007D0238782631E8FFFF31C400C0B3
+:10ACA000148000092D11000116000037000000007B
+:10ACB0005620FFE28FBF001C0E0010D100000000E4
+:10ACC0000A00156A8FBF001C1620FFDA0000000082
+:10ACD0000E0010D1000000001440FFD88FBF001CF0
+:10ACE0001600002200000000925F007D33E2003F6A
+:10ACF000A242007D0A00156A8FBF001C950900EA78
+:10AD00008F86008000802821240400050E0007257E
+:10AD10003130FFFF978300923C0480002465FFFFE1
+:10AD2000A78500928C8A01B80540FFFE0000000054
+:10AD3000AC8001808FBF001CAC9001848FB20018E2
+:10AD40008FB100148FB000103C0760133C0B100053
+:10AD5000240D0C003C0C800027BD0020AC8701882E
+:10AD6000AC8B01B803E00008AD8D00240E0011FB90
+:10AD7000020020215040FFB18FBF001C925F007D78
+:10AD80000A00159733E2003F0E0011FB020020215C
+:10AD90001440FFAA8FBF001C122000070000000013
+:10ADA0009259007D3330003F36020040A242007DC0
+:10ADB0000A00156A8FBF001C0E0010D100000000B1
+:10ADC0005040FF9E8FBF001C9259007D3330003FE2
+:10ADD0000A0015C636020040000000000000001BFB
+:10ADE0000000000F0000000A00000008000000063C
+:10ADF0000000000500000005000000040000000441
+:10AE00000000000300000003000000030000000336
+:10AE10000000000300000002000000020000000229
+:10AE2000000000020000000200000002000000021A
+:10AE3000000000020000000200000002000000020A
+:10AE400000000002000000020000000200000002FA
+:10AE50000000000100000001000000018008010066
+:10AE6000800800808008000000000C000000308096
+:10AE7000080011D00800127C08001294080012A8E3
+:10AE8000080012BC080011D0080011D0080012F010
+:10AE90000800132C080013400800138808001A8CBF
+:10AEA00008001A8C08001AC408001AC408001AD82E
+:10AEB00008001AA808001D0008001CCC08001D5836
+:10AEC00008001D5808001DE008001D108008024001
+:10AED000080027340800256C0800275C080027F4C8
+:10AEE0000800293C0800298808002AAC080029B479
+:10AEF00008002A38080025DC08002EDC08002EA4F3
+:10AF000008002588080025880800258808002B20CF
+:10AF100008002B20080025880800258808002DD06F
+:10AF2000080025880800258808002588080025884D
+:10AF300008002E0C080025880800258808002588B0
+:10AF4000080025880800258808002588080025882D
+:10AF5000080025880800258808002588080025881D
+:10AF6000080025880800258808002588080029A8E9
+:10AF7000080025880800258808002E680800258814
+:10AF800008002588080025880800258808002588ED
+:10AF900008002588080025880800258808002588DD
+:10AFA00008002588080025880800258808002588CD
+:10AFB00008002588080025880800258808002588BD
+:10AFC00008002CF4080025880800258808002C6853
+:10AFD00008002BC408003CE408003CB808003C848E
+:10AFE00008003C5808003C3808003BEC8008010091
+:10AFF00080080080800800008008008008004C6401
+:10B0000008004C9C08004BE408004C6408004C64A9
+:10B01000080049B808004C64080050500A000C842D
+:10B0200000000000000000000000000D7278703683
+:10B030002E322E31620000000602010300000000E3
+:10B0400000000001000000000000000000000000FF
+:10B0500000000000000000000000000000000000F0
+:10B0600000000000000000000000000000000000E0
+:10B0700000000000000000000000000000000000D0
+:10B0800000000000000000000000000000000000C0
+:10B0900000000000000000000000000000000000B0
+:10B0A00000000000000000000000000000000000A0
+:10B0B0000000000000000000000000000000000090
+:10B0C0000000000000000000000000000000000080
+:10B0D0000000000000000000000000000000000070
+:10B0E0000000000000000000000000000000000060
+:10B0F0000000000000000000000000000000000050
+:10B10000000000000000000000000000000000003F
+:10B11000000000000000000000000000000000002F
+:10B12000000000000000000000000000000000001F
+:10B13000000000000000000000000000000000000F
+:10B1400000000000000000000000000000000000FF
+:10B1500000000000000000000000000000000000EF
+:10B1600000000000000000000000000000000000DF
+:10B1700000000000000000000000000000000000CF
+:10B1800000000000000000000000000000000000BF
+:10B1900000000000000000000000000000000000AF
+:10B1A000000000000000000000000000000000009F
+:10B1B000000000000000000000000000000000008F
+:10B1C000000000000000000000000000000000007F
+:10B1D000000000000000000000000000000000006F
+:10B1E000000000000000000000000000000000005F
+:10B1F000000000000000000000000000000000004F
+:10B20000000000000000000000000000000000003E
+:10B21000000000000000000000000000000000002E
+:10B22000000000000000000000000000000000001E
+:10B23000000000000000000000000000000000000E
+:10B2400000000000000000000000000000000000FE
+:10B2500000000000000000000000000000000000EE
+:10B2600000000000000000000000000000000000DE
+:10B2700000000000000000000000000000000000CE
+:10B2800000000000000000000000000000000000BE
+:10B2900000000000000000000000000000000000AE
+:10B2A000000000000000000000000000000000009E
+:10B2B000000000000000000000000000000000008E
+:10B2C000000000000000000000000000000000007E
+:10B2D000000000000000000000000000000000006E
+:10B2E000000000000000000000000000000000005E
+:10B2F000000000000000000000000000000000004E
+:10B30000000000000000000000000000000000003D
+:10B31000000000000000000000000000000000002D
+:10B32000000000000000000000000000000000001D
+:10B33000000000000000000000000000000000000D
+:10B3400000000000000000000000000000000000FD
+:10B3500000000000000000000000000000000000ED
+:10B3600000000000000000000000000000000000DD
+:10B3700000000000000000000000000000000000CD
+:10B3800000000000000000000000000000000000BD
+:10B3900000000000000000000000000000000000AD
+:10B3A000000000000000000000000000000000009D
+:10B3B000000000000000000000000000000000008D
+:10B3C000000000000000000000000000000000007D
+:10B3D000000000000000000000000000000000006D
+:10B3E000000000000000000000000000000000005D
+:10B3F000000000000000000000000000000000004D
+:10B40000000000000000000000000000000000003C
+:10B41000000000000000000000000000000000002C
+:10B42000000000000000000000000000000000001C
+:10B43000000000000000000000000000000000000C
+:10B4400000000000000000000000000000000000FC
+:10B4500000000000000000000000000000000000EC
+:10B4600000000000000000000000000000000000DC
+:10B4700000000000000000000000000000000000CC
+:10B4800000000000000000000000000000000000BC
+:10B4900000000000000000000000000000000000AC
+:10B4A000000000000000000000000000000000009C
+:10B4B000000000000000000000000000000000008C
+:10B4C000000000000000000000000000000000007C
+:10B4D000000000000000000000000000000000006C
+:10B4E000000000000000000000000000000000005C
+:10B4F000000000000000000000000000000000004C
+:10B50000000000000000000000000000000000003B
+:10B51000000000000000000000000000000000002B
+:10B52000000000000000000000000000000000001B
+:10B53000000000000000000000000000000000000B
+:10B5400000000000000000000000000000000000FB
+:10B5500000000000000000000000000000000000EB
+:10B5600000000000000000000000000000000000DB
+:10B5700000000000000000000000000000000000CB
+:10B5800000000000000000000000000000000000BB
+:10B5900000000000000000000000000000000000AB
+:10B5A000000000000000000000000000000000009B
+:10B5B000000000000000000000000000000000008B
+:10B5C000000000000000000000000000000000007B
+:10B5D000000000000000000000000000000000006B
+:10B5E000000000000000000000000000000000005B
+:10B5F000000000000000000000000000000000004B
+:10B60000000000000000000000000000000000003A
+:10B61000000000000000000000000000000000002A
+:10B62000000000000000000000000000000000001A
+:10B63000000000000000000000000000000000000A
+:10B6400000000000000000000000000000000000FA
+:10B6500000000000000000000000000000000000EA
+:10B6600000000000000000000000000000000000DA
+:10B6700000000000000000000000000000000000CA
+:10B6800000000000000000000000000000000000BA
+:10B6900000000000000000000000000000000000AA
+:10B6A000000000000000000000000000000000009A
+:10B6B000000000000000000000000000000000008A
+:10B6C000000000000000000000000000000000007A
+:10B6D000000000000000000000000000000000006A
+:10B6E000000000000000000000000000000000005A
+:10B6F000000000000000000000000000000000004A
+:10B700000000000000000000000000000000000039
+:10B710000000000000000000000000000000000029
+:10B720000000000000000000000000000000000019
+:10B730000000000000000000000000000000000009
+:10B7400000000000000000000000000000000000F9
+:10B7500000000000000000000000000000000000E9
+:10B7600000000000000000000000000000000000D9
+:10B7700000000000000000000000000000000000C9
+:10B7800000000000000000000000000000000000B9
+:10B7900000000000000000000000000000000000A9
+:10B7A0000000000000000000000000000000000099
+:10B7B0000000000000000000000000000000000089
+:10B7C0000000000000000000000000000000000079
+:10B7D0000000000000000000000000000000000069
+:10B7E0000000000000000000000000000000000059
+:10B7F0000000000000000000000000000000000049
+:10B800000000000000000000000000000000000038
+:10B810000000000000000000000000000000000028
+:10B820000000000000000000000000000000000018
+:10B830000000000000000000000000000000000008
+:10B8400000000000000000000000000000000000F8
+:10B8500000000000000000000000000000000000E8
+:10B8600000000000000000000000000000000000D8
+:10B8700000000000000000000000000000000000C8
+:10B8800000000000000000000000000000000000B8
+:10B8900000000000000000000000000000000000A8
+:10B8A0000000000000000000000000000000000098
+:10B8B0000000000000000000000000000000000088
+:10B8C0000000000000000000000000000000000078
+:10B8D0000000000000000000000000000000000068
+:10B8E0000000000000000000000000000000000058
+:10B8F0000000000000000000000000000000000048
+:10B900000000000000000000000000000000000037
+:10B910000000000000000000000000000000000027
+:10B920000000000000000000000000000000000017
+:10B930000000000000000000000000000000000007
+:10B9400000000000000000000000000000000000F7
+:10B9500000000000000000000000000000000000E7
+:10B9600000000000000000000000000000000000D7
+:10B9700000000000000000000000000000000000C7
+:10B9800000000000000000000000000000000000B7
+:10B9900000000000000000000000000000000000A7
+:10B9A0000000000000000000000000000000000097
+:10B9B0000000000000000000000000000000000087
+:10B9C0000000000000000000000000000000000077
+:10B9D0000000000000000000000000000000000067
+:10B9E0000000000000000000000000000000000057
+:10B9F0000000000000000000000000000000000047
+:10BA00000000000000000000000000000000000036
+:10BA10000000000000000000000000000000000026
+:10BA20000000000000000000000000000000000016
+:10BA30000000000000000000000000000000000006
+:10BA400000000000000000000000000000000000F6
+:10BA500000000000000000000000000000000000E6
+:10BA600000000000000000000000000000000000D6
+:10BA700000000000000000000000000000000000C6
+:10BA800000000000000000000000000000000000B6
+:10BA900000000000000000000000000000000000A6
+:10BAA0000000000000000000000000000000000096
+:10BAB0000000000000000000000000000000000086
+:10BAC0000000000000000000000000000000000076
+:10BAD0000000000000000000000000000000000066
+:10BAE0000000000000000000000000000000000056
+:10BAF0000000000000000000000000000000000046
+:10BB00000000000000000000000000000000000035
+:10BB10000000000000000000000000000000000025
+:10BB20000000000000000000000000000000000015
+:10BB30000000000000000000000000000000000005
+:10BB400000000000000000000000000000000000F5
+:10BB500000000000000000000000000000000000E5
+:10BB600000000000000000000000000000000000D5
+:10BB700000000000000000000000000000000000C5
+:10BB800000000000000000000000000000000000B5
+:10BB900000000000000000000000000000000000A5
+:10BBA0000000000000000000000000000000000095
+:10BBB0000000000000000000000000000000000085
+:10BBC0000000000000000000000000000000000075
+:10BBD0000000000000000000000000000000000065
+:10BBE0000000000000000000000000000000000055
+:10BBF0000000000000000000000000000000000045
+:10BC00000000000000000000000000000000000034
+:10BC10000000000000000000000000000000000024
+:10BC20000000000000000000000000000000000014
+:10BC30000000000000000000000000000000000004
+:10BC400000000000000000000000000000000000F4
+:10BC500000000000000000000000000000000000E4
+:10BC600000000000000000000000000000000000D4
+:10BC700000000000000000000000000000000000C4
+:10BC800000000000000000000000000000000000B4
+:10BC900000000000000000000000000000000000A4
+:10BCA0000000000000000000000000000000000094
+:10BCB0000000000000000000000000000000000084
+:10BCC0000000000000000000000000000000000074
+:10BCD0000000000000000000000000000000000064
+:10BCE0000000000000000000000000000000000054
+:10BCF0000000000000000000000000000000000044
+:10BD00000000000000000000000000000000000033
+:10BD10000000000000000000000000000000000023
+:10BD20000000000000000000000000000000000013
+:10BD30000000000000000000000000000000000003
+:10BD400000000000000000000000000000000000F3
+:10BD500000000000000000000000000000000000E3
+:10BD600000000000000000000000000000000000D3
+:10BD700000000000000000000000000000000000C3
+:10BD800000000000000000000000000000000000B3
+:10BD900000000000000000000000000000000000A3
+:10BDA0000000000000000000000000000000000093
+:10BDB0000000000000000000000000000000000083
+:10BDC0000000000000000000000000000000000073
+:10BDD0000000000000000000000000000000000063
+:10BDE0000000000000000000000000000000000053
+:10BDF0000000000000000000000000000000000043
+:10BE00000000000000000000000000000000000032
+:10BE10000000000000000000000000000000000022
+:10BE20000000000000000000000000000000000012
+:10BE30000000000000000000000000000000000002
+:10BE400000000000000000000000000000000000F2
+:10BE500000000000000000000000000000000000E2
+:10BE600000000000000000000000000000000000D2
+:10BE700000000000000000000000000000000000C2
+:10BE800000000000000000000000000000000000B2
+:10BE900000000000000000000000000000000000A2
+:10BEA0000000000000000000000000000000000092
+:10BEB0000000000000000000000000000000000082
+:10BEC0000000000000000000000000000000000072
+:10BED0000000000000000000000000000000000062
+:10BEE0000000000000000000000000000000000052
+:10BEF0000000000000000000000000000000000042
+:10BF00000000000000000000000000000000000031
+:10BF10000000000000000000000000000000000021
+:10BF20000000000000000000000000000000000011
+:10BF30000000000000000000000000000000000001
+:10BF400000000000000000000000000000000000F1
+:10BF500000000000000000000000000000000000E1
+:10BF600000000000000000000000000000000000D1
+:10BF700000000000000000000000000000000000C1
+:10BF800000000000000000000000000000000000B1
+:10BF900000000000000000000000000000000000A1
+:10BFA0000000000000000000000000000000000091
+:10BFB0000000000000000000000000000000000081
+:10BFC0000000000000000000000000000000000071
+:10BFD0000000000000000000000000000000000061
+:10BFE0000000000000000000000000000000000051
+:10BFF0000000000000000000000000000000000041
+:10C000000000000000000000000000000000000030
+:10C010000000000000000000000000000000000020
+:10C020000000000000000000000000000000000010
+:10C030000000000000000000000000000000000000
+:10C0400000000000000000000000000000000000F0
+:10C0500000000000000000000000000000000000E0
+:10C0600000000000000000000000000000000000D0
+:10C0700000000000000000000000000000000000C0
+:10C0800000000000000000000000000000000000B0
+:10C0900000000000000000000000000000000000A0
+:10C0A0000000000000000000000000000000000090
+:10C0B0000000000000000000000000000000000080
+:10C0C0000000000000000000000000000000000070
+:10C0D0000000000000000000000000000000000060
+:10C0E0000000000000000000000000000000000050
+:10C0F0000000000000000000000000000000000040
+:10C10000000000000000000000000000000000002F
+:10C11000000000000000000000000000000000001F
+:10C12000000000000000000000000000000000000F
+:10C1300000000000000000000000000000000000FF
+:10C1400000000000000000000000000000000000EF
+:10C1500000000000000000000000000000000000DF
+:10C1600000000000000000000000000000000000CF
+:10C1700000000000000000000000000000000000BF
+:10C1800000000000000000000000000000000000AF
+:10C19000000000000000000000000000000000009F
+:10C1A000000000000000000000000000000000008F
+:10C1B000000000000000000000000000000000007F
+:10C1C000000000000000000000000000000000006F
+:10C1D000000000000000000000000000000000005F
+:10C1E000000000000000000000000000000000004F
+:10C1F000000000000000000000000000000000003F
+:10C20000000000000000000000000000000000002E
+:10C21000000000000000000000000000000000001E
+:10C22000000000000000000000000000000000000E
+:10C2300000000000000000000000000000000000FE
+:10C2400000000000000000000000000000000000EE
+:10C2500000000000000000000000000000000000DE
+:10C2600000000000000000000000000000000000CE
+:10C2700000000000000000000000000000000000BE
+:10C2800000000000000000000000000000000000AE
+:10C29000000000000000000000000000000000009E
+:10C2A000000000000000000000000000000000008E
+:10C2B000000000000000000000000000000000007E
+:10C2C000000000000000000000000000000000006E
+:10C2D000000000000000000000000000000000005E
+:10C2E000000000000000000000000000000000004E
+:10C2F000000000000000000000000000000000003E
+:10C30000000000000000000000000000000000002D
+:10C31000000000000000000000000000000000001D
+:10C32000000000000000000000000000000000000D
+:10C3300000000000000000000000000000000000FD
+:10C3400000000000000000000000000000000000ED
+:10C3500000000000000000000000000000000000DD
+:10C3600000000000000000000000000000000000CD
+:10C3700000000000000000000000000000000000BD
+:10C3800000000000000000000000000000000000AD
+:10C39000000000000000000000000000000000009D
+:10C3A000000000000000000000000000000000008D
+:10C3B000000000000000000000000000000000007D
+:10C3C000000000000000000000000000000000006D
+:10C3D000000000000000000000000000000000005D
+:10C3E000000000000000000000000000000000004D
+:10C3F000000000000000000000000000000000003D
+:10C40000000000000000000000000000000000002C
+:10C41000000000000000000000000000000000001C
+:10C42000000000000000000000000000000000000C
+:10C4300000000000000000000000000000000000FC
+:10C4400000000000000000000000000000000000EC
+:10C4500000000000000000000000000000000000DC
+:10C4600000000000000000000000000000000000CC
+:10C4700000000000000000000000000000000000BC
+:10C4800000000000000000000000000000000000AC
+:10C49000000000000000000000000000000000009C
+:10C4A000000000000000000000000000000000008C
+:10C4B000000000000000000000000000000000007C
+:10C4C000000000000000000000000000000000006C
+:10C4D000000000000000000000000000000000005C
+:10C4E000000000000000000000000000000000004C
+:10C4F000000000000000000000000000000000003C
+:10C50000000000000000000000000000000000002B
+:10C51000000000000000000000000000000000001B
+:10C52000000000000000000000000000000000000B
+:10C5300000000000000000000000000000000000FB
+:10C5400000000000000000000000000000000000EB
+:10C5500000000000000000000000000000000000DB
+:10C5600000000000000000000000000000000000CB
+:10C5700000000000000000000000000000000000BB
+:10C5800000000000000000000000000000000000AB
+:10C59000000000000000000000000000000000009B
+:10C5A000000000000000000000000000000000008B
+:10C5B000000000000000000000000000000000007B
+:10C5C000000000000000000000000000000000006B
+:10C5D000000000000000000000000000000000005B
+:10C5E000000000000000000000000000000000004B
+:10C5F000000000000000000000000000000000003B
+:10C60000000000000000000000000000000000002A
+:10C61000000000000000000000000000000000001A
+:10C62000000000000000000000000000000000000A
+:10C6300000000000000000000000000000000000FA
+:10C6400000000000000000000000000000000000EA
+:10C6500000000000000000000000000000000000DA
+:10C6600000000000000000000000000000000000CA
+:10C6700000000000000000000000000000000000BA
+:10C6800000000000000000000000000000000000AA
+:10C69000000000000000000000000000000000009A
+:10C6A000000000000000000000000000000000008A
+:10C6B000000000000000000000000000000000007A
+:10C6C000000000000000000000000000000000006A
+:10C6D000000000000000000000000000000000005A
+:10C6E000000000000000000000000000000000004A
+:10C6F000000000000000000000000000000000003A
+:10C700000000000000000000000000000000000029
+:10C710000000000000000000000000000000000019
+:10C720000000000000000000000000000000000009
+:10C7300000000000000000000000000000000000F9
+:10C7400000000000000000000000000000000000E9
+:10C7500000000000000000000000000000000000D9
+:10C7600000000000000000000000000000000000C9
+:10C7700000000000000000000000000000000000B9
+:10C7800000000000000000000000000000000000A9
+:10C790000000000000000000000000000000000099
+:10C7A0000000000000000000000000000000000089
+:10C7B0000000000000000000000000000000000079
+:10C7C0000000000000000000000000000000000069
+:10C7D0000000000000000000000000000000000059
+:10C7E0000000000000000000000000000000000049
+:10C7F0000000000000000000000000000000000039
+:10C800000000000000000000000000000000000028
+:10C810000000000000000000000000000000000018
+:10C820000000000000000000000000000000000008
+:10C8300000000000000000000000000000000000F8
+:10C8400000000000000000000000000000000000E8
+:10C8500000000000000000000000000000000000D8
+:10C8600000000000000000000000000000000000C8
+:10C8700000000000000000000000000000000000B8
+:10C8800000000000000000000000000000000000A8
+:10C890000000000000000000000000000000000098
+:10C8A0000000000000000000000000000000000088
+:10C8B0000000000000000000000000000000000078
+:10C8C0000000000000000000000000000000000068
+:10C8D0000000000000000000000000000000000058
+:10C8E0000000000000000000000000000000000048
+:10C8F0000000000000000000000000000000000038
+:10C900000000000000000000000000000000000027
+:10C910000000000000000000000000000000000017
+:10C920000000000000000000000000000000000007
+:10C9300000000000000000000000000000000000F7
+:10C9400000000000000000000000000000000000E7
+:10C9500000000000000000000000000000000000D7
+:10C9600000000000000000000000000000000000C7
+:10C9700000000000000000000000000000000000B7
+:10C9800000000000000000000000000000000000A7
+:10C990000000000000000000000000000000000097
+:10C9A0000000000000000000000000000000000087
+:10C9B0000000000000000000000000000000000077
+:10C9C0000000000000000000000000000000000067
+:10C9D0000000000000000000000000000000000057
+:10C9E0000000000000000000000000000000000047
+:10C9F0000000000000000000000000000000000037
+:10CA00000000000000000000000000000000000026
+:10CA10000000000000000000000000000000000016
+:10CA20000000000000000000000000000000000006
+:10CA300000000000000000000000000000000000F6
+:10CA400000000000000000000000000000000000E6
+:10CA500000000000000000000000000000000000D6
+:10CA600000000000000000000000000000000000C6
+:10CA700000000000000000000000000000000000B6
+:10CA800000000000000000000000000000000000A6
+:10CA90000000000000000000000000000000000096
+:10CAA0000000000000000000000000000000000086
+:10CAB0000000000000000000000000000000000076
+:10CAC0000000000000000000000000000000000066
+:10CAD0000000000000000000000000000000000056
+:10CAE0000000000000000000000000000000000046
+:10CAF0000000000000000000000000000000000036
+:10CB00000000000000000000000000000000000025
+:10CB10000000000000000000000000000000000015
+:10CB20000000000000000000000000000000000005
+:10CB300000000000000000000000000000000000F5
+:10CB400000000000000000000000000000000000E5
+:10CB500000000000000000000000000000000000D5
+:10CB600000000000000000000000000000000000C5
+:10CB700000000000000000000000000000000000B5
+:10CB800000000000000000000000000000000000A5
+:10CB90000000000000000000000000000000000095
+:10CBA0000000000000000000000000000000000085
+:10CBB0000000000000000000000000000000000075
+:10CBC0000000000000000000000000000000000065
+:10CBD0000000000000000000000000000000000055
+:10CBE0000000000000000000000000000000000045
+:10CBF0000000000000000000000000000000000035
+:10CC00000000000000000000000000000000000024
+:10CC10000000000000000000000000000000000014
+:10CC20000000000000000000000000000000000004
+:10CC300000000000000000000000000000000000F4
+:10CC400000000000000000000000000000000000E4
+:10CC500000000000000000000000000000000000D4
+:10CC600000000000000000000000000000000000C4
+:10CC700000000000000000000000000000000000B4
+:10CC800000000000000000000000000000000000A4
+:10CC90000000000000000000000000000000000094
+:10CCA0000000000000000000000000000000000084
+:10CCB0000000000000000000000000000000000074
+:10CCC0000000000000000000000000000000000064
+:10CCD0000000000000000000000000000000000054
+:10CCE0000000000000000000000000000000000044
+:10CCF0000000000000000000000000000000000034
+:10CD00000000000000000000000000000000000023
+:10CD10000000000000000000000000000000000013
+:10CD20000000000000000000000000000000000003
+:10CD300000000000000000000000000000000000F3
+:10CD400000000000000000000000000000000000E3
+:10CD500000000000000000000000000000000000D3
+:10CD600000000000000000000000000000000000C3
+:10CD700000000000000000000000000000000000B3
+:10CD800000000000000000000000000000000000A3
+:10CD90000000000000000000000000000000000093
+:10CDA0000000000000000000000000000000000083
+:10CDB0000000000000000000000000000000000073
+:10CDC0000000000000000000000000000000000063
+:10CDD0000000000000000000000000000000000053
+:10CDE0000000000000000000000000000000000043
+:10CDF0000000000000000000000000000000000033
+:10CE00000000000000000000000000000000000022
+:10CE10000000000000000000000000000000000012
+:10CE20000000000000000000000000000000000002
+:10CE300000000000000000000000000000000000F2
+:10CE400000000000000000000000000000000000E2
+:10CE500000000000000000000000000000000000D2
+:10CE600000000000000000000000000000000000C2
+:10CE700000000000000000000000000000000000B2
+:10CE800000000000000000000000000000000000A2
+:10CE90000000000000000000000000000000000092
+:10CEA0000000000000000000000000000000000082
+:10CEB0000000000000000000000000000000000072
+:10CEC0000000000000000000000000000000000062
+:10CED0000000000000000000000000000000000052
+:10CEE0000000000000000000000000000000000042
+:10CEF0000000000000000000000000000000000032
+:10CF00000000000000000000000000000000000021
+:10CF10000000000000000000000000000000000011
+:10CF20000000000000000000000000000000000001
+:10CF300000000000000000000000000000000000F1
+:10CF400000000000000000000000000000000000E1
+:10CF500000000000000000000000000000000000D1
+:10CF600000000000000000000000000000000000C1
+:10CF700000000000000000000000000000000000B1
+:10CF800000000000000000000000000000000000A1
+:10CF90000000000000000000000000000000000091
+:10CFA0000000000000000000000000000000000081
+:10CFB0000000000000000000000000000000000071
+:10CFC0000000000000000000000000000000000061
+:10CFD0000000000000000000000000000000000051
+:10CFE0000000000000000000000000000000000041
+:10CFF0000000000000000000000000000000000031
+:10D000000000000000000000000000000000000020
+:10D010000000000000000000000000000000000010
+:10D020000000000000000000000000000000000000
+:10D0300000000000000000000000000000000000F0
+:10D0400000000000000000000000000000000000E0
+:10D0500000000000000000000000000000000000D0
+:10D0600000000000000000000000000000000000C0
+:10D0700000000000000000000000000000000000B0
+:10D0800000000000000000000000000000000000A0
+:10D090000000000000000000000000000000000090
+:10D0A0000000000000000000000000000000000080
+:10D0B0000000000000000000000000000000000070
+:10D0C0000000000000000000000000000000000060
+:10D0D0000000000000000000000000000000000050
+:10D0E0000000000000000000000000000000000040
+:10D0F0000000000000000000000000000000000030
+:10D10000000000000000000000000000000000001F
+:10D11000000000000000000000000000000000000F
+:10D1200000000000000000000000000000000000FF
+:10D1300000000000000000000000000000000000EF
+:10D1400000000000000000000000000000000000DF
+:10D1500000000000000000000000000000000000CF
+:10D1600000000000000000000000000000000000BF
+:10D1700000000000000000000000000000000000AF
+:10D18000000000000000000000000000000000009F
+:10D19000000000000000000000000000000000008F
+:10D1A000000000000000000000000000000000007F
+:10D1B000000000000000000000000000000000006F
+:10D1C000000000000000000000000000000000005F
+:10D1D000000000000000000000000000000000004F
+:10D1E000000000000000000000000000000000003F
+:10D1F000000000000000000000000000000000002F
+:10D20000000000000000000000000000000000001E
+:10D21000000000000000000000000000000000000E
+:10D2200000000000000000000000000000000000FE
+:10D2300000000000000000000000000000000000EE
+:10D2400000000000000000000000000000000000DE
+:10D2500000000000000000000000000000000000CE
+:10D2600000000000000000000000000000000000BE
+:10D2700000000000000000000000000000000000AE
+:10D28000000000000000000000000000000000009E
+:10D29000000000000000000000000000000000008E
+:10D2A000000000000000000000000000000000007E
+:10D2B000000000000000000000000000000000006E
+:10D2C000000000000000000000000000000000005E
+:10D2D000000000000000000000000000000000004E
+:10D2E000000000000000000000000000000000003E
+:10D2F000000000000000000000000000000000002E
+:10D30000000000000000000000000000000000001D
+:10D31000000000000000000000000000000000000D
+:10D3200000000000000000000000000000000000FD
+:10D3300000000000000000000000000000000000ED
+:10D3400000000000000000000000000000000000DD
+:10D3500000000000000000000000000000000000CD
+:10D3600000000000000000000000000000000000BD
+:10D3700000000000000000000000000000000000AD
+:10D38000000000000000000000000000000000009D
+:10D39000000000000000000000000000000000008D
+:10D3A000000000000000000000000000000000007D
+:10D3B000000000000000000000000000000000006D
+:10D3C000000000000000000000000000000000005D
+:10D3D000000000000000000000000000000000004D
+:10D3E000000000000000000000000000000000003D
+:10D3F000000000000000000000000000000000002D
+:10D40000000000000000000000000000000000001C
+:10D41000000000000000000000000000000000000C
+:10D4200000000000000000000000000000000000FC
+:10D4300000000000000000000000000000000000EC
+:10D4400000000000000000000000000000000000DC
+:10D4500000000000000000000000000000000000CC
+:10D4600000000000000000000000000000000000BC
+:10D4700000000000000000000000000000000000AC
+:10D48000000000000000000000000000000000009C
+:10D49000000000000000000000000000000000008C
+:10D4A000000000000000000000000000000000007C
+:10D4B000000000000000000000000000000000006C
+:10D4C000000000000000000000000000000000005C
+:10D4D000000000000000000000000000000000004C
+:10D4E000000000000000000000000000000000003C
+:10D4F000000000000000000000000000000000002C
+:10D50000000000000000000000000000000000001B
+:10D51000000000000000000000000000000000000B
+:10D5200000000000000000000000000000000000FB
+:10D5300000000000000000000000000000000000EB
+:10D5400000000000000000000000000000000000DB
+:10D5500000000000000000000000000000000000CB
+:10D5600000000000000000000000000000000000BB
+:10D5700000000000000000000000000000000000AB
+:10D58000000000000000000000000000000000009B
+:10D59000000000000000000000000000000000008B
+:10D5A000000000000000000000000000000000007B
+:10D5B000000000000000000000000000000000006B
+:10D5C000000000000000000000000000000000005B
+:10D5D000000000000000000000000000000000004B
+:10D5E000000000000000000000000000000000003B
+:10D5F000000000000000000000000000000000002B
+:10D60000000000000000000000000000000000001A
+:10D61000000000000000000000000000000000000A
+:10D6200000000000000000000000000000000000FA
+:10D6300000000000000000000000000000000000EA
+:10D6400000000000000000000000000000000000DA
+:10D6500000000000000000000000000000000000CA
+:10D6600000000000000000000000000000000000BA
+:10D6700000000000000000000000000000000000AA
+:10D68000000000000000000000000000000000009A
+:10D69000000000000000000000000000000000008A
+:10D6A000000000000000000000000000000000007A
+:10D6B000000000000000000000000000000000006A
+:10D6C000000000000000000000000000000000005A
+:10D6D000000000000000000000000000000000004A
+:10D6E000000000000000000000000000000000003A
+:10D6F000000000000000000000000000000000002A
+:10D700000000000000000000000000000000000019
+:10D710000000000000000000000000000000000009
+:10D7200000000000000000000000000000000000F9
+:10D7300000000000000000000000000000000000E9
+:10D7400000000000000000000000000000000000D9
+:10D7500000000000000000000000000000000000C9
+:10D7600000000000000000000000000000000000B9
+:10D7700000000000000000000000000000000000A9
+:10D780000000000000000000000000000000000099
+:10D790000000000000000000000000000000000089
+:10D7A0000000000000000000000000000000000079
+:10D7B0000000000000000000000000000000000069
+:10D7C0000000000000000000000000000000000059
+:10D7D0000000000000000000000000000000000049
+:10D7E0000000000000000000000000000000000039
+:10D7F0000000000000000000000000000000000029
+:10D800000000000000000000000000000000000018
+:10D810000000000000000000000000000000000008
+:10D8200000000000000000000000000000000000F8
+:10D8300000000000000000000000000000000000E8
+:10D8400000000000000000000000000000000000D8
+:10D8500000000000000000000000000000000000C8
+:10D8600000000000000000000000000000000000B8
+:10D8700000000000000000000000000000000000A8
+:10D880000000000000000000000000000000000098
+:10D890000000000000000000000000000000000088
+:10D8A0000000000000000000000000000000000078
+:10D8B0000000000000000000000000000000000068
+:10D8C0000000000000000000000000000000000058
+:10D8D0000000000000000000000000000000000048
+:10D8E0000000000000000000000000000000000038
+:10D8F0000000000000000000000000000000000028
+:10D900000000000000000000000000000000000017
+:10D910000000000000000000000000000000000007
+:10D9200000000000000000000000000000000000F7
+:10D9300000000000000000000000000000000000E7
+:10D9400000000000000000000000000000000000D7
+:10D9500000000000000000000000000000000000C7
+:10D9600000000000000000000000000000000000B7
+:10D9700000000000000000000000000000000000A7
+:10D980000000000000000000000000000000000097
+:10D990000000000000000000000000000000000087
+:10D9A0000000000000000000000000000000000077
+:10D9B0000000000000000000000000000000000067
+:10D9C0000000000000000000000000000000000057
+:10D9D0000000000000000000000000000000000047
+:10D9E0000000000000000000000000000000000037
+:10D9F0000000000000000000000000000000000027
+:10DA00000000000000000000000000000000000016
+:10DA10000000000000000000000000000000000006
+:10DA200000000000000000000000000000000000F6
+:10DA300000000000000000000000000000000000E6
+:10DA400000000000000000000000000000000000D6
+:10DA500000000000000000000000000000000000C6
+:10DA600000000000000000000000000000000000B6
+:10DA700000000000000000000000000000000000A6
+:10DA80000000000000000000000000000000000096
+:10DA90000000000000000000000000000000000086
+:10DAA0000000000000000000000000000000000076
+:10DAB0000000000000000000000000000000000066
+:10DAC0000000000000000000000000000000000056
+:10DAD0000000000000000000000000000000000046
+:10DAE0000000000000000000000000000000000036
+:10DAF0000000000000000000000000000000000026
+:10DB00000000000000000000000000000000000015
+:10DB10000000000000000000000000000000000005
+:10DB200000000000000000000000000000000000F5
+:10DB300000000000000000000000000000000000E5
+:10DB400000000000000000000000000000000000D5
+:10DB500000000000000000000000000000000000C5
+:10DB600000000000000000000000000000000000B5
+:10DB700000000000000000000000000000000000A5
+:10DB80000000000000000000000000000000000095
+:10DB90000000000000000000000000000000000085
+:10DBA0000000000000000000000000000000000075
+:10DBB0000000000000000000000000000000000065
+:10DBC0000000000000000000000000000000000055
+:10DBD0000000000000000000000000000000000045
+:10DBE0000000000000000000000000000000000035
+:10DBF0000000000000000000000000000000000025
+:10DC00000000000000000000000000000000000014
+:10DC10000000000000000000000000000000000004
+:10DC200000000000000000000000000000000000F4
+:10DC300000000000000000000000000000000000E4
+:10DC400000000000000000000000000000000000D4
+:10DC500000000000000000000000000000000000C4
+:10DC600000000000000000000000000000000000B4
+:10DC700000000000000000000000000000000000A4
+:10DC80000000000000000000000000000000000094
+:10DC90000000000000000000000000000000000084
+:10DCA0000000000000000000000000000000000074
+:10DCB0000000000000000000000000000000000064
+:10DCC0000000000000000000000000000000000054
+:10DCD0000000000000000000000000000000000044
+:10DCE0000000000000000000000000000000000034
+:10DCF0000000000000000000000000000000000024
+:10DD00000000000000000000000000000000000013
+:10DD10000000000000000000000000000000000003
+:10DD200000000000000000000000000000000000F3
+:10DD300000000000000000000000000000000000E3
+:10DD400000000000000000000000000000000000D3
+:10DD500000000000000000000000000000000000C3
+:10DD600000000000000000000000000000000000B3
+:10DD700000000000000000000000000000000000A3
+:10DD80000000000000000000000000000000000093
+:10DD90000000000000000000000000000000000083
+:10DDA0000000000000000000000000000000000073
+:10DDB0000000000000000000000000000000000063
+:10DDC0000000000000000000000000000000000053
+:10DDD0000000000000000000000000000000000043
+:10DDE0000000000000000000000000000000000033
+:10DDF0000000000000000000000000000000000023
+:10DE00000000000000000000000000000000000012
+:10DE10000000000000000000000000000000000002
+:10DE200000000000000000000000000000000000F2
+:10DE300000000000000000000000000000000000E2
+:10DE400000000000000000000000000000000000D2
+:10DE500000000000000000000000000000000000C2
+:10DE600000000000000000000000000000000000B2
+:10DE700000000000000000000000000000000000A2
+:10DE80000000000000000000000000000000000092
+:10DE90000000000000000000000000000000000082
+:10DEA0000000000000000000000000000000000072
+:10DEB0000000000000000000000000000000000062
+:10DEC0000000000000000000000000000000000052
+:10DED0000000000000000000000000000000000042
+:10DEE0000000000000000000000000000000000032
+:10DEF0000000000000000000000000000000000022
+:10DF00000000000000000000000000000000000011
+:10DF10000000000000000000000000000000000001
+:10DF200000000000000000000000000000000000F1
+:10DF300000000000000000000000000000000000E1
+:10DF400000000000000000000000000000000000D1
+:10DF500000000000000000000000000000000000C1
+:10DF600000000000000000000000000000000000B1
+:10DF700000000000000000000000000000000000A1
+:10DF80000000000000000000000000000000000091
+:10DF90000000000000000000000000000000000081
+:10DFA0000000000000000000000000000000000071
+:10DFB0000000000000000000000000000000000061
+:10DFC0000000000000000000000000000000000051
+:10DFD0000000000000000000000000000000000041
+:10DFE0000000000000000000000000000000000031
+:10DFF0000000000000000000000000000000000021
+:10E000000000000000000000000000000000000010
+:10E010000000000000000000000000000000000000
+:10E0200000000000000000000000000000000000F0
+:10E0300000000000000000000000000000000000E0
+:10E0400000000000000000000000000000000000D0
+:10E0500000000000000000000000000000000000C0
+:10E0600000000000000000000000000000000000B0
+:10E0700000000000000000000000000000000000A0
+:10E080000000000000000000000000000000000090
+:10E090000000000000000000000000000000000080
+:10E0A0000000000000000000000000000000000070
+:10E0B0000000000000000000000000000000000060
+:10E0C0000000000000000000000000000000000050
+:10E0D0000000000000000000000000000000000040
+:10E0E0000000000000000000000000000000000030
+:10E0F0000000000000000000000000000000000020
+:10E10000000000000000000000000000000000000F
+:10E1100000000000000000000000000000000000FF
+:10E1200000000000000000000000000000000000EF
+:10E1300000000000000000000000000000000000DF
+:10E1400000000000000000000000000000000000CF
+:10E1500000000000000000000000000000000000BF
+:10E1600000000000000000000000000000000000AF
+:10E17000000000000000000000000000000000009F
+:10E18000000000000000000000000000000000008F
+:10E19000000000000000000000000000000000007F
+:10E1A000000000000000000000000000000000006F
+:10E1B000000000000000000000000000000000005F
+:10E1C000000000000000000000000000000000004F
+:10E1D000000000000000000000000000000000003F
+:10E1E000000000000000000000000000000000002F
+:10E1F000000000000000000000000000000000809F
+:10E20000000000000000000000000000000000000E
+:10E2100000000000000000000000000000000000FE
+:10E220000000000A000000000000000000000000E4
+:10E2300010000003000000000000000D0000000DB1
+:10E240003C020801244295C03C030801246397FC6A
+:10E25000AC4000000043202B1480FFFD244200044A
+:10E260003C1D080037BD9FFC03A0F0213C100800B6
+:10E27000261032103C1C0801279C95C00E0012BECF
+:10E28000000000000000000D3C02800030A5FFFFF0
+:10E2900030C600FF344301803C0880008D0901B87E
+:10E2A0000520FFFE00000000AC6400002404000212
+:10E2B000A4650008A066000AA064000BAC67001803
+:10E2C0003C03100003E00008AD0301B83C0560000A
+:10E2D0008CA24FF80440FFFE00000000ACA44FC029
+:10E2E0003C0310003C040200ACA44FC403E000084F
+:10E2F000ACA34FF89486000C00A050212488001491
+:10E3000000062B0200051080004448210109182B4B
+:10E310001060001100000000910300002C6400094F
+:10E320005080000991190001000360803C0D080134
+:10E3300025AD9258018D58218D67000000E000083E
+:10E340000000000091190001011940210109302B42
+:10E3500054C0FFF29103000003E000080000102108
+:10E360000A000CCC25080001910F0001240E000AC0
+:10E3700015EE00400128C8232F38000A1700003D81
+:10E38000250D00028D580000250F0006370E0100F4
+:10E39000AD4E0000910C000291AB000191A400026F
+:10E3A00091A60003000C2E00000B3C0000A71025D6
+:10E3B00000041A000043C8250326C025AD580004F8
+:10E3C000910E000691ED000191E7000291E5000336
+:10E3D000000E5E00000D6400016C30250007220075
+:10E3E00000C41025004518252508000A0A000CCC99
+:10E3F000AD430008910F000125040002240800022B
+:10E4000055E80001012020210A000CCC00804021A9
+:10E41000910C0001240B0003158B00160000000076
+:10E420008D580000910E000225080003370D0008EA
+:10E43000A14E00100A000CCCAD4D00009119000156
+:10E44000240F0004172F000B0000000091070002AA
+:10E45000910400038D43000000072A0000A410254A
+:10E460003466000425080004AD42000C0A000CCC00
+:10E47000AD46000003E000082402000127BDFFE8CC
+:10E48000AFBF0014AFB000100E00164E0080802108
+:10E490003C0480083485008090A600052403FFFE1C
+:10E4A0000200202100C310248FBF00148FB0001081
+:10E4B000A0A200050A00165827BD001827BDFFE8D6
+:10E4C000AFB00010AFBF00140E000FD40080802149
+:10E4D0003C06800834C5008090A40000240200504F
+:10E4E000308300FF106200073C09800002002021F9
+:10E4F0008FBF00148FB00010AD2001800A00108F74
+:10E5000027BD0018240801003C07800002002021DC
+:10E510008FBF00148FB00010ACE801800A00108F8C
+:10E5200027BD001827BDFF783C058008AFBE0080DE
+:10E53000AFB7007CAFB3006CAFB10064AFBF008475
+:10E54000AFB60078AFB50074AFB40070AFB200687A
+:10E55000AFB0006034A600803C0580008CB201287A
+:10E5600090C400098CA701043C020001309100FF17
+:10E5700000E218240000B8210000F021106000071C
+:10E58000000098213C0908008D2931F02413000176
+:10E59000252800013C010800AC2831F0ACA0008423
+:10E5A00090CC0005000C5827316A0001154000721C
+:10E5B000AFA0005090CD00002406002031A400FF41
+:10E5C00010860018240E0050108E009300000000EA
+:10E5D0003C1008008E1000DC260F00013C010800F2
+:10E5E000AC2F00DC0E0016C7000000000040182110
+:10E5F0008FBF00848FBE00808FB7007C8FB60078FD
+:10E600008FB500748FB400708FB3006C8FB2006848
+:10E610008FB100648FB000600060102103E000083B
+:10E6200027BD00880000000D3C1F8000AFA0003017
+:10E6300097E501168FE201043C04002030B9FFFF8A
+:10E64000004438240007182B00033140AFA60030E7
+:10E650008FF5010437F80C003C1600400338802188
+:10E6600002B6A02434C40040128000479215000D69
+:10E6700032A800201500000234860080008030217E
+:10E6800014C0009FAFA600303C0D800835A6008066
+:10E6900090CC0008318B0040516000063C06800899
+:10E6A000240E0004122E00A8240F0012122F003294
+:10E6B0003C06800834C401003C0280009447011AE3
+:10E6C0009619000E909F00088E18000830E3FFFF97
+:10E6D00003F9B00432B40004AFB6005CAFA3005835
+:10E6E0008E1600041280002EAFB8005434C3008090
+:10E6F000906800083105004014A0002500000000CB
+:10E700008C70005002D090230640000500000000ED
+:10E710008C71003402D1A82306A201678EE20008A2
+:10E72000126000063C1280003C1508008EB531F4E2
+:10E7300026B600013C010800AC3631F4AE4000447E
+:10E74000240300018FBF00848FBE00808FB7007C40
+:10E750008FB600788FB500748FB400708FB3006CE3
+:10E760008FB200688FB100648FB00060006010212C
+:10E7700003E0000827BD00880E000D2800002021BE
+:10E780000A000D75004018210A000D9500C02021D7
+:10E790000E00171702C020211440FFE10000000006
+:10E7A0003C0B8008356400808C8A003402CA482300
+:10E7B0000520001D000000003C1E08008FDE310017
+:10E7C00027D700013C010800AC3731001260000679
+:10E7D000024020213C1408008E9431F42690000160
+:10E7E0003C010800AC3031F40E00164E3C1E80088F
+:10E7F00037CD008091B700250240202136EE00047D
+:10E800000E001658A1AE00250E000CAC02402021CF
+:10E810000A000DCA240300013C17080126F796C020
+:10E820000A000D843C1F80008C86003002C66023E5
+:10E830001980000C2419000C908F004F3C14080024
+:10E840008E94310032B500FC35ED0001268E0001BA
+:10E850003C010800AC2E3100A08D004FAFA0005845
+:10E860002419000CAFB900308C9800300316A02397
+:10E870001A80010B8FA300580074F82A17E0FFD309
+:10E88000000000001074002A8FA5005802D4B021A7
+:10E8900000B410233044FFFFAFA4005832A8000298
+:10E8A0001100002E32AB00103C15800836B00080FD
+:10E8B0009216000832D30040526000FB8EE200083E
+:10E8C0000E00164E02402021240A0018A20A000958
+:10E8D000921100052409FFFE024020210229902404
+:10E8E0000E001658A2120005240400390000282149
+:10E8F0000E0016F2240600180A000DCA24030001B7
+:10E9000092FE000C3C0A800835490080001EBB00C6
+:10E910008D27003836F10081024020213225F08118
+:10E920000E000C9B30C600FF0A000DC10000000065
+:10E930003AA7000130E300011460FFA402D4B02123
+:10E940000A000E1D00000000024020210E001734B6
+:10E95000020028210A000D75004018211160FF7087
+:10E960003C0F80083C0D800835EE00808DC40038D7
+:10E970008FA300548DA60004006660231D80FF68ED
+:10E98000000000000064C02307020001AFA400548F
+:10E990003C1F08008FFF31E433F9000113200015FC
+:10E9A0008FAC00583C07800094E3011A10600012FD
+:10E9B0003C0680080E00216A024020213C03080129
+:10E9C000906396F13064000214800145000000005D
+:10E9D000306C0004118000078FAC0058306600FBDB
+:10E9E0003C010801A02696F132B500FCAFA000580A
+:10E9F0008FAC00583C06800834D30080AFB40018B8
+:10EA0000AFB60010AFAC00143C088000950B01209D
+:10EA10008E6F0030966A005C8FA3005C8FBF003061
+:10EA20003169FFFF3144FFFF8FAE005401341021E4
+:10EA3000350540000064382B0045C82103E7C02598
+:10EA4000AFB90020AFAF0028AFB80030AFAF00249F
+:10EA5000AFA0002CAFAE0034926D000831B40008B6
+:10EA6000168000BB020020218EE200040040F8095D
+:10EA700027A400108FAF003031F300025660000170
+:10EA800032B500FE3C048008349F008093F90008F2
+:10EA900033380040530000138FA400248C850004F9
+:10EAA0008FA7005410A700D52404001432B0000131
+:10EAB0001200000C8FA400242414000C1234011A3C
+:10EAC0002A2D000D11A001022413000E240E000AAD
+:10EAD000522E0001241E00088FAF002425E40001FF
+:10EAE000AFA400248FAA00143C0B80083565008079
+:10EAF000008A48218CB10030ACA9003090A4004EAF
+:10EB00008CA700303408FFFF0088180400E3F821C8
+:10EB1000ACBF00348FA600308FB900548FB8005CB2
+:10EB200030C200081040000B033898218CAC002044
+:10EB3000119300D330C600FF92EE000C8FA7003473
+:10EB400002402021000E6B0035B400800E000C9BAB
+:10EB50003285F0803C028008345000808E0F0030F7
+:10EB600001F1302318C00097264800803C070800B8
+:10EB70008CE731E42404FF80010418243118007F5D
+:10EB80003C1F80003C19800430F10001AFE300908D
+:10EB900012200006031928213C030801906396F116
+:10EBA00030690008152000C6306A00F73C10800864
+:10EBB00036040080908C004F318B000115600042BC
+:10EBC000000000003C0608008CC6319830CE0010D2
+:10EBD00051C0004230F9000190AF006B55E0003F9A
+:10EBE00030F9000124180001A0B8006B3C1180002E
+:10EBF0009622007A24470064A48700123C0D800806
+:10EC000035A5008090B40008329000401600000442
+:10EC10003C03800832AE000115C0008B00000000EC
+:10EC2000346400808C86002010D3000A3463010015
+:10EC30008C67000002C7782319E000978FBF00544B
+:10EC4000AC93002024130001AC760000AFB3005059
+:10EC5000AC7F000417C0004E000000008FA90050D8
+:10EC60001520000B000000003C030801906396F1A2
+:10EC7000306A00011140002E8FAB0058306400FE56
+:10EC80003C010801A02496F10A000D75000018212E
+:10EC90000E000CAC024020210A000F1300000000FF
+:10ECA0000A000E200000A0210040F80924040017EB
+:10ECB0000A000DCA240300010040F80924040016CC
+:10ECC0000A000DCA240300019094004F240DFFFE9A
+:10ECD000028D2824A085004F30F900011320000682
+:10ECE0003C0480083C030801906396F1307F0010DB
+:10ECF00017E00051306800EF34900080240A0001D2
+:10ED0000024020210E00164EA60A00129203002592
+:10ED100024090001AFA90050346200010240202103
+:10ED20000E001658A20200250A000EF93C0D8008BC
+:10ED30001160FE83000018218FA5003030AC000464
+:10ED40001180FE2C8FBF00840A000DCB240300012C
+:10ED500027A500380E000CB6AFA000385440FF4382
+:10ED60008EE200048FB40038329001005200FF3F61
+:10ED70008EE200048FA3003C8E6E0058006E682364
+:10ED800005A3FF39AE6300580A000E948EE200041A
+:10ED90000E00164E024020213C038008346800809B
+:10EDA000024020210E001658A11E000903C0302188
+:10EDB000240400370E0016F2000028210A000F116B
+:10EDC0008FA900508FAB00185960FF8D3C0D800853
+:10EDD0000E00164E02402021920C00252405000151
+:10EDE000AFA5005035820004024020210E001658C5
+:10EDF000A20200250A000EF93C0D800812240059D9
+:10EE00002A2300151060004D240900162408000C68
+:10EE10005628FF2732B000013C0A8008914C001BA5
+:10EE20002406FFBD241E000E01865824A14B001BA2
+:10EE30000A000EA532B000013C010801A02896F19D
+:10EE40000A000EF93C0D80088CB500308EFE0008DB
+:10EE50002404001826B6000103C0F809ACB600303F
+:10EE60003C030801906396F13077000116E0FF81C2
+:10EE7000306A00018FB200300A000D753243000481
+:10EE80003C1080009605011A50A0FF2B34C60010DC
+:10EE90000A000EC892EE000C8C6200001456FF6D42
+:10EEA000000000008C7800048FB9005403388823D8
+:10EEB0000621FF638FBF00540A000F0E0000000000
+:10EEC0003C010801A02A96F10A000F3030F9000138
+:10EED0001633FF028FAF00240A000EB0241E00106C
+:10EEE0000E00164E024020213C0B80083568008041
+:10EEF00091090025240A0001AFAA0050353300040F
+:10EF0000024020210E001658A11300253C050801DF
+:10EF100090A596F130A200FD3C010801A02296F1D7
+:10EF20000A000E6D004018212411000E53D1FEEA94
+:10EF3000241E00100A000EAF241E00165629FEDC07
+:10EF400032B000013C0A8008914C001B2406FFBD32
+:10EF5000241E001001865824A14B001B0A000EA598
+:10EF600032B000010A000EA4241E00123C038000EF
+:10EF70008C6201B80440FFFE24040800AC6401B8B0
+:10EF800003E000080000000030A5FFFF30C6FFFFCF
+:10EF90003C0780008CE201B80440FFFE34EA0180A7
+:10EFA000AD440000ACE400203C0480089483004899
+:10EFB0003068FFFF11000016AF88000824AB001274
+:10EFC000010B482B512000133C04800034EF01005A
+:10EFD00095EE00208F890000240D001A31CCFFFF30
+:10EFE00031274000A14D000B10E000362583FFFEC5
+:10EFF0000103C02B170000348F9900048F88000490
+:10F00000A5430014350700010A001003AF87000470
+:10F010003C04800024030003348201808F890000B7
+:10F020008F870004A043000B3C088000350C018052
+:10F03000A585000EA585001A8F85000C30EB800099
+:10F04000A5890010AD850028A58600081160000F75
+:10F050008F85001435190100972A00163158FFFCDE
+:10F06000270F000401E870218DCD400031A6FFFF7D
+:10F0700014C000072403BFFF3C02FFFF34487FFF9A
+:10F0800000E83824AF8700048F8500142403BFFFF5
+:10F090003C04800000E3582434830180A46B0026E4
+:10F0A000AC69002C10A0000300054C02A465001000
+:10F0B000A46900263C071000AC8701B803E00008F3
+:10F0C000000000008F990004240AFFFE032A382460
+:10F0D0000A001003AF87000427BDFFE88FA20028B5
+:10F0E00030A5FFFF30C6FFFFAFBF0010AF87000C99
+:10F0F000AF820014AF8000040E000FDBAF80000071
+:10F100008FBF001027BD001803E00008AF80001477
+:10F110003C06800034C4007034C701008C8A0000B3
+:10F1200090E500128F84000027BDFFF030A300FFA0
+:10F13000000318823082400010400037246500032D
+:10F140000005C8800326C0218F0E4000246F0004F4
+:10F15000000F6880AFAE000001A660218D8B4000DB
+:10F16000AFAB000494E900163128FFFC01063821FA
+:10F170008CE64000AFA600088FA9000800003021EF
+:10F18000000028213C07080024E701000A0010675E
+:10F19000240800089059000024A500012CAC000CA4
+:10F1A0000079C0210018788001E770218DCD000022
+:10F1B0001180000600CD302603A5102114A8FFF50C
+:10F1C00000051A005520FFF4905900003C0480000F
+:10F1D000348700703C0508008CA531048CE30000E6
+:10F1E0002CA2002010400009006A38230005488046
+:10F1F0003C0B0800256B3108012B402124AA00019B
+:10F20000AD0700003C010800AC2A310400C0102109
+:10F2100003E0000827BD0010308220001040000BE2
+:10F2200000055880016648218D24400024680004B0
+:10F2300000083880AFA4000000E618218C6540006B
+:10F24000AFA000080A001057AFA500040000000D91
+:10F250000A0010588FA9000827BDFFE03C07800076
+:10F2600034E60100AFBF001CAFB20018AFB100140C
+:10F27000AFB0001094C5000E8F87000030A4FFFFD0
+:10F280002483000430E2400010400010AF830028C7
+:10F290003C09002000E940241100000D30EC800002
+:10F2A0008F8A0004240BBFFF00EB38243543100085
+:10F2B000AF87000030F220001640000B3C1900041C
+:10F2C000241FFFBF0A0010B7007F102430EC80001D
+:10F2D000158000423C0E002030F220001240FFF862
+:10F2E0008F8300043C19000400F9C0241300FFF5CB
+:10F2F000241FFFBF34620040AF82000430E20100EF
+:10F300001040001130F010008F83002C10600006B8
+:10F310003C0F80003C05002000E52024148000C044
+:10F320003C0800043C0F800035EE010095CD001E26
+:10F3300095CC001C31AAFFFF000C5C00014B482556
+:10F34000AF89000C30F010001200000824110001F9
+:10F3500030F100201620008B3C18100000F890249B
+:10F36000164000823C040C002411000130E801002A
+:10F370001500000B3C0900018F85000430A94000F6
+:10F38000152000073C0900013C0C1F0100EC58242B
+:10F390003C0A1000116A01183C1080003C09000171
+:10F3A00000E9302410C000173C0B10003C18080086
+:10F3B0008F1800243307000214E0014024030001E9
+:10F3C0008FBF001C8FB200188FB100148FB00010D7
+:10F3D0000060102103E0000827BD002000EE682433
+:10F3E00011A0FFBE30F220008F8F00043C11FFFF00
+:10F3F00036307FFF00F0382435E380000A0010A685
+:10F40000AF87000000EB102450400065AF8000245F
+:10F410008F8C002C3C0D0F0000ED18241580008807
+:10F42000AF83001030E8010011000086938F0010B8
+:10F430003C0A0200106A00833C1280003650010032
+:10F44000920500139789002A3626000230AF00FF8C
+:10F4500025EE0004000E19C03C0480008C9801B811
+:10F460000700FFFE34880180AD0300003C198008CE
+:10F47000AC830020973100483225FFFF10A0015CCB
+:10F48000AF8500082523001200A3F82B53E0015993
+:10F490008F850004348D010095AC00202402001AF1
+:10F4A00030E44000318BFFFFA102000B108001927D
+:10F4B0002563FFFE00A3502B154001908F8F0004A1
+:10F4C000A50300148F88000435050001AF850004F2
+:10F4D0003C08800035190180A729000EA729001AD1
+:10F4E0008F89000C30B18000A7270010AF290028B9
+:10F4F000A72600081220000E3C04800035020100FF
+:10F50000944C0016318BFFFC256400040088182100
+:10F510008C7F400033E6FFFF14C000053C048000F0
+:10F520003C0AFFFF354D7FFF00AD2824AF85000466
+:10F53000240EBFFF00AE402434850180A4A800261D
+:10F54000ACA7002C3C071000AC8701B800001821C4
+:10F550008FBF001C8FB200188FB100148FB0001045
+:10F560000060102103E0000827BD00203C020BFFD3
+:10F5700000E41824345FFFFF03E3C82B5320FF7B14
+:10F58000241100013C0608008CC6002C24C5000193
+:10F590003C010800AC25002C0A0010D42411000501
+:10F5A0008F85002410A0002FAF80001090A30000D2
+:10F5B000146000792419000310A0002A30E601002D
+:10F5C00010C000CC8F860010241F000210DF00C97D
+:10F5D0008F8B000C3C0708008CE7003824E4FFFF09
+:10F5E00014E0000201641824000018213C0D0800FA
+:10F5F00025AD0038006D1021904C00048F85002847
+:10F6000025830004000321C030A5FFFF3626000239
+:10F610000E000FDB000000000A00114D0000182151
+:10F6200000E8302414C0FF403C0F80000E00103D65
+:10F63000000000008F8700000A0010CAAF82000C93
+:10F64000938F00103C18080127189640000F90C0B7
+:10F6500002588021AF9000248F85002414A0FFD38E
+:10F66000AF8F00103C0480008C86400030C5010044
+:10F6700010A000BC322300043C0C08008D8C002438
+:10F6800024120004106000C23190000D3C04800080
+:10F690008C8D40003402FFFF11A201003231FFFBCC
+:10F6A0008C884000310A01005540000124110010EF
+:10F6B00030EE080011C000BE2419FFFB8F9800280F
+:10F6C0002F0F03EF51E000010219802430E90100FF
+:10F6D00011200014320800018F87002C14E000FB79
+:10F6E0008F8C000C3C05800034AB0100917F00132F
+:10F6F00033E300FF246A00042403FFFE0203802496
+:10F70000000A21C012000002023230253226FFFF1B
+:10F710000E000FDB9785002A1200FF290000182138
+:10F72000320800011100000D32180004240E0001FF
+:10F73000120E0002023230253226FFFF9785002A82
+:10F740000E000FDB00002021240FFFFE020F80249B
+:10F750001200FF1B00001821321800045300FF188C
+:10F760002403000102323025241200045612000145
+:10F770003226FFFF9785002A0E000FDB24040100CC
+:10F780002419FFFB021988241220FF0D0000182104
+:10F790000A0010E9240300011079009C00003021C8
+:10F7A00090AD00012402000211A200BE30EA004028
+:10F7B00090B90001241800011338007F30E900409F
+:10F7C0008CA600049785002A00C020210E000FDBC4
+:10F7D0003626000200004021010018218FBF001CC6
+:10F7E0008FB200188FB100148FB00010006010218C
+:10F7F00003E0000827BD0020360F010095EE000C45
+:10F8000031CD020015A0FEE63C0900013C1880083D
+:10F81000971200489789002A362600023248FFFFD7
+:10F82000AF8800083C0380008C7101B80620FFFE01
+:10F83000346A0180AD4000001100008E3C0F800052
+:10F84000253F0012011FC82B1320008B240E00033C
+:10F85000346C0100958B00202402001A30E4400033
+:10F860003163FFFFA142000B108000A72463FFFE5D
+:10F870000103682B15A000A52408FFFE34A5000194
+:10F88000A5430014AF8500043C0480002412BFFF90
+:10F8900000B2802434850180A4A9000EA4A9001A16
+:10F8A000A4A60008A4B00026A4A700103C071000DE
+:10F8B000AC8701B80A00114D000018213C038000FC
+:10F8C00034640100949F000E3C1908008F3900D861
+:10F8D0002404008033E5FFFF273100013C010800CC
+:10F8E000AC3100D80E000FDB240600030A00114DD6
+:10F8F00000001821240A000210CA00598F85002830
+:10F900003C0308008C6300D0240E0001106E005EE2
+:10F910002CCF000C24D2FFFC2E5000041600002136
+:10F9200000002021241800021078001B2CD9000CA4
+:10F9300024DFFFF82FE900041520FF330000202109
+:10F9400030EB020051600004000621C054C00022C8
+:10F9500030A5FFFF000621C030A5FFFF0A00117D82
+:10F96000362600023C0908008D29002431300001B0
+:10F970005200FEF7000018219785002A3626000263
+:10F980000E000FDB000020210A00114D000018219D
+:10F990000A00119C241200021320FFE624DFFFF866
+:10F9A0000000202130A5FFFF0A00117D362600024D
+:10F9B0000A0011AC021980245120FF828CA6000499
+:10F9C0003C05080190A5964110A0FF7E2408000187
+:10F9D0000A0011F0010018210E000FDB3226000191
+:10F9E0008F8600108F8500280A00124F000621C064
+:10F9F0008F8500043C18800024120003371001801A
+:10FA0000A212000B0A00112E3C08800090A30001F6
+:10FA1000241100011071FF70240800012409000264
+:10FA20005069000430E60040240800010A0011F08B
+:10FA30000100182150C0FFFD240800013C0C80008B
+:10FA4000358B01009563001094A40002307FFFFF06
+:10FA5000509FFF62010018210A001284240800014F
+:10FA60002CA803EF1100FE56240300010A001239EE
+:10FA700000000000240E000335EA0180A14E000BB7
+:10FA80000A00121C3C04800011E0FFA2000621C005
+:10FA900030A5FFFF0A00117D362600020A0011A5DD
+:10FAA000241100201140FFC63C1280003650010096
+:10FAB000960F001094AE000231E80FFF15C8FFC08A
+:10FAC000000000000A0011E690B900013C060800A1
+:10FAD0008CC6003824C4FFFF14C00002018418241F
+:10FAE000000018213C0D080025AD0038006D1021E4
+:10FAF0000A0011B6904300048F8F0004240EFFFE0D
+:10FB00000A00112C01EE28242408FFFE0A00121A14
+:10FB100000A8282427BDFFC8AFB00010AFBF003435
+:10FB20003C10600CAFBE0030AFB7002CAFB6002861
+:10FB3000AFB50024AFB40020AFB3001CAFB20018C3
+:10FB4000AFB100148E0E5000240FFF7F3C068000E2
+:10FB500001CF682435AC380C240B0003AE0C5000E8
+:10FB6000ACCB00083C010800AC2000200E001819A6
+:10FB7000000000003C0A0010354980513C06601628
+:10FB8000AE09537C8CC700003C0860148D0500A0B2
+:10FB90003C03FFFF00E320243C02535300051FC237
+:10FBA0001482000634C57C000003A08002869821E0
+:10FBB0008E7200043C116000025128218CBF007C31
+:10FBC0008CA200783C1E600037C420203C05080150
+:10FBD00024A59288AF820018AF9F001C0E0016DD8E
+:10FBE0002406000A3C190001273996403C01080010
+:10FBF000AC3931DC0E0020DDAF8000148FD708084F
+:10FC00002418FFF03C15570902F8B02412D502F56C
+:10FC100024040001AF80002C3C1480003697018042
+:10FC20003C1E080127DE9644369301008E900000AA
+:10FC30003205000310A0FFFD3207000110E000882C
+:10FC4000320600028E7100283C048000AE91002034
+:10FC50008E6500048E66000000A0382100C040219F
+:10FC60008C8301B80460FFFE3C0B0010240A0800DE
+:10FC700000AB4824AC8A01B8552000E0240BBFFF3C
+:10FC80009675000E3C1208008E52002030AC4000E9
+:10FC900032AFFFFF264E000125ED00043C010800B5
+:10FCA000AC2E0020118000E8AF8D00283C18002009
+:10FCB00000B8B02412C000E530B980002408BFFFAE
+:10FCC00000A8382434C81000AF87000030E62000B8
+:10FCD00010C000E92409FFBF3C03000400E328240E
+:10FCE00010A00002010910243502004030EA010092
+:10FCF00011400010AF8200048F8B002C11600007B0
+:10FD00003C0D002000ED6024118000043C0F000435
+:10FD100000EF702411C00239000000009668001E38
+:10FD20009678001C3115FFFF0018B40002B690252C
+:10FD3000AF92000C30F910001320001324150001BD
+:10FD400030FF002017E0000A3C04100000E41024FB
+:10FD50001040000D3C0A0C003C090BFF00EA18247F
+:10FD60003525FFFF00A3302B10C0000830ED010047
+:10FD70003C0C08008D8C002C24150005258B0001FF
+:10FD80003C010800AC2B002C30ED010015A0000B4D
+:10FD90003C0500018F85000430AE400055C00007CF
+:10FDA0003C0500013C161F0100F690243C0F10009A
+:10FDB000124F01CE000000003C05000100E5302498
+:10FDC00010C000AF3C0C10003C1F08008FFF002447
+:10FDD00033E90002152000712403000100601021A6
+:10FDE000104000083C0680003C08800035180100E7
+:10FDF0008F0F00243C056020ACAF00140000000011
+:10FE00003C0680003C194000ACD9013800000000DD
+:10FE10005220001332060002262B0140262C0080BF
+:10FE2000240EFF80016E2024018E6824000D1940ED
+:10FE3000318A007F0004A9403172007F3C16200007
+:10FE400036C20002006A482502B2382500E2882541
+:10FE50000122F825ACDF0830ACD1083032060002B0
+:10FE600010C0FF723C188000370501408CA80000CC
+:10FE700024100040AF08002090AF000831E300706C
+:10FE8000107000D428790041532000082405006038
+:10FE9000241100201071000E3C0A40003C09800033
+:10FEA000AD2A01780A001304000000001465FFFB6E
+:10FEB0003C0A40000E001FFA000000003C0A40000F
+:10FEC0003C098000AD2A01780A00130400000000FC
+:10FED00090A90009241F00048CA70000312800FF0E
+:10FEE000111F01B22503FFFA2C7200061240001404
+:10FEF0003C0680008CA9000494A4000A310500FF90
+:10FF000000095E022D6A00083086FFFF15400002DE
+:10FF10002567000424070003240C000910AC01FA33
+:10FF200028AD000A11A001DE2410000A240E0008EA
+:10FF300010AE0028000731C000C038213C06800008
+:10FF40008CD501B806A0FFFE34D20180AE47000078
+:10FF500034CB0140916E0008240300023C0A4000AB
+:10FF600031C400FF00046A0001A86025A64C000807
+:10FF7000A243000B9562000A3C0810003C09800077
+:10FF8000A64200108D670004AE470024ACC801B83B
+:10FF9000AD2A01780A001304000000003C0A80002A
+:10FFA000354401009483000E3C0208008C4200D8C6
+:10FFB000240400803065FFFF245500013C01080047
+:10FFC000AC3500D80E000FDB240600030A001370C6
+:10FFD000000018210009320230D900FF2418000166
+:10FFE0001738FFD5000731C08F910020262200016D
+:10FFF000AF8200200A0013C800C0382100CB2024A3
+:020000021000EC
+:10000000AF85000010800008AF860004240D87FF34
+:1000100000CD6024158000083C0E006000AE302446
+:1000200010C00005000000000E000D42000000009E
+:100030000A001371000000000E0016050000000009
+:100040000A0013710000000030B980005320FF1F28
+:10005000AF8500003C02002000A2F82453E0FF1B03
+:10006000AF8500003C07FFFF34E47FFF00A4382485
+:100070000A00132B34C880000A001334010910242D
+:1000800000EC58245160005AAF8000248F8D002C62
+:100090003C0E0F0000EE182415A00075AF83001071
+:1000A00030EF010011E00073939800103C12020041
+:1000B000107200703C06800034D9010093280013B0
+:1000C0009789002A36A60002311800FF271600047F
+:1000D000001619C03C0480008C8501B804A0FFFE06
+:1000E00034880180AD0300003C158008AC830020FB
+:1000F00096BF004833E5FFFF10A001BCAF850008A4
+:100100002523001200A3102B504001B98F85000455
+:10011000348D010095AC0020240B001A30E440001F
+:10012000318AFFFFA10B000B108001BA2543FFFEAF
+:1001300000A3702B15C001B88F9600048F8F0004A8
+:10014000A503001435E50001AF8500043C088000DC
+:1001500035150180A6A9000EA6A9001A8F89000CEA
+:1001600030BF8000A6A70010AEA90028A6A60008F0
+:1001700013E0000F3C0F8000350C0100958B00163A
+:10018000316AFFFC25440004008818218C6240007D
+:100190003046FFFF14C000072416BFFF3C0EFFFFD0
+:1001A00035CD7FFF00AD2824AF8500043C0F8000D3
+:1001B0002416BFFF00B6902435E50180A4B20026C6
+:1001C000ACA7002C3C071000ADE701B80A00137083
+:1001D000000018210E00165D000000003C0A4000DF
+:1001E0003C098000AD2A01780A00130400000000D9
+:1001F0008F85002410A00027AF80001090A300007E
+:10020000106000742409000310690101000030210E
+:1002100090AE0001240D000211CD014230EF0040EC
+:1002200090A90001241F0001113F000930E20040A5
+:100230008CA600049785002A00C020210E000FDB49
+:1002400036A60002000040210A00137001001821A8
+:100250005040FFF88CA600043C07080190E7964147
+:1002600010E0FFF4240800010A00137001001821B7
+:10027000939800103C1F080127FF96400018C8C043
+:10028000033F4021AF8800248F85002414A0FFDBAA
+:10029000AF9800103C0480008C86400030C50100FF
+:1002A00010A0008732AB00043C0C08008D8C0024A9
+:1002B00024160004156000033192000D241600027C
+:1002C0003C0480008C8E4000340DFFFF11CD0113E3
+:1002D00032B5FFFB8C984000330F010055E0000160
+:1002E0002415001030E80800110000382409FFFB35
+:1002F0008F9F00282FF903EF53200001024990241B
+:1003000030E2010010400014325F00018F87002CA2
+:1003100014E0010E8F8C000C3C0480003486010038
+:1003200090C5001330AA00FF25430004000321C03C
+:100330002419FFFE025990241240000202B6302513
+:1003400032A6FFFF0E000FDB9785002A1240FEA3A6
+:1003500000001821325F000113E0000D3247000455
+:10036000240900011249000202B6302532A6FFFF1F
+:100370009785002A0E000FDB000020212402FFFEDB
+:10038000024290241240FE950000182132470004DA
+:1003900050E0FE922403000102B63025241600042A
+:1003A0005656000132A6FFFF9785002A0E000FDB8C
+:1003B000240401002403FFFB0243A82412A0FE87AB
+:1003C000000018210A001370240300010A0014B968
+:1003D0000249902410A0FFAF30E5010010A00017E3
+:1003E0008F8600102403000210C300148F84000CB9
+:1003F0003C0608008CC6003824CAFFFF14C0000267
+:10040000008A1024000010213C0E080025CE003880
+:10041000004E682191AC00048F850028258B0004D4
+:10042000000B21C030A5FFFF36A600020E000FDB37
+:10043000000000000A00137000001821240F0002C1
+:1004400010CF0088241600013C0308008C6300D004
+:100450001076008D8F85002824D9FFFC2F280004FA
+:100460001500006300002021241F0002107F005DA2
+:100470002CC9000C24C3FFF82C6200041440FFE9CF
+:100480000000202130EA020051400004000621C093
+:1004900054C0000530A5FFFF000621C030A5FFFFB6
+:1004A0000A00150436A600020E000FDB32A600017A
+:1004B0008F8600108F8500280A001520000621C0B5
+:1004C0003C0A08008D4A0024315200015240FE438C
+:1004D000000018219785002A36A600020E000FDBC7
+:1004E000000020210A001370000018219668000CFB
+:1004F000311802005700FE313C0500013C1F800806
+:1005000097F900489789002A36A600023328FFFF92
+:10051000AF8800083C0380008C7501B806A0FFFE80
+:100520003C04800034820180AC400000110000B621
+:1005300024180003252A0012010A182B106000B2AB
+:1005400000000000966F00203C0E8000240D001A71
+:1005500031ECFFFF35CA018030EB4000A14D000BAC
+:10056000116000B02583FFFE0103902B164000AE02
+:100570002416FFFE34A50001A5430014AF85000436
+:100580002419BFFF00B94024A6E9000EA6E9001A0D
+:10059000A6E60008A6E80026A6E700103C07100023
+:1005A000AE8701B80A001370000018213C048000D7
+:1005B0008C8201B80440FFFE349601802415001C93
+:1005C000AEC70000A2D5000B3C071000AC8701B8F5
+:1005D0003C0A40003C098000AD2A01780A0013045F
+:1005E000000000005120FFA424C3FFF800002021D8
+:1005F00030A5FFFF0A00150436A600020E00103DCC
+:10060000000000008F8700000A001346AF82000C34
+:1006100090A30001241500011075FF0B24080001B0
+:10062000240600021066000430E2004024080001A5
+:100630000A001370010018215040FFFD240800013A
+:100640003C0C8000358B0100956A001094A40002D8
+:100650003143FFFF5083FDE1010018210A00158599
+:10066000240800018F8500282CB203EF1240FDDB27
+:10067000240300013C0308008C6300D02416000111
+:100680001476FF7624D9FFFC2CD8000C1300FF72DF
+:10069000000621C030A5FFFF0A00150436A600029F
+:1006A00010B00037240F000B14AFFE23000731C039
+:1006B000312600FF00065600000A4E0305220047BF
+:1006C00030C6007F0006F8C03C16080126D69640CA
+:1006D00003F68021A2000001A20000003C0F600090
+:1006E0008DF918202405000100C588040011302769
+:1006F0000326C024000731C000C03821ADF81820FF
+:100700000A0013C8A60000028F850020000731C030
+:1007100024A2FFFF0A0013F6AF8200200A0014B2E1
+:100720002415002011E0FECC3C1980003728010080
+:100730009518001094B6000233120FFF16D2FEC6B1
+:10074000000000000A00148290A900013C0B080080
+:100750008D6B0038256DFFFF15600002018D1024A0
+:10076000000010213C080800250800380048C0217E
+:10077000930F000425EE00040A0014C5000E21C0EA
+:1007800000065202241F00FF115FFDEB000731C07D
+:10079000000A20C03C0E080125CE9640008EA821FC
+:1007A000009E602100095C02240D00013C076000EE
+:1007B000A2AD0000AD860000A2AB00018CF21820B3
+:1007C00024030001014310040242B025ACF61820B6
+:1007D00000C038210A0013C8A6A900020A0015AA01
+:1007E000AF8000200A0012FFAF84002C8F85000428
+:1007F0003C1980002408000337380180A308000B4F
+:100800000A00144D3C088000A2F8000B0A00155A9B
+:100810002419BFFF8F9600042412FFFE0A00144B18
+:1008200002D228242416FFFE0A00155800B62824F8
+:100830003C038000346401008C85000030A2003E3F
+:100840001440000800000000AC6000488C870000E5
+:1008500030E607C010C0000500000000AC60004C8E
+:10086000AC60005003E0000824020001AC600054BA
+:10087000AC6000408C880000310438001080FFF923
+:10088000000000002402000103E00008AC60004406
+:100890003C0380008C6201B80440FFFE3467018095
+:1008A000ACE4000024080001ACE00004A4E500086A
+:1008B00024050002A0E8000A34640140A0E5000B12
+:1008C0009483000A14C00008A4E30010ACE00024E4
+:1008D0003C07800034E901803C041000AD20002872
+:1008E00003E00008ACE401B88C8600043C0410006E
+:1008F000ACE600243C07800034E90180AD200028EC
+:1009000003E00008ACE401B83C0680008CC201B8EA
+:100910000440FFFE34C7018024090002ACE400005B
+:10092000ACE40004A4E50008A0E9000A34C50140D5
+:10093000A0E9000B94A8000A3C041000A4E80010F1
+:10094000ACE000248CA30004ACE3002803E0000822
+:10095000ACC401B83C039000346200010082202541
+:100960003C038000AC6400208C65002004A0FFFEE6
+:100970000000000003E00008000000003C028000CE
+:10098000344300010083202503E00008AC4400202C
+:1009900027BDFFE03C098000AFBF0018AFB10014D5
+:1009A000AFB00010352801408D10000091040009FF
+:1009B0009107000891050008308400FF30E600FF31
+:1009C00000061A002C820081008330251040002A86
+:1009D00030A50080000460803C0D080125AD92B078
+:1009E000018D58218D6A00000140000800000000C0
+:1009F0003C038000346201409445000A14A0001EAC
+:100A00008F91FCC09227000530E6000414C0001A44
+:100A1000000000000E00164E02002021922A000560
+:100A200002002021354900040E001658A2290005B5
+:100A30009228000531040004148000020000000028
+:100A40000000000D922D0000240B002031AC00FFAF
+:100A5000158B00093C0580008CAE01B805C0FFFE77
+:100A600034B10180AE3000003C0F100024100005AE
+:100A7000A230000BACAF01B80000000D8FBF001812
+:100A80008FB100148FB0001003E0000827BD0020D4
+:100A90000200202100C028218FBF00188FB1001450
+:100AA0008FB00010240600010A00161D27BD00208B
+:100AB0000000000D0200202100C028218FBF001877
+:100AC0008FB100148FB00010000030210A00161DF5
+:100AD00027BD002014A0FFE8000000000200202134
+:100AE0008FBF00188FB100148FB0001000C02821F4
+:100AF0000A00163B27BD00203C0780008CEE01B8A1
+:100B000005C0FFFE34F00180241F0002A21F000B6D
+:100B100034F80140A60600089719000A3C0F10009F
+:100B2000A61900108F110004A6110012ACEF01B835
+:100B30000A0016998FBF001827BDFFE8AFBF00104D
+:100B40000E000FD4000000003C0280008FBF001098
+:100B500000002021AC4001800A00108F27BD001842
+:100B60003084FFFF30A5FFFF108000070000182130
+:100B7000308200011040000200042042006518216C
+:100B80001480FFFB0005284003E0000800601021EE
+:100B900010C00007000000008CA2000024C6FFFF68
+:100BA00024A50004AC82000014C0FFFB24840004D0
+:100BB00003E000080000000010A0000824A3FFFFCD
+:100BC000AC86000000000000000000002402FFFFCF
+:100BD0002463FFFF1462FFFA2484000403E000088A
+:100BE000000000003C03800027BDFFF83462018054
+:100BF000AFA20000308C00FF30AD00FF30CE00FF10
+:100C00003C0B80008D6401B80480FFFE00000000F2
+:100C10008FA900008D6801288FAA00008FA700000F
+:100C20008FA400002405000124020002A085000A10
+:100C30008FA30000359940003C051000A062000B16
+:100C40008FB800008FAC00008FA600008FAF0000AF
+:100C500027BD0008AD280000AD400004AD80002491
+:100C6000ACC00028A4F90008A70D0010A5EE0012E2
+:100C700003E00008AD6501B83C06800827BDFFE829
+:100C800034C50080AFBF001090A7000924020012F5
+:100C900030E300FF1062000B008030218CA8005070
+:100CA00000882023048000088FBF00108CAA003425
+:100CB000240400390000282100CA4823052000052B
+:100CC000240600128FBF00102402000103E0000878
+:100CD00027BD00180E0016F2000000008FBF0010A4
+:100CE0002402000103E0000827BD001827BDFFC84B
+:100CF000AFB20030AFB00028AFBF0034AFB1002CAE
+:100D000000A0802190A5000D30A6001010C000109A
+:100D1000008090213C0280088C4400048E0300086F
+:100D20001064000C30A7000530A6000510C0009329
+:100D3000240400018FBF00348FB200308FB1002C2B
+:100D40008FB000280080102103E0000827BD003884
+:100D500030A7000510E0000F30AB001210C00006F5
+:100D6000240400013C0980088E0800088D25000439
+:100D70005105009C240400388FBF00348FB200302E
+:100D80008FB1002C8FB000280080102103E00008F4
+:100D900027BD0038240A0012156AFFE6240400016A
+:100DA0000200202127A500100E000CB6AFA00010F5
+:100DB0001440007C3C19800837240080909800087B
+:100DC000331100081220000A8FA7001030FF010025
+:100DD00013E000A48FA300148C8600580066102333
+:100DE000044000043C0A8008AC8300588FA7001020
+:100DF0003C0A800835480080910900083124000829
+:100E00001480000224080003000040213C1F8008D9
+:100E100093F1001193F9001237E600808CCC005456
+:100E2000333800FF03087821322D00FF000F708057
+:100E300001AE282100AC582B1160006F00000000AB
+:100E400094CA005C8CC900543144FFFF0125102373
+:100E50000082182B14600068000000008CCB005446
+:100E60000165182330EC00041180006C000830800C
+:100E70008FA8001C0068102B1040006230ED0004A9
+:100E8000006610232C46008010C00002004088211C
+:100E9000241100800E00164E024020213C0D8008D7
+:100EA00035A6008024070001ACC7000C90C80008DC
+:100EB0000011484035A70100310C007FA0CC00088C
+:100EC0008E05000424AB0001ACCB0030A4D1005C43
+:100ED0008CCA003C9602000E01422021ACC40020C6
+:100EE0008CC3003C0069F821ACDF001C8E190004A3
+:100EF000ACF900008E180008ACF800048FB10010A7
+:100F0000322F000855E0004793A60020A0C0004EF5
+:100F100090D8004E2411FFDFA0F8000890CF000801
+:100F200001F17024A0CE00088E0500083C0B80085B
+:100F300035690080AD2500388D6A00148D2200309F
+:100F40002419005001422021AD24003491230000D7
+:100F5000307F00FF13F90036264F01000E001658AF
+:100F60000240202124040038000028210E0016F23F
+:100F70002406000A0A001757240400010E000D2859
+:100F8000000020218FBF00348FB200308FB1002CC1
+:100F90008FB00028004020210080102103E00008CD
+:100FA00027BD00388E0E00083C0F800835F0008009
+:100FB000AE0E005402402021AE0000300E00164E4E
+:100FC00000000000920D00250240202135AC0020D9
+:100FD0000E001658A20C00250E000CAC0240202179
+:100FE000240400382405008D0E0016F22406001299
+:100FF0000A0017572404000194C5005C0A001792E8
+:1010000030A3FFFF2407021811A0FF9E00E6102363
+:101010008FAE001C0A00179A01C610230A0017970A
+:101020002C620218A0E600080A0017C48E0500080A
+:101030002406FF8001E6C0243C118000AE38002861
+:101040008E0D000831E7007F3C0E800C00EE602121
+:10105000AD8D00E08E080008AF8C00380A0017D074
+:10106000AD8800E4AC800058908500082403FFF7A9
+:1010700000A33824A08700080A0017758FA7001066
+:101080003C05080024A560A83C04080024846FF4F3
+:101090003C020800244260B0240300063C01080121
+:1010A000AC2596C03C010801AC2496C43C01080163
+:1010B000AC2296C83C010801A02396CC03E00008AE
+:1010C0000000000003E00008240200013C02800050
+:1010D000308800FF344701803C0680008CC301B893
+:1010E0000460FFFE000000008CC501282418FF806A
+:1010F0003C0D800A24AF010001F8702431EC007F20
+:10110000ACCE0024018D2021ACE50000948B00EAD8
+:101110003509600024080002316AFFFFACEA0004D0
+:1011200024020001A4E90008A0E8000BACE00024C0
+:101130003C071000ACC701B8AF84003803E00008DA
+:10114000AF85006C938800488F8900608F820038DB
+:1011500030C600FF0109382330E900FF01221821C1
+:1011600030A500FF2468008810C000020124382147
+:101170000080382130E400031480000330AA00030B
+:101180001140000D312B000310A0000900001021B8
+:1011900090ED0000244E000131C200FF0045602B9D
+:1011A000A10D000024E700011580FFF925080001CA
+:1011B00003E00008000000001560FFF300000000DD
+:1011C00010A0FFFB000010218CF80000245900043F
+:1011D000332200FF0045782BAD18000024E70004FF
+:1011E00015E0FFF92508000403E0000800000000F6
+:1011F00093850048938800588F8700600004320070
+:101200003103007F00E5102B30C47F001040000F39
+:10121000006428258F8400383C0980008C8A00EC0B
+:10122000AD2A00A43C03800000A35825AC6B00A0AD
+:101230008C6C00A00580FFFE000000008C6D00ACEF
+:10124000AC8D00EC03E000088C6200A80A00188254
+:101250008F840038938800593C0280000080502120
+:10126000310300FEA383005930ABFFFF30CC00FFF9
+:1012700030E7FFFF344801803C0980008D2401B82D
+:101280000480FFFE8F8D006C24180016AD0D000049
+:101290008D2201248F8D0038AD0200048D5900206D
+:1012A000A5070008240201C4A119000AA118000B17
+:1012B000952F01208D4E00088D4700049783005C18
+:1012C0008D59002401CF302100C7282100A32023FD
+:1012D0002418FFFFA504000CA50B000EA5020010AA
+:1012E000A50C0012AD190018AD18002495AF00E848
+:1012F0003C0B10002407FFF731EEFFFFAD0E002876
+:101300008DAC0084AD0C002CAD2B01B88D460020B7
+:1013100000C7282403E00008AD4500208F8800386E
+:101320000080582130E7FFFF910900D63C02800081
+:1013300030A5FFFF312400FF00041A00006750258C
+:1013400030C600FF344701803C0980008D2C01B875
+:101350000580FFFE8F82006C240F0017ACE20000B6
+:101360008D390124ACF900048D780020A4EA00082E
+:10137000241901C4A0F8000AA0EF000B9523012056
+:101380008D6E00088D6D00049784005C01C35021B0
+:10139000014D602101841023A4E2000CA4E5000E9D
+:1013A000A4F90010A4E60012ACE000148D7800242B
+:1013B000240DFFFFACF800188D0F007CACEF001C73
+:1013C0008D0E00783C0F1000ACEE0020ACED002438
+:1013D000950A00BE240DFFF73146FFFFACE600285A
+:1013E000950C00809504008231837FFF0003CA00C2
+:1013F0003082FFFF0322C021ACF8002CAD2F01B8D2
+:10140000950E00828D6A002000AE3021014D282407
+:10141000A506008203E00008AD6500203C028000C4
+:10142000344501803C0480008C8301B80460FFFED9
+:101430008F8A0044240600199549001C3128FFFFBB
+:10144000000839C0ACA70000A0A6000B3C051000A6
+:1014500003E00008AC8501B88F87004C0080402174
+:1014600030C400FF3C0680008CC201B80440FFFE7F
+:101470008F89006C9383006834996000ACA90000E8
+:10148000A0A300058CE20010240F00022403FFF744
+:10149000A4A20006A4B900088D180020A0B8000A74
+:1014A000A0AF000B8CEE0000ACAE00108CED000481
+:1014B000ACAD00148CEC001CACAC00248CEB002018
+:1014C000ACAB00288CEA002C3C071000ACAA002C26
+:1014D0008D090024ACA90018ACC701B88D05002007
+:1014E00000A3202403E00008AD0400208F8600380C
+:1014F00027BDFFE0AFB10014AFBF0018AFB00010C0
+:1015000090C300D430A500FF3062002010400008D6
+:10151000008088218CCB00D02409FFDF256A0001E0
+:10152000ACCA00D090C800D401093824A0C700D4A8
+:1015300014A000403C0C80008F840038908700D4B9
+:101540002418FFBF2406FFEF30E3007FA08300D400
+:10155000979F005C8F8200608F8D003803E2C82364
+:10156000A799005CA5A000BC91AF00D401F870243D
+:10157000A1AE00D48F8C0038A18000D78F8A0038AC
+:10158000A5400082AD4000EC914500D400A658244F
+:10159000A14B00D48F9000348F8400609786005C4C
+:1015A0000204282110C0000FAF850034A38000582A
+:1015B0003C0780008E2C000894ED01208E2B000447
+:1015C000018D5021014B8021020620233086FFFF30
+:1015D00030C8000F3909000131310001162000091F
+:1015E000A3880058938600488FBF00188FB100145D
+:1015F0008FB0001027BD0020AF85006403E0000815
+:10160000AF86006000C870238FBF00189386004823
+:101610008FB100148FB0001034EF0C00010F28219F
+:1016200027BD0020ACEE0084AF85006403E0000815
+:10163000AF86006035900180020028210E00190F4E
+:10164000240600828F840038908600D430C5004084
+:1016500050A0FFBAA38000688F85004C3C06800034
+:101660008CCD01B805A0FFFE8F89006C2408608234
+:1016700024070002AE090000A6080008A207000B1C
+:101680008CA300083C0E1000AE0300108CA2000CCE
+:10169000AE0200148CBF0014AE1F00188CB90018E5
+:1016A000AE1900248CB80024AE1800288CAF002896
+:1016B000AE0F002CACCE01B80A001948A380006818
+:1016C0008F8A003827BDFFE0AFB10014AFB0001023
+:1016D0008F880060AFBF00189389003C954200BC22
+:1016E00030D100FF0109182B0080802130AC00FFB1
+:1016F0003047FFFF0000582114600003310600FF4F
+:1017000001203021010958239783005C0068202BB9
+:101710001480002700000000106800562419000102
+:101720001199006334E708803165FFFF0E0018C08F
+:10173000020020218F83006C3C07800034E601808A
+:101740003C0580008CAB01B80560FFFE240A001840
+:101750008F840038ACC30000A0CA000B948900BE7F
+:101760003C081000A4C90010ACC00030ACA801B8FF
+:101770009482008024430001A4830080949F008011
+:101780003C0608008CC6318833EC7FFF1186005E72
+:101790000000000002002021022028218FBF001835
+:1017A0008FB100148FB000100A00193427BD00203B
+:1017B000914400D42403FF8000838825A15100D4E4
+:1017C0009784005C3088FFFF51000023938C003C1D
+:1017D0008F8500382402EFFF008B782394AE00BC85
+:1017E0000168502B31E900FF01C26824A4AD00BCA0
+:1017F00051400039010058213C1F800037E60100AC
+:101800008CD800043C190001031940245500000144
+:1018100034E740008E0A00202403FFFB241100015E
+:1018200001432024AE0400201191002D34E78000F4
+:1018300002002021012030210E0018C03165FFFF79
+:101840009787005C8F890060A780005C0127802358
+:10185000AF900060938C003C8F8B00388FBF0018D6
+:101860008FB100148FB0001027BD002003E00008E6
+:10187000A16C00D73C0D800035AA01008D48000402
+:101880003C0900010109282454A0000134E740006C
+:101890008E0F00202418FFFB34E7800001F870242D
+:1018A00024190001AE0E00201599FF9F34E708802F
+:1018B000020020210E00188E3165FFFF020020215A
+:1018C000022028218FBF00188FB100148FB00010A4
+:1018D0000A00193427BD00200A0019F7000048212A
+:1018E00002002021012030210E00188E3165FFFFFB
+:1018F0009787005C8F890060A780005C01278023A8
+:101900000A001A0EAF900060948C0080241F8000A3
+:10191000019F3024A4860080908B0080908F0080EF
+:10192000316700FF0007C9C20019C027001871C045
+:1019300031ED007F01AE2825A08500800A0019DF67
+:1019400002002021938500682403000127BDFFE8E1
+:1019500000A330042CA20020AFB00010AFBF0014D1
+:1019600000C01821104000132410FFFE3C0708009F
+:101970008CE7319000E610243C088000350501809A
+:1019800014400005240600848F890038240A0004CE
+:101990002410FFFFA12A00FC0E00190F0000000018
+:1019A000020010218FBF00148FB0001003E0000868
+:1019B00027BD00183C0608008CC631940A001A574F
+:1019C00000C310248F87004427BDFFE0AFB200188A
+:1019D000AFB10014AFB00010AFBF001C30D000FF9B
+:1019E00090E6000D00A088210080902130C5007F86
+:1019F000A0E5000D8F8500388E2300188CA200D042
+:101A00001062002E240A000E0E001A4AA38A0068F3
+:101A10002409FFFF104900222404FFFF5200002088
+:101A2000000020218E2600003C0C001000CC582421
+:101A3000156000393C0E000800CE682455A0003F18
+:101A4000024020213C18000200D880241200001F10
+:101A50003C0A00048F8700448CE200148CE30010E1
+:101A60008CE500140043F82303E5C82B1320000580
+:101A7000024020218E24002C8CF1001010910031A6
+:101A80000240202124020012A38200680E001A4A9C
+:101A90002412FFFF105200022404FFFF0000202147
+:101AA0008FBF001C8FB200188FB100148FB00010D0
+:101AB0000080102103E0000827BD002090A800D47A
+:101AC000350400200A001A80A0A400D400CA4824CB
+:101AD0001520000B8F8B00448F8D00448DAC0010BF
+:101AE0001580000B024020218E2E002C51C0FFECEF
+:101AF00000002021024020210A001A9B2402001726
+:101B00008D66001050C0FFE6000020210240202119
+:101B10000A001A9B24020011024020212402001511
+:101B20000E001A4AA3820068240FFFFF104FFFDC4B
+:101B30002404FFFF0A001A8A8E2600000A001AC138
+:101B4000240200143C08000400C8382450E0FFD4EC
+:101B500000002021024020210A001A9B24020013C9
+:101B60008F85003827BDFFD8AFB3001CAFB2001877
+:101B7000AFB10014AFB00010AFBF002090A700D4E9
+:101B80008F90004C2412FFFF34E2004092060000C8
+:101B9000A0A200D48E0300100080982110720006CD
+:101BA00030D1003F2408000D0E001A4AA3880068B7
+:101BB000105200252404FFFF8F8A00388E09001878
+:101BC0008D4400D01124000702602021240C000E57
+:101BD0000E001A4AA38C0068240BFFFF104B001A5A
+:101BE0002404FFFF24040020122400048F8D0038F9
+:101BF00091AF00D435EE0020A1AE00D48F85005403
+:101C000010A00019000000001224004A8F9800382C
+:101C10008F92FCC0971000809651000A5230004805
+:101C20008F9300403C1F08008FFF318C03E5C82BC9
+:101C30001720001E02602021000028210E0019A993
+:101C400024060001000020218FBF00208FB3001C5C
+:101C50008FB200188FB100148FB0001000801021D7
+:101C600003E0000827BD00285224002A8E05001436
+:101C70008F840038948A008025490001A48900805F
+:101C8000948800803C0208008C42318831077FFF35
+:101C900010E2000E00000000026020210E00193446
+:101CA000240500010A001B0B000020212402002D46
+:101CB0000E001A4AA38200682403FFFF1443FFE1C9
+:101CC0002404FFFF0A001B0C8FBF002094990080A2
+:101CD000241F800024050001033FC024A498008035
+:101CE00090920080908E0080325100FF001181C2DE
+:101CF00000107827000F69C031CC007F018D582576
+:101D0000A08B00800E001934026020210A001B0BFA
+:101D1000000020212406FFFF54A6FFD68F84003840
+:101D2000026020210E001934240500010A001B0B5B
+:101D300000002021026020210A001B252402000A45
+:101D40002404FFFD0A001B0BAF9300608F8800384E
+:101D500027BDFFE8AFB00010AFBF0014910A00D458
+:101D60008F87004C00808021354900408CE60010B0
+:101D7000A10900D43C0208008C4231B030C53FFFBD
+:101D800000A2182B106000078F850050240DFF80E3
+:101D900090AE000D01AE6024318B00FF156000088D
+:101DA0000006C382020020212403000D8FBF00140F
+:101DB0008FB0001027BD00180A001A4AA3830068DC
+:101DC00033060003240F000254CFFFF70200202146
+:101DD00094A2001C8F85003824190023A4A200E8D7
+:101DE0008CE8000000081E02307F003F13F9003528
+:101DF0003C0A00838CE800188CA600D0110600086D
+:101E0000000000002405000E0E001A4AA385006899
+:101E10002407FFFF104700182404FFFF8F850038B8
+:101E200090A900D435240020A0A400D48F8C0044B5
+:101E3000918E000D31CD007FA18D000D8F83005458
+:101E40001060001C020020218F8400508C9800102C
+:101E50000303782B11E0000D241900180200202143
+:101E6000A39900680E001A4A2410FFFF10500002C8
+:101E70002404FFFF000020218FBF00148FB000104A
+:101E80000080102103E0000827BD00188C86001098
+:101E90008F9F00440200202100C31023AFE20010F6
+:101EA000240500010E0019A9240600010A001B9751
+:101EB000000020210E001934240500010A001B97A0
+:101EC00000002021010A5824156AFFD98F8C004494
+:101ED000A0A600FC0A001B84A386005A30A500FFC0
+:101EE0002406000124A9000100C9102B1040000C99
+:101EF00000004021240A000100A61823308B0001B5
+:101F000024C60001006A3804000420421160000267
+:101F100000C9182B010740251460FFF800A61823FC
+:101F200003E000080100102127BDFFD8AFB0001862
+:101F30008F90004CAFB1001CAFBF00202403FFFF07
+:101F40002411002FAFA30010920600002405000802
+:101F500026100001006620260E001BB0308400FF12
+:101F600000021E003C021EDC34466F410A001BD8F2
+:101F70000000102110A00009008018212445000154
+:101F800030A2FFFF2C4500080461FFFA0003204047
+:101F90000086202614A0FFF9008018210E001BB037
+:101FA000240500208FA300102629FFFF313100FFF8
+:101FB00000034202240700FF1627FFE20102182651
+:101FC00000035027AFAA0014AFAA00100000302170
+:101FD00027A8001027A7001400E6782391ED00033E
+:101FE00024CE000100C8602131C600FF2CCB0004C4
+:101FF0001560FFF9A18D00008FA200108FBF002097
+:102000008FB1001C8FB0001803E0000827BD002826
+:1020100027BDFFD0AFB3001CAFB00010AFBF00288A
+:10202000AFB50024AFB40020AFB20018AFB10014B8
+:102030003C0C80008D880128240FFF803C06800A1C
+:1020400025100100250B0080020F68243205007F57
+:10205000016F7024AD8E009000A62821AD8D002464
+:1020600090A600FC3169007F3C0A8004012A1821F7
+:10207000A386005A9067007C00809821AF830030CF
+:1020800030E20002AF88006CAF85003800A0182154
+:10209000144000022404003424040030A3840048C7
+:1020A0008C7200DC30D100FF24040004AF92006089
+:1020B00012240004A38000688E7400041680001EA1
+:1020C0003C0880009386005930C7000110E0000FE3
+:1020D0008F9300608CB000848CA800842404FF805F
+:1020E000020410240002F940310A007F03EA482567
+:1020F0003C0C2000012C902530CD00FE3C038000DC
+:10210000AC720830A38D00598F9300608FBF0028F8
+:102110008FB50024ACB300DC8FB400208FB3001C5B
+:102120008FB200188FB100148FB00010240200018C
+:1021300003E0000827BD00308E7F000895020120D3
+:102140008E67001003E2C8213326FFFF30D8000F4E
+:1021500033150001AF87003416A00058A39800582B
+:1021600035090C000309382100D81823AD03008479
+:10217000AF8700648E6A00043148FFFF1100007EC3
+:10218000A78A005C90AC00D42407FF8000EC3024C8
+:1021900030CB00FF1560004B9786005C938E005A91
+:1021A000240D000230D5FFFF11CD02A20000A021B6
+:1021B0008F85006002A5802B160000BC9388004824
+:1021C0003C11800096240120310400FF1485008812
+:1021D0008F8400648F9800343312000356400085CA
+:1021E00030A500FF8F900064310C00FF24060034FE
+:1021F00011860095AF90004C9204000414800118E1
+:102200008F8E0038A380003C8E0D00048DC800D84E
+:102210003C0600FF34CCFFFF01AC30240106182B34
+:1022200014600120AF8600548F8700609798005C8F
+:10223000AF8700400307402310C000C7A788005C99
+:102240008F91003030C3000300035823922A007C92
+:102250003171000302261021000A20823092000111
+:102260000012488000492821311FFFFF03E5C82BD9
+:10227000132001208F8800388F8500348F880064F8
+:102280001105025A3C0E3F018E0600003C0C250051
+:1022900000CE682411AC01638F84004C30E500FF50
+:1022A0000E00184A000030218F8800388F870060A8
+:1022B0008F8500340A001DB78F8600540A001C5613
+:1022C000AF87006490A400D400E48024320200FFB1
+:1022D000104000169386005990A6008890AE00D753
+:1022E00024A8008830D4003F2686FFE02CD10020AF
+:1022F000A38E003C1220000CAF88004C240B000180
+:1023000000CB20043095001916A0012B3C0680005C
+:1023100034CF0002008FC0241700022E3099002015
+:1023200017200234000000009386005930CB0001D2
+:102330001160000F9788005C8CBF00848CA900841A
+:10234000240AFF8003EA6024000C19403132007F28
+:10235000007238253C0D200000EDC82530D800FE65
+:102360003C0F8000ADF90830A39800599788005CB5
+:102370001500FF84000000008E630020306200041E
+:102380001040FF51938600592404FFFB0064802411
+:102390003C038000AE700020346601808C7301B86D
+:1023A0000660FFFE8F98006C347501003C1400013C
+:1023B000ACD800008C6B012424076085ACCB0004F2
+:1023C0008EAE000401D488245220000124076083CB
+:1023D00024190002A4C700083C0F1000A0D9000B6C
+:1023E0003C068000ACCF01B80A001C2B9386005934
+:1023F00030A500FF0E00184A240600018F88006CEB
+:102400003C05800034A90900250201889388004812
+:10241000304A0007304B00783C0340802407FF809F
+:102420000163C825014980210047F824310C00FFD1
+:1024300024060034ACBF0800AF90004CACB90810C3
+:102440005586FF6E920400048F8400388E11003090
+:10245000908E00D431CD001015A000108F83006045
+:102460002C6F000515E000E400000000909800D4F7
+:102470002465FFFC331200101640000830A400FF52
+:102480008F9F00648F99003413F90004388700018E
+:1024900030E20001144001C8000000000E001BC320
+:1024A000000000000A001DF8000000008F84006496
+:1024B00030C500FF0E00184A24060001939800481A
+:1024C000240B0034130B00A08F8500388F8600602A
+:1024D0009783005C306EFFFF00CE8823AF910060D1
+:1024E000A780005C1280FF90028018212414FFFD59
+:1024F0005474FFA28E6300208E6A00042403FFBF81
+:102500002408FFEF0155F823AE7F000490AC00D4FF
+:102510003189007FA0A900D48E7200208F8F0038EF
+:10252000A780005C364D0002AE6D0020A5E000BC27
+:1025300091E500D400A3C824A1F900D48F950038F8
+:10254000AEA000EC92B800D403085824A2AB00D48B
+:102550000A001CD78F8500388F910034AF8000604F
+:1025600002275821AF8B0034000020212403FFFFF5
+:10257000108301B48F8500388E0C00103C0D0800CC
+:102580008DAD31B09208000031843FFF008D802B6B
+:1025900012000023310D003F3C1908008F3931A88B
+:1025A0008F9F006C000479802408FF80033F202166
+:1025B000008FC821938500590328F8243C06008029
+:1025C0003C0F800034D80001001F91403331007F60
+:1025D0008F8600380251502535EE0940332B0078A4
+:1025E000333000073C0310003C02800C017890253A
+:1025F000020E48210143C0250222382134AE0001D9
+:10260000ADFF0804AF890050ADF20814AF87004455
+:10261000ADFF0028ACD90084ADF80830A38E005976
+:102620009383005A24070003106700272407000142
+:102630001467FFAC8F8500382411002311B1008589
+:1026400000000000240E000B026020210E001A4A38
+:10265000A38E00680040A0210A001D328F8500383B
+:1026600002602021240B000C0E001A4AA38B006884
+:10267000240AFFFF104AFFBD2404FFFF8F8E00389D
+:10268000A380003C8E0D00048DC800D83C0600FFDE
+:1026900034CCFFFF01AC30240106182B1060FEE2A1
+:1026A000AF86005402602021241200190E001A4A3D
+:1026B000A3920068240FFFFF104FFFAC2404FFFF1C
+:1026C0000A001C838F86005425A3FFE02C74002091
+:1026D0001280FFDD240E000B000328803C1108014E
+:1026E000263194B400B148218D2D000001A00008CE
+:1026F000000000008F85003400A710219385003C66
+:10270000AF82003402251821A383003C951F00BC32
+:102710000226282137F91000A51900BC5240FF926B
+:10272000AF850060246A0004A38A003C950900BCC0
+:1027300024A40004AF84006035322000A51200BC40
+:102740000A001D54000020218F8600602CC800055F
+:102750001500FF609783005C3065FFFF00C5C8234C
+:102760002F2F000511E00003306400FF24CDFFFC93
+:1027700031A400FF8F8900648F920034113200046D
+:10278000389F000133EC0001158001380000000083
+:102790008F840038908700D434E60010A08600D4DF
+:1027A0008F8500388F8600609783005CACA000ECBA
+:1027B0000A001D2F306EFFFF8CB500848CB400849E
+:1027C0003C04100002A7302400068940328E007FAE
+:1027D000022E8025020410253C08800024050001FB
+:1027E00002602021240600010E0019A9AD02083064
+:1027F0000A001CC38F8500388C8200EC1222FE7EFA
+:102800000260202124090005A38900680E001A4AED
+:102810002411FFFF1451FE782404FFFF0A001D5508
+:102820002403FFFF8F8F004C8F8800388DF8000045
+:10283000AD1800888DE70010AD0700988F87006005
+:102840000A001DB78F8600542406FFFF118600057D
+:10285000000000000E001B4C026020210A001D8FAA
+:102860000040A0210E001AD1026020210A001D8F15
+:102870000040A0218F90004C3C0208008C4231B0F7
+:102880008E110010322C3FFF0182282B10A0000C6B
+:10289000240BFF808F85005090A3000D01637024EE
+:1028A00031CA00FF1140000702602021001143825D
+:1028B000310600032418000110D8010600000000B2
+:1028C000026020212403000D0E001A4AA383006831
+:1028D000004020218F8500380A001D320080A02191
+:1028E0008F90004C3C0A08008D4A31B08F85005013
+:1028F0008E0400100000A0218CB1001430823FFF34
+:10290000004A602B8CB200205180FFEE0260202133
+:1029100090B8000D240BFF800178702431C300FFB4
+:102920005060FFE80260202100044382310600036A
+:1029300014C0FFE40260202194BF001C8F9900386E
+:102940008E060028A73F00E88CAF0010022F20233E
+:1029500014C4013A026020218F83005400C368210F
+:10296000022D382B14E00136240200188F8A00440F
+:102970008F820030024390218D4B00100163702341
+:10298000AD4E0010AD5200208C4C00740192282BEB
+:1029900014A0015F026020218F8400508E08002463
+:1029A0008C86002411060007026020212419001CD7
+:1029B0000E001A4AA3990068240FFFFF104FFFC5AD
+:1029C0002404FFFF8F8400448C87002424FF00012F
+:1029D000AC9F00241251012F8F8D00308DB10074F7
+:1029E0001232012C3C0B00808E0E000001CB5024D3
+:1029F00015400075000000008E0300142411FFFF35
+:102A0000107100073C0808003C0608008CC6319095
+:102A100000C8C0241300015202602021A380006876
+:102A20008E0300003C19000100792024108000135F
+:102A30003C1F0080007FA02416800009020028218E
+:102A4000026020212411001A0E001A4AA391006886
+:102A50002407FFFF1047FF9F2404FFFF02002821E7
+:102A6000026020210E001A6A240600012410FFFFD4
+:102A70001050FF982404FFFF241400018F8D0044A0
+:102A8000026020210280302195A900342405000134
+:102A9000253200010E0019A9A5B200340000202142
+:102AA0008F8500380A001D320080A0218F90004CD5
+:102AB0003C1408008E9431B08E07001030E53FFFC3
+:102AC00000B4C82B132000618F8600502412FF80B1
+:102AD00090C9000D0249682431A400FF5080005CB9
+:102AE000026020218F8C00541180000700078B8228
+:102AF0008F8500388F82FCC094BF0080944A000A02
+:102B0000515F00F78F8600403227000314E0006415
+:102B100000000000920E000211C000D8000000006A
+:102B20008E0B0024156000D902602021920400035E
+:102B300024190002308500FF14B90005308900FF18
+:102B40008F940054128000EA240D002C308900FF7D
+:102B5000392C00102D8400012D3200010244302553
+:102B6000020028210E001A6A026020212410FFFFB3
+:102B7000105000BF8F8500388F830054106000D341
+:102B8000240500013C0A08008D4A318C0143F82BD2
+:102B900017E000B22402002D02602021000028214D
+:102BA0000E0019A9240600018F85003800001821A5
+:102BB0000A001D320060A0210E0018750000000000
+:102BC0000A001DF800000000AC8000200A001E78FA
+:102BD0008E03001400002821026020210E0019A994
+:102BE000240600010A001CC38F8500380A001DB7A7
+:102BF0008F8800388CAA00848CAC00843C031000C1
+:102C00000147F824001F91403189007F024968255F
+:102C100001A32825ACC50830910700012405000157
+:102C2000026020210E0019A930E600010A001CC331
+:102C30008F850038938F00482403FFFD0A001D3460
+:102C4000AF8F00600A001D342403FFFF02602021C3
+:102C50002410000D0E001A4AA390006800401821AD
+:102C60008F8500380A001D320060A0210E00187503
+:102C7000000000009783005C8F86006000402021E8
+:102C80003070FFFF00D010232C4A00051140FE11C8
+:102C90008F850038ACA400EC0A001D2F306EFFFFBA
+:102CA00090CF000D31E300085460FFA192040003AF
+:102CB00002602021240200100E001A4AA38200683C
+:102CC0002403FFFF5443FF9A920400030A001F12DB
+:102CD0008F85003890A4000D308F000811E000951A
+:102CE0008F990054572000A6026020218E1F000CEF
+:102CF0008CB4002057F40005026020218E0D0008DE
+:102D00008CA7002411A7003A026020212402002091
+:102D1000A38200680E001A4A2412FFFF1052FEED33
+:102D20002404FFFF8F9F00442402FFF73C14800E11
+:102D300093EA000D2419FF803C03800001423824EF
+:102D4000A3E7000D8F9F00303C0908008D2931ACAE
+:102D50008F8C006C97F200788F870044012C302113
+:102D6000324D7FFF000D204000C4782131E5007F07
+:102D700000B4C02101F94024AC68002CA711000068
+:102D80008CEB0028256E0001ACEE00288CEA002CAC
+:102D90008E02002C01426021ACEC002C8E09002C2C
+:102DA000ACE900308E120014ACF2003494ED003A1D
+:102DB00025A40001A4E4003A97E600783C1108003D
+:102DC0008E3131B024C3000130707FFF1211005CDE
+:102DD000006030218F8F0030026020212405000127
+:102DE0000E001934A5E600780A001EA1000020217B
+:102DF0008E0900142412FFFF1132006B8F8A0038F5
+:102E00008E0200188D4C00D0144C00650260202109
+:102E10008E0B00248CAE0028116E005B2402002172
+:102E20000E001A4AA38200681452FFBE2404FFFF5A
+:102E30008F8500380A001D320080A0212402001F67
+:102E40000E001A4AA38200682409FFFF1049FEA160
+:102E50002404FFFF0A001E548F83005402602021C7
+:102E60000E001A4AA38200681450FF508F85003864
+:102E70002403FFFF0A001D320060A0218CD800242B
+:102E80008E0800241118FF29026020210A001F2744
+:102E90002402000F8E0900003C05008001259024CB
+:102EA0001640FF492402001A026020210E001A4A2F
+:102EB000A3820068240CFFFF144CFECF2404FFFF04
+:102EC0008F8500380A001D320080A0210E001934C1
+:102ED000026020218F8500380A001EE500001821BD
+:102EE0002403FFFD0060A0210A001D32AF860060B0
+:102EF000026020210E001A4AA38D00682403FFFF00
+:102F00001043FF588F8500380A001ECC920400033E
+:102F10002418001D0E001A4AA39800682403FFFF1E
+:102F20001443FE9D2404FFFF8F8500380A001D32E4
+:102F30000080A021026020210A001F3D24020024FD
+:102F4000240880000068C024330BFFFF000B73C20D
+:102F500031D000FF001088270A001F6E001133C017
+:102F6000240F001B0E001A4AA38F00681451FEACF8
+:102F70002404FFFF8F8500380A001D320080A02145
+:102F80000A001F3D240200278E0600288CA3002C77
+:102F900010C30008026020210A001F812402001FC4
+:102FA0000A001F812402000E026020210A001F81F6
+:102FB000240200258E04002C1080000D8F8F00301D
+:102FC0008DE800740104C02B5700000C0260202122
+:102FD0008CB900140086A0210334282B10A0FF52C6
+:102FE0008F9F0044026020210A001F8124020022DA
+:102FF000026020210A001F81240200230A001F8191
+:103000002402002627BDFFD8AFB3001CAFB10014C7
+:10301000AFBF0020AFB20018AFB000103C0280007C
+:103020008C5201408C4B01483C048000000B8C0208
+:10303000322300FF317300FF8C8501B804A0FFFE2E
+:1030400034900180AE1200008C8701442464FFF0AC
+:10305000240600022C830013AE070004A61100080A
+:10306000A206000BAE1300241060004F8FBF00209B
+:10307000000448803C0A0801254A9534012A402171
+:103080008D04000000800008000000003C030800E0
+:103090008C6331A831693FFF00099980007280215B
+:1030A000021370212405FF80264D0100264C00806C
+:1030B0003C02800031B1007F3198007F31CA007F2F
+:1030C0003C1F800A3C1980043C0F800C01C5202461
+:1030D00001A5302401853824014F1821AC46002475
+:1030E000023F402103194821AC470090AC4400281E
+:1030F000AF830044AF880038AF8900300E0019005C
+:10310000016080213C0380008C6B01B80560FFFEEC
+:103110008F8700448F8600383465018090E8000D69
+:10312000ACB20000A4B0000600082600000416039C
+:1031300000029027001227C21080008124C200885C
+:10314000241F6082A4BF0008A0A000052402000282
+:10315000A0A2000B8F8B0030000424003C08270045
+:1031600000889025ACB20010ACA00014ACA00024E4
+:10317000ACA00028ACA0002C8D6900382413FF807F
+:10318000ACA9001890E3000D02638024320500FF13
+:1031900010A000058FBF002090ED000D31AC007F26
+:1031A000A0EC000D8FBF00208FB3001C8FB2001861
+:1031B0008FB100148FB000103C0A10003C0E80004C
+:1031C00027BD002803E00008ADCA01B8265F010052
+:1031D0002405FF8033F8007F3C06800003E5782457
+:1031E0003C19800A03192021ACCF0024908E00D412
+:1031F00000AE682431AC00FF11800024AF84003899
+:10320000248E008895CD00123C0C08008D8C31A8CE
+:1032100031AB3FFF01924821000B5180012A402130
+:1032200001052024ACC400283107007F3C06800C37
+:1032300000E620219083000D00A31024304500FFFC
+:1032400010A0FFD8AF8400449098000D330F0010F9
+:1032500015E0FFD58FBF00200E0019000000000010
+:103260003C0380008C7901B80720FFFE00000000BD
+:10327000AE1200008C7F0144AE1F0004A6110008AE
+:1032800024110002A211000BAE1300243C1308010C
+:10329000927396F0327000015200FFC38FBF00207E
+:1032A0000E002146024020210A0020638FBF00202B
+:1032B0003C1260008E452C083C03F0033462FFFF93
+:1032C00000A2F824AE5F2C088E582C083C1901C0CF
+:1032D00003199825AE532C080A0020638FBF0020E5
+:1032E000264D010031AF007F3C10800A240EFF8084
+:1032F00001F0282101AE60243C0B8000AD6C00245D
+:103300001660FFA8AF85003824110003A0B100FCAF
+:103310000A0020638FBF002026480100310A007F89
+:103320003C0B800A2409FF80014B30210109202435
+:103330003C078000ACE400240A002062AF8600381D
+:10334000944E0012320C3FFF31CD3FFF15ACFF7D94
+:10335000241F608290D900D42418FF800319782498
+:1033600031EA00FF1140FF7700000000240700044D
+:10337000A0C700FC8F870044241160842406000D40
+:10338000A4B10008A0A600050A00204D24020002F6
+:103390003C040001248496DC24030014240200FE73
+:1033A0003C010800AC2431EC3C010800AC2331E8BE
+:1033B0003C010801A42296F83C040801248496F8F4
+:1033C0000000182100643021A0C300042463000120
+:1033D0002C6500FF54A0FFFC006430213C0708006E
+:1033E00024E7010003E00008AF87007800A058211F
+:1033F000008048210000102114A00012000050217C
+:103400000A002142000000003C010801A42096F8B7
+:103410003C05080194A596F88F8200783C0C0801C1
+:10342000258C96F800E2182100AC2021014B302BAE
+:10343000A089000400001021A460000810C0003919
+:10344000010048218F8600780009384000E94021BA
+:103450000008388000E6282190A8000B90B9000AE7
+:103460000008204000881021000218800066C0215A
+:10347000A319000A8F85007800E5782191EE000AF3
+:1034800091E6000B000E684001AE6021000C208028
+:1034900000851021A046000B3C030801906396F2C2
+:1034A000106000222462FFFF8F8300383C01080176
+:1034B000A02296F2906C00FF118000040000000032
+:1034C000906E00FF25CDFFFFA06D00FF3C190801A5
+:1034D000973996F8272300013078FFFF2F0F00FF60
+:1034E00011E0FFC9254A00013C010801A42396F818
+:1034F0003C05080194A596F88F8200783C0C0801E1
+:10350000258C96F800E2182100AC2021014B302BCD
+:10351000A089000400001021A460000814C0FFC9A5
+:103520000100482103E000080000000003E000085B
+:103530002402000227BDFFE0248501002407FF804C
+:10354000AFB00010AFBF0018AFB1001400A718242F
+:103550003C10800030A4007F3C06800A00862821B1
+:103560008E110024AE03002490A200FF1440000836
+:10357000AF850038A0A000098FBF0018AE1100244D
+:103580008FB100148FB0001003E0000827BD0020A9
+:1035900090A900FD90A800FF312400FF0E0020F448
+:1035A000310500FF8F8500388FBF0018A0A00009EB
+:1035B000AE1100248FB100148FB0001003E000089A
+:1035C00027BD002027BDFFD0AFB20020AFB1001C47
+:1035D000AFB00018AFBF002CAFB40028AFB30024C9
+:1035E0003C0980009533011635320C00952F011AE5
+:1035F0003271FFFF023280218E08000431EEFFFF9E
+:10360000248B0100010E6821240CFF8025A5FFFFFB
+:10361000016C50243166007F3C07800AAD2A0024EB
+:1036200000C73021AF850074AF8800703C010801ED
+:10363000A02096F190C300090200D02100809821BB
+:10364000306300FF2862000510400048AF86003854
+:10365000286400021480008E24140001240D00054B
+:103660003C010801A02D96D590CC00FD3C0108013D
+:10367000A02096D63C010801A02096D790CB000A46
+:10368000240AFF80318500FF014B4824312700FFC9
+:1036900010E0000C000058213C12800836510080D8
+:1036A0008E2F00308CD0005C01F0702305C0018E9D
+:1036B0008F87007090D4000A3284007FA0C4000A73
+:1036C0008F8600383C118008363000808E0F003025
+:1036D0008F87007000EF702319C000EE000000001B
+:1036E00090D4000924120002328400FF1092024795
+:1036F000000000008CC2005800E2F82327F9FFFF09
+:103700001B2001300000000090C5000924080004BF
+:1037100030A300FF10680057240A00013C01080193
+:10372000A02A96D590C900FF252700013C01080179
+:10373000A02796D43C030801906396D52406000583
+:103740001066006A2C780005130000C40000902168
+:103750000003F8803C0408012484958003E4C82118
+:103760008F25000000A0000800000000241800FFC2
+:103770001078005C0000000090CC000A90CA00099C
+:103780003C080801910896F13187008000EA48253D
+:103790003C010801A02996DC90C500FD3C140801FD
+:1037A000929496F2311100013C010801A02596DDAA
+:1037B00090DF00FE3C010801A03F96DE90D200FFA2
+:1037C0003C010801A03296DF8CD900543C0108016D
+:1037D000AC3996E08CD000583C010801AC3096E43E
+:1037E0008CC3005C3C010801AC3496EC3C01080140
+:1037F000AC2396E8162000088FBF002C8FB4002859
+:103800008FB300248FB200208FB1001C8FB000183E
+:1038100003E0000827BD00303C1180009624010E13
+:103820000E000FD43094FFFF3C0B08018D6B96F413
+:103830000260382102802821AE2B01803C13080150
+:103840008E7396D401602021240600830E00102F71
+:10385000AFB300108FBF002C8FB400288FB30024AB
+:103860008FB200208FB1001C8FB0001803E0000859
+:1038700027BD00303C1808008F1831FC270F0001CD
+:103880003C010800AC2F31FC0A0021D700000000E9
+:103890001474FFB900000000A0C000FF3C05080040
+:1038A0008CA531E43C0308008C6331E03C02080045
+:1038B0008C4232048F99003834A80001241F000282
+:1038C0003C010801AC2396F43C010801A02896F0C5
+:1038D0003C010801A02296F3A33F00090A002190B1
+:1038E0008F8600380E002146000000000A0021D714
+:1038F0008F8600383C1F080193FF96D424190001DD
+:1039000013F902298F8700703C100801921096D895
+:103910003C06080190C696D610C000050200A02102
+:103920003C040801908496D9109001E48F870078B8
+:10393000001088408F9F0078023048210009C8801D
+:10394000033F702195D80008270F0001A5CF00087C
+:103950003C040801908496D93C05080190A596D6B0
+:103960000E0020F4000000008F8700780230202134
+:103970000004308000C720218C8500048F820074F1
+:1039800000A2402305020006AC8200048C8A0000DD
+:103990008F830070014310235C400001AC83000062
+:1039A0008F86003890CB00FF2D6C00025580002DD3
+:1039B000241400010230F821001F40800107282153
+:1039C00090B9000B8CAE00040019C0400319782197
+:1039D000000F1880006710218C4D000001AE882375
+:1039E0002630FFFF5E00001F241400018C440004F9
+:1039F0008CAA0000008A482319200019240E000414
+:103A00003C010801A02E96D590AD000B8CAB0004B4
+:103A1000000D8840022D80210010108000471021E9
+:103A20008C44000401646023058202009443000872
+:103A300090DF00FE90B9000B33E500FF54B900049D
+:103A40000107A021A0D400FE8F8700780107A021E4
+:103A50009284000B0E0020F4240500018F860038AC
+:103A600024140001125400962E500001160000424A
+:103A70003C08FFFF241900021659FF3F0000000018
+:103A8000A0C000FF8F860038A0D200090A0021D70D
+:103A90008F86003890C700092404000230E300FF3D
+:103AA0001064016F24090004106901528F880074AA
+:103AB0008CCE0054010E682325B10001062001754B
+:103AC000241800043C010801A03896D53C010801E7
+:103AD000A02096D490D400FD90D200FF2E4F00027B
+:103AE00015E0FF14328400FF000438408F8900780D
+:103AF00090DF00FF00E41021000220800089C8212F
+:103B00002FE500029324000B14A0FF0A24070002F3
+:103B100000041840006480210010588001692821A9
+:103B20008CAC0004010C50230540FF020000000093
+:103B30003C030801906396D614600005246F0001D1
+:103B40003C010801A02496D93C010801A02796D782
+:103B50003C010801A02F96D690CE00FF24E700017B
+:103B600031CD00FF01A7882B1220FFE990A4000BA4
+:103B70000A0021C6000000003C0508018CA596D46F
+:103B80003C12000400A8F82413F2000624020005E9
+:103B90003C090801912996D5152000022402000352
+:103BA000240200053C010801A02296F190C700FF05
+:103BB00014E0012024020002A0C200090A0021D75B
+:103BC0008F86003890CC00FF1180FEDA240A0001B5
+:103BD0008F8C00748F890078240F00030180682186
+:103BE0001160001E240E0002000540400105A021C6
+:103BF00000142080008990218E51000401918023BF
+:103C00000600FECC000000003C020801904296D65F
+:103C100014400005245800013C010801A02A96D751
+:103C20003C010801A02596D93C010801A03896D690
+:103C300090DF00FF010510210002C88033E500FF7E
+:103C4000254A00010329202100AA402B1500FEB9B6
+:103C50009085000B1560FFE50005404000054040E1
+:103C600001051821000310803C010801A02A96D408
+:103C70003C010801A02596D8004918218C64000455
+:103C800000E4F82327F9FFFF1F20FFE900000000F0
+:103C90008C63000000E358230560013A01A38823E8
+:103CA00010E301170184C0231B00FEA200000000E6
+:103CB0003C010801A02E96D50A002305240B000123
+:103CC000240E0004A0CE00093C0D08008DAD31F893
+:103CD0008F86003825A200013C010800AC2231F893
+:103CE0000A0021D7000000008CD9005C00F9C02335
+:103CF0001F00FE7B000000008CDF005C10FFFF65F2
+:103D00008F8400748CC3005C008340232502000173
+:103D10001C40FF60000000008CC9005C248700018B
+:103D200000E9282B10A0FE943C0D80008DAB01040F
+:103D30003C0C0001016C50241140FE8F2402001045
+:103D40003C010801A02296F10A0021D700000000E2
+:103D50008F9100748F86003826220001ACC2005C6F
+:103D60000A002292241400018F8700382404FF8067
+:103D70000000882190E9000A241400010124302564
+:103D8000A0E6000A3C05080190A596D63C0408016F
+:103D9000908496D90E0020F4000000008F86003831
+:103DA0008F85007890C800FD310700FF0007404074
+:103DB0000107F821001FC0800305C8219323000BD1
+:103DC000A0C300FD8F8500788F8600380305602131
+:103DD000918F000B000F704001CF6821000D808093
+:103DE000020510218C4B0000ACCB00548D840004E4
+:103DF0008F83007400645023194000022482000164
+:103E00002462000101074821ACC2005C0009308037
+:103E100000C5402100E02021240500010E0020F40F
+:103E20009110000B8F86003890C500FF10A0FF0C8A
+:103E3000001070408F85007801D06821000D10803F
+:103E4000004558218D6400008F8C0074018450233C
+:103E50002547000104E0FF02263100013C03080170
+:103E6000906396D62E2F0002247800013C010801B1
+:103E7000A03896D63C010801A03496D711E0FEF890
+:103E8000020038210A002365000740408F84003873
+:103E90008F8300748C85005800A340230502FE9A8E
+:103EA000AC8300580A00223B000000003C070801D8
+:103EB00090E796F2240200FF10E200BE8F860038E1
+:103EC0003C110801963196FA3C030801246396F8E8
+:103ED000262500013230FFFF30ABFFFF02036021D7
+:103EE0002D6A00FF1540008D918700043C010801F8
+:103EF000A42096FA8F88003800074840012728211F
+:103F0000911800FF000530802405000127140001EE
+:103F1000A11400FF3C120801925296F28F8800789B
+:103F20008F8E0070264F000100C820213C0108013F
+:103F3000A02F96F2AC8E00008F8D0074A48500082F
+:103F4000AC8D00043C030801906396D414600077A4
+:103F5000000090213C010801A02596D4A087000B09
+:103F60008F8C007800CC5021A147000A8F82003846
+:103F7000A04700FD8F840038A08700FE8F860038A0
+:103F80008F9F0070ACDF00548F990074ACD900583B
+:103F90008F8D00780127C02100185880016DA02165
+:103FA000928F000A000F704001CF18210003888013
+:103FB000022D8021A207000B8F8600780166602108
+:103FC000918A000B000A1040004A2021000428803A
+:103FD00000A64021A107000A3C07800834E90080C0
+:103FE0008D2200308F860038ACC2005C0A0022921D
+:103FF0002414000190CA00FF1540FEAD8F880074A4
+:10400000A0C400090A0021D78F860038A0C000FD97
+:104010008F98003824060001A30000FE3C0108012F
+:10402000A02696D53C010801A02096D40A0021C6FE
+:104030000000000090CB00FF3C040801908496F340
+:10404000316C00FF0184502B1540000F2402000347
+:1040500024020004A0C200090A0021D78F8600387C
+:1040600090C3000A2410FF8002035824316C00FF23
+:104070001180FDC1000000003C010801A02096D580
+:104080000A0021C600000000A0C200090A0021D7D2
+:104090008F86003890D4000A2412FF8002544824EE
+:1040A000312800FF1500FFF4240200083C0108013C
+:1040B000A02296F10A0021D70000000000108840DD
+:1040C0008F8B0070023018210003688001A7202127
+:1040D000AC8B00008F8A0074240C0001A48C0008B3
+:1040E000AC8A00043C05080190A596D62402000184
+:1040F00010A2FE1E24A5FFFF0A0022519084000B8F
+:104100000184A0231A80FD8B000000003C010801FF
+:10411000A02E96D50A002305240B00013C010801BE
+:10412000A42596FA0A0023B78F880038240B0001D3
+:10413000106B00228F9800388F85003890BF00FFE9
+:1041400033F900FF1079002B000000003C1F08012C
+:1041500093FF96D8001FC840033FC0210018A080DD
+:104160000288782191EE000AA08E000A8F8D0078D7
+:104170003C030801906396D800CD88210A0023DD16
+:10418000A223000B263000010600003101A4902379
+:104190000640002B240200033C010801A02F96D505
+:1041A0000A002305240B00018F8900380A00223BF6
+:1041B000AD2700540A00229124120001931400FD3F
+:1041C000A094000B8F8800388F8F0078910E00FE2E
+:1041D00000CF6821A1AE000A8F910038A22700FD10
+:1041E0008F8300708F900038AE0300540A0023DEE6
+:1041F0008F8D007890B000FEA090000A8F8B003861
+:104200008F8C0078916A00FD00CC1021A04A000B31
+:104210008F840038A08700FE8F8600748F85003859
+:10422000ACA600580A0023DE8F8D007894B80008F1
+:10423000ACA40004030378210A002285A4AF00087F
+:104240003C010801A02296D50A0021C6000000000A
+:1042500090CF0009240D000431EE00FF11CDFD8543
+:10426000240200013C010801A02296D50A0021C6C3
+:1042700000000000080033440800334408003420E4
+:10428000080033F4080033D8080033280800332826
+:10429000080033280800334C8008010080080080A3
+:1042A000800800005F865437E4AC62CC50103A4579
+:1042B00036621985BF14C0E81BC27A1E84F4B55655
+:1042C000094EA6FE7DDA01E7C04D748108005A74DC
+:1042D00008005AB808005A5C08005A5C08005A5C8A
+:1042E00008005A5C08005A7408005A5C08005A5CBE
+:1042F00008005AC008005A5C080059D408005A5CEB
+:1043000008005A5C08005AC008005A5C08005A5C51
+:1043100008005A5C08005A5C08005A5C08005A5CA5
+:1043200008005A5C08005A5C08005A5C08005A5C95
+:1043300008005A9408005A5C08005A9408005A5C15
+:1043400008005A5C08005A5C08005A9808005A9401
+:1043500008005A5C08005A5C08005A5C08005A5C65
+:1043600008005A5C08005A5C08005A5C08005A5C55
+:1043700008005A5C08005A5C08005A5C08005A5C45
+:1043800008005A5C08005A5C08005A5C08005A5C35
+:1043900008005A5C08005A5C08005A5C08005A5C25
+:1043A00008005A9808005A9808005A5C08005A9861
+:1043B00008005A5C08005A5C08005A5C08005A5C05
+:1043C00008005A5C08005A5C08005A5C08005A5CF5
+:1043D00008005A5C08005A5C08005A5C08005A5CE5
+:1043E00008005A5C08005A5C08005A5C08005A5CD5
+:1043F00008005A5C08005A5C08005A5C08005A5CC5
+:1044000008005A5C08005A5C08005A5C08005A5CB4
+:1044100008005A5C08005A5C08005A5C08005A5CA4
+:1044200008005A5C08005A5C08005A5C08005A5C94
+:1044300008005A5C08005A5C08005A5C08005A5C84
+:1044400008005A5C08005A5C08005A5C08005A5C74
+:1044500008005A5C08005A5C08005A5C08005A5C64
+:1044600008005A5C08005A5C08005A5C08005A5C54
+:1044700008005A5C08005A5C08005A5C08005A5C44
+:1044800008005A5C08005A5C08005A5C08005A5C34
+:1044900008005A5C08005A5C08005A5C08005A5C24
+:1044A00008005A5C08005A5C08005A5C08005A5C14
+:1044B00008005A5C08005A5C08005A5C08005A5C04
+:1044C00008005A5C08005A5C08005A5C08005ADC74
+:1044D0000800782C08007A900800783808007628C0
+:1044E00008007838080078C4080078380800762872
+:1044F0000800762808007628080076280800762824
+:104500000800762808007628080076280800762813
+:1045100008007628080078580800784808007628AF
+:1045200008007628080076280800762808007628F3
+:1045300008007628080076280800762808007628E3
+:1045400008007628080076280800762808007848B1
+:10455000080082FC08008188080082C40800818865
+:104560000800829408008070080081880800818813
+:1045700008008188080081880800818808008188F7
+:1045800008008188080081880800818808008188E7
+:104590000800818808008188080081B008008D34F7
+:1045A00008008E9008008E70080088D808008D4C96
+:1045B0000A00012400000000000000000000000DBF
+:1045C000747061362E322E31620000000602010145
+:1045D00000000000000000000000000000000000DB
+:1045E00000000000000000000000000000000000CB
+:1045F00000000000000000000000000000000000BB
+:1046000000000000000000000000000000000000AA
+:10461000000000000000000000000000000000009A
+:10462000000000000000000000000000000000008A
+:10463000000000000000000000000000000000007A
+:104640000000000010000003000000000000000D4A
+:104650000000000D3C020800244217203C03080023
+:1046600024632A10AC4000000043202B1480FFFD7F
+:10467000244200043C1D080037BD2FFC03A0F0219C
+:104680003C100800261004903C1C0800279C1720B2
+:104690000E000262000000000000000D2402FF80F6
+:1046A00027BDFFE000821024AFB00010AF42002011
+:1046B000AFBF0018AFB10014936500043084007FD1
+:1046C000034418213C0200080062182130A5002094
+:1046D000036080213C080111277B000814A0000220
+:1046E0002466005C2466005892020004974301048B
+:1046F000920400043047000F3063FFFF3084004015
+:10470000006728231080000900004821920200055C
+:1047100030420004104000050000000010A000031B
+:104720000000000024A5FFFC2409000492020005FB
+:1047300030420004104000120000000010A00010E1
+:10474000000000009602000200A72021010440257D
+:104750002442FFFEA7421016920300042402FF80A9
+:1047600000431024304200FF104000033C020400CC
+:104770000A000174010240258CC20000AF421018EB
+:104780008F4201780440FFFE2402000AA742014044
+:1047900096020002240400093042000700021023A0
+:1047A00030420007A7420142960200022442FFFE67
+:1047B000A7420144A740014697420104A74201488D
+:1047C0008F420108304200205040000124040001C3
+:1047D00092020004304200101440000234830010A2
+:1047E00000801821A743014A0000000000000000DB
+:1047F0000000000000000000AF48100000000000B2
+:104800000000000000000000000000008F421000C7
+:104810000441FFFE3102FFFF1040000700000000CE
+:1048200092020004304200401440000300000000E7
+:104830008F421018ACC20000960200063042FFFF03
+:10484000244200020002104300021040036288214B
+:10485000962200001120000D3044FFFF00A7102118
+:104860008F8300388F45101C0002108200021080D8
+:1048700000431021AC45000030A6FFFF0E00058D5F
+:1048800000052C0200402021A62200009203000413
+:104890002402FF8000431024304200FF1040001F1C
+:1048A0000000000092020005304200021040001B90
+:1048B000000000009742100C2442FFFEA742101691
+:1048C000000000003C02040034420030AF421000FF
+:1048D00000000000000000000000000000000000D8
+:1048E0008F4210000441FFFE000000009742100CB0
+:1048F0008F45101C3042FFFF24420030000210821E
+:1049000000021080005B1021AC45000030A6FFFFC4
+:104910000E00058D00052C02A62200009604000260
+:10492000248400080E0001E93084FFFF974401044D
+:104930000E0001F73084FFFF8FBF00188FB1001405
+:104940008FB000103C02100027BD002003E00008DB
+:10495000AF4201783084FFFF308200078F8500244A
+:1049600010400002248300073064FFF800A41021E7
+:1049700030421FFF03421821247B4000AF850028EE
+:10498000AF82002403E00008AF4200843084FFFFC0
+:104990003082000F8F85002C8F860034104000027B
+:1049A0002483000F3064FFF000A410210046182B70
+:1049B000AF8500300046202314600002AF82002C37
+:1049C000AF84002C8F82002C340480000342182115
+:1049D00000641821AF83003803E00008AF42008074
+:1049E0008F820014104000088F8200048F82FFDC49
+:1049F000144000058F8200043C02FFBF3442FFFFD9
+:104A0000008220248F82000430430006240200022A
+:104A10001062000F3C0201012C62000350400005AF
+:104A2000240200041060000F3C0200010A00023062
+:104A30000000000010620005240200061462000C51
+:104A40003C0201110A000229008210253C020011DB
+:104A500000821025AF421000240200010A0002303B
+:104A6000AF82000C00821025AF421000AF80000C16
+:104A700000000000000000000000000003E000084B
+:104A8000000000008F82000C1040000400000000B5
+:104A90008F4210000441FFFE0000000003E0000808
+:104AA000000000008F8200102443F800000231C291
+:104AB00024C2FFF02C6303011060000300021042C7
+:104AC0000A000257AC8200008F85001800C5102B29
+:104AD0001440000B0000182100C5102324470001DA
+:104AE0008F82001C00A210212442FFFF0046102BE1
+:104AF000544000042402FFFF0A000257AC87000064
+:104B00002402FFFF0A000260AC8200008C820000D9
+:104B10000002194000621821000318800062182169
+:104B2000000318803C0208002442175C0062182130
+:104B300003E000080060102127BDFFD8AFBF0020B0
+:104B4000AFB1001CAFB000183C0460088C8250006C
+:104B50002403FF7F3C066000004310243442380CDD
+:104B6000AC8250008CC24C1C3C1A80000002160221
+:104B70003042000F10400007AF82001C8CC34C1C59
+:104B80003C02001F3442FC0000621824000319C2DA
+:104B9000AF8300188F420008275B400034420001B9
+:104BA000AF420008AF8000243C02601CAF40008090
+:104BB000AF4000848C4500088CC308083402800094
+:104BC000034220212402FFF0006218243C020080EE
+:104BD0003C010800AC2204203C025709AF84003895
+:104BE00014620004AF850034240200010A0002921E
+:104BF000AF820014AF8000148F42000038420001E1
+:104C0000304200011440FFFC8F8200141040001657
+:104C10000000000097420104104000058F8300004F
+:104C2000146000072462FFFF0A0002A72C62000A3A
+:104C30002C620010504000048F83000024620001A9
+:104C4000AF8200008F8300002C62000A1440000332
+:104C50002C6200070A0002AEAF80FFDC10400002A9
+:104C600024020001AF82FFDC8F4301088F44010062
+:104C700030622000AF83000410400008AF840010B1
+:104C80003C0208008C42042C244200013C01080034
+:104C9000AC22042C0A00058A3C0240003065020068
+:104CA00014A0000324020F001482026024020D00ED
+:104CB00097420104104002C83C02400030624000AC
+:104CC000144000AD8F8200388C4400088F42017878
+:104CD0000440FFFE24020800AF42017824020008CD
+:104CE000A7420140A7400142974201048F8400047B
+:104CF0003051FFFF30820001104000070220802168
+:104D00002623FFFE240200023070FFFFA742014667
+:104D10000A0002DBA7430148A74001463C02080005
+:104D20008C42043C1440000D8F8300103082002020
+:104D30001440000224030009240300010060202124
+:104D40008F830010240209005062000134840004A3
+:104D5000A744014A0A0002F60000000024020F00E6
+:104D60001462000530820020144000062403000D68
+:104D70000A0002F524030005144000022403000980
+:104D800024030001A743014A3C0208008C4204208E
+:104D90003C0400480E00020C004420250E000235A1
+:104DA000000000008F82000C1040003E0000000058
+:104DB0008F4210003C0300200043102410400039B3
+:104DC0008F820004304200021040003600000000D4
+:104DD000974210141440003300000000974210085E
+:104DE0008F8800383042FFFF2442000600021882FC
+:104DF0000003388000E83021304300018CC40000FB
+:104E000010600004304200030000000D0A00033768
+:104E100000E81021544000103084FFFF3C05FFFFE4
+:104E200000852024008518260003182B0004102B71
+:104E300000431024104000050000000000000000A6
+:104E40000000000D00000000240002228CC20000BF
+:104E50000A000336004520253883FFFF0003182B86
+:104E60000004102B00431024104000050000000037
+:104E7000000000000000000D000000002400022BD4
+:104E80008CC200003444FFFF00E81021AC44000055
+:104E90003C0208008C420430244200013C0108001E
+:104EA000AC2204308F6200008F840038AF8200088B
+:104EB0008C8300003402FFFF1462000F00001021F9
+:104EC0003C0508008CA504543C0408008C84045064
+:104ED00000B0282100B0302B008220210086202144
+:104EE0003C010800AC2504543C010800AC240450EB
+:104EF0000A000580240400088C8200003042010072
+:104F00001040000F000010213C0508008CA5044C47
+:104F10003C0408008C84044800B0282100B0302BE9
+:104F200000822021008620213C010800AC25044C91
+:104F30003C010800AC2404480A0005802404000851
+:104F40003C0508008CA504443C0408008C84044003
+:104F500000B0282100B0302B0082202100862021C3
+:104F60003C010800AC2504443C010800AC2404408A
+:104F70000A000580240400088F6200088F62000088
+:104F800000021602304300F02402003010620005D7
+:104F900024020040106200E08F8200200A00058891
+:104FA0002442000114A000050000000000000000E1
+:104FB0000000000D00000000240002568F4201781E
+:104FC0000440FFFE000000000E00023D27A4001078
+:104FD0001440000500408021000000000000000D8A
+:104FE000000000002400025D8E0200001040000559
+:104FF00000000000000000000000000D00000000A4
+:10500000240002608F62000C0443000324020001AC
+:105010000A00042EAE000000AE0200008F820038AD
+:105020008C480008A20000078F65000C8F64000404
+:1050300030A3FFFF0004240200852023308200FFFC
+:105040000043102124420005000230832CC200815D
+:10505000A605000A14400005A20400040000000098
+:105060000000000D00000000240002788F85003849
+:105070000E0005AB260400148F6200048F43010864
+:10508000A60200083C02100000621824106000080C
+:105090000000000097420104920300072442FFEC45
+:1050A000346300023045FFFF0A0003C3A203000778
+:1050B000974201042442FFF03045FFFF96060008A6
+:1050C0002CC200135440000592030007920200070F
+:1050D00034420001A20200079203000724020001EB
+:1050E00010620005240200031062000B8F8200385A
+:1050F0000A0003E030C6FFFF8F8200383C04FFFF48
+:105100008C43000C0064182400651825AC43000C87
+:105110000A0003E030C6FFFF3C04FFFF8C43001091
+:105120000064182400651825AC43001030C6FFFF4A
+:1051300024C2000200021083A20200058F830038FF
+:10514000304200FF00021080004328218CA800009C
+:105150008CA2000024030004000217021443001272
+:1051600000000000974201043C03FFFF01031824E4
+:105170003042FFFF004610232442FFFE006240251C
+:10518000ACA8000092030005306200FF000210800E
+:1051900000501021904200143042000F00431021B3
+:1051A0000A000415A20200068CA400049742010420
+:1051B0009603000A3088FFFF3042FFFF00461023AD
+:1051C0002442FFD60002140001024025ACA80004CE
+:1051D000920200079204000524630028000318834C
+:1051E0000064182134420004A2030006A202000752
+:1051F0008F8200042403FFFB34420002004310248A
+:10520000AF820004920300068F87003800031880E5
+:10521000007010218C4400203C02FFF63442FFFF56
+:105220000082402400671821AE04000CAC68000C1A
+:10523000920500063C03FF7F8E02000C00052880CB
+:1052400000B020213463FFFF01033024948800263E
+:1052500000A7282100431024AE02000CAC860020D9
+:10526000AC880024ACA8001024020010A742014022
+:1052700024020002A7400142A7400144A742014680
+:10528000974201043C0400082442FFFEA742014863
+:10529000240200010E00020CA742014A9603000AF4
+:1052A0009202000400431021244200023042000711
+:1052B00000021023304200070E000235AE0200103B
+:1052C0008F6200003C0308008C6304442404001037
+:1052D000AF820008974201043042FFFF2442FFFEE4
+:1052E00000403821000237C33C0208008C420440D1
+:1052F000006718210067282B004610210045102167
+:105300003C010800AC2304443C010800AC220440EA
+:105310000A0005150000000014A0000500000000B0
+:10532000000000000000000D000000002400030A3F
+:105330008F4201780440FFFE000000000E00023D95
+:1053400027A4001414400005004080210000000044
+:105350000000000D00000000240003118E02000078
+:105360005440000692020007000000000000000DFB
+:10537000000000002400031C9202000730420004D9
+:10538000104000058F8200042403FFFB344200021A
+:1053900000431024AF8200048F620004044300081D
+:1053A00092020007920200068E03000CAE0000007D
+:1053B0000002108000501021AC4300209202000730
+:1053C00030420004544000099602000A920200058F
+:1053D0003C03000100021080005010218C46001890
+:1053E00000C33021AC4600189602000A9206000461
+:1053F000277100080220202100C2302124C60005A8
+:10540000260500140E0005AB00063082920400064B
+:105410008F6500043C027FFF000420800091202162
+:105420008C8300043442FFFF00A228240065182169
+:10543000AC8300049202000792040005920300046A
+:10544000304200041040001496070008308400FF2A
+:1054500000042080009120218C86000497420104E2
+:105460009605000A306300FF3042FFFF0043102121
+:105470000045102130E3FFFF004310232442FFD8F2
+:1054800030C6FFFF0002140000C23025AC860004C5
+:105490000A0004C992030007308500FF0005288038
+:1054A00000B128218CA4000097420104306300FF62
+:1054B0003042FFFF00431021004710233C03FFFF51
+:1054C000008320243042FFFF00822025ACA400008E
+:1054D0009203000724020001106200060000000091
+:1054E0002402000310620011000000000A0004EC16
+:1054F0008E03001097420104920300049605000AEF
+:105500008E24000C00431021004510212442FFF29C
+:105510003C03FFFF008320243042FFFF0082202550
+:10552000AE24000C0A0004EC8E0300109742010424
+:10553000920300049605000A8E24001000431021F7
+:10554000004510212442FFEE3C03FFFF008320248E
+:105550003042FFFF00822025AE2400108E03001091
+:105560002402000AA7420140A74301429603000A11
+:10557000920200043C04004000431021A742014471
+:10558000A740014697420104A742014824020001B6
+:105590000E00020CA742014A0E0002350000000076
+:1055A0008F6200009203000400002021AF820008F7
+:1055B000974201049606000A3042FFFF006218215C
+:1055C000006028213C0308008C6304443C0208006E
+:1055D0008C42044000651821004410210065382BDE
+:1055E000004710213C010800AC2304443C010800A2
+:1055F000AC22044092040004008620212484000A86
+:105600003084FFFF0E0001E9000000009744010410
+:105610003084FFFF0E0001F7000000003C02100084
+:10562000AF4201780A0005878F820020148200278C
+:105630003062000697420104104000673C024000BF
+:105640003062400010400005000000000000000033
+:105650000000000D00000000240004208F420178AB
+:105660000440FFFE24020800AF4201782402000833
+:10567000A7420140A74001428F82000497430104E2
+:1056800030420001104000073070FFFF2603FFFE8C
+:1056900024020002A7420146A74301480A00053F31
+:1056A0002402000DA74001462402000DA742014A32
+:1056B0008F62000024040008AF8200080E0001E998
+:1056C000000000000A0005190200202110400042DD
+:1056D0003C02400093620000304300F024020010BE
+:1056E0001062000524020070106200358F820020D5
+:1056F0000A000588244200018F62000097430104DC
+:105700003050FFFF3071FFFF8F4201780440FFFEF1
+:105710003202000700021023304200072403000A6F
+:105720002604FFFEA7430140A7420142A7440144CB
+:10573000A7400146A75101488F420108304200208E
+:10574000144000022403000924030001A743014A76
+:105750000E00020C3C0400400E0002350000000068
+:105760003C0708008CE70444021110212442FFFE8C
+:105770003C0608008CC604400040182100E3382194
+:10578000000010218F65000000E3402B00C2302193
+:105790002604000800C830213084FFFFAF850008D0
+:1057A0003C010800AC2704443C010800AC2604403E
+:1057B0000E0001E9000000000A0005190220202166
+:1057C0000E00013B000000008F82002024420001F7
+:1057D000AF8200203C024000AF4201380A00029232
+:1057E000000000003084FFFF30C6FFFF00052C00E2
+:1057F00000A628253882FFFF004510210045282BF0
+:105800000045102100021C023042FFFF004310211E
+:1058100000021C023042FFFF004310213842FFFF0C
+:1058200003E000083042FFFF3084FFFF30A5FFFF98
+:1058300000001821108000070000000030820001E5
+:105840001040000200042042006518210A0005A152
+:105850000005284003E000080060102110C0000689
+:1058600024C6FFFF8CA2000024A50004AC82000027
+:105870000A0005AB2484000403E0000800000000D7
+:1058800010A0000824A3FFFFAC8600000000000069
+:10589000000000002402FFFF2463FFFF1462FFFAF0
+:1058A0002484000403E00008000000000000000160
+:1058B0000A00002A00000000000000000000000DA7
+:1058C000747870362E322E3162000000060201001C
+:1058D00000000000000001360000EA600000000047
+:1058E00000000000000000000000000000000000B8
+:1058F00000000000000000000000000000000000A8
+:105900000000000000000000000000000000000097
+:105910000000001600000000000000000000000071
+:105920000000000000000000000000000000000077
+:105930000000000000000000000000000000000067
+:1059400000000000000000000000138800000000BC
+:10595000000005DC00000000000000001000000353
+:10596000000000000000000D0000000D3C020800D7
+:1059700024423D683C0308002463401CAC40000006
+:105980000043202B1480FFFD244200043C1D08002E
+:1059900037BD7FFC03A0F0213C100800261000A8B2
+:1059A0003C1C0800279C3D680E00044E00000000CF
+:1059B0000000000D27BDFFB4AFA10000AFA200049E
+:1059C000AFA30008AFA4000CAFA50010AFA6001451
+:1059D000AFA70018AFA8001CAFA90020AFAA0024F1
+:1059E000AFAB0028AFAC002CAFAD0030AFAE003491
+:1059F000AFAF0038AFB8003CAFB90040AFBC004417
+:105A0000AFBF00480E000591000000008FBF0048A6
+:105A10008FBC00448FB900408FB8003C8FAF003876
+:105A20008FAE00348FAD00308FAC002C8FAB0028D0
+:105A30008FAA00248FA900208FA8001C8FA7001810
+:105A40008FA600148FA500108FA4000C8FA3000850
+:105A50008FA200048FA1000027BD004C3C1B6004F6
+:105A60008F7A5030377B502803400008AF7A00000F
+:105A70008F86003C3C0390003C0280000086282575
+:105A800000A32025AC4400203C0380008C6700204C
+:105A900004E0FFFE0000000003E00008000000003A
+:105AA0000A000070240400018F85003C3C04800043
+:105AB0003483000100A3102503E00008AC8200201D
+:105AC00003E00008000010213084FFFF30A5FFFF35
+:105AD00010800007000018213082000110400002F1
+:105AE00000042042006518211480FFFB00052840B7
+:105AF00003E000080060102110C000070000000053
+:105B00008CA2000024C6FFFF24A50004AC82000084
+:105B100014C0FFFB2484000403E000080000000020
+:105B200010A0000824A3FFFFAC86000000000000C6
+:105B3000000000002402FFFF2463FFFF1462FFFA4D
+:105B40002484000403E000080000000090AA003153
+:105B50008FAB00108CAC00403C0300FF8D6800044C
+:105B6000AD6C00208CAD004400E060213462FFFF8A
+:105B7000AD6D00248CA700483C09FF000109C0243A
+:105B8000AD6700288CAE004C0182C824031978252B
+:105B9000AD6F0004AD6E002C8CAD0038314A00FFB3
+:105BA000AD6D001C94A900323128FFFFAD680010D4
+:105BB00090A70030A5600002A1600004A16700006A
+:105BC00090A30032306200FF0002198210600005CD
+:105BD000240500011065000E0000000003E000082D
+:105BE000A16A00018CD80028354A0080AD780018E1
+:105BF0008CCF0014AD6F00148CCE0030AD6E000859
+:105C00008CC4002CA16A000103E00008AD64000C04
+:105C10008CCD001CAD6D00188CC90014AD6900144A
+:105C20008CC80024AD6800088CC70020AD67000C4C
+:105C30008CC200148C8300700043C82B1320000713
+:105C4000000000008CC20014144CFFE400000000AF
+:105C5000354A008003E00008A16A00018C820070D0
+:105C60000A0000E6000000009089003027BDFFF820
+:105C70008FA8001CA3A900008FA300003C0DFF808B
+:105C800035A2FFFF8CAC002C00625824AFAB0000A3
+:105C9000A100000400C05821A7A000028D06000446
+:105CA00000A048210167C8218FA500000080502175
+:105CB0003C18FF7F032C20263C0E00FF2C8C00019B
+:105CC000370FFFFF35CDFFFF3C02FF0000AFC824B8
+:105CD00000EDC02400C27824000C1DC003236825F9
+:105CE00001F87025AD0D0000AD0E00048D240024D8
+:105CF000AFAD0000AD0400088D2C00202404FFFF90
+:105D0000AD0C000C9547003230E6FFFFAD060010E9
+:105D10009145004830A200FF000219C25060000106
+:105D20008D240034AD0400148D4700388FAA00186C
+:105D300027BD0008AD0B0028AD0A0024AD07001CEC
+:105D4000AD00002CAD00001803E00008AD000020FD
+:105D500027BDFFE0AFB20018AFB10014AFB0001024
+:105D6000AFBF001C9098003000C088213C0D00FFA0
+:105D7000330F007FA0CF0000908E003135ACFFFFC5
+:105D80003C0AFF00A0CE000194A6001EA220000441
+:105D90008CAB00148E29000400A08021016C282403
+:105DA000012A40240080902101052025A62600021A
+:105DB000AE24000426050020262400080E000092D0
+:105DC00024060002924700302605002826240014ED
+:105DD00000071E000003160324060004044000030D
+:105DE0002403FFFF965900323323FFFF0E00009279
+:105DF000AE230010262400248FBF001C8FB2001891
+:105E00008FB100148FB00010240500030000302172
+:105E10000A00009C27BD002027BDFFD8AFB1001CA1
+:105E2000AFB00018AFBF002090A9003024020001DD
+:105E300000E050213123003F00A040218FB00040FE
+:105E40000080882100C04821106200148FA700380C
+:105E5000240B000500A0202100C02821106B001396
+:105E6000020030210E000128000000009225007C75
+:105E700030A400021080000326030030AE00003082
+:105E8000260300348FBF00208FB1001C8FB0001894
+:105E90000060102103E0000827BD00280E0000A7C5
+:105EA000AFB000100A00016F000000008FA3003C9B
+:105EB000010020210120282101403021AFA3001042
+:105EC0000E0000EEAFB000140A00016F00000000E9
+:105ED0003C06800034C20E008C4400108F850044C4
+:105EE000ACA400208C43001803E00008ACA30024FD
+:105EF0003C06800034C20E008C4400148F850044A0
+:105F0000ACA400208C43001C03E00008ACA30024D8
+:105F10009382000C1040001B2483000F2404FFF028
+:105F20000064382410E00019978B00109784000E4D
+:105F30009389000D3C0A601C0A0001AC01644023F7
+:105F400001037021006428231126000231C2FFFFE3
+:105F500030A2FFFF0047302B50C0000E00E4482164
+:105F60008D4D000C31A3FFFF00036400000C2C03D7
+:105F700004A1FFF30000302130637FFF0A0001A479
+:105F80002406000103E00008000000009784000ED2
+:105F900000E448213123FFFF3168FFFF0068382B00
+:105FA00054E0FFF8A783000E938A000D114000050E
+:105FB000240F0001006BC023A380000D03E0000844
+:105FC000A798000E006BC023A38F000D03E000080C
+:105FD000A798000E03E000080000000027BDFFE8BE
+:105FE000AFB000103C10800036030140308BFFFF43
+:105FF00093AA002BAFBF0014A46B000436040E005C
+:106000009488001630C600FF8FA90030A4680006EF
+:10601000AC650008A0660012A46A001AAC670020F4
+:106020008FA5002CA4690018012020210E000198E2
+:10603000AC6500143C021000AE0201788FBF001462
+:106040008FB0001003E0000827BD00188F85000006
+:106050002484000727BDFFF83084FFF83C06800049
+:1060600094CB008A316AFFFFAFAA00008FA900001D
+:10607000012540232507FFFF30E31FFF0064102B9D
+:106080001440FFF700056882000D288034CC4000E2
+:1060900000AC102103E0000827BD00088F8200003B
+:1060A0002486000730C5FFF800A2182130641FFFC6
+:1060B00003E00008AF8400008F87003C8F84004419
+:1060C00027BDFFB0AFB70044AFB40038AFB1002C6C
+:1060D000AFBF0048AFB60040AFB5003CAFB300342F
+:1060E000AFB20030AFB000283C0B80008C8600249B
+:1060F000AD6700808C8A002035670E00356901008D
+:10610000ACEA00108C8800248D2500040000B82122
+:10611000ACE800188CE3001000A688230000A02142
+:10612000ACE300148CE20018ACE2001C122000FE6C
+:1061300000E0B021936C0008118000F40000000022
+:10614000976F001031EEFFFF022E682B15A000EFB5
+:1061500000000000977200103250FFFFAED0000028
+:106160003C0380008C740000329300081260FFFD35
+:106170000000000096D800088EC700043305FFFF1A
+:1061800030B5000112A000E4000000000000000D86
+:1061900030BFA0402419004013F9011B30B4A00007
+:1061A000128000DF000000009373000812600008F6
+:1061B00000000000976D001031ACFFFF00EC202BB9
+:1061C0001080000330AE004011C000D50000000078
+:1061D000A7850040AF87003893630008022028217C
+:1061E000AFB10020146000F527B40020AF60000CB0
+:1061F000978F004031F14000162000022403001662
+:106200002403000E24054007A363000AAF650014B1
+:10621000938A00428F70001431550001001512401E
+:1062200002024825AF690014979F00408F78001440
+:1062300033F9001003194025AF680014979200400D
+:106240003247000810E0016E000000008F67001464
+:106250003C1210003C11800000F27825AF6F001452
+:1062600036230E00946E000A3C0D81002406000EB9
+:1062700031CCFFFF018D2025AF640004A36600022E
+:106280009373000A3406FFFC266B0004A36B000A1C
+:1062900097980040330820001100015F00000000C3
+:1062A0003C05800034A90E00979900409538000CF9
+:1062B00097870040001940423312C00031030003A9
+:1062C00000127B0330F11000006F6825001172038B
+:1062D00001AE6025000C20C0A76400129793004017
+:1062E000936A000A001359823175003C02AA1021FA
+:1062F0002450003CA3700009953F000C33F93FFF88
+:10630000A779001097700012936900090130F821F5
+:1063100027E5000230B900070019C0233308000741
+:10632000A368000B9371000997720012976F001019
+:10633000322700FF8F910038978D004000F218211E
+:10634000006F702101C6602131A6004010C0000519
+:106350003185FFFF00B1102B3C1280001040001768
+:10636000000098210225A82B56A0013E8FA50020F1
+:106370003C048000348A0E008D5300143C068000DB
+:10638000AD5300108D4B001CAD4B0018AD45000007
+:106390008CCD000031AC00081180FFFD34CE0E0022
+:1063A00095C3000800A0882100009021A783004029
+:1063B0008DC6000424130001AF860038976F0010CB
+:1063C00031F5FFFF8E9F000003F1282310A0011F6D
+:1063D000AE85000093620008144000DD000000005C
+:1063E0000E0001E7240400108F900048004028218F
+:1063F0003C023200320600FF000654000142F8253C
+:1064000026090001AF890048ACBF0000937900095C
+:1064100097780012936F000A332800FF3303FFFFC1
+:106420000103382100076C0031EE00FF01AE60254A
+:10643000ACAC00048F840048978B0040316A200088
+:106440001140010AACA4000897640012308BFFFFD2
+:1064500006400108ACAB000C978E004031C5000827
+:1064600014A0000226280006262800023C1F8000F7
+:1064700037E70E0094F900148CE5001C8F670004C8
+:10648000937800023324FFFF330300FFAFA3001013
+:106490008F6F0014AFA800180E0001CBAFAF00142F
+:1064A000240400100E0001FB000000008E9200008A
+:1064B00016400005000000008F7800142403FFBF81
+:1064C0000303A024AF7400148F67000C00F5C821EB
+:1064D000AF79000C9375000816A0000800000000BA
+:1064E00012600006000000008F6800143C0AEFFFF5
+:1064F0003549FFFE0109F824AF7F0014A37300089B
+:106500008FA500200A00034F02202021AED10000F9
+:106510000A00022D3C03800014E0FF1E30BFA040A3
+:106520000E0001900000A0212E9100010237B0253D
+:1065300012C000188FBF00488F87003C24170F003F
+:1065400010F700D43C0680008CD901780720FFFEAC
+:10655000241F0F0010FF00F634CA0E008D560014E1
+:1065600034C7014024080240ACF600048D49001CE9
+:106570003C141000ACE90008A0E00012A4E0001AEE
+:10658000ACE00020A4E00018ACE80014ACD4017822
+:106590008FBF00488FB700448FB600408FB5003CD6
+:1065A0008FB400388FB300348FB200308FB1002C1D
+:1065B0008FB0002803E0000827BD00508F910038FD
+:1065C000978800403C1280000220A821310700403B
+:1065D00014E0FF7C00009821977900108F9200381A
+:1065E0003338FFFF131200A8000020210080A021F3
+:1065F000108000F300A088211620FECE00000000CD
+:106600000A00031F2E9100013C0380008C62017878
+:106610000440FFFE240808008F860000AC68017863
+:106620003C038000946D008A31ACFFFF0186582343
+:10663000256AFFFF31441FFF2C8900081520FFF950
+:10664000000000008F8F0048347040008F83003CB2
+:1066500000E0A021240E0F0025E70001AF870048CD
+:1066600000D03021023488233C08800031F500FF3F
+:10667000106E0005240700019398004233130001B7
+:106680000013924036470001001524003C0A010027
+:10669000008A4825ACC900008F82004830BF003610
+:1066A00030B90008ACC200041320009900FF9825FF
+:1066B00035120E009650000A8F8700003C0F8100B3
+:1066C0003203FFFF24ED000835060140006F60250E
+:1066D0003C0E100031AB1FFF269200062405000E71
+:1066E000ACCC0020026E9825A4C5001AAF8B000028
+:1066F000A4D20018162000083C1080008F89003CAE
+:1067000024020F00512200022417000136730040BA
+:106710000E0001883C10800036060E008CCB001461
+:10672000360A014002402021AD4B00048CC5001CFC
+:10673000AD450008A1550012AD5300140E0001989C
+:106740003C151000AE1501780A000352000000004D
+:10675000936F0009976E0012936D000B31E500FFF7
+:1067600000AE202131AC00FF008C80212602000AFF
+:106770003050FFFF0E0001E7020020218F86004805
+:106780003C0341003C05800024CB0001AF8B004856
+:10679000936A00099769001230C600FF315F00FF5D
+:1067A0003128FFFF03E8382124F900020006C40065
+:1067B0000319782501E37025AC4E00008F6D000CA5
+:1067C00034A40E00948B001401B26025AC4C00047C
+:1067D0008C85001C8F670004936A00023164FFFF00
+:1067E000314900FFAFA900108F680014AFB1001845
+:1067F0000E0001CBAFA800140A0002FD0200202108
+:10680000AF600004A36000029798004033082000A6
+:106810001500FEA300003021A760001297840040FD
+:10682000936B000A3C10800030931F0000135183CB
+:10683000014BA82126A20028A362000936090E00F8
+:10684000953F000C0A000295A77F00108F7000147E
+:10685000360900400E000188AF6900140A0002C921
+:10686000000000000A00034F000020210641FEFA4C
+:10687000ACA0000C8CAC000C3C0D8000018D902570
+:106880000A0002EAACB2000C000090210A0002C526
+:1068900024130001128000073C028000344B0E00DC
+:1068A0009566000830D300401260004900000000E7
+:1068B0003C0680008CD001780600FFFE34C50E0037
+:1068C00094B500103C03050034CC014032B8FFFF02
+:1068D00003039025AD92000C8CAF0014240D200012
+:1068E0003C041000AD8F00048CAE001CAD8E00087F
+:1068F000A1800012A580001AAD800020A58000189C
+:10690000AD8D0014ACC401780A0003263C0680005B
+:106910008F9F0000351801402692000227F90008D9
+:1069200033281FFFA71200180A000391AF88000048
+:106930003C02800034450140ACA0000C1280001BDA
+:1069400034530E0034510E008E370010ACB70004E3
+:106950008E2400183C0B8000ACA400083570014068
+:1069600024040040A20000128FBF0048A600001AB5
+:106970008FB70044AE0000208FB60040A60000187C
+:106980008FB5003CAE0400148FB400388FB30034D0
+:106990008FB200308FB1002C8FB000283C02100065
+:1069A00027BD005003E00008AD6201788E66001438
+:1069B000ACA600048E64001C0A00042A3C0B800074
+:1069C0000E0001902E9100010A0003200237B0252D
+:1069D000000000000000000D00000000240003691A
+:1069E0000A0004013C06800027BDFFD8AFBF00208D
+:1069F0003C0980003C1F20FFAFB200183C0760003C
+:106A000035320E002402001037F9FFFDACE23008E9
+:106A1000AFB3001CAFB10014AFB00010AE5900000E
+:106A20000000000000000000000000000000000066
+:106A3000000000003C1800FF3713FFFDAE530000BC
+:106A40003C0B60048D7050002411FF7F3C0E00024F
+:106A50000211782435EC380C35CD0109ACED4C1819
+:106A6000240A0009AD6C50008CE80438AD2A0008F7
+:106A7000AD2000148CE54C1C3106FFFF38C42F718B
+:106A800000051E023062000F2486C0B310400007CC
+:106A9000AF8200088CE54C1C3C09001F3528FC0027
+:106AA00000A81824000321C2AF8400048CF1080858
+:106AB0003C0F57092412F0000232702435F0001008
+:106AC00001D0602601CF68262DAA00012D8B000180
+:106AD000014B382550E00009A380000C3C1F601CCE
+:106AE0008FF8000824190001A399000C33137C00CF
+:106AF000A7930010A780000EA380000DAF80004870
+:106B000014C00003AF8000003C066000ACC0442C01
+:106B10000E0005B93C1080000E000F1A361101005E
+:106B20003C12080026523DD03C13080026733E500C
+:106B30008E03000038640001308200011440FFFC25
+:106B40003C0B800A8E2600002407FF8024C90240E7
+:106B5000312A007F014B402101272824AE06002066
+:106B6000AF880044AE0500243C048000AF86003CA2
+:106B70008C8C01780580FFFE24180800922F0008F5
+:106B8000AC980178A38F0042938E004231CD000172
+:106B900011A0000F24050D0024DFF8002FF90301D8
+:106BA0001320001C000629C224A4FFF00004104298
+:106BB000000231400E00020200D2D8213C02400007
+:106BC0003C068000ACC201380A0004A000000000AE
+:106BD00010C50023240D0F0010CD00273C1F800896
+:106BE00037F9008093380000240E0050330F00FF67
+:106BF00015EEFFF33C0240000E000A3600000000D4
+:106C00003C0240003C068000ACC201380A0004A0EF
+:106C1000000000008F83000400A3402B1500000B30
+:106C20008F8B0008006B50212547FFFF00E5482BA4
+:106C30001520000600A36023000C19400E0002027C
+:106C40000073D8210A0004C43C0240000000000D7B
+:106C50000E000202000000000A0004C43C024000D2
+:106C60003C1B0800277B3F500E0002020000000082
+:106C70000A0004C43C0240003C1B0800277B3F7014
+:106C80000E000202000000000A0004C43C024000A2
+:106C90003C0660043C09080025290104ACC9502CBD
+:106CA0008CC850003C0580003C0200023507008083
+:106CB000ACC750003C040800248415A43C03080021
+:106CC0002463155CACA50008ACA2000C3C010800D4
+:106CD000AC243D603C010800AC233D6403E00008A7
+:106CE0002402000100A030213C1C0800279C3D68C4
+:106CF0003C0C04003C0B0002008B3826008C402624
+:106D00002CE200010007502B2D050001000A4880ED
+:106D10003C03080024633D60004520250123182121
+:106D20001080000300001021AC6600002402000166
+:106D300003E00008000000003C1C0800279C3D68A0
+:106D40003C0B04003C0A0002008A3026008B3826E7
+:106D50002CC200010006482B2CE5000100094080F0
+:106D60003C03080024633D600045202501031821F1
+:106D700010800005000010213C0C0800258C155CDB
+:106D8000AC6C00002402000103E0000800000000D9
+:106D90003C0900023C08040000883026008938269F
+:106DA0002CC30001008028212CE400010083102561
+:106DB0001040000B000030213C1C0800279C3D685F
+:106DC0003C0A80008D4E00082406000101CA682597
+:106DD000AD4D00088D4C000C01855825AD4B000CC5
+:106DE00003E0000800C010213C1C0800279C3D68FF
+:106DF0003C0580008CA6000C000420272402000122
+:106E000000C4182403E00008ACA3000C3C020002FC
+:106E10001082000B3C0560003C0704001087000353
+:106E20000000000003E00008000000008CA908D06A
+:106E3000240AFFFD012A402403E00008ACA808D082
+:106E40008CA408D02406FFFE0086182403E0000866
+:106E5000ACA308D03C05601A34A600108CC3008097
+:106E600027BDFFF88CC50084AFA3000093A40000E9
+:106E70002402000110820003AFA5000403E0000813
+:106E800027BD000893A7000114E0001497AC00028E
+:106E900097B800023C0F8000330EFFFC01CF682141
+:106EA000ADA50000A3A000003C0660008CC708D080
+:106EB0002408FFFE3C04601A00E82824ACC508D072
+:106EC0008FA300048FA200003499001027BD000892
+:106ED000AF22008003E00008AF2300843C0B800059
+:106EE000318AFFFC014B48218D2800000A00057DF6
+:106EF000AFA8000427BDFFE8AFBF00103C1C08008E
+:106F0000279C3D683C0580008CA4000C8CA20004EA
+:106F10003C0300020044282410A0000A00A3182407
+:106F20003C0604003C0400021460000900A6102482
+:106F30001440000F3C0404000000000D3C1C08003D
+:106F4000279C3D688FBF001003E0000827BD001894
+:106F50003C0208008C423D600040F809000000003F
+:106F60003C1C0800279C3D680A0005A68FBF001046
+:106F70003C0208008C423D640040F809000000001B
+:106F80000A0005AC00000000000411C003E0000886
+:106F9000244202403C04080024843FB42405001A23
+:106FA0000A00009C0000302127BDFFE0AFB00010B8
+:106FB0003C108000AFBF0018AFB1001436110100C3
+:106FC000922200090E0005B63044007F8E3F00007B
+:106FD0008F89003C3C0F008003E26021258800403F
+:106FE0000049F821240DFF80310E00783198007897
+:106FF00035F9000135F100020319382501D1482582
+:10700000010D302403ED5824018D2824240A00406A
+:1070100024040080240300C0AE0B0024AE0008103E
+:10702000AE0A0814AE040818AE03081CAE05080426
+:10703000AE070820AE060808AE0908243609090084
+:107040009539000C3605098033ED007F3338FFFF9A
+:10705000001889C0AE110800AE0F0828952C000C4E
+:107060008FBF00188FB10014318BFFFF000B51C090
+:10707000AE0A002C8CA400508FB000108CA3003CF2
+:107080008D2700048CA8001C8CA600383C0E800ABA
+:1070900001AE102127BD0020AF820044AF84005014
+:1070A000AF830054AF87004CAF88005C03E000085A
+:1070B000AF8600603C09080091293FD924A800024E
+:1070C0003C05110000093C0000E8302500C51825EA
+:1070D00024820008AC83000003E00008AC800004B8
+:1070E0003C098000352309009128010B906A0011AA
+:1070F0002402002800804821314700FF00A07021B1
+:1071000000C068213108004010E20002340C86DD26
+:10711000240C08003C0A800035420A9A944700007B
+:10712000354B0A9C35460AA030F9FFFFAD39000007
+:107130008D780000354B0A8024040001AD3800042E
+:107140008CCF0000AD2F00089165001930A300031B
+:107150001064009028640002148000AF240500022F
+:107160001065009E240F0003106F00B435450AA47B
+:10717000240A0800118A0048000000005100003D68
+:107180003C0B80003C0480003483090090670012AF
+:1071900030E200FF004D7821000FC8802724000155
+:1071A0003C0A8000354F090091E50019354C0980F3
+:1071B0008D87002830A300FF0003150000475825E5
+:1071C0000004C4003C19600001793025370806FF2F
+:1071D000AD260000AD2800048DEA002C25280028EB
+:1071E000AD2A00088DEC0030AD2C000C8DE500348C
+:1071F000AD2500108DE400383C05800034AC093C1E
+:10720000AD2400148DE3001CAD2300188DE7002091
+:10721000AD27001C8DE20024AD2200208DF900284E
+:1072200034A20100AD3900248D830000AD0E0004AE
+:1072300034B90900AD0300008C47000C250200148E
+:10724000AD070008932B00123C04080090843FD83F
+:10725000AD000010317800FF030D302100064F0013
+:1072600000047C00012F702535CDFFFC03E00008F1
+:10727000AD0D000C35780900930600123C0508009E
+:1072800094A53FC830C800FF010D5021000A60805E
+:107290000A00063C018520211500005B000000006B
+:1072A0003C08080095083FCE3C06080094C63FC83D
+:1072B000010610213C0B800035790900933800113C
+:1072C000932A001935660A80330800FF94CF002AFC
+:1072D00000086082314500FF978A0058000C1E00AC
+:1072E000000524003047FFFF006410250047C0253B
+:1072F00001EA30213C0B4000030B402500066400EE
+:10730000AD280000AD2C0004932500183C030006B6
+:107310002528001400053E0000E31025AD220008DA
+:107320008F24002C3C05800034AC093CAD24000CBB
+:107330008F38001C34A20100254F0001AD38001029
+:107340008D830000AD0E000431EB7FFFAD03000024
+:107350008C47000C34B90900A78B0058AD07000812
+:10736000932B00123C04080090843FD8250200149F
+:10737000317800FF030D302100064F0000047C002F
+:10738000012F702535CDFFFCAD00001003E0000893
+:10739000AD0D000C3C02080094423FD23C050800B1
+:1073A00094A53FC835440AA43C07080094E73FC4AD
+:1073B000948B00000045C8210327C023000B1C004C
+:1073C0002706FFF200665025AD2A000CAD20001004
+:1073D000AD2C00140A00063025290018354F0AA4E8
+:1073E00095E50000956400280005140000043C00A9
+:1073F0003459810000EC5825AD39000CAD2B00103C
+:107400000A000630252900143C0C0800958C3FCE5C
+:107410000A000681258200015460FF56240A0800F4
+:1074200035580AA49706000000061C00006C502581
+:10743000AD2A000C0A000630252900103C03080084
+:1074400094633FD23C07080094E73FC83C0F080014
+:1074500095EF3FC494A4000095790028006710219F
+:10746000004F582300041C00001934002578FFEE5B
+:1074700000D87825346A8100AD2A000CAD2F0010A9
+:10748000AD200014AD2C00180A0006302529001C80
+:1074900003E00008240207D027BDFFE0AFB20018C8
+:1074A000AFB10014AFB00010AFBF001C0E00007CE5
+:1074B000008088218F8800548F87004C3C0580080D
+:1074C00034B20080011128213C1080002402008089
+:1074D000240300C000A72023AE0208183C06800841
+:1074E000AE03081C18800004AF850054ACC500042E
+:1074F0008CC90004AF89004C1220000936040980B1
+:107500000E0006F800000000924C00278E0B00745D
+:1075100001825004014B3021AE46000C3604098034
+:107520008C8E001C8F8F005C01CF682319A0000493
+:107530008FBF001C8C90001CAF90005C8FBF001CA4
+:107540008FB200188FB100148FB000100A00007EB7
+:1075500027BD00208F8600508F8300548F82004CFF
+:107560003C05800834A40080AC860050AC83003C0D
+:1075700003E00008ACA200043C0308008C63005444
+:1075800027BDFFF8308400FF2462000130A500FF12
+:107590003C010800AC22005430C600FF3C078000CC
+:1075A0008CE801780500FFFE3C0C7FFFA3A40003DC
+:1075B0008FAA0000358BFFFF014B4824000627C02F
+:1075C00001244025AFA8000034E201009043000AE6
+:1075D000A3A000023C1980FFA3A300018FAF00000D
+:1075E00030AE007F3738FFFF01F86024000E6E00D8
+:1075F0003C0A002034E50140018D58253549200022
+:107600002406FF803C04100027BD0008ACAB000C32
+:10761000ACA90014A4A00018A0A6001203E0000862
+:10762000ACE40178308800FF30A700FF3C03800005
+:107630008C6201780440FFFE3C0C8000358A0A0011
+:107640008D4B00203584014035850980AC8B0004CA
+:107650008D4900240007302B00061540AC89000836
+:10766000A088001090A3004CA083002D03E0000828
+:10767000A480001827BDFFE8308400FFAFBF0010D2
+:107680000E00075D30A500FF8F8300548FBF0010F0
+:107690003C06800034C50140344700402404FF907C
+:1076A0003C02100027BD0018ACA3000CA0A40012DF
+:1076B000ACA7001403E00008ACC2017827BDFFE0CE
+:1076C0003C088008AFBF001CAFB20018AFB1001477
+:1076D000AFB00010351000808E0600183C07800007
+:1076E000309200FF00C72025AE0400180E00007C79
+:1076F00030B100FF92030005346200080E00007EE6
+:10770000A2020005024020210E000771022028215C
+:10771000024020218FBF001C8FB200188FB10014CF
+:107720008FB0001024050005240600010A0007326E
+:1077300027BD00203C05800034A309809066000826
+:1077400030C200081040000F3C0A01013549080A08
+:10775000AC8900008CA80074AC8800043C070800C9
+:1077600090E73FD830E5001050A00008AC8000083A
+:107770003C0D800835AC00808D8B0058AC8B000828
+:107780002484000C03E00008008010210A0007B5E3
+:107790002484000C27BDFFE83C098000AFB0001036
+:1077A000AFBF00143526098090C8000924020006E6
+:1077B00000A05821310300FF3527090000808021F7
+:1077C000240500041062007B2408000294CF005CB2
+:1077D0003C0E020431EDFFFF01AE6025AE0C00004F
+:1077E00090CA00083144002010800008000000000A
+:1077F00090C2004E3C1F010337F90300305800FFD0
+:107800000319302524050008AE06000490F9001184
+:1078100090E6001290E40011333800FF00187082E7
+:1078200030CF00FF01CF5021014B6821308900FF8C
+:1078300031AAFFFF39230028000A60801460002C61
+:10784000020C482390E400123C198000372F0100FD
+:10785000308C00FF018B1821000310800045F821B7
+:10786000001F8400360706FFAD270004373F0900DC
+:1078700093EC001193EE0012372609800005C082B8
+:107880008DE4000C8CC5003431CD00FF01AB10211C
+:107890000058182100A4F8230008840000033F00CA
+:1078A00000F0302533F9FFFF318F00FC00D970253F
+:1078B0000158202101E9682100045080ADAE000C80
+:1078C0000E00007C012A80213C088008240B000463
+:1078D000350500800E00007EA0AB000902001021DB
+:1078E0008FBF00148FB0001003E0000827BD001800
+:1078F00090EC001190E300193C18080097183FCE57
+:10790000318200FF0002F882307000FF001FCE00BD
+:1079100000103C000327302500D870253C0F4000A4
+:1079200001CF68253C198000AD2D0000373F0900CC
+:1079300093EC001193EE0012372F010037260980D7
+:107940000005C0828DE4000C8CC5003431CD00FFF1
+:1079500001AB10210058182100A4F823000884006E
+:1079600000033F0000F0302533F9FFFF318F00FCAA
+:1079700000D970250158202101E9682100045080B8
+:10798000ADAE000C0E00007C012A80213C0880086E
+:10799000240B0004350500800E00007EA0AB00091A
+:1079A000020010218FBF00148FB0001003E0000808
+:1079B00027BD00180A0007C72408001227BDFFD002
+:1079C0003C038000AFB60028AFB50024AFB4002060
+:1079D000AFB10014AFBF002CAFB3001CAFB20018A2
+:1079E000AFB000103467010090E6000B309400FF48
+:1079F00030B500FF30C200300000B02110400099C7
+:107A000000008821346409809088000800082E0056
+:107A100000051E03046000C0240400048F86005487
+:107A20003C010800A0243FD83C0C8000AD800048F9
+:107A30003C048000348E010091CD000B31A5002064
+:107A400010A000073C078000349309809272000860
+:107A50000012860000107E0305E000C43C1F800871
+:107A600034EC0100918A000B34EB09809169000825
+:107A7000314400400004402B3123000800C8982303
+:107A80001460000224120003000090213C108000CA
+:107A900036180A8036040900970E002C90830011D6
+:107AA0009089001293050018307F00FF312800FFF5
+:107AB000024810210002C880930D0018033F78216E
+:107AC00001F1302130B100FF00D11821A78E0058FC
+:107AD0003C010800A4263FCE3C010800A4233FD06F
+:107AE00015A00002000000000000000D920B010B29
+:107AF0003065FFFF3C010800A4233FD2316A0040FB
+:107B00003C010800A4203FC83C010800A4203FC459
+:107B10001140000224A4000A24A4000B3091FFFFAE
+:107B20000E0001E7022020219206010B3C0C080008
+:107B3000958C3FD2004020210006698231A70001C8
+:107B40000E00060101872821004020210260282123
+:107B50000E00060C024030210E0007A1004020213B
+:107B600016C00069004020219212010B32560040DD
+:107B700012C000053C0500FF8C93000034AEFFFFEF
+:107B8000026E8024AC9000000E0001FB0220202138
+:107B90003C0F080091EF3FD831F10003122000168E
+:107BA0003C1380088F8200543C09800835280080EF
+:107BB000245F0001AD1F003C3C0580088CB9000427
+:107BC00003E02021033FC0231B000002AF9F0054AD
+:107BD0008CA400040E0006F8ACA400043C0780004E
+:107BE0008CEB00743C04800834830080004B5021EF
+:107BF000AC6A000C3C1380083670008002802021A3
+:107C000002A02821A200006B0E00075D3C1480003A
+:107C10008F920054368C0140AD92000C8F86004844
+:107C20003C151000344D000624D60001AF960048E4
+:107C30008FBF002CA18600128FB60028AD8D0014D6
+:107C40008FB3001CAE9501788FB200188FB5002459
+:107C50008FB400208FB100148FB0001003E0000833
+:107C600027BD003034640980908F0008000F760033
+:107C7000000E6E0305A00033347F090093F8001B4B
+:107C8000241900103C010800A0393FD8331300022A
+:107C90001260FF678F8600548F8200601446FF6574
+:107CA0003C0480000E00007C000000003C048008C2
+:107CB0003485008090A8000924060016310300FFD7
+:107CC0001066000D0000000090AB00093C070800A2
+:107CD00090E73FD824090008316400FF34EA00012E
+:107CE0003C010800A02A3FD81089002F240C000A6C
+:107CF000108C00282402000C0E00007E0000000002
+:107D00000A0008608F8600540E0007B9024028213F
+:107D10000A0008AE004020213C0B8008356A008034
+:107D20008D4600548CE9000C1120FF3DAF860054B5
+:107D3000240700143C010800A0273FD80A00085F70
+:107D40003C0C800090910008241200023C010800C5
+:107D5000A0323FD8323000201200000B2416000160
+:107D60008F8600540A0008602411000837F800804C
+:107D70008F020038AFE200048FF90004AF19003C15
+:107D80000A00086C3C0780008F8600540A000860D7
+:107D900024110004A0A200090E00007E00000000D3
+:107DA0000A0008608F860054240200140A00093A71
+:107DB000A0A2000927BDFFE8AFB000103C10800072
+:107DC000AFBF001436020100904400090E00075DA9
+:107DD000240500013C0480089099000E3483008043
+:107DE000909F000F906F00269089000A33F800FFE3
+:107DF00000196E000018740031EC00FF01AE502530
+:107E0000000C5A00014B3825312800FF3603014091
+:107E10003445600000E830252402FF813C04100056
+:107E2000AC66000C8FBF0014AC650014A062001299
+:107E3000AE0401788FB0001003E0000827BD0018E1
+:107E400027BDFFE8308400FFAFBF00100E00075DC4
+:107E500030A500FF3C05800034A4014034470040B9
+:107E60002406FF92AC870014A08600128F83005472
+:107E70008FBF00103C02100027BD0018AC83000C1F
+:107E800003E00008ACA2017827BDFFD8AFB0001016
+:107E9000308400FF30B000FF3C058000AFB100141B
+:107EA000AFBF0020AFB3001CAFB20018000410C277
+:107EB00034A60100320300023051000114600007B3
+:107EC00090D200093C098008353300809268000593
+:107ED0003107000810E0000C308A00100240202119
+:107EE0000E00078302202821240200018FBF0020FA
+:107EF0008FB3001C8FB200188FB100148FB0001028
+:107F000003E0000827BD00281540003434A50A000E
+:107F10008CB800248CAF0008130F004B00003821F0
+:107F20003C0D800835B30080926C00682406000286
+:107F3000318B00FF116600843C06800034C20100D2
+:107F40009263004C90590009307F00FF53F9000400
+:107F50003213007C10E00069000000003213007C46
+:107F60005660005C0240202116200009320D0001FD
+:107F70003C0C800035840100358B0A008D6500249F
+:107F80008C86000414A6FFD900001021320D0001D8
+:107F900011A0000E024020213C1880003710010083
+:107FA0008E0F000C8F8E005011EE000800000000B4
+:107FB0000E000843022028218E19000C3C1F800867
+:107FC00037F00080AE190050024020210E000771EA
+:107FD000022028210A00098F240200013C05080024
+:107FE0008CA5006424A400013C010800AC240064BA
+:107FF0001600000D00000000022028210E0007716D
+:1080000002402021926E0068240C000231CD00FF56
+:1080100011AC0022024020210E00094100000000A6
+:108020000A00098F240200010E00007024040001E0
+:10803000926B0025020B30250E00007EA266002503
+:108040000A0009D3022028218E6200188CDF000468
+:108050008CB9002400021E0217F9FFB13065007FC1
+:108060009268004C264400013093007F1265004066
+:10807000310300FF1464FFAB3C0D8008264700016C
+:1080800030F1007F30E200FF1225000B24070001D1
+:10809000004090210A00099C2411000124050004DD
+:1080A0000E000732240600010E0009410000000006
+:1080B0000A00098F240200012405FF8002452024C4
+:1080C00000859026324200FF004090210A00099C62
+:1080D000241100010E00084302202821320700303D
+:1080E00010E0FFA132100082024020210E00078321
+:1080F000022028210A00098F240200018E6900183D
+:108100000240202102202821012640250E0009647A
+:10811000AE6800189264004C240500032406000198
+:108120000E000732308400FF0E00007024040001AE
+:1081300092710025021150250E00007EA26A0025D2
+:108140000A00098F240200018E6F00183C1880007D
+:108150000240202101F87025022028210E0007711D
+:10816000AE6E00189264004C0A000A1B240500043D
+:10817000324A0080394900801469FF6A3C0D80084A
+:108180000A0009F42647000127BDFFC0AFB0001860
+:108190003C108000AFBF0038AFB70034AFB600303E
+:1081A000AFB5002CAFB40028AFB30024AFB20020AD
+:1081B0000E0005BEAFB1001C360201009045000B59
+:1081C0000E00097690440008144000E78FBF003885
+:1081D0003C08800835070080A0E0006B3606098067
+:1081E00090C50000240300503C17080026F73F907C
+:1081F00030A400FF3C13080026733FA01083000347
+:108200003C1080000000B82100009821241F0010BD
+:108210003611010036120A00361509808E580024E6
+:108220008E3400048EAF00208F8C00543C01080077
+:10823000A03F3FD836190A80972B002C8EF60000FD
+:10824000932A00180298702301EC68233C0108006F
+:10825000AC2E3FB43C010800AC2D3FB83C010800F7
+:10826000AC2C3FDCA78B005802C0F809315400FF4A
+:1082700030490002152000E930420001504000C49E
+:108280009227000992A90008312800081500000271
+:10829000241500030000A8213C0A80003543090092
+:1082A00035440A008C8D00249072001190700012E9
+:1082B000907F0011325900FF321100FF02B11021EE
+:1082C0000002C08033EF00FF0319B021028F70213C
+:1082D00002D4602125CB00103C010800A4363FCE1B
+:1082E0003C010800AC2D3FE03C010800A42C3FD02D
+:1082F0003C010800A42B3FCC3556010035540980C1
+:1083000035510E008F8700548F89005C8E850020C8
+:1083100024080006012730233C010800AC283FD484
+:1083200000A7282304C000B50000902104A000B3DA
+:1083300000C5502B114000B5000000003C010800B2
+:10834000AC263FB88E6200000040F8090000000033
+:108350003046000214C0007400408021304B000100
+:10836000556000118E6200043C0D08008DAD3FBCCD
+:108370003C0EC0003C04800001AE6025AE2C000025
+:108380008C980000330F000811E0FFFD0000000092
+:10839000963F000824120001A79F00408E39000478
+:1083A000AF9900388E6200040040F8090000000018
+:1083B0000202802532030002146000B300000000B6
+:1083C0003C09080095293FC43C06080094C63FD0EC
+:1083D0003C0A0800954A3FC63C0708008CE73FBCB2
+:1083E000012670213C0308008C633FE03C08080034
+:1083F00095083FDA01CA20218ED9000C00E9282116
+:10840000249F000200A878210067C02133E4FFFF09
+:10841000AF9900503C010800AC383FE03C01080037
+:10842000A42F3FC83C010800A42E3FD20E0001E754
+:10843000000000008F8D0048004020213C01080012
+:10844000A02D3FD98E62000825AC0001AF8C0048FA
+:108450000040F809000000008F85005402A0302180
+:108460000E00060C004020210E0007A10040202134
+:108470008E6B000C0160F809004020213C0A0800C6
+:10848000954A3FD23C06080094C63FC601464821A3
+:10849000252800020E0001FB3104FFFF3C05080007
+:1084A0008CA53FB43C0708008CE73FBC00A7202305
+:1084B0003C010800AC243FB414800006000000001A
+:1084C0003C0208008C423FD4344B00403C01080081
+:1084D000AC2B3FD4124000438F8E00448E2D0010F1
+:1084E0008F920044AE4D00208E2C0018AE4C00241C
+:1084F0003C04080094843FC80E0006FA0000000007
+:108500008F9F00548E6700103C010800AC3F3FDC99
+:1085100000E0F809000000003C1908008F393FB462
+:108520001720FF798F870054979300583C11800ED5
+:10853000321601000E000729A633002C16C0004594
+:10854000320300105460004C8EE5000432080040F5
+:108550005500001D8EF000088EE4000C0080F80924
+:10856000000000008FBF00388FB700348FB6003096
+:108570008FB5002C8FB400288FB300248FB2002059
+:108580008FB1001C8FB0001803E0000827BD004029
+:108590008F86003C36110E0000072E0000A6202515
+:1085A000AE0400808E4300208E500024AFA3001044
+:1085B000AE2300148FB20010AE320010AE30001C9B
+:1085C0000A000A75AE3000180200F8090000000029
+:1085D0008EE4000C0080F809000000000A000B2E59
+:1085E0008FBF003824180001240F0001A5C000200F
+:1085F000A5D800220A000B10ADCF00243C010800D2
+:10860000AC203FB80A000AA68E6200003C010800B8
+:10861000AC253FB80A000AA68E6200009224000929
+:108620000E000771000028218FBF00388FB700347B
+:108630008FB600308FB5002C8FB400288FB3002484
+:108640008FB200208FB1001C8FB0001803E000082B
+:1086500027BD00403C1480009295010900002821AC
+:108660000E00084332A400FF320300105060FFB830
+:10867000320800408EE5000400A0F8090000000068
+:108680000A000B28320800405240FFA89793005878
+:108690008E3400148F930044AE7400208E35001C7D
+:1086A000AE7500240A000B1F979300588F820014A8
+:1086B0000004218003E00008008210213C078008AC
+:1086C00034E200809043006900804021106000097E
+:1086D0003C0401003C0708008CE73FDC8F8300303E
+:1086E00000E32023048000089389001C14E30003A6
+:1086F0000100202103E00008008010213C0401005B
+:1087000003E00008008010211120000B00673823CF
+:108710003C0D800035AC0980918B007C316A0002F1
+:10872000114000202409003400E9702B15C0FFF12E
+:108730000100202100E938232403FFFC00A3C82402
+:1087400000E3C02400F9782B15E0FFEA030820219C
+:1087500030C400030004102314C000143049000387
+:108760000000302100A9782101E6702100EE682B7D
+:1087700011A0FFE03C0401002D3800010006C82BC9
+:10878000010548210319382414E0FFDA2524FFFCF1
+:108790002402FFFC00A218240068202103E0000846
+:1087A000008010210A000B9E240900303C0C800040
+:1087B0003586098090CB007C316A00041540FFE9C2
+:1087C000240600040A000BAD000030213C03080021
+:1087D0008C63005C8F82001827BDFFE0AFBF0018DC
+:1087E000AFB1001410620005AFB00010000329C043
+:1087F00024A40280AF840014AF8300183C108000D2
+:1088000036020A0094450032361101000E000B7F3B
+:1088100030A43FFF8E240000241FFF803C11008005
+:108820000082C021031F60243309007F000CC9406F
+:1088300003294025330E0078362F00033C0D10002D
+:10884000010D502501CF5825AE0C002836080980AF
+:10885000AE0C080CAE0B082CAE0A08309103006970
+:108860003C06800C0126382110600006AF870034DA
+:108870008D09003C8D03006C0123382318E0008231
+:10888000000000003C0B8008356A00803C1080002E
+:10889000A1400069360609808CC200383C06800081
+:1088A00034C50A0090A8003C310C00201180001A49
+:1088B000AF820030240D00013C0E800035D10A004B
+:1088C000A38D001CAF8000248E2400248F850024FB
+:1088D000240D0008AF800020AF8000283C01080074
+:1088E000A42D3FC63C010800A4203FDA0E000B83F4
+:1088F000000030219228003C8FBF00188FB1001477
+:108900008FB0001000086142AF82002C27BD00200C
+:1089100003E000083182000190B80032240E00010B
+:10892000330F00FF000F2182108E00412419000236
+:108930001099006434C40AC03C03800034640A0007
+:108940008C8F002415E0001E34660900909F0030D3
+:108950002418000533F9003F1338004E24030001AA
+:108960008F860020A383001CAF860028AF860024DA
+:108970003C0E800035D10A008E2400248F8500240F
+:10898000240D00083C010800A42D3FC63C0108004E
+:10899000A4203FDA0E000B83000000009228003C68
+:1089A0008FBF00188FB100148FB000100008614213
+:1089B000AF82002C27BD002003E0000831820001B7
+:1089C0008C8A00088C8B00248CD000643C0E8000C4
+:1089D00035D10A00014B2823AF900024A380001C4E
+:1089E000AF8500288E2400248F8600208F850024E8
+:1089F000240D00083C010800A42D3FC63C010800DE
+:108A0000A4203FDA0E000B83000000009228003CF7
+:108A10008FBF00188FB100148FB0001000086142A2
+:108A2000AF82002C27BD002003E000083182000146
+:108A300090A200303051003F5224002834C50AC0B3
+:108A40008CB000241600002234CB09008CA600480C
+:108A50003C0A7FFF3545FFFF00C510243C0E800017
+:108A6000AF82002035C509008F8800208CAD0060E2
+:108A7000010D602B15800002010020218CA40060F4
+:108A80000A000C22AF8400208D02006C0A000BFC4F
+:108A90003C0680008C8200488F8600203C097FFFC6
+:108AA0003527FFFF004788243C0480082403000189
+:108AB000AF910028AC80006CA383001C0A000C302E
+:108AC000AF8600248C9F00140A000C22AF9F002068
+:108AD0008D6200680A000C6C3C0E800034C4098072
+:108AE0008C8900708CA300140123382B10E0000443
+:108AF000000000008C8200700A000C6C3C0E8000AC
+:108B00008CA200140A000C6C3C0E80008F8500249F
+:108B100027BDFFE0AFBF0018AFB1001414A00008DC
+:108B2000AFB000103C04800034870A0090E60030AB
+:108B30002402000530C3003F106200B934840900EC
+:108B40008F91002000A080213C048000348E0A0018
+:108B50008DCD00043C0608008CC63FB831A73FFF0E
+:108B600000E6602B5580000100E03021938F001C4F
+:108B700011E0007800D0282B349F098093F9007C05
+:108B800033380002130000792403003400C3102B93
+:108B9000144000D90000000000C3302300D0282B6F
+:108BA0003C010800A4233FC414A0006E0200182159
+:108BB0003C0408008C843FB40064402B5500000145
+:108BC000006020213C05800034A90A00912A003C65
+:108BD0003C010800AC243FBC31430020146000037A
+:108BE0000000482134AB0E008D6900188F88002CDE
+:108BF0000128202B1080005F000000003C050800C9
+:108C00008CA53FBC00A96821010D602B1180005C80
+:108C100000B0702B0109382300E028213C01080036
+:108C2000AC273FBC12000003240AFFFC10B0008DEB
+:108C30003224000300AA18243C010800A4203FDAD3
+:108C40003C010800AC233FBC006028218F84002435
+:108C5000120400063C0B80088D6C006C0200202181
+:108C6000AF91002025900001AD70006C8F8D002821
+:108C700000858823AF91002401A52023AF8400281C
+:108C80001220000224070018240700103C18800856
+:108C90003706008090CF00683C010800A0273FD82D
+:108CA0002407000131EE00FF11C70047000000005B
+:108CB00014800018000028213C06800034D109806F
+:108CC00034CD010091A600098E2C001824C40001A7
+:108CD000000C86023205007F308B007F1165007F1B
+:108CE0002407FF803C19800837290080A124004C0C
+:108CF0003C0808008D083FD4241800023C010800FD
+:108D0000A0384019350F00083C010800AC2F3FD4B3
+:108D1000240500103C02800034440A009083003C8B
+:108D2000307F002013E0000500A02021240A00016C
+:108D30003C010800AC2A3FBC34A400018FBF0018DE
+:108D40008FB100148FB000100080102103E00008E4
+:108D500027BD00203C010800A4203FC410A0FF94C0
+:108D6000020018210A000CC000C018210A000CB72C
+:108D7000240300303C0508008CA53FBC00B0702BDC
+:108D800011C0FFA8000000003C19080097393FC43B
+:108D90000325C0210307782B11E000072CAA00044B
+:108DA0003C0360008C625404305F003F17E0FFE337
+:108DB000240400422CAA00041140FF9A240400421B
+:108DC0000A000D248FBF00181528FFB9000000000D
+:108DD0008CCA00183C1F800024020002015F182585
+:108DE000ACC3001837F90A00A0C200689329003C00
+:108DF0002404000400A01021312800203C010800B8
+:108E0000A0244019110000022405001024020001D2
+:108E10003C010800AC223FB40A000D1A3C0280005D
+:108E20008F8800288C8900600109282B14A000027B
+:108E3000010088218C9100603C048000348B0E007E
+:108E40008D640018240A000102202821022030210C
+:108E5000A38A001C0E000B83022080210A000CA6AE
+:108E6000AF82002C00045823122000073164000355
+:108E70003C0E800035C7098090ED007C31AC0004C9
+:108E800015800019248F00043C010800A4243FDA57
+:108E90003C1F080097FF3FDA03E5C82100D9C02B2B
+:108EA0001300FF6B8F8400242CA6000514C0FFA3C1
+:108EB0002404004230A200031440000200A2182340
+:108EC00024A3FFFC3C010800AC233FBC3C0108008C
+:108ED000A4203FDA0A000CE70060282100C77024B4
+:108EE0000A000D0D01C720263C010800A42F3FDA1F
+:108EF0000A000D78000000003C010800AC203FBCD7
+:108F00000A000D23240400428F8300283C058000C2
+:108F100034AA0A00146000060000102191470030B6
+:108F20002406000530E400FF108600030000000066
+:108F300003E0000800000000914B0048316900FF89
+:108F4000000941C21500FFFA3C0680083C040800F5
+:108F500094843FC43C0308008C633FDC3C19080048
+:108F60008F393FBC3C0F080095EF3FDA0064C02109
+:108F70008CCD00040319702101CF602134AB0E00A9
+:108F8000018D282318A0001D00000000914F004C07
+:108F90008F8C0034956D001031EE00FF8D89000438
+:108FA00001AE30238D8A000030CEFFFF000E290075
+:108FB0000125C82100003821014720210325182B55
+:108FC0000083C021AD990004AD980000918F000A84
+:108FD00001CF6821A18D000A956500128F8A0034A7
+:108FE000A5450008954B003825690001A5490038C2
+:108FF0009148000D35070008A147000D03E0000867
+:109000000000000027BDFFD8AFB000189388001CF7
+:109010008FB000143C0A80003C197FFF8F8700242A
+:109020003738FFFFAFBF0020AFB1001C355F0A002B
+:109030000218182493EB003C00087FC03C02BFFFDD
+:10904000006F60252CF000013449FFFF3C1F080031
+:109050008FFF3FDC8F9900303C18080097183FD2F3
+:1090600001897824001047803C07EFFF3C05F0FFA2
+:1090700001E818253C1180003169002034E2FFFF2F
+:1090800034ADFFFF362E098027A50010240600020C
+:1090900003F96023270B0002354A0E0000621824F2
+:1090A0000080802115200002000040218D48001C16
+:1090B000A7AB0012058000392407000030E800FF4C
+:1090C00000083F00006758253C028008AFAB001441
+:1090D000344F008091EA00683C08080091083FD9AD
+:1090E0003C09DFFF352CFFFF000AF82B3C0208008B
+:1090F00094423FCCA3A80011016CC024001FCF40B4
+:10910000031918258FA70010AFA300143C0C08000A
+:10911000918C3FDBA7A200168FAB001400ED482412
+:109120003C0F01003C0A0FFF012FC82531980003B6
+:10913000355FFFFF016D40243C027000033F38247F
+:1091400000181E0000E2482501037825AFAF001487
+:10915000AFA9001091CC007C0E000092A3AC0015CA
+:10916000362D0A0091A6003C30C400201080000675
+:10917000260200083C11080096313FC8262EFFFF4A
+:109180003C010800A42E3FC88FBF00208FB1001CF7
+:109190008FB0001803E0000827BD00288F8B002C3B
+:1091A000010B502B5540FFC5240700010A000E0497
+:1091B00030E800FF9383001C3C02800027BDFFD8ED
+:1091C00034480A0000805021AFBF002034460AC056
+:1091D000010028211060000E3444098091070030FE
+:1091E000240B00058F89002030EC003F118B000B11
+:1091F00000003821AFA900103C0B80088D69006C7D
+:10920000AFAA00180E00015AAFA90014A380001CD9
+:109210008FBF002003E0000827BD00288D1F0048F5
+:109220003C1808008F183FBC8F9900283C027FFF34
+:109230008D0800443443FFFFAFA900103C0B8008A9
+:109240008D69006C03E370240319782101CF682332
+:1092500001A83821AFAA00180E00015AAFA90014C6
+:109260000A000E58A380001C3C05800034A60A00AA
+:1092700090C7003C3C06080094C63FDA3C02080058
+:109280008C423FD430E30020000624001060001E12
+:10929000004438253C0880083505008090A300680C
+:1092A00000004821240800010000282124040001B6
+:1092B0003C0680008CCD017805A0FFFE34CF014034
+:1092C000ADE800083C0208008C423FDCA5E5000444
+:1092D000A5E40006ADE2000C3C04080090843FD9F0
+:1092E0003C03800834790080A1E40012ADE700144B
+:1092F000A5E900189338004C3C0E1000A1F8002D91
+:1093000003E00008ACCE017834A90E008D28001CC3
+:109310003C0C08008D8C3FBC952B0016952A001440
+:10932000018648213164FFFF0A000E803145FFFFAE
+:109330003C04800034830A009065003C30A2002089
+:109340001040001934870E00000040210000382131
+:10935000000020213C0680008CC901780520FFFE1A
+:1093600034CA014034CF010091EB0009AD48000838
+:109370003C0E08008DCE3FDC240DFF91240C0040F4
+:109380003C081000A5440004A5470006AD4E000CA3
+:10939000A14D0012AD4C0014A5400018A14B002DAA
+:1093A00003E00008ACC801788CE8001894E60012CD
+:1093B00094E4001030C7FFFF0A000EA93084FFFFBD
+:1093C0003C04800034830A009065003C30A20020F9
+:1093D0001040002727BDFFF82409000100003821B4
+:1093E000240800013C0680008CCA01780540FFFE7D
+:1093F0003C0280FF34C40100908D00093C0C080041
+:10940000918C4019A3AD00038FAB00003185007F24
+:109410003459FFFF01665025AFAA00009083000A6F
+:10942000A3A0000200057E00A3A300018FB80000E6
+:1094300034CB0140240C30000319702401CF68257F
+:10944000AD6D000C27BD0008AD6C0014A5600018C0
+:10945000AD690008A56700042409FF80A56800061F
+:109460003C081000A169001203E00008ACC80178B4
+:1094700034870E008CE9001894E6001294E4001082
+:1094800030C8FFFF0A000ECD3087FFFF27BDFFE089
+:10949000AFB100143C118000AFB00010AFBF001896
+:1094A00036380A00970F0032363001000E000B7F6D
+:1094B00031E43FFF8E0E0000240DFF803C042000AD
+:1094C00001C25821016D6024000C4940316A007FBF
+:1094D000012A4025010438253C048008AE270830C5
+:1094E0003486008090C500682403000230A200FF8B
+:1094F000104300048F9F00208F990024AC9F0068C8
+:10950000AC9900648FBF00188FB100148FB00010A9
+:1095100003E0000827BD00203C0A0800254A3A80E5
+:109520003C09080025293B103C08080025082F1C91
+:109530003C07080024E73BDC3C06080024C639044D
+:109540003C05080024A536583C0408002484325CFD
+:109550003C030800246339B83C0208002442375415
+:109560003C010800AC2A3F983C010800AC293F941C
+:109570003C010800AC283F903C010800AC273F9C10
+:109580003C010800AC263FAC3C010800AC253FA4E0
+:109590003C010800AC243FA03C010800AC233FB0D4
+:1095A0003C010800AC223FA803E0000800000000D6
+:1095B00080000940800009008008010080080080C8
+:1095C00080080000800E00008008008080080000F5
+:1095D00080000A8080000A00800009808000090065
+:00000001FF
diff --git a/fs/attr.c b/fs/attr.c
index c902b3d53508..d3cd5569a038 100644
--- a/fs/attr.c
+++ b/fs/attr.c
@@ -115,6 +115,10 @@ int inode_newsize_ok(const struct inode *inode, loff_t offset)
 		unsigned long limit;
 
 		limit = rlimit(RLIMIT_FSIZE);
+		if (offset > ULONG_MAX)
+			gr_learn_resource(current, RLIMIT_FSIZE, ULONG_MAX, 1);
+		else if (offset > 0)
+			gr_learn_resource(current, RLIMIT_FSIZE, (unsigned long)offset, 1);
 		if (limit != RLIM_INFINITY && offset > limit)
 			goto out_sig;
 		if (offset > inode->i_sb->s_maxbytes)
diff --git a/fs/autofs4/waitq.c b/fs/autofs4/waitq.c
index ed2872f2a620..6e7193a1506a 100644
--- a/fs/autofs4/waitq.c
+++ b/fs/autofs4/waitq.c
@@ -344,6 +344,10 @@ static int validate_request(struct autofs_wait_queue **wait,
 	return 1;
 }
 
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+static atomic_unchecked_t autofs_dummy_name_id = ATOMIC_INIT(0);
+#endif
+
 int autofs4_wait(struct autofs_sb_info *sbi,
 		 struct dentry *dentry, enum autofs_notify notify)
 {
@@ -389,7 +393,12 @@ int autofs4_wait(struct autofs_sb_info *sbi,
 
 	/* If this is a direct mount request create a dummy name */
 	if (IS_ROOT(dentry) && autofs_type_trigger(sbi->type))
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+		/* this name does get written to userland via autofs4_write() */
+		qstr.len = sprintf(name, "%08x", atomic_inc_return_unchecked(&autofs_dummy_name_id));
+#else
 		qstr.len = sprintf(name, "%p", dentry);
+#endif
 	else {
 		qstr.len = autofs4_getpath(sbi, dentry, &name);
 		if (!qstr.len) {
diff --git a/fs/binfmt_aout.c b/fs/binfmt_aout.c
index a6b038f337a6..15cfacf11ef5 100644
--- a/fs/binfmt_aout.c
+++ b/fs/binfmt_aout.c
@@ -16,6 +16,7 @@
 #include <linux/string.h>
 #include <linux/fs.h>
 #include <linux/file.h>
+#include <linux/security.h>
 #include <linux/stat.h>
 #include <linux/fcntl.h>
 #include <linux/ptrace.h>
@@ -58,6 +59,8 @@ static int aout_core_dump(struct coredump_params *cprm)
 #endif
 #       define START_STACK(u)   ((void __user *)u.start_stack)
 
+	memset(&dump, 0, sizeof(dump));
+
 	fs = get_fs();
 	set_fs(KERNEL_DS);
 	has_dumped = 1;
@@ -68,10 +71,12 @@ static int aout_core_dump(struct coredump_params *cprm)
 
 /* If the size of the dump file exceeds the rlimit, then see what would happen
    if we wrote the stack, but not the data area.  */
+	gr_learn_resource(current, RLIMIT_CORE, (dump.u_dsize + dump.u_ssize+1) * PAGE_SIZE, 1);
 	if ((dump.u_dsize + dump.u_ssize+1) * PAGE_SIZE > cprm->limit)
 		dump.u_dsize = 0;
 
 /* Make sure we have enough room to write the stack and data areas. */
+	gr_learn_resource(current, RLIMIT_CORE, (dump.u_ssize + 1) * PAGE_SIZE, 1);
 	if ((dump.u_ssize + 1) * PAGE_SIZE > cprm->limit)
 		dump.u_ssize = 0;
 
@@ -228,6 +233,8 @@ static int load_aout_binary(struct linux_binprm * bprm)
 	rlim = rlimit(RLIMIT_DATA);
 	if (rlim >= RLIM_INFINITY)
 		rlim = ~0;
+
+	gr_learn_resource(current, RLIMIT_DATA, ex.a_data + ex.a_bss, 1);
 	if (ex.a_data + ex.a_bss > rlim)
 		return -ENOMEM;
 
diff --git a/fs/binfmt_elf.c b/fs/binfmt_elf.c
index d8bda950fd40..e3bff2f9fa62 100644
--- a/fs/binfmt_elf.c
+++ b/fs/binfmt_elf.c
@@ -72,6 +72,10 @@ static int elf_core_dump(struct coredump_params *cprm);
 static void elf_handle_mprotect(struct vm_area_struct *vma, unsigned long newflags);
 #endif
 
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+static void elf_handle_mmap(struct file *file);
+#endif
+
 #if ELF_EXEC_PAGESIZE > PAGE_SIZE
 #define ELF_MIN_ALIGN	ELF_EXEC_PAGESIZE
 #else
@@ -96,6 +100,10 @@ static struct linux_binfmt elf_format = {
 	.handle_mprotect= elf_handle_mprotect,
 #endif
 
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+	.handle_mmap	= elf_handle_mmap,
+#endif
+
 	.min_coredump	= ELF_EXEC_PAGESIZE,
 };
 
@@ -1451,7 +1459,7 @@ static int load_elf_binary(struct linux_binprm *bprm)
 		start = ELF_PAGEALIGN(elf_brk);
 		size = PAGE_SIZE + ((pax_get_random_long() & ((1UL << 22) - 1UL)) << 4);
 		flags = MAP_FIXED | MAP_PRIVATE;
-		vm_flags = VM_NONE | VM_DONTEXPAND | VM_DONTDUMP;
+		vm_flags = VM_DONTEXPAND | VM_DONTDUMP;
 
 		down_write(&current->mm->mmap_sem);
 		start = get_unmapped_area(NULL, start, PAGE_ALIGN(size), 0, flags);
@@ -2856,6 +2864,7 @@ static void elf_handle_mprotect(struct vm_area_struct *vma, unsigned long newfla
 				if (dyn.d_tag == DT_NULL)
 					break;
 				if (dyn.d_tag == DT_TEXTREL || (dyn.d_tag == DT_FLAGS && (dyn.d_un.d_val & DF_TEXTREL))) {
+					gr_log_textrel(vma, is_textrel_rw);
 					if (is_textrel_rw)
 						vma->vm_flags |= VM_MAYWRITE;
 					else
@@ -2919,6 +2928,35 @@ static void elf_handle_mprotect(struct vm_area_struct *vma, unsigned long newfla
 }
 #endif
 
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+
+extern int grsec_enable_log_rwxmaps;
+
+static void elf_handle_mmap(struct file *file)
+{
+	struct elfhdr elf_h;
+	struct elf_phdr elf_p;
+	unsigned long i;
+
+	if (!grsec_enable_log_rwxmaps)
+		return;
+
+	if (sizeof(elf_h) != kernel_read(file, 0UL, (char *)&elf_h, sizeof(elf_h)) ||
+	    memcmp(elf_h.e_ident, ELFMAG, SELFMAG) ||
+	    (elf_h.e_type != ET_DYN && elf_h.e_type != ET_EXEC) || !elf_check_arch(&elf_h) ||
+	    elf_h.e_phentsize != sizeof(struct elf_phdr) ||
+	    elf_h.e_phnum > 65536UL / sizeof(struct elf_phdr))
+		return;
+
+	for (i = 0UL; i < elf_h.e_phnum; i++) {
+		if (sizeof(elf_p) != kernel_read(file, elf_h.e_phoff + i*sizeof(elf_p), (char *)&elf_p, sizeof(elf_p)))
+			return;
+		if (elf_p.p_type == PT_GNU_STACK && (elf_p.p_flags & PF_X))
+			gr_log_ptgnustack(file);
+	}
+}
+#endif
+
 static int __init init_elf_binfmt(void)
 {
 	register_binfmt(&elf_format);
diff --git a/fs/compat.c b/fs/compat.c
index 46a5d8b83745..8280c0f87c3a 100644
--- a/fs/compat.c
+++ b/fs/compat.c
@@ -829,6 +829,7 @@ struct compat_old_linux_dirent {
 struct compat_readdir_callback {
 	struct dir_context ctx;
 	struct compat_old_linux_dirent __user *dirent;
+	struct file * file;
 	int result;
 };
 
@@ -848,6 +849,10 @@ static int compat_fillonedir(struct dir_context *ctx, const char *name,
 		buf->result = -EOVERFLOW;
 		return -EOVERFLOW;
 	}
+
+	if (!gr_acl_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+
 	buf->result++;
 	dirent = buf->dirent;
 	if (!access_ok(VERIFY_WRITE, dirent,
@@ -879,6 +884,7 @@ COMPAT_SYSCALL_DEFINE3(old_readdir, unsigned int, fd,
 	if (!f.file)
 		return -EBADF;
 
+	buf.file = f.file;
 	error = iterate_dir(f.file, &buf.ctx);
 	if (buf.result)
 		error = buf.result;
@@ -898,6 +904,7 @@ struct compat_getdents_callback {
 	struct dir_context ctx;
 	struct compat_linux_dirent __user *current_dir;
 	struct compat_linux_dirent __user *previous;
+	struct file * file;
 	int count;
 	int error;
 };
@@ -920,6 +927,10 @@ static int compat_filldir(struct dir_context *ctx, const char *name, int namlen,
 		buf->error = -EOVERFLOW;
 		return -EOVERFLOW;
 	}
+
+	if (!gr_acl_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+
 	dirent = buf->previous;
 	if (dirent) {
 		if (signal_pending(current))
@@ -967,6 +978,7 @@ COMPAT_SYSCALL_DEFINE3(getdents, unsigned int, fd,
 	if (!f.file)
 		return -EBADF;
 
+	buf.file = f.file;
 	error = iterate_dir(f.file, &buf.ctx);
 	if (error >= 0)
 		error = buf.error;
@@ -987,6 +999,7 @@ struct compat_getdents_callback64 {
 	struct dir_context ctx;
 	struct linux_dirent64 __user *current_dir;
 	struct linux_dirent64 __user *previous;
+	struct file * file;
 	int count;
 	int error;
 };
@@ -1005,6 +1018,10 @@ static int compat_filldir64(struct dir_context *ctx, const char *name,
 	buf->error = -EINVAL;	/* only used if we fail.. */
 	if (reclen > buf->count)
 		return -EINVAL;
+
+	if (!gr_acl_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+
 	dirent = buf->previous;
 
 	if (dirent) {
@@ -1056,6 +1073,7 @@ COMPAT_SYSCALL_DEFINE3(getdents64, unsigned int, fd,
 	if (!f.file)
 		return -EBADF;
 
+	buf.file = f.file;
 	error = iterate_dir(f.file, &buf.ctx);
 	if (error >= 0)
 		error = buf.error;
diff --git a/fs/coredump.c b/fs/coredump.c
index 05ee68d8c9c7..235adec11a4c 100644
--- a/fs/coredump.c
+++ b/fs/coredump.c
@@ -548,6 +548,8 @@ void do_coredump(const siginfo_t *siginfo)
 	bool need_suid_safe = false;
 	bool core_dumped = false;
 	static atomic_unchecked_t core_dump_count = ATOMIC_INIT(0);
+	long signr = siginfo->si_signo;
+	int dumpable;
 	struct coredump_params cprm = {
 		.siginfo = siginfo,
 		.regs = signal_pt_regs(),
@@ -560,12 +562,14 @@ void do_coredump(const siginfo_t *siginfo)
 		.mm_flags = mm->flags,
 	};
 
-	audit_core_dumps(siginfo->si_signo);
+	audit_core_dumps(signr);
+
+	dumpable = __get_dumpable(cprm.mm_flags);
 
 	binfmt = mm->binfmt;
 	if (!binfmt || !binfmt->core_dump)
 		goto fail;
-	if (!__get_dumpable(cprm.mm_flags))
+	if (!dumpable)
 		goto fail;
 
 	cred = prepare_creds();
@@ -583,7 +587,7 @@ void do_coredump(const siginfo_t *siginfo)
 		need_suid_safe = true;
 	}
 
-	retval = coredump_wait(siginfo->si_signo, &core_state);
+	retval = coredump_wait(signr, &core_state);
 	if (retval < 0)
 		goto fail_creds;
 
@@ -660,6 +664,8 @@ void do_coredump(const siginfo_t *siginfo)
 		int open_flags = O_CREAT | O_RDWR | O_NOFOLLOW |
 				 O_LARGEFILE | O_EXCL;
 
+		gr_learn_resource(current, RLIMIT_CORE, binfmt->min_coredump, 1);
+
 		if (cprm.limit < binfmt->min_coredump)
 			goto fail_unlock;
 
@@ -774,6 +780,9 @@ void do_coredump(const siginfo_t *siginfo)
 fail_creds:
 	put_cred(cred);
 fail:
+	if (signr == SIGSEGV || signr == SIGBUS || signr == SIGKILL || signr == SIGILL)
+		gr_handle_brute_attach(dumpable);
+
 	return;
 }
 
@@ -787,6 +796,8 @@ int dump_emit(struct coredump_params *cprm, const void *addr, int nr)
 	struct file *file = cprm->file;
 	loff_t pos = file->f_pos;
 	ssize_t n;
+
+	gr_learn_resource(current, RLIMIT_CORE, cprm->written + nr, 1);
 	if (cprm->written + nr > cprm->limit)
 		return 0;
 	while (nr) {
diff --git a/fs/dcache.c b/fs/dcache.c
index 85c5e4498635..2cdeaf6a1719 100644
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -756,8 +756,6 @@ void dput(struct dentry *dentry)
 		return;
 
 repeat:
-	might_sleep();
-
 	rcu_read_lock();
 	if (likely(fast_dput(dentry))) {
 		rcu_read_unlock();
@@ -1614,6 +1612,9 @@ struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name)
 	dentry->d_sb = sb;
 	dentry->d_op = NULL;
 	dentry->d_fsdata = NULL;
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+	atomic_set(&dentry->chroot_refcnt, 0);
+#endif
 	INIT_HLIST_BL_NODE(&dentry->d_hash);
 	INIT_LIST_HEAD(&dentry->d_lru);
 	INIT_LIST_HEAD(&dentry->d_subdirs);
diff --git a/fs/debugfs/inode.c b/fs/debugfs/inode.c
index 1e30f74a9527..8925fad38561 100644
--- a/fs/debugfs/inode.c
+++ b/fs/debugfs/inode.c
@@ -253,6 +253,10 @@ static struct dentry *start_creating(const char *name, struct dentry *parent)
 	struct dentry *dentry;
 	int error;
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+	return ERR_PTR(-ENODEV);
+#endif
+
 	pr_debug("debugfs: creating file '%s'\n",name);
 
 	if (IS_ERR(parent))
@@ -466,6 +470,10 @@ EXPORT_SYMBOL_GPL(debugfs_create_file_size);
  * If debugfs is not enabled in the kernel, the value -%ENODEV will be
  * returned.
  */
+#ifdef CONFIG_GRKERNSEC_SYSFS_RESTRICT
+extern int grsec_enable_sysfs_restrict;
+#endif
+
 struct dentry *debugfs_create_dir(const char *name, struct dentry *parent)
 {
 	struct dentry *dentry = start_creating(name, parent);
@@ -478,7 +486,12 @@ struct dentry *debugfs_create_dir(const char *name, struct dentry *parent)
 	if (unlikely(!inode))
 		return failed_creating(dentry);
 
-	inode->i_mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
+#ifdef CONFIG_GRKERNSEC_SYSFS_RESTRICT
+	if (grsec_enable_sysfs_restrict)
+		inode->i_mode = S_IFDIR | S_IRWXU;
+	else
+#endif
+		inode->i_mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
 	inode->i_op = &simple_dir_inode_operations;
 	inode->i_fop = &simple_dir_operations;
 
@@ -782,6 +795,10 @@ static int __init debugfs_init(void)
 {
 	int retval;
 
+#ifdef CONFIG_GRKERNSEC_KMEM
+	return -ENOSYS;
+#endif
+
 	retval = sysfs_create_mount_point(kernel_kobj, "debug");
 	if (retval)
 		return retval;
diff --git a/fs/exec.c b/fs/exec.c
index 12169f1226f8..4368e21d4d9d 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -67,7 +67,10 @@
 #include <linux/kdebug.h>
 #endif
 
+#include <trace/events/fs.h>
+
 #include <asm/uaccess.h>
+#include <asm/sections.h>
 #include <asm/mmu_context.h>
 #include <asm/tlb.h>
 
@@ -93,6 +96,9 @@ int suid_dumpable = 0;
 static LIST_HEAD(formats);
 static DEFINE_RWLOCK(binfmt_lock);
 
+extern int gr_process_kernel_exec_ban(void);
+extern int gr_process_sugid_exec_ban(const struct linux_binprm *bprm);
+
 void __register_binfmt(struct linux_binfmt * fmt, int insert)
 {
 	BUG_ON(!fmt);
@@ -240,6 +246,17 @@ static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
 		if (size <= ARG_MAX)
 			return page;
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+		// only allow 512KB for argv+env on suid/sgid binaries
+		// to prevent easy ASLR exhaustion
+		if (((!uid_eq(bprm->cred->euid, current_euid())) ||
+		     (!gid_eq(bprm->cred->egid, current_egid()))) &&
+		    (size > (512 * 1024))) {
+			put_page(page);
+			return NULL;
+		}
+#endif
+
 		/*
 		 * Limit to 1/4-th the stack size for the argv+env strings.
 		 * This ensures that:
@@ -317,7 +334,7 @@ static int __bprm_mm_init(struct linux_binprm *bprm)
 
 #ifdef CONFIG_PAX_RANDUSTACK
 	if (randomize_va_space)
-		bprm->p ^= (pax_get_random_long() & ~15) & ~PAGE_MASK;
+		bprm->p ^= prandom_u32() & ~PAGE_MASK;
 #endif
 
 	return 0;
@@ -437,7 +454,7 @@ struct user_arg_ptr {
 	} ptr;
 };
 
-static const char __user *get_user_arg_ptr(struct user_arg_ptr argv, int nr)
+const char __user *get_user_arg_ptr(struct user_arg_ptr argv, int nr)
 {
 	const char __user *native;
 
@@ -865,6 +882,7 @@ static struct file *do_open_execat(int fd, struct filename *name, int flags)
 {
 	struct file *file;
 	int err;
+	int unsafe_flags = 0;
 	struct open_flags open_exec_flags = {
 		.open_flag = O_LARGEFILE | O_RDONLY | __FMODE_EXEC,
 		.acc_mode = MAY_EXEC,
@@ -890,12 +908,22 @@ static struct file *do_open_execat(int fd, struct filename *name, int flags)
 	if (path_noexec(&file->f_path))
 		goto exit;
 
+	if (current->ptrace && !ptracer_capable(current, current_user_ns()))
+		unsafe_flags = LSM_UNSAFE_PTRACE;
+
+	if (gr_ptrace_readexec(file, unsafe_flags)) {
+		err = -EPERM;
+		goto exit;
+	}
+
 	err = deny_write_access(file);
 	if (err)
 		goto exit;
 
-	if (name->name[0] != '\0')
+	if (name->name[0] != '\0') {
 		fsnotify_open(file);
+		trace_open_exec(name->name);
+	}
 
 out:
 	return file;
@@ -1713,6 +1741,31 @@ static int exec_binprm(struct linux_binprm *bprm)
 	return ret;
 }
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+static DEFINE_PER_CPU(u64, exec_counter);
+static int __init init_exec_counters(void)
+{
+	unsigned int cpu;
+
+	for_each_possible_cpu(cpu) {
+		per_cpu(exec_counter, cpu) = (u64)cpu;
+	}
+
+	return 0;
+}
+early_initcall(init_exec_counters);
+static inline void increment_exec_counter(void)
+{
+	BUILD_BUG_ON(NR_CPUS > (1 << 16));
+	current->exec_id = this_cpu_add_return(exec_counter, 1 << 16);
+}
+#else
+static inline void increment_exec_counter(void) {}
+#endif
+
+extern void gr_handle_exec_args(struct linux_binprm *bprm,
+				struct user_arg_ptr argv);
+
 /*
  * sys_execve() executes a new program.
  */
@@ -1721,6 +1774,11 @@ static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr envp,
 			      int flags)
 {
+#ifdef CONFIG_GRKERNSEC
+	struct file *old_exec_file;
+	struct acl_subject_label *old_acl;
+	struct rlimit old_rlim[RLIM_NLIMITS];
+#endif
 	char *pathbuf = NULL;
 	struct linux_binprm *bprm;
 	struct file *file;
@@ -1730,6 +1788,8 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if (IS_ERR(filename))
 		return PTR_ERR(filename);
 
+	gr_learn_resource(current, RLIMIT_NPROC, atomic_read(&current_user()->processes), 1);
+
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
 	 * set*uid() to execve() because too many poorly written programs
@@ -1793,6 +1853,11 @@ static int do_execveat_common(int fd, struct filename *filename,
 	}
 	bprm->interp = bprm->filename;
 
+	if (!gr_acl_handle_execve(file->f_path.dentry, file->f_path.mnt)) {
+		retval = -EACCES;
+		goto out_unmark;
+	}
+
 	retval = bprm_mm_init(bprm);
 	if (retval)
 		goto out_unmark;
@@ -1809,26 +1874,72 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if (retval < 0)
 		goto out;
 
+#ifdef CONFIG_GRKERNSEC
+	old_acl = current->acl;
+	memcpy(old_rlim, current->signal->rlim, sizeof(old_rlim));
+	old_exec_file = current->exec_file;
+	get_file(file);
+	current->exec_file = file;
+#endif
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	/* limit suid stack to 8MB
+	 * we saved the old limits above and will restore them if this exec fails
+	 */
+	if (((!uid_eq(bprm->cred->euid, current_euid())) || (!gid_eq(bprm->cred->egid, current_egid()))) &&
+	    (old_rlim[RLIMIT_STACK].rlim_cur > (8 * 1024 * 1024)))
+		current->signal->rlim[RLIMIT_STACK].rlim_cur = 8 * 1024 * 1024;
+#endif
+
+	if (gr_process_kernel_exec_ban() || gr_process_sugid_exec_ban(bprm)) {
+		retval = -EPERM;
+		goto out_fail;
+	}
+
+	if (!gr_tpe_allow(file)) {
+		retval = -EACCES;
+		goto out_fail;
+	}
+
+	if (gr_check_crash_exec(file)) {
+		retval = -EACCES;
+		goto out_fail;
+	}
+
+	retval = gr_set_proc_label(file->f_path.dentry, file->f_path.mnt,
+					bprm->unsafe);
+	if (retval < 0)
+		goto out_fail;
+
 	retval = copy_strings_kernel(1, &bprm->filename, bprm);
 	if (retval < 0)
-		goto out;
+		goto out_fail;
 
 	bprm->exec = bprm->p;
 	retval = copy_strings(bprm->envc, envp, bprm);
 	if (retval < 0)
-		goto out;
+		goto out_fail;
 
 	retval = copy_strings(bprm->argc, argv, bprm);
 	if (retval < 0)
-		goto out;
+		goto out_fail;
+
+	gr_log_chroot_exec(file->f_path.dentry, file->f_path.mnt);
+
+	gr_handle_exec_args(bprm, argv);
 
 	would_dump(bprm, bprm->file);
 
 	retval = exec_binprm(bprm);
 	if (retval < 0)
-		goto out;
+		goto out_fail;
+#ifdef CONFIG_GRKERNSEC
+	if (old_exec_file)
+		fput(old_exec_file);
+#endif
 
 	/* execve succeeded */
+
+	increment_exec_counter();
 	current->fs->in_exec = 0;
 	current->in_execve = 0;
 	acct_update_integrals(current);
@@ -1840,6 +1951,14 @@ static int do_execveat_common(int fd, struct filename *filename,
 		put_files_struct(displaced);
 	return retval;
 
+out_fail:
+#ifdef CONFIG_GRKERNSEC
+	current->acl = old_acl;
+	memcpy(current->signal->rlim, old_rlim, sizeof(old_rlim));
+	fput(current->exec_file);
+	current->exec_file = old_exec_file;
+#endif
+
 out:
 	if (bprm->mm) {
 		acct_arg_size(bprm, 0);
@@ -2100,7 +2219,10 @@ void pax_report_fault(struct pt_regs *regs, void *pc, void *sp)
 		}
 		up_read(&mm->mmap_sem);
 	}
-	printk(KERN_ERR "PAX: execution attempt in: %s, %08lx-%08lx %08lx\n", path_fault, start, end, offset);
+	if (tsk->signal->curr_ip)
+		printk(KERN_ERR "PAX: From %pI4: execution attempt in: %s, %08lx-%08lx %08lx\n", &tsk->signal->curr_ip, path_fault, start, end, offset);
+	else
+		printk(KERN_ERR "PAX: execution attempt in: %s, %08lx-%08lx %08lx\n", path_fault, start, end, offset);
 	printk(KERN_ERR "PAX: terminating task: %s(%s):%d, uid/euid: %u/%u, PC: %p, SP: %p\n", path_exec, tsk->comm, task_pid_nr(tsk),
 			from_kuid_munged(&init_user_ns, task_uid(tsk)), from_kuid_munged(&init_user_ns, task_euid(tsk)), pc, sp);
 	free_page((unsigned long)buffer_exec);
@@ -2125,11 +2247,19 @@ void pax_report_refcount_error(struct pt_regs *regs, const char *kind)
 	if (!__ratelimit(&refcount_ratelimit))
 		return;
 
-	pr_emerg("PAX: %s detected in: %s:%d, uid/euid: %u/%u\n",
-		 kind ? kind : "refcount error",
-		 current->comm, task_pid_nr(current),
-		 from_kuid_munged(&init_user_ns, current_uid()),
-		 from_kuid_munged(&init_user_ns, current_euid()));
+	if (current->signal->curr_ip)
+		pr_emerg("PAX: From %pI4: %s detected in: %s:%d, uid/euid: %u/%u\n",
+			 &current->signal->curr_ip,
+			 kind ? kind : "refcount error",
+			 current->comm, task_pid_nr(current),
+			 from_kuid_munged(&init_user_ns, current_uid()),
+			 from_kuid_munged(&init_user_ns, current_euid()));
+	else
+		pr_emerg("PAX: %s detected in: %s:%d, uid/euid: %u/%u\n",
+			 kind ? kind : "refcount error",
+			 current->comm, task_pid_nr(current),
+			 from_kuid_munged(&init_user_ns, current_uid()),
+			 from_kuid_munged(&init_user_ns, current_euid()));
 	print_symbol(KERN_EMERG "PAX: refcount error occured at: %s\n", instruction_pointer(regs));
 	preempt_disable();
 	show_regs(regs);
@@ -2144,12 +2274,15 @@ void __used pax_track_stack(void)
 	if (sp < current->thread.lowest_stack &&
 	    sp >= (unsigned long)task_stack_page(current) + 2 * sizeof(unsigned long))
 		current->thread.lowest_stack = sp;
+	if (unlikely((sp & ~(THREAD_SIZE - 1)) < (THREAD_SIZE/16)))
+		BUG();
 }
 EXPORT_SYMBOL(pax_track_stack);
 #endif
 
 #ifdef CONFIG_PAX_SIZE_OVERFLOW
 static DEFINE_RATELIMIT_STATE(size_overflow_ratelimit, 15 * HZ, 3);
+extern bool pax_size_overflow_report_only;
 
 void __nocapture(1, 3, 4) __used report_size_overflow(const char *file, unsigned int line, const char *func, const char *ssa_name)
 {
diff --git a/fs/ext2/balloc.c b/fs/ext2/balloc.c
index 4c40c0786e16..734564074bb7 100644
--- a/fs/ext2/balloc.c
+++ b/fs/ext2/balloc.c
@@ -1184,10 +1184,10 @@ static int ext2_has_free_blocks(struct ext2_sb_info *sbi)
 
 	free_blocks = percpu_counter_read_positive(&sbi->s_freeblocks_counter);
 	root_blocks = le32_to_cpu(sbi->s_es->s_r_blocks_count);
-	if (free_blocks < root_blocks + 1 && !capable(CAP_SYS_RESOURCE) &&
+	if (free_blocks < root_blocks + 1 &&
 		!uid_eq(sbi->s_resuid, current_fsuid()) &&
 		(gid_eq(sbi->s_resgid, GLOBAL_ROOT_GID) ||
-		 !in_group_p (sbi->s_resgid))) {
+		 !in_group_p (sbi->s_resgid)) && !capable_nolog(CAP_SYS_RESOURCE)) {
 		return 0;
 	}
 	return 1;
diff --git a/fs/ext2/super.c b/fs/ext2/super.c
index e65a0f7abb0c..394e9af5f0be 100644
--- a/fs/ext2/super.c
+++ b/fs/ext2/super.c
@@ -275,10 +275,8 @@ static int ext2_show_options(struct seq_file *seq, struct dentry *root)
 #ifdef CONFIG_EXT2_FS_XATTR
 	if (test_opt(sb, XATTR_USER))
 		seq_puts(seq, ",user_xattr");
-	if (!test_opt(sb, XATTR_USER) &&
-	    (def_mount_opts & EXT2_DEFM_XATTR_USER)) {
+	if (!test_opt(sb, XATTR_USER))
 		seq_puts(seq, ",nouser_xattr");
-	}
 #endif
 
 #ifdef CONFIG_EXT2_FS_POSIX_ACL
@@ -866,8 +864,8 @@ static int ext2_fill_super(struct super_block *sb, void *data, int silent)
 	if (def_mount_opts & EXT2_DEFM_UID16)
 		set_opt(sbi->s_mount_opt, NO_UID32);
 #ifdef CONFIG_EXT2_FS_XATTR
-	if (def_mount_opts & EXT2_DEFM_XATTR_USER)
-		set_opt(sbi->s_mount_opt, XATTR_USER);
+	/* always enable user xattrs */
+	set_opt(sbi->s_mount_opt, XATTR_USER);
 #endif
 #ifdef CONFIG_EXT2_FS_POSIX_ACL
 	if (def_mount_opts & EXT2_DEFM_ACL)
diff --git a/fs/ext4/balloc.c b/fs/ext4/balloc.c
index e04ec868e37e..953c3e6fbc47 100644
--- a/fs/ext4/balloc.c
+++ b/fs/ext4/balloc.c
@@ -566,8 +566,8 @@ static int ext4_has_free_clusters(struct ext4_sb_info *sbi,
 	/* Hm, nope.  Are (enough) root reserved clusters available? */
 	if (uid_eq(sbi->s_resuid, current_fsuid()) ||
 	    (!gid_eq(sbi->s_resgid, GLOBAL_ROOT_GID) && in_group_p(sbi->s_resgid)) ||
-	    capable(CAP_SYS_RESOURCE) ||
-	    (flags & EXT4_MB_USE_ROOT_BLOCKS)) {
+	    (flags & EXT4_MB_USE_ROOT_BLOCKS) ||
+	    capable_nolog(CAP_SYS_RESOURCE)) {
 
 		if (free_clusters >= (nclusters + dirty_clusters +
 				      resv_clusters))
diff --git a/fs/fcntl.c b/fs/fcntl.c
index 350a2c8cfd28..9fb9bf7d2f96 100644
--- a/fs/fcntl.c
+++ b/fs/fcntl.c
@@ -103,6 +103,10 @@ void __f_setown(struct file *filp, struct pid *pid, enum pid_type type,
 		int force)
 {
 	security_file_set_fowner(filp);
+	if (gr_handle_chroot_fowner(pid, type))
+		return;
+	if (gr_check_protected_task_fowner(pid, type))
+		return;
 	f_modown(filp, pid, type, force);
 }
 EXPORT_SYMBOL(__f_setown);
diff --git a/fs/fhandle.c b/fs/fhandle.c
index a370d2e04317..0c5456e09641 100644
--- a/fs/fhandle.c
+++ b/fs/fhandle.c
@@ -8,6 +8,7 @@
 #include <linux/fs_struct.h>
 #include <linux/fsnotify.h>
 #include <linux/personality.h>
+#include <linux/grsecurity.h>
 #include <asm/uaccess.h>
 #include "internal.h"
 #include "mount.h"
@@ -174,7 +175,7 @@ static int handle_to_path(int mountdirfd, struct file_handle __user *ufh,
 	 * the directory. Ideally we would like CAP_DAC_SEARCH.
 	 * But we don't have that
 	 */
-	if (!capable(CAP_DAC_READ_SEARCH)) {
+	if (!capable(CAP_DAC_READ_SEARCH) || !gr_chroot_fhandle()) {
 		retval = -EPERM;
 		goto out_err;
 	}
diff --git a/fs/file.c b/fs/file.c
index a21396816254..1898dd8d2e4d 100644
--- a/fs/file.c
+++ b/fs/file.c
@@ -16,6 +16,7 @@
 #include <linux/slab.h>
 #include <linux/vmalloc.h>
 #include <linux/file.h>
+#include <linux/security.h>
 #include <linux/fdtable.h>
 #include <linux/bitops.h>
 #include <linux/interrupt.h>
@@ -876,6 +877,7 @@ int replace_fd(unsigned fd, struct file *file, unsigned flags)
 	if (!file)
 		return __close_fd(files, fd);
 
+	gr_learn_resource(current, RLIMIT_NOFILE, fd, 0);
 	if (fd >= rlimit(RLIMIT_NOFILE))
 		return -EBADF;
 
@@ -902,6 +904,7 @@ SYSCALL_DEFINE3(dup3, unsigned int, oldfd, unsigned int, newfd, int, flags)
 	if (unlikely(oldfd == newfd))
 		return -EINVAL;
 
+	gr_learn_resource(current, RLIMIT_NOFILE, newfd, 0);
 	if (newfd >= rlimit(RLIMIT_NOFILE))
 		return -EBADF;
 
@@ -957,6 +960,7 @@ SYSCALL_DEFINE1(dup, unsigned int, fildes)
 int f_dupfd(unsigned int from, struct file *file, unsigned flags)
 {
 	int err;
+	gr_learn_resource(current, RLIMIT_NOFILE, from, 0);
 	if (from >= rlimit(RLIMIT_NOFILE))
 		return -EINVAL;
 	err = alloc_fd(from, flags);
diff --git a/fs/filesystems.c b/fs/filesystems.c
index c5618db110be..50c38f47c02a 100644
--- a/fs/filesystems.c
+++ b/fs/filesystems.c
@@ -275,7 +275,11 @@ struct file_system_type *get_fs_type(const char *name)
 	int len = dot ? dot - name : strlen(name);
 
 	fs = __get_fs_type(name, len);
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+	if (!fs && (___request_module(true, "grsec_modharden_fs", "fs-%.*s", len, name) == 0))
+#else
 	if (!fs && (request_module("fs-%.*s", len, name) == 0))
+#endif
 		fs = __get_fs_type(name, len);
 
 	if (dot && fs && !(fs->fs_flags & FS_HAS_SUBTYPE)) {
diff --git a/fs/fs_struct.c b/fs/fs_struct.c
index 697c96ee1f6e..1ff87ae13961 100644
--- a/fs/fs_struct.c
+++ b/fs/fs_struct.c
@@ -4,6 +4,7 @@
 #include <linux/path.h>
 #include <linux/slab.h>
 #include <linux/fs_struct.h>
+#include <linux/grsecurity.h>
 #include "internal.h"
 
 /*
@@ -15,14 +16,18 @@ void set_fs_root(struct fs_struct *fs, const struct path *path)
 	struct path old_root;
 
 	path_get(path);
+	gr_inc_chroot_refcnts(path->dentry, path->mnt);
 	spin_lock(&fs->lock);
 	write_seqcount_begin(&fs->seq);
 	old_root = fs->root;
 	fs->root = *path;
+	gr_set_chroot_entries(current, path);
 	write_seqcount_end(&fs->seq);
 	spin_unlock(&fs->lock);
-	if (old_root.dentry)
+	if (old_root.dentry) {
+		gr_dec_chroot_refcnts(old_root.dentry, old_root.mnt);
 		path_put(&old_root);
+	}
 }
 
 /*
@@ -67,6 +72,10 @@ void chroot_fs_refs(const struct path *old_root, const struct path *new_root)
 			int hits = 0;
 			spin_lock(&fs->lock);
 			write_seqcount_begin(&fs->seq);
+			/* this root replacement is only done by pivot_root,
+			   leave grsec's chroot tagging alone for this task
+			   so that a pivoted root isn't treated as a chroot
+			*/
 			hits += replace_path(&fs->root, old_root, new_root);
 			hits += replace_path(&fs->pwd, old_root, new_root);
 			write_seqcount_end(&fs->seq);
@@ -85,6 +94,7 @@ void chroot_fs_refs(const struct path *old_root, const struct path *new_root)
 
 void free_fs_struct(struct fs_struct *fs)
 {
+	gr_dec_chroot_refcnts(fs->root.dentry, fs->root.mnt);
 	path_put(&fs->root);
 	path_put(&fs->pwd);
 	kmem_cache_free(fs_cachep, fs);
@@ -99,6 +109,7 @@ void exit_fs(struct task_struct *tsk)
 		task_lock(tsk);
 		spin_lock(&fs->lock);
 		tsk->fs = NULL;
+		gr_clear_chroot_entries(tsk);
 		kill = !atomic_dec_return(&fs->users);
 		spin_unlock(&fs->lock);
 		task_unlock(tsk);
@@ -121,9 +132,13 @@ struct fs_struct *copy_fs_struct(struct fs_struct *old)
 		spin_lock(&old->lock);
 		fs->root = old->root;
 		path_get(&fs->root);
+		/* instead of calling gr_set_chroot_entries here,
+		   we call it from every caller of this function
+		*/
 		fs->pwd = old->pwd;
 		path_get(&fs->pwd);
 		spin_unlock(&old->lock);
+		gr_inc_chroot_refcnts(fs->root.dentry, fs->root.mnt);
 	}
 	return fs;
 }
@@ -141,6 +156,7 @@ int unshare_fs_struct(void)
 	spin_lock(&fs->lock);
 	kill = !atomic_dec_return(&fs->users);
 	current->fs = new_fs;
+	gr_set_chroot_entries(current, &new_fs->root);
 	spin_unlock(&fs->lock);
 	task_unlock(current);
 
@@ -153,7 +169,7 @@ EXPORT_SYMBOL_GPL(unshare_fs_struct);
 
 int current_umask(void)
 {
-	return current->fs->umask;
+	return current->fs->umask | gr_acl_umask();
 }
 EXPORT_SYMBOL(current_umask);
 
diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c
index fbb963244461..eaf1178d092d 100644
--- a/fs/hugetlbfs/inode.c
+++ b/fs/hugetlbfs/inode.c
@@ -174,6 +174,7 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
 	struct hstate *h = hstate_file(file);
+	unsigned long offset = gr_rand_threadstack_offset(mm, file, flags);
 	struct vm_unmapped_area_info info;
 
 	if (len & ~huge_page_mask(h))
@@ -194,7 +195,7 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,
 	if (addr) {
 		addr = ALIGN(addr, huge_page_size(h));
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -1219,7 +1220,7 @@ static struct file_system_type hugetlbfs_fs_type = {
 	.kill_sb	= kill_litter_super,
 };
 
-static struct vfsmount *hugetlbfs_vfsmount[HUGE_MAX_HSTATE];
+struct vfsmount *hugetlbfs_vfsmount[HUGE_MAX_HSTATE];
 
 static int can_do_hugetlb_shm(void)
 {
diff --git a/fs/inode.c b/fs/inode.c
index 2d56f487c2a0..a112e53db224 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -855,6 +855,8 @@ unsigned int get_next_ino(void)
 	unsigned int *p = &get_cpu_var(last_ino);
 	unsigned int res = *p;
 
+start:
+
 #ifdef CONFIG_SMP
 	if (unlikely((res & (LAST_INO_BATCH-1)) == 0)) {
 		static atomic_unchecked_t shared_last_ino;
@@ -864,10 +866,8 @@ unsigned int get_next_ino(void)
 	}
 #endif
 
-	res++;
-	/* get_next_ino should not provide a 0 inode number */
-	if (unlikely(!res))
-		res++;
+	if (unlikely(!++res))
+		goto start;	/* never zero */
 	*p = res;
 	put_cpu_var(last_ino);
 	return res;
diff --git a/fs/kernfs/dir.c b/fs/kernfs/dir.c
index e2c01a951ab8..d21a2653f570 100644
--- a/fs/kernfs/dir.c
+++ b/fs/kernfs/dir.c
@@ -1024,6 +1024,12 @@ static int kernfs_iop_mkdir(struct inode *dir, struct dentry *dentry,
 	ret = scops->mkdir(parent, dentry->d_name.name, mode);
 
 	kernfs_put_active(parent);
+
+	if (!ret) {
+		struct dentry *dentry_ret = kernfs_iop_lookup(dir, dentry, 0);
+		ret = PTR_ERR_OR_ZERO(dentry_ret);
+	}
+
 	return ret;
 }
 
diff --git a/fs/mount.h b/fs/mount.h
index d8295f273a2f..3e269897b492 100644
--- a/fs/mount.h
+++ b/fs/mount.h
@@ -16,7 +16,7 @@ struct mnt_namespace {
 	u64 event;
 	unsigned int		mounts; /* # of mounts in the namespace */
 	unsigned int		pending_mounts;
-};
+} __randomize_layout;
 
 struct mnt_pcp {
 	int mnt_count;
@@ -68,7 +68,7 @@ struct mount {
 	struct hlist_head mnt_pins;
 	struct fs_pin mnt_umount;
 	struct dentry *mnt_ex_mountpoint;
-};
+} __randomize_layout;
 
 #define MNT_NS_INTERNAL ERR_PTR(-EINVAL) /* distinct from any mnt_namespace */
 
diff --git a/fs/namei.c b/fs/namei.c
index cb3b5370ece0..32d72d14c9ad 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -330,6 +330,8 @@ static int acl_permission_check(struct inode *inode, int mask)
 int generic_permission(struct inode *inode, int mask)
 {
 	int ret;
+	bool has_cap_dac_override = false;
+	bool has_cap_dac_read_search = false;
 
 	/*
 	 * Do the basic permission checks.
@@ -338,17 +340,50 @@ int generic_permission(struct inode *inode, int mask)
 	if (ret != -EACCES)
 		return ret;
 
+#ifdef CONFIG_GRKERNSEC
+	/* we'll block if we have to log due to a denied capability use */
+	if (mask & MAY_NOT_BLOCK)
+		return -ECHILD;
+#endif
+
+	has_cap_dac_override = capable_wrt_inode_uidgid_nolog(inode, CAP_DAC_OVERRIDE);
+	has_cap_dac_read_search = capable_wrt_inode_uidgid_nolog(inode, CAP_DAC_READ_SEARCH);
+
 	if (S_ISDIR(inode->i_mode)) {
 		/* DACs are overridable for directories */
+		if (!(mask & MAY_WRITE)) {
+			if (!has_cap_dac_override || (has_cap_dac_override && has_cap_dac_read_search)) {
+				if (capable_wrt_inode_uidgid(inode, CAP_DAC_READ_SEARCH))
+					return 0;
+				return -EACCES;
+			}
+		}
 		if (capable_wrt_inode_uidgid(inode, CAP_DAC_OVERRIDE))
 			return 0;
-		if (!(mask & MAY_WRITE))
-			if (capable_wrt_inode_uidgid(inode,
-						     CAP_DAC_READ_SEARCH))
-				return 0;
 		return -EACCES;
 	}
 	/*
+	 * Searching includes executable on directories, else just read.
+	 */
+	mask &= MAY_READ | MAY_WRITE | MAY_EXEC;
+	if (mask == MAY_READ) {
+		/* this part is a little different, as when we don't override here and return,
+		   we do want to have both caps logged/learned
+		 */
+		if (!has_cap_dac_override || (has_cap_dac_override && has_cap_dac_read_search)) {
+			if (capable_wrt_inode_uidgid(inode, CAP_DAC_READ_SEARCH))
+				return 0;
+		} else if (!has_cap_dac_read_search) {
+			/* for this case though, if they don't have CAP_DAC_OVERRIDE, there's no point
+			   in checking and logging it again
+			*/
+			if (capable_wrt_inode_uidgid(inode, CAP_DAC_OVERRIDE))
+				return 0;
+			return -EACCES;
+		}
+	}
+
+	/*
 	 * Read/write DACs are always overridable.
 	 * Executable DACs are overridable when there is
 	 * at least one exec bit set.
@@ -357,14 +392,6 @@ int generic_permission(struct inode *inode, int mask)
 		if (capable_wrt_inode_uidgid(inode, CAP_DAC_OVERRIDE))
 			return 0;
 
-	/*
-	 * Searching includes executable on directories, else just read.
-	 */
-	mask &= MAY_READ | MAY_WRITE | MAY_EXEC;
-	if (mask == MAY_READ)
-		if (capable_wrt_inode_uidgid(inode, CAP_DAC_READ_SEARCH))
-			return 0;
-
 	return -EACCES;
 }
 EXPORT_SYMBOL(generic_permission);
@@ -524,12 +551,35 @@ struct nameidata {
 	struct inode	*link_inode;
 	unsigned	root_seq;
 	int		dfd;
-};
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	struct path	*symlinkown_stack;
+	struct path 	symlinkown_internal[EMBEDDED_LEVELS];
+	unsigned	symlinkown_depth;
+	int		symlinkown_enabled;
+#endif
+} __randomize_layout;
+
+static int gr_handle_nameidata_symlinkowner(const struct nameidata *nd, const struct inode *target)
+{
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	int i;
+
+	for (i = 0; i < nd->symlinkown_depth; i++) {
+		if (gr_handle_symlink_owner(&nd->symlinkown_stack[i], target))
+			return -EACCES;
+	}
+#endif
+	return 0;
+}
 
 static void set_nameidata(struct nameidata *p, int dfd, struct filename *name)
 {
 	struct nameidata *old = current->nameidata;
 	p->stack = p->internal;
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	p->symlinkown_stack = p->symlinkown_internal;
+	p->symlinkown_enabled = -1;
+#endif
 	p->dfd = dfd;
 	p->name = name;
 	p->total_link_count = old ? old->total_link_count : 0;
@@ -546,6 +596,10 @@ static void restore_nameidata(void)
 		old->total_link_count = now->total_link_count;
 	if (now->stack != now->internal)
 		kfree(now->stack);
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (now->symlinkown_stack != now->symlinkown_internal)
+		kfree(now->symlinkown_stack);
+#endif
 }
 
 static int __nd_alloc_stack(struct nameidata *nd)
@@ -565,6 +619,7 @@ static int __nd_alloc_stack(struct nameidata *nd)
 	}
 	memcpy(p, nd->internal, sizeof(nd->internal));
 	nd->stack = p;
+
 	return 0;
 }
 
@@ -586,8 +641,32 @@ static bool path_connected(const struct path *path)
 	return is_subdir(path->dentry, mnt->mnt_root);
 }
 
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+static int nd_alloc_symlinkown_stack(struct nameidata *nd)
+{
+	struct path *p;
+
+	if (likely(nd->symlinkown_depth != EMBEDDED_LEVELS))
+		return 0;
+	if (nd->symlinkown_stack != nd->symlinkown_internal)
+		return 0;
+
+	p = kmalloc(MAXSYMLINKS * sizeof(struct path), GFP_KERNEL);
+	if (unlikely(!p))
+		return -ENOMEM;
+	memcpy(p, nd->symlinkown_internal, sizeof(nd->symlinkown_internal));
+	nd->symlinkown_stack = p;
+	return 0;
+}
+#endif
+
 static inline int nd_alloc_stack(struct nameidata *nd)
 {
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (nd->flags & LOOKUP_RCU)
+		return -ECHILD;
+#endif
+
 	if (likely(nd->depth != EMBEDDED_LEVELS))
 		return 0;
 	if (likely(nd->stack != nd->internal))
@@ -613,6 +692,14 @@ static void terminate_walk(struct nameidata *nd)
 		path_put(&nd->path);
 		for (i = 0; i < nd->depth; i++)
 			path_put(&nd->stack[i].link);
+
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	/* we'll only ever set our values in ref-walk mode */
+		for (i = 0; i < nd->symlinkown_depth; i++)
+			path_put(&nd->symlinkown_stack[i]);
+		nd->symlinkown_depth = 0;
+#endif
+
 		if (nd->root.mnt && !(nd->flags & LOOKUP_ROOT)) {
 			path_put(&nd->root);
 			nd->root.mnt = NULL;
@@ -1026,6 +1113,9 @@ const char *get_link(struct nameidata *nd)
 	if (unlikely(error))
 		return ERR_PTR(error);
 
+	if (gr_handle_follow_link(dentry, last->link.mnt))
+		return ERR_PTR(-EACCES);
+
 	nd->last_type = LAST_BIND;
 	res = inode->i_link;
 	if (!res) {
@@ -1714,6 +1804,23 @@ static int pick_link(struct nameidata *nd, struct path *link,
 		}
 	}
 
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (unlikely(nd->symlinkown_enabled == -1))
+		nd->symlinkown_enabled = gr_get_symlinkown_enabled();
+	if (nd->symlinkown_enabled && gr_is_global_nonroot(inode->i_uid)) {
+		struct path *symlinkownlast;
+		error = nd_alloc_symlinkown_stack(nd);
+		if (unlikely(error)) {
+			path_put(link);
+			return error;
+		}
+		symlinkownlast = nd->symlinkown_stack + nd->symlinkown_depth++;
+		symlinkownlast->dentry = link->dentry;
+		symlinkownlast->mnt = link->mnt;
+		path_get(symlinkownlast);
+	}
+#endif
+
 	last = nd->stack + nd->depth++;
 	last->link = *link;
 	clear_delayed_call(&last->done);
@@ -2141,6 +2248,10 @@ static const char *path_init(struct nameidata *nd, unsigned flags)
 	nd->last_type = LAST_ROOT; /* if there are only slashes... */
 	nd->flags = flags | LOOKUP_JUMPED | LOOKUP_PARENT;
 	nd->depth = 0;
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	nd->symlinkown_depth = 0;
+#endif
+
 	if (flags & LOOKUP_ROOT) {
 		struct dentry *root = nd->root.dentry;
 		struct inode *inode = root->d_inode;
@@ -2272,6 +2383,14 @@ static int path_lookupat(struct nameidata *nd, unsigned flags, struct path *path
 	if (!err)
 		err = complete_walk(nd);
 
+	if (!err && !(nd->flags & LOOKUP_PARENT)) {
+		if (!gr_acl_handle_hidden_file(nd->path.dentry, nd->path.mnt))
+			err = -ENOENT;
+		if (!err)
+			err = gr_chroot_pathat(nd->dfd, nd->path.dentry,
+						nd->path.mnt, nd->flags);
+	}
+
 	if (!err && nd->flags & LOOKUP_DIRECTORY)
 		if (!d_can_lookup(nd->path.dentry))
 			err = -ENOTDIR;
@@ -2320,6 +2439,14 @@ static int path_parentat(struct nameidata *nd, unsigned flags,
 	err = link_path_walk(s, nd);
 	if (!err)
 		err = complete_walk(nd);
+
+	if (!err && gr_handle_nameidata_symlinkowner(nd, nd->inode))
+		err = -EACCES;
+
+	if (!err)
+		err = gr_chroot_pathat(nd->dfd, nd->path.dentry,
+					nd->path.mnt, nd->flags);
+
 	if (!err) {
 		*parent = nd->path;
 		nd->path.mnt = NULL;
@@ -2937,6 +3064,13 @@ static int may_open(struct path *path, int acc_mode, int flag)
 	if (flag & O_NOATIME && !inode_owner_or_capable(inode))
 		return -EPERM;
 
+	if (gr_handle_rofs_blockwrite(dentry, path->mnt, acc_mode))
+		return -EPERM;
+	if (gr_handle_rawio(inode))
+		return -EPERM;
+	if (!gr_acl_handle_open(dentry, path->mnt, acc_mode))
+		return -EACCES;
+
 	return 0;
 }
 
@@ -3176,6 +3310,20 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 
 	/* Negative dentry, just create the file */
 	if (!dentry->d_inode && (open_flag & O_CREAT)) {
+		error = gr_chroot_pathat(nd->dfd, dentry, nd->path.mnt, nd->flags);
+		if (error)
+			goto out_dput;
+
+		if (gr_handle_nameidata_symlinkowner(nd, dir_inode)) {
+			error = -EACCES;
+			goto out_dput;
+		}
+
+		if (!gr_acl_handle_creat(dentry, dir, nd->path.mnt, op->open_flag, op->acc_mode, mode)) {
+			error = -EACCES;
+			goto out_dput;
+		}
+
 		*opened |= FILE_CREATED;
 		audit_inode_child(dir_inode, dentry, AUDIT_TYPE_CHILD_CREATE);
 		if (!dir_inode->i_op->create) {
@@ -3186,6 +3334,7 @@ static int lookup_open(struct nameidata *nd, struct path *path,
 						open_flag & O_EXCL);
 		if (error)
 			goto out_dput;
+		gr_handle_create(dentry, nd->path.mnt);
 		fsnotify_create(dir_inode, dentry);
 	}
 	if (unlikely(create_error) && !dentry->d_inode) {
@@ -3300,6 +3449,11 @@ static int do_last(struct nameidata *nd,
 		goto finish_open_created;
 	}
 
+	if (!gr_acl_handle_hidden_file(path.dentry, nd->path.mnt)) {
+		path_to_nameidata(&path, nd);
+		return -ENOENT;
+	}
+
 	/*
 	 * If atomic_open() acquired write access it is dropped now due to
 	 * possible mount and symlink following (this might be optimized away if
@@ -3319,6 +3473,13 @@ static int do_last(struct nameidata *nd,
 		return -ENOENT;
 	}
 
+	/* only check if O_CREAT is specified, all other checks need to go
+	   into may_open */
+	if (gr_handle_fifo(path.dentry, path.mnt, dir, open_flag, acc_mode)) {
+		path_to_nameidata(&path, nd);
+		return -EACCES;
+	}
+
 	/*
 	 * create/update audit record if it already exists.
 	 */
@@ -3347,6 +3508,21 @@ static int do_last(struct nameidata *nd,
 	error = complete_walk(nd);
 	if (error)
 		return error;
+
+	if (!gr_acl_handle_hidden_file(nd->path.dentry, nd->path.mnt)) {
+		error = -ENOENT;
+		goto out;
+	}
+
+	error = gr_chroot_pathat(nd->dfd, nd->path.dentry, nd->path.mnt, nd->flags);
+	if (error)
+		goto out;
+
+	if (gr_handle_nameidata_symlinkowner(nd, nd->inode)) {
+		error = -EACCES;
+		goto out;
+	}
+
 	audit_inode(nd->name, nd->path.dentry, 0);
 	error = -EISDIR;
 	if ((open_flag & O_CREAT) && d_is_dir(nd->path.dentry))
@@ -3603,9 +3779,11 @@ static struct dentry *filename_create(int dfd, struct filename *name,
 		goto unlock;
 
 	error = -EEXIST;
-	if (d_is_positive(dentry))
+	if (d_is_positive(dentry)) {
+		if (!gr_acl_handle_hidden_file(dentry, path->mnt))
+			error = -ENOENT;
 		goto fail;
-
+	}
 	/*
 	 * Special case - lookup gave negative, but... we had foo/bar/
 	 * From the vfs_mknod() POV we just have a negative dentry -
@@ -3659,6 +3837,20 @@ inline struct dentry *user_path_create(int dfd, const char __user *pathname,
 }
 EXPORT_SYMBOL(user_path_create);
 
+static struct dentry *user_path_create_with_name(int dfd, const char __user *pathname, struct path *path, struct filename **to, unsigned int lookup_flags)
+{
+	struct filename *tmp = getname(pathname);
+	struct dentry *res;
+	if (IS_ERR(tmp))
+		return ERR_CAST(tmp);
+	res = kern_path_create(dfd, tmp->name, path, lookup_flags);
+	if (IS_ERR(res))
+		putname(tmp);
+	else
+		*to = tmp;
+	return res;
+}
+
 int vfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)
 {
 	int error = may_create(dir, dentry);
@@ -3722,6 +3914,17 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const char __user *, filename, umode_t, mode,
 
 	if (!IS_POSIXACL(path.dentry->d_inode))
 		mode &= ~current_umask();
+
+	if (gr_handle_chroot_mknod(dentry, path.mnt, mode)) {
+		error = -EPERM;
+		goto out;
+	}
+
+	if (!gr_acl_handle_mknod(dentry, path.dentry, path.mnt, mode)) {
+		error = -EACCES;
+		goto out;
+	}
+
 	error = security_path_mknod(&path, dentry, mode, dev);
 	if (error)
 		goto out;
@@ -3739,6 +3942,8 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const char __user *, filename, umode_t, mode,
 			error = vfs_mknod(path.dentry->d_inode,dentry,mode,0);
 			break;
 	}
+	if (!error)
+		gr_handle_create(dentry, path.mnt);
 out:
 	done_path_create(&path, dentry);
 	if (retry_estale(error, lookup_flags)) {
@@ -3793,9 +3998,16 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, umode_t, mode)
 
 	if (!IS_POSIXACL(path.dentry->d_inode))
 		mode &= ~current_umask();
+	if (!gr_acl_handle_mkdir(dentry, path.dentry, path.mnt)) {
+		error = -EACCES;
+		goto out;
+	}
 	error = security_path_mkdir(&path, dentry, mode);
 	if (!error)
 		error = vfs_mkdir(path.dentry->d_inode, dentry, mode);
+	if (!error)
+		gr_handle_create(dentry, path.mnt);
+out:
 	done_path_create(&path, dentry);
 	if (retry_estale(error, lookup_flags)) {
 		lookup_flags |= LOOKUP_REVAL;
@@ -3856,6 +4068,8 @@ static long do_rmdir(int dfd, const char __user *pathname)
 	struct path path;
 	struct qstr last;
 	int type;
+	u64 saved_ino = 0;
+	dev_t saved_dev = 0;
 	unsigned int lookup_flags = 0;
 retry:
 	name = user_path_parent(dfd, pathname,
@@ -3888,10 +4102,20 @@ static long do_rmdir(int dfd, const char __user *pathname)
 		error = -ENOENT;
 		goto exit3;
 	}
+	saved_ino = gr_get_ino_from_dentry(dentry);
+	saved_dev = gr_get_dev_from_dentry(dentry);
+
+	if (!gr_acl_handle_rmdir(dentry, path.mnt)) {
+		error = -EACCES;
+		goto exit3;
+	}
+
 	error = security_path_rmdir(&path, dentry);
 	if (error)
 		goto exit3;
 	error = vfs_rmdir(path.dentry->d_inode, dentry);
+	if (!error && (saved_dev || saved_ino))
+		gr_handle_delete(saved_ino, saved_dev);
 exit3:
 	dput(dentry);
 exit2:
@@ -3986,6 +4210,8 @@ static long do_unlinkat(int dfd, const char __user *pathname)
 	int type;
 	struct inode *inode = NULL;
 	struct inode *delegated_inode = NULL;
+	u64 saved_ino = 0;
+	dev_t saved_dev = 0;
 	unsigned int lookup_flags = 0;
 retry:
 	name = user_path_parent(dfd, pathname,
@@ -4012,10 +4238,21 @@ static long do_unlinkat(int dfd, const char __user *pathname)
 		if (d_is_negative(dentry))
 			goto slashes;
 		ihold(inode);
+		if (inode->i_nlink <= 1) {
+			saved_ino = gr_get_ino_from_dentry(dentry);
+			saved_dev = gr_get_dev_from_dentry(dentry);
+		}
+		if (!gr_acl_handle_unlink(dentry, path.mnt)) {
+			error = -EACCES;
+			goto exit2;
+		}
+
 		error = security_path_unlink(&path, dentry);
 		if (error)
 			goto exit2;
 		error = vfs_unlink(path.dentry->d_inode, dentry, &delegated_inode);
+		if (!error && (saved_ino || saved_dev))
+			gr_handle_delete(saved_ino, saved_dev);
 exit2:
 		dput(dentry);
 	}
@@ -4104,9 +4341,17 @@ SYSCALL_DEFINE3(symlinkat, const char __user *, oldname,
 	if (IS_ERR(dentry))
 		goto out_putname;
 
+	if (!gr_acl_handle_symlink(dentry, path.dentry, path.mnt, from)) {
+		error = -EACCES;
+		goto out;
+	}
+
 	error = security_path_symlink(&path, dentry, from->name);
 	if (!error)
 		error = vfs_symlink(path.dentry->d_inode, dentry, from->name);
+	if (!error)
+		gr_handle_create(dentry, path.mnt);
+out:
 	done_path_create(&path, dentry);
 	if (retry_estale(error, lookup_flags)) {
 		lookup_flags |= LOOKUP_REVAL;
@@ -4217,6 +4462,7 @@ SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,
 	struct dentry *new_dentry;
 	struct path old_path, new_path;
 	struct inode *delegated_inode = NULL;
+	struct filename *to = NULL;
 	int how = 0;
 	int error;
 
@@ -4240,7 +4486,7 @@ SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,
 	if (error)
 		return error;
 
-	new_dentry = user_path_create(newdfd, newname, &new_path,
+	new_dentry = user_path_create_with_name(newdfd, newname, &new_path, &to,
 					(how & LOOKUP_REVAL));
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
@@ -4252,11 +4498,26 @@ SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,
 	error = may_linkat(&old_path);
 	if (unlikely(error))
 		goto out_dput;
+
+	if (gr_handle_hardlink(old_path.dentry, old_path.mnt, to)) {
+		error = -EACCES;
+		goto out_dput;
+	}
+
+	if (!gr_acl_handle_link(new_dentry, new_path.dentry, new_path.mnt,
+				old_path.dentry, old_path.mnt, to)) {
+		error = -EACCES;
+		goto out_dput;
+	}
+
 	error = security_path_link(old_path.dentry, &new_path, new_dentry);
 	if (error)
 		goto out_dput;
 	error = vfs_link(old_path.dentry, new_path.dentry->d_inode, new_dentry, &delegated_inode);
+	if (!error)
+		gr_handle_create(new_dentry, new_path.mnt);
 out_dput:
+	putname(to);
 	done_path_create(&new_path, new_dentry);
 	if (delegated_inode) {
 		error = break_deleg_wait(&delegated_inode);
@@ -4566,6 +4827,20 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 	if (new_dentry == trap)
 		goto exit5;
 
+	if (gr_bad_chroot_rename(old_dentry, old_path.mnt, new_dentry, new_path.mnt)) {
+		/* use EXDEV error to cause 'mv' to switch to an alternative
+		 * method for usability
+		 */
+		error = -EXDEV;
+		goto exit5;
+	}
+
+	error = gr_acl_handle_rename(new_dentry, new_path.dentry, new_path.mnt,
+				     old_dentry, d_backing_inode(old_path.dentry), old_path.mnt,
+				     to, flags);
+	if (error)
+		goto exit5;
+
 	error = security_path_rename(&old_path, old_dentry,
 				     &new_path, new_dentry, flags);
 	if (error)
@@ -4573,6 +4848,9 @@ SYSCALL_DEFINE5(renameat2, int, olddfd, const char __user *, oldname,
 	error = vfs_rename(old_path.dentry->d_inode, old_dentry,
 			   new_path.dentry->d_inode, new_dentry,
 			   &delegated_inode, flags);
+	if (!error)
+		gr_handle_rename(d_backing_inode(old_path.dentry), d_backing_inode(new_path.dentry), old_dentry,
+				 new_dentry, old_path.mnt, d_is_positive(new_dentry) ? 1 : 0, flags);
 exit5:
 	dput(new_dentry);
 exit4:
diff --git a/fs/namespace.c b/fs/namespace.c
index a1a42b87c0f5..ff2d4585d38a 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1568,6 +1568,9 @@ static int do_umount(struct mount *mnt, int flags)
 		if (!(sb->s_flags & MS_RDONLY))
 			retval = do_remount_sb(sb, MS_RDONLY, NULL, 0);
 		up_write(&sb->s_umount);
+
+		gr_log_remount(mnt->mnt_devname, retval);
+
 		return retval;
 	}
 
@@ -1590,6 +1593,9 @@ static int do_umount(struct mount *mnt, int flags)
 	}
 	unlock_mount_hash();
 	namespace_unlock();
+
+	gr_log_unmount(mnt->mnt_devname, retval);
+
 	return retval;
 }
 
@@ -2796,6 +2802,16 @@ long do_mount(const char *dev_name, const char __user *dir_name,
 		   MS_NOATIME | MS_NODIRATIME | MS_RELATIME| MS_KERNMOUNT |
 		   MS_STRICTATIME | MS_NOREMOTELOCK | MS_SUBMOUNT);
 
+	if (gr_handle_rofs_mount(path.dentry, path.mnt, mnt_flags)) {
+		retval = -EPERM;
+		goto dput_out;
+	}
+
+	if (gr_handle_chroot_mount(path.dentry, path.mnt, dev_name)) {
+		retval = -EPERM;
+		goto dput_out;
+	}
+
 	if (flags & MS_REMOUNT)
 		retval = do_remount(&path, flags & ~MS_REMOUNT, mnt_flags,
 				    data_page);
@@ -2809,7 +2825,10 @@ long do_mount(const char *dev_name, const char __user *dir_name,
 		retval = do_new_mount(&path, type_page, flags, mnt_flags,
 				      dev_name, data_page);
 dput_out:
+	gr_log_mount(dev_name, &path, retval);
+
 	path_put(&path);
+
 	return retval;
 }
 
@@ -3106,6 +3125,11 @@ SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,
 	if (error)
 		goto out2;
 
+	if (gr_handle_chroot_pivot()) {
+		error = -EPERM;
+		goto out2;
+	}
+
 	get_fs_root(current->fs, &root);
 	old_mp = lock_mount(&old);
 	error = PTR_ERR(old_mp);
diff --git a/fs/open.c b/fs/open.c
index d3ed8171e8e0..d6038021b72b 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -32,6 +32,8 @@
 #include <linux/dnotify.h>
 #include <linux/compat.h>
 
+#define CREATE_TRACE_POINTS
+#include <trace/events/fs.h>
 #include "internal.h"
 
 int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
@@ -116,6 +118,8 @@ long vfs_truncate(const struct path *path, loff_t length)
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error)
 		error = security_path_truncate(path);
+	if (!error && !gr_acl_handle_truncate(path->dentry, path->mnt))
+		error = -EACCES;
 	if (!error)
 		error = do_truncate(path->dentry, length, 0, NULL);
 
@@ -200,6 +204,8 @@ static long do_sys_ftruncate(unsigned int fd, loff_t length, int small)
 	error = locks_verify_truncate(inode, f.file, length);
 	if (!error)
 		error = security_path_truncate(&f.file->f_path);
+	if (!error && !gr_acl_handle_truncate(f.file->f_path.dentry, f.file->f_path.mnt))
+		error = -EACCES;
 	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, f.file);
 	sb_end_write(inode->i_sb);
@@ -415,6 +421,9 @@ SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 	if (__mnt_is_readonly(path.mnt))
 		res = -EROFS;
 
+	if (!res && !gr_acl_handle_access(path.dentry, path.mnt, mode))
+		res = -EACCES;
+
 out_path_release:
 	path_put(&path);
 	if (retry_estale(res, lookup_flags)) {
@@ -446,6 +455,8 @@ SYSCALL_DEFINE1(chdir, const char __user *, filename)
 	if (error)
 		goto dput_and_out;
 
+	gr_log_chdir(path.dentry, path.mnt);
+
 	set_fs_pwd(current->fs, &path);
 
 dput_and_out:
@@ -475,6 +486,13 @@ SYSCALL_DEFINE1(fchdir, unsigned int, fd)
 		goto out_putf;
 
 	error = inode_permission(inode, MAY_EXEC | MAY_CHDIR);
+
+	if (!error && !gr_chroot_fchdir(f.file->f_path.dentry, f.file->f_path.mnt))
+		error = -EPERM;
+
+	if (!error)
+		gr_log_chdir(f.file->f_path.dentry, f.file->f_path.mnt);
+
 	if (!error)
 		set_fs_pwd(current->fs, &f.file->f_path);
 out_putf:
@@ -504,7 +522,13 @@ SYSCALL_DEFINE1(chroot, const char __user *, filename)
 	if (error)
 		goto dput_and_out;
 
+	if (gr_handle_chroot_chroot(path.dentry, path.mnt))
+		goto dput_and_out;
+
 	set_fs_root(current->fs, &path);
+
+	gr_handle_chroot_chdir(&path);
+
 	error = 0;
 dput_and_out:
 	path_put(&path);
@@ -528,6 +552,16 @@ static int chmod_common(const struct path *path, umode_t mode)
 		return error;
 retry_deleg:
 	inode_lock(inode);
+
+	if (!gr_acl_handle_chmod(path->dentry, path->mnt, &mode)) {
+		error = -EACCES;
+		goto out_unlock;
+	}
+	if (gr_handle_chroot_chmod(path->dentry, path->mnt, mode)) {
+		error = -EACCES;
+		goto out_unlock;
+	}
+
 	error = security_path_chmod(path, mode);
 	if (error)
 		goto out_unlock;
@@ -593,6 +627,9 @@ static int chown_common(const struct path *path, uid_t user, gid_t group)
 	uid = make_kuid(current_user_ns(), user);
 	gid = make_kgid(current_user_ns(), group);
 
+	if (!gr_acl_handle_chown(path->dentry, path->mnt))
+		return -EACCES;
+
 retry_deleg:
 	newattrs.ia_valid =  ATTR_CTIME;
 	if (user != (uid_t) -1) {
@@ -1057,6 +1094,7 @@ long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)
 		} else {
 			fsnotify_open(f);
 			fd_install(fd, f);
+			trace_do_sys_open(tmp->name, flags, mode);
 		}
 	}
 	putname(tmp);
diff --git a/fs/overlayfs/super.c b/fs/overlayfs/super.c
index 6c4e9d5edd8f..3eb64b289c51 100644
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@ -182,7 +182,7 @@ void ovl_path_lower(struct dentry *dentry, struct path *path)
 {
 	struct ovl_entry *oe = dentry->d_fsdata;
 
-	*path = oe->numlower ? oe->lowerstack[0] : (struct path) { NULL, NULL };
+	*path = oe->numlower ? oe->lowerstack[0] : (struct path) { .dentry = NULL, .mnt = NULL };
 }
 
 int ovl_want_write(struct dentry *dentry)
@@ -1133,8 +1133,8 @@ static const struct xattr_handler *ovl_xattr_handlers[] = {
 
 static int ovl_fill_super(struct super_block *sb, void *data, int silent)
 {
-	struct path upperpath = { NULL, NULL };
-	struct path workpath = { NULL, NULL };
+	struct path upperpath = { .dentry = NULL, .mnt = NULL };
+	struct path workpath = { .dentry = NULL, .mnt = NULL };
 	struct dentry *root_dentry;
 	struct inode *realinode;
 	struct ovl_entry *oe;
diff --git a/fs/pipe.c b/fs/pipe.c
index 62af5deec3ef..50c72462b486 100644
--- a/fs/pipe.c
+++ b/fs/pipe.c
@@ -678,7 +678,7 @@ void free_pipe_info(struct pipe_inode_info *pipe)
 	kfree(pipe);
 }
 
-static struct vfsmount *pipe_mnt __read_mostly;
+struct vfsmount *pipe_mnt __read_mostly;
 
 /*
  * pipefs_dname() is called from d_path().
diff --git a/fs/posix_acl.c b/fs/posix_acl.c
index c9d48dc78495..6caa8443cd16 100644
--- a/fs/posix_acl.c
+++ b/fs/posix_acl.c
@@ -20,6 +20,7 @@
 #include <linux/xattr.h>
 #include <linux/export.h>
 #include <linux/user_namespace.h>
+#include <linux/grsecurity.h>
 
 static struct posix_acl **acl_by_type(struct inode *inode, int type)
 {
@@ -311,7 +312,7 @@ posix_acl_equiv_mode(const struct posix_acl *acl, umode_t *mode_p)
 		}
 	}
         if (mode_p)
-                *mode_p = (*mode_p & ~S_IRWXUGO) | mode;
+                *mode_p = ((*mode_p & ~S_IRWXUGO) | mode) & ~gr_acl_umask();
         return not_equiv;
 }
 EXPORT_SYMBOL(posix_acl_equiv_mode);
@@ -461,7 +462,7 @@ static int posix_acl_create_masq(struct posix_acl *acl, umode_t *mode_p)
 		mode &= (group_obj->e_perm << 3) | ~S_IRWXG;
 	}
 
-	*mode_p = (*mode_p & ~S_IRWXUGO) | mode;
+	*mode_p = ((*mode_p & ~S_IRWXUGO) | mode) & ~gr_acl_umask();
         return not_equiv;
 }
 
@@ -519,6 +520,8 @@ __posix_acl_create(struct posix_acl **acl, gfp_t gfp, umode_t *mode_p)
 	struct posix_acl *clone = posix_acl_clone(*acl, gfp);
 	int err = -ENOMEM;
 	if (clone) {
+		*mode_p &= ~gr_acl_umask();
+
 		err = posix_acl_create_masq(clone, mode_p);
 		if (err < 0) {
 			posix_acl_release(clone);
@@ -728,6 +731,7 @@ posix_acl_from_xattr(struct user_namespace *user_ns,
 	int count;
 	struct posix_acl *acl;
 	struct posix_acl_entry *acl_e;
+	umode_t umask = gr_acl_umask();
 
 	if (!value)
 		return NULL;
@@ -753,12 +757,18 @@ posix_acl_from_xattr(struct user_namespace *user_ns,
 
 		switch(acl_e->e_tag) {
 			case ACL_USER_OBJ:
+				acl_e->e_perm &= ~((umask & S_IRWXU) >> 6);
+				break;
 			case ACL_GROUP_OBJ:
 			case ACL_MASK:
+				acl_e->e_perm &= ~((umask & S_IRWXG) >> 3);
+				break;
 			case ACL_OTHER:
+				acl_e->e_perm &= ~(umask & S_IRWXO);
 				break;
 
 			case ACL_USER:
+				acl_e->e_perm &= ~((umask & S_IRWXU) >> 6);
 				acl_e->e_uid =
 					make_kuid(user_ns,
 						  le32_to_cpu(entry->e_id));
@@ -766,6 +776,7 @@ posix_acl_from_xattr(struct user_namespace *user_ns,
 					goto fail;
 				break;
 			case ACL_GROUP:
+				acl_e->e_perm &= ~((umask & S_IRWXG) >> 3);
 				acl_e->e_gid =
 					make_kgid(user_ns,
 						  le32_to_cpu(entry->e_id));
diff --git a/fs/proc/Kconfig b/fs/proc/Kconfig
index 1ade1206bb89..a86f1a2a38fb 100644
--- a/fs/proc/Kconfig
+++ b/fs/proc/Kconfig
@@ -30,7 +30,7 @@ config PROC_FS
 
 config PROC_KCORE
 	bool "/proc/kcore support" if !ARM
-	depends on PROC_FS && MMU
+	depends on PROC_FS && MMU && !GRKERNSEC_PROC_ADD
 	help
 	  Provides a virtual ELF core file of the live kernel.  This can
 	  be read with gdb and other ELF tools.  No modifications can be
@@ -38,8 +38,8 @@ config PROC_KCORE
 
 config PROC_VMCORE
 	bool "/proc/vmcore support"
-	depends on PROC_FS && CRASH_DUMP
-	default y
+	depends on PROC_FS && CRASH_DUMP && !GRKERNSEC
+	default n
         help
         Exports the dump image of crashed kernel in ELF format.
 
@@ -63,8 +63,8 @@ config PROC_SYSCTL
 	  limited in memory.
 
 config PROC_PAGE_MONITOR
- 	default y
-	depends on PROC_FS && MMU
+ 	default n
+	depends on PROC_FS && MMU && !GRKERNSEC
 	bool "Enable /proc page monitoring" if EXPERT
  	help
 	  Various /proc files exist to monitor process memory utilization:
diff --git a/fs/proc/array.c b/fs/proc/array.c
index 1dbfdcaa168c..aa676306b7f1 100644
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@ -60,6 +60,7 @@
 #include <linux/tty.h>
 #include <linux/string.h>
 #include <linux/mman.h>
+#include <linux/grsecurity.h>
 #include <linux/proc_fs.h>
 #include <linux/ioport.h>
 #include <linux/uaccess.h>
@@ -402,9 +403,19 @@ int proc_pid_status(struct seq_file *m, struct pid_namespace *ns,
 	task_pax(m, task);
 #endif
 
+#if defined(CONFIG_GRKERNSEC) && !defined(CONFIG_GRKERNSEC_NO_RBAC)
+	task_grsec_rbac(m, task);
+#endif
+
 	return 0;
 }
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+#define PAX_RAND_FLAGS(_mm) (_mm != NULL && _mm != current->mm && \
+			     (_mm->pax_flags & MF_PAX_RANDMMAP || \
+			      _mm->pax_flags & MF_PAX_SEGMEXEC))
+#endif
+
 static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 			struct pid *pid, struct task_struct *task, int whole)
 {
@@ -426,6 +437,13 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 	char tcomm[sizeof(task->comm)];
 	unsigned long flags;
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (current->exec_id != m->exec_id) {
+		gr_log_badprocpid("stat");
+		return 0;
+	}
+#endif
+
 	state = *get_task_state(task);
 	vsize = eip = esp = 0;
 	permitted = ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS | PTRACE_MODE_NOAUDIT);
@@ -497,6 +515,19 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 		gtime = task_gtime(task);
 	}
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (PAX_RAND_FLAGS(mm)) {
+		eip = 0;
+		esp = 0;
+		wchan = 0;
+	}
+#endif
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	wchan = 0;
+	eip =0;
+	esp =0;
+#endif
+
 	/* scale priority and nice values from timeslices to -20..20 */
 	/* to make it look like a "normal" Unix priority/nice value  */
 	priority = task_prio(task);
@@ -528,9 +559,15 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 	seq_put_decimal_ull(m, " ", vsize);
 	seq_put_decimal_ull(m, " ", mm ? get_mm_rss(mm) : 0);
 	seq_put_decimal_ull(m, " ", rsslim);
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	seq_put_decimal_ull(m, " ", PAX_RAND_FLAGS(mm) ? 1 : (mm ? (permitted ? mm->start_code : 1) : 0));
+	seq_put_decimal_ull(m, " ", PAX_RAND_FLAGS(mm) ? 1 : (mm ? (permitted ? mm->end_code : 1) : 0));
+	seq_put_decimal_ull(m, " ", PAX_RAND_FLAGS(mm) ? 0 : ((permitted && mm) ? mm->start_stack : 0));
+#else
 	seq_put_decimal_ull(m, " ", mm ? (permitted ? mm->start_code : 1) : 0);
 	seq_put_decimal_ull(m, " ", mm ? (permitted ? mm->end_code : 1) : 0);
 	seq_put_decimal_ull(m, " ", (permitted && mm) ? mm->start_stack : 0);
+#endif
 	seq_put_decimal_ull(m, " ", esp);
 	seq_put_decimal_ull(m, " ", eip);
 	/* The signal information here is obsolete.
@@ -564,7 +601,11 @@ static int do_task_stat(struct seq_file *m, struct pid_namespace *ns,
 	seq_put_decimal_ull(m, " ", cputime_to_clock_t(gtime));
 	seq_put_decimal_ll(m, " ", cputime_to_clock_t(cgtime));
 
-	if (mm && permitted) {
+	if (mm && permitted
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+		&& !PAX_RAND_FLAGS(mm)
+#endif
+	   ) {
 		seq_put_decimal_ull(m, " ", mm->start_data);
 		seq_put_decimal_ull(m, " ", mm->end_data);
 		seq_put_decimal_ull(m, " ", mm->start_brk);
@@ -602,8 +643,15 @@ int proc_pid_statm(struct seq_file *m, struct pid_namespace *ns,
 			struct pid *pid, struct task_struct *task)
 {
 	unsigned long size = 0, resident = 0, shared = 0, text = 0, data = 0;
-	struct mm_struct *mm = get_task_mm(task);
+	struct mm_struct *mm;
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (current->exec_id != m->exec_id) {
+		gr_log_badprocpid("statm");
+		return 0;
+	}
+#endif
+	mm = get_task_mm(task);
 	if (mm) {
 		size = task_statm(mm, &shared, &text, &data, &resident);
 		mmput(mm);
@@ -626,6 +674,21 @@ int proc_pid_statm(struct seq_file *m, struct pid_namespace *ns,
 	return 0;
 }
 
+#ifdef CONFIG_GRKERNSEC_PROC_IPADDR
+int proc_pid_ipaddr(struct seq_file *m, struct pid_namespace *ns, struct pid *pid, struct task_struct *task)
+{
+	unsigned long flags;
+	u32 curr_ip = 0;
+
+	if (lock_task_sighand(task, &flags)) {
+		curr_ip = task->signal->curr_ip;
+		unlock_task_sighand(task, &flags);
+	}
+	seq_printf(m, "%pI4\n", &curr_ip);
+	return 0;
+}
+#endif
+
 #ifdef CONFIG_PROC_CHILDREN
 static struct pid *
 get_children_pid(struct inode *inode, struct pid *pid_prev, loff_t pos)
diff --git a/fs/proc/base.c b/fs/proc/base.c
index 4fb5a1bc4831..a4332371b62e 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -113,6 +113,14 @@ struct pid_entry {
 	union proc_op op;
 };
 
+struct getdents_callback {
+	struct linux_dirent __user * current_dir;
+	struct linux_dirent __user * previous;
+	struct file * file;
+	int count;
+	int error;
+};
+
 #define NOD(NAME, MODE, IOP, FOP, OP) {			\
 	.name = (NAME),					\
 	.len  = sizeof(NAME) - 1,			\
@@ -224,6 +232,11 @@ static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,
 		goto out_mmput;
 	}
 
+	if (gr_acl_handle_procpidmem(tsk)) {
+		rv = 0;
+		goto out_mmput;
+	}
+
 	page = (char *)__get_free_page(GFP_TEMPORARY);
 	if (!page) {
 		rv = -ENOMEM;
@@ -400,7 +413,13 @@ static const struct file_operations proc_pid_cmdline_ops = {
 	.llseek	= generic_file_llseek,
 };
 
-#ifdef CONFIG_KALLSYMS
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+#define PAX_RAND_FLAGS(_mm) (_mm != NULL && _mm != current->mm && \
+			     (_mm->pax_flags & MF_PAX_RANDMMAP || \
+			      _mm->pax_flags & MF_PAX_SEGMEXEC))
+#endif
+
+#if defined(CONFIG_KALLSYMS) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 /*
  * Provides a wchan file via kallsyms in a proper one-value-per-file format.
  * Returns the resolved symbol.  If that fails, simply return the address.
@@ -413,8 +432,8 @@ static int proc_pid_wchan(struct seq_file *m, struct pid_namespace *ns,
 
 	wchan = get_wchan(task);
 
-	if (wchan && ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS)
-			&& !lookup_symbol_name(wchan, symname))
+	if (wchan && !lookup_symbol_name(wchan, symname)
+	    		&& ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS))
 		seq_printf(m, "%s", symname);
 	else
 		seq_putc(m, '0');
@@ -440,7 +459,7 @@ static void unlock_trace(struct task_struct *task)
 	mutex_unlock(&task->signal->cred_guard_mutex);
 }
 
-#ifdef CONFIG_STACKTRACE
+#if defined(CONFIG_STACKTRACE) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 
 #define MAX_STACK_TRACE_DEPTH	64
 
@@ -635,7 +654,7 @@ static int proc_pid_limits(struct seq_file *m, struct pid_namespace *ns,
 	return 0;
 }
 
-#ifdef CONFIG_HAVE_ARCH_TRACEHOOK
+#if defined(CONFIG_HAVE_ARCH_TRACEHOOK) && !defined(CONFIG_GRKERNSEC_PROC_MEMMAP)
 static int proc_pid_syscall(struct seq_file *m, struct pid_namespace *ns,
 			    struct pid *pid, struct task_struct *task)
 {
@@ -668,7 +687,7 @@ static int proc_pid_syscall(struct seq_file *m, struct pid_namespace *ns,
 /************************************************************************/
 
 /* permission checks */
-static int proc_fd_access_allowed(struct inode *inode)
+static int proc_fd_access_allowed(struct inode *inode, unsigned int log)
 {
 	struct task_struct *task;
 	int allowed = 0;
@@ -678,7 +697,10 @@ static int proc_fd_access_allowed(struct inode *inode)
 	 */
 	task = get_proc_task(inode);
 	if (task) {
-		allowed = ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS);
+		if (log)
+			allowed = ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS);
+		else
+			allowed = ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS | PTRACE_MODE_NOAUDIT);
 		put_task_struct(task);
 	}
 	return allowed;
@@ -709,6 +731,30 @@ static bool has_pid_permissions(struct pid_namespace *pid,
 				 struct task_struct *task,
 				 int hide_pid_min)
 {
+	if (gr_pid_is_chrooted(task) || gr_check_hidden_task(task))
+		return false;
+
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	rcu_read_lock();
+	{
+		const struct cred *tmpcred = current_cred();
+		const struct cred *cred = __task_cred(task);
+
+		if (uid_eq(tmpcred->uid, GLOBAL_ROOT_UID) || uid_eq(tmpcred->uid, cred->uid)
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+			|| in_group_p(grsec_proc_gid)
+#endif
+		) {
+			rcu_read_unlock();
+			return true;
+		}
+	}
+	rcu_read_unlock();
+
+	if (!pid->hide_pid)
+		return ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS | PTRACE_MODE_NOAUDIT);
+#endif
+
 	if (pid->hide_pid < hide_pid_min)
 		return true;
 	if (in_group_p(pid->pid_gid))
@@ -730,7 +776,11 @@ static int proc_pid_permission(struct inode *inode, int mask)
 	put_task_struct(task);
 
 	if (!has_perms) {
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+		{
+#else
 		if (pid->hide_pid == 2) {
+#endif
 			/*
 			 * Let's make getdents(), stat(), and open()
 			 * consistent with each other.  If a process
@@ -784,13 +834,24 @@ static const struct file_operations proc_single_file_operations = {
 };
 
 
-struct mm_struct *proc_mem_open(struct inode *inode, unsigned int mode)
+struct mm_struct *proc_mem_open(struct inode *inode, unsigned int mode, u64 *ptracer_exec_id)
 {
 	struct task_struct *task = get_proc_task(inode);
 	struct mm_struct *mm = ERR_PTR(-ESRCH);
 
+	if (ptracer_exec_id)
+		*ptracer_exec_id = 0;
+
 	if (task) {
 		mm = mm_access(task, mode | PTRACE_MODE_FSCREDS);
+		if (!IS_ERR_OR_NULL(mm) && gr_acl_handle_procpidmem(task)) {
+			mmput(mm);
+			mm = ERR_PTR(-EPERM);
+		}
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+		if (ptracer_exec_id)
+			current_is_ptracer(task, ptracer_exec_id);
+#endif
 		put_task_struct(task);
 
 		if (!IS_ERR_OR_NULL(mm)) {
@@ -806,12 +867,17 @@ struct mm_struct *proc_mem_open(struct inode *inode, unsigned int mode)
 
 static int __mem_open(struct inode *inode, struct file *file, unsigned int mode)
 {
-	struct mm_struct *mm = proc_mem_open(inode, mode);
+	struct mm_struct *mm = proc_mem_open(inode, mode, NULL);
 
 	if (IS_ERR(mm))
 		return PTR_ERR(mm);
 
 	file->private_data = mm;
+
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	file->f_version = current->exec_id;
+#endif
+
 	return 0;
 }
 
@@ -834,6 +900,26 @@ static ssize_t mem_rw(struct file *file, char __user *buf,
 	char *page;
 	unsigned int flags;
 
+#ifdef CONFIG_GRKERNSEC
+	struct task_struct *task = get_proc_task(file_inode(file));
+	bool is_by_ptracer = false;
+
+	if (task) {
+		is_by_ptracer = current_is_ptracer(task, NULL);
+		put_task_struct(task);
+	}
+
+	if (write && !is_by_ptracer)
+		return -EPERM;
+
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (file->f_version != current->exec_id && !is_by_ptracer) {
+		gr_log_badprocpid("mem");
+		return 0;
+	}
+#endif
+#endif
+
 	if (!mm)
 		return 0;
 
@@ -945,6 +1031,13 @@ static ssize_t environ_read(struct file *file, char __user *buf,
 	if (!mm || !mm->env_end)
 		return 0;
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (file->f_version != current->exec_id) {
+		gr_log_badprocpid("environ");
+		return 0;
+	}
+#endif
+
 	page = (char *)__get_free_page(GFP_TEMPORARY);
 	if (!page)
 		return -ENOMEM;
@@ -1018,6 +1111,21 @@ static ssize_t auxv_read(struct file *file, char __user *buf,
 
 	if (!mm)
 		return 0;
+
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (PAX_RAND_FLAGS(mm)) {
+		struct task_struct *task = get_proc_task(file_inode(file));
+		bool is_by_ptracer = false;
+
+		if (task) {
+			is_by_ptracer = current_is_ptracer(task, NULL);
+			put_task_struct(task);
+		}
+		if (!is_by_ptracer)
+			return 0;
+	}
+#endif
+
 	do {
 		nwords += 2;
 	} while (mm->saved_auxv[nwords - 2] != 0); /* AT_NULL */
@@ -1601,7 +1709,7 @@ static const char *proc_pid_get_link(struct dentry *dentry,
 		return ERR_PTR(-ECHILD);
 
 	/* Are we allowed to snoop on the tasks file descriptors? */
-	if (!proc_fd_access_allowed(inode))
+	if (!proc_fd_access_allowed(inode, 0))
 		goto out;
 
 	error = PROC_I(inode)->op.proc_get_link(dentry, &path);
@@ -1645,8 +1753,18 @@ static int proc_pid_readlink(struct dentry * dentry, char __user * buffer, int b
 	struct path path;
 
 	/* Are we allowed to snoop on the tasks file descriptors? */
-	if (!proc_fd_access_allowed(inode))
-		goto out;
+	/* logging this is needed for learning on chromium to work properly,
+	   but we don't want to flood the logs from 'ps' which does a readlink
+	   on /proc/fd/2 of tasks in the listing, nor do we want 'ps' to learn
+	   CAP_SYS_PTRACE as it's not necessary for its basic functionality
+	 */
+	if (dentry->d_name.name[0] == '2' && dentry->d_name.name[1] == '\0') {
+		if (!proc_fd_access_allowed(inode,0))
+			goto out;
+	} else {
+		if (!proc_fd_access_allowed(inode,1))
+			goto out;
+	}
 
 	error = PROC_I(inode)->op.proc_get_link(dentry, &path);
 	if (error)
@@ -1696,7 +1814,11 @@ struct inode *proc_pid_make_inode(struct super_block * sb, struct task_struct *t
 		rcu_read_lock();
 		cred = __task_cred(task);
 		inode->i_uid = cred->euid;
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+		inode->i_gid = grsec_proc_gid;
+#else
 		inode->i_gid = cred->egid;
+#endif
 		rcu_read_unlock();
 	}
 	security_task_to_inode(task, inode);
@@ -1732,10 +1854,19 @@ int pid_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat)
 			return -ENOENT;
 		}
 		if ((inode->i_mode == (S_IFDIR|S_IRUGO|S_IXUGO)) ||
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IXUSR)) ||
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IRGRP|S_IXUSR|S_IXGRP)) ||
+#endif
 		    task_dumpable(task)) {
 			cred = __task_cred(task);
 			stat->uid = cred->euid;
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+			stat->gid = grsec_proc_gid;
+#else
 			stat->gid = cred->egid;
+#endif
 		}
 	}
 	rcu_read_unlock();
@@ -1773,11 +1904,20 @@ int pid_revalidate(struct dentry *dentry, unsigned int flags)
 
 	if (task) {
 		if ((inode->i_mode == (S_IFDIR|S_IRUGO|S_IXUGO)) ||
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IXUSR)) ||
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IRGRP|S_IXUSR|S_IXGRP)) ||
+#endif
 		    task_dumpable(task)) {
 			rcu_read_lock();
 			cred = __task_cred(task);
 			inode->i_uid = cred->euid;
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+			inode->i_gid = grsec_proc_gid;
+#else
 			inode->i_gid = cred->egid;
+#endif
 			rcu_read_unlock();
 		} else {
 			inode->i_uid = GLOBAL_ROOT_UID;
@@ -2411,6 +2551,9 @@ static struct dentry *proc_pident_lookup(struct inode *dir,
 	if (!task)
 		goto out_no_task;
 
+	if (gr_pid_is_chrooted(task) || gr_check_hidden_task(task))
+		goto out;
+
 	/*
 	 * Yes, it does not scale. And it should not. Don't add
 	 * new entries into /proc/<tgid>/ without very good reasons.
@@ -2441,6 +2584,9 @@ static int proc_pident_readdir(struct file *file, struct dir_context *ctx,
 	if (!task)
 		return -ENOENT;
 
+	if (gr_pid_is_chrooted(task) || gr_check_hidden_task(task))
+		goto out;
+
 	if (!dir_emit_dots(file, ctx))
 		goto out;
 
@@ -2853,7 +2999,9 @@ static const struct inode_operations proc_task_inode_operations;
 static const struct pid_entry tgid_base_stuff[] = {
 	DIR("task",       S_IRUGO|S_IXUGO, proc_task_inode_operations, proc_task_operations),
 	DIR("fd",         S_IRUSR|S_IXUSR, proc_fd_inode_operations, proc_fd_operations),
+#ifndef CONFIG_GRKERNSEC
 	DIR("map_files",  S_IRUSR|S_IXUSR, proc_map_files_inode_operations, proc_map_files_operations),
+#endif
 	DIR("fdinfo",     S_IRUSR|S_IXUSR, proc_fdinfo_inode_operations, proc_fdinfo_operations),
 	DIR("ns",	  S_IRUSR|S_IXUGO, proc_ns_dir_inode_operations, proc_ns_dir_operations),
 #ifdef CONFIG_NET
@@ -2871,7 +3019,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 	REG("autogroup",  S_IRUGO|S_IWUSR, proc_pid_sched_autogroup_operations),
 #endif
 	REG("comm",      S_IRUGO|S_IWUSR, proc_pid_set_comm_operations),
-#ifdef CONFIG_HAVE_ARCH_TRACEHOOK
+#if defined(CONFIG_HAVE_ARCH_TRACEHOOK) && !defined(CONFIG_GRKERNSEC_PROC_MEMMAP)
 	ONE("syscall",    S_IRUSR, proc_pid_syscall),
 #endif
 	REG("cmdline",    S_IRUGO, proc_pid_cmdline_ops),
@@ -2896,10 +3044,10 @@ static const struct pid_entry tgid_base_stuff[] = {
 #ifdef CONFIG_SECURITY
 	DIR("attr",       S_IRUGO|S_IXUGO, proc_attr_dir_inode_operations, proc_attr_dir_operations),
 #endif
-#ifdef CONFIG_KALLSYMS
+#if defined(CONFIG_KALLSYMS) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 	ONE("wchan",      S_IRUGO, proc_pid_wchan),
 #endif
-#ifdef CONFIG_STACKTRACE
+#if defined(CONFIG_STACKTRACE) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 	ONE("stack",      S_IRUSR, proc_pid_stack),
 #endif
 #ifdef CONFIG_SCHED_INFO
@@ -2933,6 +3081,9 @@ static const struct pid_entry tgid_base_stuff[] = {
 #ifdef CONFIG_HARDWALL
 	ONE("hardwall",   S_IRUGO, proc_pid_hardwall),
 #endif
+#ifdef CONFIG_GRKERNSEC_PROC_IPADDR
+	ONE("ipaddr",     S_IRUSR, proc_pid_ipaddr),
+#endif
 #ifdef CONFIG_USER_NS
 	REG("uid_map",    S_IRUGO|S_IWUSR, proc_uid_map_operations),
 	REG("gid_map",    S_IRUGO|S_IWUSR, proc_gid_map_operations),
@@ -3066,7 +3217,14 @@ static int proc_pid_instantiate(struct inode *dir,
 	if (!inode)
 		goto out;
 
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+	inode->i_mode = S_IFDIR|S_IRUSR|S_IXUSR;
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	inode->i_gid = grsec_proc_gid;
+	inode->i_mode = S_IFDIR|S_IRUSR|S_IRGRP|S_IXUSR|S_IXGRP;
+#else
 	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;
+#endif
 	inode->i_op = &proc_tgid_base_inode_operations;
 	inode->i_fop = &proc_tgid_base_operations;
 	inode->i_flags|=S_IMMUTABLE;
@@ -3104,7 +3262,11 @@ struct dentry *proc_pid_lookup(struct inode *dir, struct dentry * dentry, unsign
 	if (!task)
 		goto out;
 
+	if (gr_pid_is_chrooted(task) || gr_check_hidden_task(task))
+		goto out_put_task;
+
 	result = proc_pid_instantiate(dir, dentry, task, NULL);
+out_put_task:
 	put_task_struct(task);
 out:
 	return ERR_PTR(result);
@@ -3258,7 +3420,7 @@ static const struct pid_entry tid_base_stuff[] = {
 	NOD("comm",      S_IFREG|S_IRUGO|S_IWUSR,
 			 &proc_tid_comm_inode_operations,
 			 &proc_pid_set_comm_operations, {}),
-#ifdef CONFIG_HAVE_ARCH_TRACEHOOK
+#if defined(CONFIG_HAVE_ARCH_TRACEHOOK) && !defined(CONFIG_GRKERNSEC_PROC_MEMMAP)
 	ONE("syscall",   S_IRUSR, proc_pid_syscall),
 #endif
 	REG("cmdline",   S_IRUGO, proc_pid_cmdline_ops),
@@ -3285,10 +3447,10 @@ static const struct pid_entry tid_base_stuff[] = {
 #ifdef CONFIG_SECURITY
 	DIR("attr",      S_IRUGO|S_IXUGO, proc_attr_dir_inode_operations, proc_attr_dir_operations),
 #endif
-#ifdef CONFIG_KALLSYMS
+#if defined(CONFIG_KALLSYMS) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 	ONE("wchan",     S_IRUGO, proc_pid_wchan),
 #endif
-#ifdef CONFIG_STACKTRACE
+#if defined(CONFIG_STACKTRACE) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 	ONE("stack",      S_IRUSR, proc_pid_stack),
 #endif
 #ifdef CONFIG_SCHED_INFO
diff --git a/fs/proc/cmdline.c b/fs/proc/cmdline.c
index cbd82dff7e81..c0407d23e879 100644
--- a/fs/proc/cmdline.c
+++ b/fs/proc/cmdline.c
@@ -23,7 +23,11 @@ static const struct file_operations cmdline_proc_fops = {
 
 static int __init proc_cmdline_init(void)
 {
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+	proc_create_grsec("cmdline", 0, NULL, &cmdline_proc_fops);
+#else
 	proc_create("cmdline", 0, NULL, &cmdline_proc_fops);
+#endif
 	return 0;
 }
 fs_initcall(proc_cmdline_init);
diff --git a/fs/proc/devices.c b/fs/proc/devices.c
index 50493edc30e5..248166b06966 100644
--- a/fs/proc/devices.c
+++ b/fs/proc/devices.c
@@ -64,7 +64,11 @@ static const struct file_operations proc_devinfo_operations = {
 
 static int __init proc_devices_init(void)
 {
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+	proc_create_grsec("devices", 0, NULL, &proc_devinfo_operations);
+#else
 	proc_create("devices", 0, NULL, &proc_devinfo_operations);
+#endif
 	return 0;
 }
 fs_initcall(proc_devices_init);
diff --git a/fs/proc/fd.c b/fs/proc/fd.c
index d21dafef3102..87425901aeb0 100644
--- a/fs/proc/fd.c
+++ b/fs/proc/fd.c
@@ -27,7 +27,8 @@ static int seq_show(struct seq_file *m, void *v)
 	if (!task)
 		return -ENOENT;
 
-	files = get_files_struct(task);
+	if (!gr_acl_handle_procpidmem(task))
+		files = get_files_struct(task);
 	put_task_struct(task);
 
 	if (files) {
@@ -296,13 +297,15 @@ int proc_fd_permission(struct inode *inode, int mask)
 	int rv;
 
 	rv = generic_permission(inode, mask);
-	if (rv == 0)
-		return rv;
 
 	rcu_read_lock();
 	p = pid_task(proc_pid(inode), PIDTYPE_PID);
-	if (p && same_thread_group(p, current))
-		rv = 0;
+	if (p) {
+		if (same_thread_group(p, current))
+			rv = 0;
+		if (gr_acl_handle_procpidmem(p))
+			rv = -EACCES;
+	}
 	rcu_read_unlock();
 
 	return rv;
diff --git a/fs/proc/generic.c b/fs/proc/generic.c
index 5f2dc2032c79..2ae27201c217 100644
--- a/fs/proc/generic.c
+++ b/fs/proc/generic.c
@@ -22,6 +22,7 @@
 #include <linux/bitops.h>
 #include <linux/spinlock.h>
 #include <linux/completion.h>
+#include <linux/grsecurity.h>
 #include <asm/uaccess.h>
 
 #include "internal.h"
@@ -253,6 +254,15 @@ struct dentry *proc_lookup(struct inode *dir, struct dentry *dentry,
 	return proc_lookup_de(PDE(dir), dir, dentry);
 }
 
+struct dentry *proc_lookup_restrict(struct inode *dir, struct dentry *dentry,
+		unsigned int flags)
+{
+	if (gr_proc_is_restricted())
+		return ERR_PTR(-EACCES);
+
+	return proc_lookup_de(PDE(dir), dir, dentry);
+}
+
 /*
  * This returns non-zero if at EOF, so that the /proc
  * root directory can use this and check if it should
@@ -310,6 +320,16 @@ int proc_readdir(struct file *file, struct dir_context *ctx)
 	return proc_readdir_de(PDE(inode), file, ctx);
 }
 
+int proc_readdir_restrict(struct file *file, struct dir_context *ctx)
+{
+	struct inode *inode = file_inode(file);
+
+	if (gr_proc_is_restricted())
+		return -EACCES;
+
+	return proc_readdir_de(PDE(inode), file, ctx);
+}
+
 /*
  * These are the generic /proc directory operations. They
  * use the in-memory "struct proc_dir_entry" tree to parse
@@ -321,6 +341,12 @@ static const struct file_operations proc_dir_operations = {
 	.iterate_shared		= proc_readdir,
 };
 
+static const struct file_operations proc_dir_restricted_operations = {
+	.llseek			= generic_file_llseek,
+	.read			= generic_read_dir,
+	.iterate		= proc_readdir_restrict,
+};
+
 /*
  * proc directories can do almost nothing..
  */
@@ -330,6 +356,12 @@ static const struct inode_operations proc_dir_inode_operations = {
 	.setattr	= proc_notify_change,
 };
 
+static const struct inode_operations proc_dir_restricted_inode_operations = {
+	.lookup		= proc_lookup_restrict,
+	.getattr	= proc_getattr,
+	.setattr	= proc_notify_change,
+};
+
 static int proc_register(struct proc_dir_entry * dir, struct proc_dir_entry * dp)
 {
 	int ret;
@@ -447,6 +479,31 @@ struct proc_dir_entry *proc_mkdir_data(const char *name, umode_t mode,
 }
 EXPORT_SYMBOL_GPL(proc_mkdir_data);
 
+struct proc_dir_entry *proc_mkdir_data_restrict(const char *name, umode_t mode,
+		struct proc_dir_entry *parent, void *data)
+{
+	struct proc_dir_entry *ent;
+
+	if (mode == 0)
+		mode = S_IRUGO | S_IXUGO;
+
+	ent = __proc_create(&parent, name, S_IFDIR | mode, 2);
+	if (ent) {
+		ent->data = data;
+		ent->restricted = 1;
+		ent->proc_fops = &proc_dir_restricted_operations;
+		ent->proc_iops = &proc_dir_restricted_inode_operations;
+		parent->nlink++;
+		if (proc_register(parent, ent) < 0) {
+			kfree(ent);
+			parent->nlink--;
+			ent = NULL;
+		}
+	}
+	return ent;
+}
+EXPORT_SYMBOL_GPL(proc_mkdir_data_restrict);
+
 struct proc_dir_entry *proc_mkdir_mode(const char *name, umode_t mode,
 				       struct proc_dir_entry *parent)
 {
@@ -461,6 +518,13 @@ struct proc_dir_entry *proc_mkdir(const char *name,
 }
 EXPORT_SYMBOL(proc_mkdir);
 
+struct proc_dir_entry *proc_mkdir_restrict(const char *name,
+		struct proc_dir_entry *parent)
+{
+	return proc_mkdir_data_restrict(name, 0, parent, NULL);
+}
+EXPORT_SYMBOL(proc_mkdir_restrict);
+
 struct proc_dir_entry *proc_create_mount_point(const char *name)
 {
 	umode_t mode = S_IFDIR | S_IRUGO | S_IXUGO;
diff --git a/fs/proc/inode.c b/fs/proc/inode.c
index e69ebe648a34..8a28d63a5304 100644
--- a/fs/proc/inode.c
+++ b/fs/proc/inode.c
@@ -23,11 +23,17 @@
 #include <linux/slab.h>
 #include <linux/mount.h>
 #include <linux/magic.h>
+#include <linux/grsecurity.h>
 
 #include <asm/uaccess.h>
 
 #include "internal.h"
 
+#ifdef CONFIG_PROC_SYSCTL
+extern const struct inode_operations proc_sys_inode_operations;
+extern const struct inode_operations proc_sys_dir_operations;
+#endif
+
 static void proc_evict_inode(struct inode *inode)
 {
 	struct proc_dir_entry *de;
@@ -48,6 +54,13 @@ static void proc_evict_inode(struct inode *inode)
 		RCU_INIT_POINTER(PROC_I(inode)->sysctl, NULL);
 		sysctl_head_put(head);
 	}
+
+#ifdef CONFIG_PROC_SYSCTL
+	if (inode->i_op == &proc_sys_inode_operations ||
+	    inode->i_op == &proc_sys_dir_operations)
+		gr_handle_delete(inode->i_ino, inode->i_sb->s_dev);
+#endif
+
 }
 
 static struct kmem_cache * proc_inode_cachep;
@@ -430,7 +443,11 @@ struct inode *proc_get_inode(struct super_block *sb, struct proc_dir_entry *de)
 		if (de->mode) {
 			inode->i_mode = de->mode;
 			inode->i_uid = de->uid;
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+			inode->i_gid = grsec_proc_gid;
+#else
 			inode->i_gid = de->gid;
+#endif
 		}
 		if (de->size)
 			inode->i_size = de->size;
diff --git a/fs/proc/internal.h b/fs/proc/internal.h
index 5378441ec1b7..666c3505cfd2 100644
--- a/fs/proc/internal.h
+++ b/fs/proc/internal.h
@@ -47,9 +47,10 @@ struct proc_dir_entry {
 	struct completion *pde_unload_completion;
 	struct list_head pde_openers;	/* who did ->open, but not ->release */
 	spinlock_t pde_unload_lock; /* proc_fops checks and pde_users bumps */
+	u8 restricted; /* a directory in /proc/net that should be restricted via GRKERNSEC_PROC */
 	u8 namelen;
 	char name[];
-};
+} __randomize_layout;
 
 union proc_op {
 	int (*proc_get_link)(struct dentry *, struct path *);
@@ -67,7 +68,7 @@ struct proc_inode {
 	struct ctl_table *sysctl_entry;
 	const struct proc_ns_operations *ns_ops;
 	struct inode vfs_inode;
-};
+} __randomize_layout;
 
 /*
  * General functions
@@ -155,6 +156,10 @@ extern int proc_pid_status(struct seq_file *, struct pid_namespace *,
 			   struct pid *, struct task_struct *);
 extern int proc_pid_statm(struct seq_file *, struct pid_namespace *,
 			  struct pid *, struct task_struct *);
+#ifdef CONFIG_GRKERNSEC_PROC_IPADDR
+extern int proc_pid_ipaddr(struct seq_file *, struct pid_namespace *,
+			  struct pid *, struct task_struct *);
+#endif
 
 /*
  * base.c
@@ -179,9 +184,11 @@ extern bool proc_fill_cache(struct file *, struct dir_context *, const char *, i
  * generic.c
  */
 extern struct dentry *proc_lookup(struct inode *, struct dentry *, unsigned int);
+extern struct dentry *proc_lookup_restrict(struct inode *, struct dentry *, unsigned int);
 extern struct dentry *proc_lookup_de(struct proc_dir_entry *, struct inode *,
 				     struct dentry *);
 extern int proc_readdir(struct file *, struct dir_context *);
+extern int proc_readdir_restrict(struct file *, struct dir_context *);
 extern int proc_readdir_de(struct proc_dir_entry *, struct file *, struct dir_context *);
 
 static inline struct proc_dir_entry *pde_get(struct proc_dir_entry *pde)
@@ -286,9 +293,12 @@ struct proc_maps_private {
 #ifdef CONFIG_NUMA
 	struct mempolicy *task_mempolicy;
 #endif
-};
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	u64 ptracer_exec_id;
+#endif
+} __randomize_layout;
 
-struct mm_struct *proc_mem_open(struct inode *inode, unsigned int mode);
+struct mm_struct *proc_mem_open(struct inode *inode, unsigned int mode, u64 *ptracer_exec_id);
 
 extern const struct file_operations proc_pid_maps_operations;
 extern const struct file_operations proc_tid_maps_operations;
diff --git a/fs/proc/interrupts.c b/fs/proc/interrupts.c
index a352d5703b41..cb94a5cc1ed1 100644
--- a/fs/proc/interrupts.c
+++ b/fs/proc/interrupts.c
@@ -47,7 +47,11 @@ static const struct file_operations proc_interrupts_operations = {
 
 static int __init proc_interrupts_init(void)
 {
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+	proc_create_grsec("interrupts", 0, NULL, &proc_interrupts_operations);
+#else
 	proc_create("interrupts", 0, NULL, &proc_interrupts_operations);
+#endif
 	return 0;
 }
 fs_initcall(proc_interrupts_init);
diff --git a/fs/proc/kcore.c b/fs/proc/kcore.c
index 535e0f7ec3f5..1749d06523e3 100644
--- a/fs/proc/kcore.c
+++ b/fs/proc/kcore.c
@@ -544,6 +544,9 @@ read_kcore(struct file *file, char __user *buffer, size_t buflen, loff_t *fpos)
 
 static int open_kcore(struct inode *inode, struct file *filp)
 {
+#if defined(CONFIG_GRKERNSEC_PROC_ADD) || defined(CONFIG_GRKERNSEC_HIDESYM)
+	return -EPERM;
+#endif
 	if (!capable(CAP_SYS_RAWIO))
 		return -EPERM;
 
diff --git a/fs/proc/proc_net.c b/fs/proc/proc_net.c
index 777fe92a70e9..cf23c946e2d1 100644
--- a/fs/proc/proc_net.c
+++ b/fs/proc/proc_net.c
@@ -24,9 +24,27 @@
 #include <linux/uidgid.h>
 #include <net/net_namespace.h>
 #include <linux/seq_file.h>
+#include <linux/grsecurity.h>
 
 #include "internal.h"
 
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+static struct seq_operations *ipv6_seq_ops_addr;
+
+void register_ipv6_seq_ops_addr(struct seq_operations *addr)
+{
+	ipv6_seq_ops_addr = addr;
+}
+
+void unregister_ipv6_seq_ops_addr(void)
+{
+	ipv6_seq_ops_addr = NULL;
+}
+
+EXPORT_SYMBOL_GPL(register_ipv6_seq_ops_addr);
+EXPORT_SYMBOL_GPL(unregister_ipv6_seq_ops_addr);
+#endif
+
 static inline struct net *PDE_NET(struct proc_dir_entry *pde)
 {
 	return pde->parent->data;
@@ -37,6 +55,8 @@ static struct net *get_proc_net(const struct inode *inode)
 	return maybe_get_net(PDE_NET(PDE(inode)));
 }
 
+extern const struct seq_operations dev_seq_ops;
+
 int seq_open_net(struct inode *ino, struct file *f,
 		 const struct seq_operations *ops, int size)
 {
@@ -45,6 +65,14 @@ int seq_open_net(struct inode *ino, struct file *f,
 
 	BUG_ON(size < sizeof(*p));
 
+	/* only permit access to /proc/net/dev */
+	if (
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+	    ops != ipv6_seq_ops_addr && 
+#endif
+	    ops != &dev_seq_ops && gr_proc_is_restricted())
+		return -EACCES;
+
 	net = get_proc_net(ino);
 	if (net == NULL)
 		return -ENXIO;
@@ -67,6 +95,9 @@ int single_open_net(struct inode *inode, struct file *file,
 	int err;
 	struct net *net;
 
+	if (gr_proc_is_restricted())
+		return -EACCES;
+
 	err = -ENXIO;
 	net = get_proc_net(inode);
 	if (net == NULL)
diff --git a/fs/proc/proc_sysctl.c b/fs/proc/proc_sysctl.c
index df6a359455a1..5a409fc17907 100644
--- a/fs/proc/proc_sysctl.c
+++ b/fs/proc/proc_sysctl.c
@@ -11,13 +11,21 @@
 #include <linux/namei.h>
 #include <linux/mm.h>
 #include <linux/module.h>
+#include <linux/nsproxy.h>
+#ifdef CONFIG_GRKERNSEC
+#include <net/net_namespace.h>
+#endif
 #include "internal.h"
 
+extern int gr_handle_chroot_sysctl(const int op);
+extern int gr_handle_sysctl_mod(const char *dirname, const char *name,
+				const int op);
+
 static const struct dentry_operations proc_sys_dentry_operations;
 static const struct file_operations proc_sys_file_operations;
-static const struct inode_operations proc_sys_inode_operations;
+const struct inode_operations proc_sys_inode_operations;
 static const struct file_operations proc_sys_dir_file_operations;
-static const struct inode_operations proc_sys_dir_operations;
+const struct inode_operations proc_sys_dir_operations;
 
 /* Support for permanently empty directories */
 
@@ -513,6 +521,9 @@ static struct dentry *proc_sys_lookup(struct inode *dir, struct dentry *dentry,
 
 	err = NULL;
 	d_set_d_op(dentry, &proc_sys_dentry_operations);
+
+	gr_handle_proc_create(dentry, inode);
+
 	d_add(dentry, inode);
 
 out:
@@ -528,6 +539,7 @@ static ssize_t proc_sys_call_handler(struct file *filp, void __user *buf,
 	struct inode *inode = file_inode(filp);
 	struct ctl_table_header *head = grab_header(inode);
 	struct ctl_table *table = PROC_I(inode)->sysctl_entry;
+	int op = write ? MAY_WRITE : MAY_READ;
 	ssize_t error;
 	size_t res;
 
@@ -539,7 +551,7 @@ static ssize_t proc_sys_call_handler(struct file *filp, void __user *buf,
 	 * and won't be until we finish.
 	 */
 	error = -EPERM;
-	if (sysctl_perm(head, table, write ? MAY_WRITE : MAY_READ))
+	if (sysctl_perm(head, table, op))
 		goto out;
 
 	/* if that can happen at all, it should be -EINVAL, not -EISDIR */
@@ -547,6 +559,27 @@ static ssize_t proc_sys_call_handler(struct file *filp, void __user *buf,
 	if (!table->proc_handler)
 		goto out;
 
+#ifdef CONFIG_GRKERNSEC
+	error = -EPERM;
+	if (gr_handle_chroot_sysctl(op))
+		goto out;
+	dget(filp->f_path.dentry);
+	if (gr_handle_sysctl_mod((const char *)filp->f_path.dentry->d_parent->d_name.name, table->procname, op)) {
+		dput(filp->f_path.dentry);
+		goto out;
+	}
+	dput(filp->f_path.dentry);
+	if (!gr_acl_handle_open(filp->f_path.dentry, filp->f_path.mnt, op))
+		goto out;
+	if (write) {
+		if (current->nsproxy->net_ns != table->extra2) {
+			if (!capable(CAP_SYS_ADMIN))
+				goto out;
+		} else if (!ns_capable(current->nsproxy->net_ns->user_ns, CAP_NET_ADMIN))
+			goto out;
+	}
+#endif
+
 	/* careful: calling conventions are nasty here */
 	res = count;
 	error = table->proc_handler(table, write, buf, &res, ppos);
@@ -648,6 +681,7 @@ static bool proc_sys_fill_cache(struct file *file,
 				return false;
 			}
 			d_set_d_op(child, &proc_sys_dentry_operations);
+			gr_handle_proc_create(child, inode);
 			d_add(child, inode);
 		}
 	}
@@ -688,6 +722,9 @@ static int scan(struct ctl_table_header *head, struct ctl_table *table,
 	if ((*pos)++ < ctx->pos)
 		return true;
 
+	if (!gr_acl_handle_hidden_file(file->f_path.dentry, file->f_path.mnt))
+		return 0;
+
 	if (unlikely(S_ISLNK(table->mode)))
 		res = proc_sys_link_fill_cache(file, ctx, head, table);
 	else
@@ -782,6 +819,9 @@ static int proc_sys_getattr(struct vfsmount *mnt, struct dentry *dentry, struct
 	if (IS_ERR(head))
 		return PTR_ERR(head);
 
+	if (table && !gr_acl_handle_hidden_file(dentry, mnt))
+		return -ENOENT;
+
 	generic_fillattr(inode, stat);
 	if (table)
 		stat->mode = (stat->mode & S_IFMT) | table->mode;
@@ -804,13 +844,13 @@ static const struct file_operations proc_sys_dir_file_operations = {
 	.llseek		= generic_file_llseek,
 };
 
-static const struct inode_operations proc_sys_inode_operations = {
+const struct inode_operations proc_sys_inode_operations = {
 	.permission	= proc_sys_permission,
 	.setattr	= proc_sys_setattr,
 	.getattr	= proc_sys_getattr,
 };
 
-static const struct inode_operations proc_sys_dir_operations = {
+const struct inode_operations proc_sys_dir_operations = {
 	.lookup		= proc_sys_lookup,
 	.permission	= proc_sys_permission,
 	.setattr	= proc_sys_setattr,
diff --git a/fs/proc/root.c b/fs/proc/root.c
index 8d3e484055a6..5fc5ce2693e2 100644
--- a/fs/proc/root.c
+++ b/fs/proc/root.c
@@ -143,7 +143,15 @@ void __init proc_root_init(void)
 	proc_create_mount_point("openprom");
 #endif
 	proc_tty_init();
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+	proc_mkdir_mode("bus", S_IRUSR | S_IXUSR, NULL);
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	proc_mkdir_mode("bus", S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP, NULL);
+#endif
+#else
 	proc_mkdir("bus", NULL);
+#endif
 	proc_sys_init();
 }
 
diff --git a/fs/proc/stat.c b/fs/proc/stat.c
index d700c42b3572..f711c8623acc 100644
--- a/fs/proc/stat.c
+++ b/fs/proc/stat.c
@@ -11,6 +11,7 @@
 #include <linux/irqnr.h>
 #include <linux/cputime.h>
 #include <linux/tick.h>
+#include <linux/grsecurity.h>
 
 #ifndef arch_irq_stat_cpu
 #define arch_irq_stat_cpu(cpu) 0
@@ -86,6 +87,18 @@ static int show_stat(struct seq_file *p, void *v)
 	u64 sum_softirq = 0;
 	unsigned int per_softirq_sums[NR_SOFTIRQS] = {0};
 	struct timespec64 boottime;
+	int unrestricted = 1;
+
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	if (!uid_eq(current_uid(), GLOBAL_ROOT_UID)
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+		&& !in_group_p(grsec_proc_gid)
+#endif
+	)
+		unrestricted = 0;
+#endif
+#endif
 
 	user = nice = system = idle = iowait =
 		irq = softirq = steal = 0;
@@ -97,23 +110,25 @@ static int show_stat(struct seq_file *p, void *v)
 		nice += kcpustat_cpu(i).cpustat[CPUTIME_NICE];
 		system += kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM];
 		idle += get_idle_time(i);
-		iowait += get_iowait_time(i);
-		irq += kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
-		softirq += kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
-		steal += kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
-		guest += kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
-		guest_nice += kcpustat_cpu(i).cpustat[CPUTIME_GUEST_NICE];
-		sum += kstat_cpu_irqs_sum(i);
-		sum += arch_irq_stat_cpu(i);
-
-		for (j = 0; j < NR_SOFTIRQS; j++) {
-			unsigned int softirq_stat = kstat_softirqs_cpu(j, i);
-
-			per_softirq_sums[j] += softirq_stat;
-			sum_softirq += softirq_stat;
+		if (unrestricted) {
+			iowait += get_iowait_time(i);
+			irq += kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
+			softirq += kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
+			steal += kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
+			guest += kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
+			guest_nice += kcpustat_cpu(i).cpustat[CPUTIME_GUEST_NICE];
+			sum += kstat_cpu_irqs_sum(i);
+			sum += arch_irq_stat_cpu(i);
+			for (j = 0; j < NR_SOFTIRQS; j++) {
+				unsigned int softirq_stat = kstat_softirqs_cpu(j, i);
+
+				per_softirq_sums[j] += softirq_stat;
+				sum_softirq += softirq_stat;
+			}
 		}
 	}
-	sum += arch_irq_stat();
+	if (unrestricted)
+		sum += arch_irq_stat();
 
 	seq_put_decimal_ull(p, "cpu  ", cputime64_to_clock_t(user));
 	seq_put_decimal_ull(p, " ", cputime64_to_clock_t(nice));
@@ -133,12 +148,14 @@ static int show_stat(struct seq_file *p, void *v)
 		nice = kcpustat_cpu(i).cpustat[CPUTIME_NICE];
 		system = kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM];
 		idle = get_idle_time(i);
-		iowait = get_iowait_time(i);
-		irq = kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
-		softirq = kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
-		steal = kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
-		guest = kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
-		guest_nice = kcpustat_cpu(i).cpustat[CPUTIME_GUEST_NICE];
+		if (unrestricted) {
+			iowait = get_iowait_time(i);
+			irq = kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
+			softirq = kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
+			steal = kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
+			guest = kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
+			guest_nice = kcpustat_cpu(i).cpustat[CPUTIME_GUEST_NICE];
+		}
 		seq_printf(p, "cpu%d", i);
 		seq_put_decimal_ull(p, " ", cputime64_to_clock_t(user));
 		seq_put_decimal_ull(p, " ", cputime64_to_clock_t(nice));
@@ -156,7 +173,7 @@ static int show_stat(struct seq_file *p, void *v)
 
 	/* sum again ? it could be updated? */
 	for_each_irq_nr(j)
-		seq_put_decimal_ull(p, " ", kstat_irqs_usr(j));
+		seq_put_decimal_ull(p, " ", unrestricted ? kstat_irqs_usr(j) : 0ULL);
 
 	seq_printf(p,
 		"\nctxt %llu\n"
@@ -164,11 +181,11 @@ static int show_stat(struct seq_file *p, void *v)
 		"processes %lu\n"
 		"procs_running %lu\n"
 		"procs_blocked %lu\n",
-		nr_context_switches(),
+		unrestricted ? nr_context_switches() : 0ULL,
 		(unsigned long long)boottime.tv_sec,
-		total_forks,
-		nr_running(),
-		nr_iowait());
+		unrestricted ? total_forks : 0UL,
+		unrestricted ? nr_running() : 0UL,
+		unrestricted ? nr_iowait() : 0UL);
 
 	seq_put_decimal_ull(p, "softirq ", (unsigned long long)sum_softirq);
 
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index 01a4c701864d..b1aa8042308f 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -15,12 +15,19 @@
 #include <linux/mmu_notifier.h>
 #include <linux/page_idle.h>
 #include <linux/shmem_fs.h>
+#include <linux/grsecurity.h>
 
 #include <asm/elf.h>
 #include <asm/uaccess.h>
 #include <asm/tlbflush.h>
 #include "internal.h"
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+#define PAX_RAND_FLAGS(_mm) (_mm != NULL && _mm != current->mm && \
+			     (_mm->pax_flags & MF_PAX_RANDMMAP || \
+			      _mm->pax_flags & MF_PAX_SEGMEXEC))
+#endif
+
 void task_mem(struct seq_file *m, struct mm_struct *mm)
 {
 	unsigned long text, lib, swap, ptes, pmds, anon, file, shmem;
@@ -87,7 +94,13 @@ void task_mem(struct seq_file *m, struct mm_struct *mm)
 		swap << (PAGE_SHIFT-10)
 
 #ifdef CONFIG_ARCH_TRACK_EXEC_LIMIT
-		, mm->context.user_cs_base, mm->context.user_cs_limit
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+		, PAX_RAND_FLAGS(mm) ? 0 : mm->context.user_cs_base
+		, PAX_RAND_FLAGS(mm) ? 0 : mm->context.user_cs_limit
+#else
+		, mm->context.user_cs_base
+		, mm->context.user_cs_limit
+#endif
 #endif
 
 	);
@@ -243,7 +256,11 @@ static int proc_maps_open(struct inode *inode, struct file *file,
 		return -ENOMEM;
 
 	priv->inode = inode;
-	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ);
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ, &priv->ptracer_exec_id);
+#else
+	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ, NULL);
+#endif
 	if (IS_ERR(priv->mm)) {
 		int err = PTR_ERR(priv->mm);
 
@@ -290,7 +307,7 @@ static int is_stack(struct proc_maps_private *priv,
 }
 
 static void
-show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
+show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid, bool restrict)
 {
 	struct mm_struct *mm = vma->vm_mm;
 	struct file *file = vma->vm_file;
@@ -309,26 +326,18 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
 	}
 
-	start = vma->vm_start;
-	end = vma->vm_end;
+	start = restrict ? 0UL : vma->vm_start;
+	end = restrict ? 0UL : vma->vm_end;
 
 	seq_setwidth(m, 25 + sizeof(void *) * 6 - 1);
 	seq_printf(m, "%08lx-%08lx %c%c%c%c %08llx %02x:%02x %lu ",
 			start,
 			end,
-
-#if 0
-			flags & VM_MAYREAD ? flags & VM_READ ? 'R' : '+' : flags & VM_READ ? 'r' : '-',
-			flags & VM_MAYWRITE ? flags & VM_WRITE ? 'W' : '+' : flags & VM_WRITE ? 'w' : '-',
-			flags & VM_MAYEXEC ? flags & VM_EXEC ? 'X' : '+' : flags & VM_EXEC ? 'x' : '-',
-#else
 			flags & VM_READ ? 'r' : '-',
 			flags & VM_WRITE ? 'w' : '-',
 			flags & VM_EXEC ? 'x' : '-',
-#endif
-
 			flags & VM_MAYSHARE ? 's' : 'p',
-			pgoff,
+			restrict ? 0UL : pgoff,
 			MAJOR(dev), MINOR(dev), ino);
 
 	/*
@@ -374,7 +383,20 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
 
 static int show_map(struct seq_file *m, void *v, int is_pid)
 {
-	show_map_vma(m, v, is_pid);
+	bool restrict = false;
+
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	struct vm_area_struct *vma = (struct vm_area_struct *)v;
+	struct proc_maps_private *priv = m->private;
+	restrict = current->exec_id != priv->ptracer_exec_id;
+	if (current->exec_id != m->exec_id && restrict) {
+		gr_log_badprocpid("maps");
+		return 0;
+	}
+	if (restrict)
+		restrict = PAX_RAND_FLAGS(vma->vm_mm);
+#endif
+	show_map_vma(m, v, is_pid, restrict);
 	m_cache_vma(m, v);
 	return 0;
 }
@@ -746,7 +768,14 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)
 		.mm = vma->vm_mm,
 		.private = &mss,
 	};
+	bool restrict = false;
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (current->exec_id != m->exec_id) {
+		gr_log_badprocpid("smaps");
+		return 0;
+	}
+#endif
 	memset(&mss, 0, sizeof mss);
 
 #ifdef CONFIG_SHMEM
@@ -773,10 +802,15 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)
 	}
 #endif
 
-	/* mmap_sem is held in m_start */
-	walk_page_vma(vma, &smaps_walk);
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (PAX_RAND_FLAGS(vma->vm_mm))
+		restrict = true;
+	else
+#endif
+		/* mmap_sem is held in m_start */
+		walk_page_vma(vma, &smaps_walk);
 
-	show_map_vma(m, vma, is_pid);
+	show_map_vma(m, vma, is_pid, restrict);
 
 	seq_printf(m,
 		   "Size:           %8lu kB\n"
@@ -797,7 +831,7 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)
 		   "KernelPageSize: %8lu kB\n"
 		   "MMUPageSize:    %8lu kB\n"
 		   "Locked:         %8lu kB\n",
-		   (vma->vm_end - vma->vm_start) >> 10,
+		   restrict ? 0UL : (vma->vm_end - vma->vm_start) >> 10,
 		   mss.resident >> 10,
 		   (unsigned long)(mss.pss >> (10 + PSS_SHIFT)),
 		   mss.shared_clean  >> 10,
@@ -1461,7 +1495,7 @@ static int pagemap_open(struct inode *inode, struct file *file)
 {
 	struct mm_struct *mm;
 
-	mm = proc_mem_open(inode, PTRACE_MODE_READ);
+	mm = proc_mem_open(inode, PTRACE_MODE_READ, NULL);
 	if (IS_ERR(mm))
 		return PTR_ERR(mm);
 	file->private_data = mm;
@@ -1664,6 +1698,13 @@ static int show_numa_map(struct seq_file *m, void *v, int is_pid)
 	char buffer[64];
 	int nid;
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (current->exec_id != m->exec_id) {
+		gr_log_badprocpid("numa_maps");
+		return 0;
+	}
+#endif
+
 	if (!mm)
 		return 0;
 
@@ -1678,7 +1719,11 @@ static int show_numa_map(struct seq_file *m, void *v, int is_pid)
 		mpol_to_str(buffer, sizeof(buffer), proc_priv->task_mempolicy);
 	}
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	seq_printf(m, "%08lx %s", PAX_RAND_FLAGS(vma->vm_mm) ? 0UL : vma->vm_start, buffer);
+#else
 	seq_printf(m, "%08lx %s", vma->vm_start, buffer);
+#endif
 
 	if (file) {
 		seq_puts(m, " file=");
diff --git a/fs/proc/task_nommu.c b/fs/proc/task_nommu.c
index 58d11ecbd556..b6237abf7972 100644
--- a/fs/proc/task_nommu.c
+++ b/fs/proc/task_nommu.c
@@ -280,7 +280,7 @@ static int maps_open(struct inode *inode, struct file *file,
 		return -ENOMEM;
 
 	priv->inode = inode;
-	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ);
+	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ, NULL);
 	if (IS_ERR(priv->mm)) {
 		int err = PTR_ERR(priv->mm);
 
diff --git a/fs/readdir.c b/fs/readdir.c
index 89998ea6b53f..da1afd12ced6 100644
--- a/fs/readdir.c
+++ b/fs/readdir.c
@@ -18,6 +18,7 @@
 #include <linux/security.h>
 #include <linux/syscalls.h>
 #include <linux/unistd.h>
+#include <linux/namei.h>
 
 #include <asm/uaccess.h>
 
@@ -84,6 +85,7 @@ struct old_linux_dirent {
 struct readdir_callback {
 	struct dir_context ctx;
 	struct old_linux_dirent __user * dirent;
+	struct file * file;
 	int result;
 };
 
@@ -102,6 +104,10 @@ static int fillonedir(struct dir_context *ctx, const char *name, int namlen,
 		buf->result = -EOVERFLOW;
 		return -EOVERFLOW;
 	}
+
+	if (!gr_acl_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+
 	buf->result++;
 	dirent = buf->dirent;
 	if (!access_ok(VERIFY_WRITE, dirent,
@@ -133,6 +139,7 @@ SYSCALL_DEFINE3(old_readdir, unsigned int, fd,
 	if (!f.file)
 		return -EBADF;
 
+	buf.file = f.file;
 	error = iterate_dir(f.file, &buf.ctx);
 	if (buf.result)
 		error = buf.result;
@@ -158,6 +165,7 @@ struct getdents_callback {
 	struct dir_context ctx;
 	struct linux_dirent __user * current_dir;
 	struct linux_dirent __user * previous;
+	struct file * file;
 	int count;
 	int error;
 };
@@ -180,6 +188,10 @@ static int filldir(struct dir_context *ctx, const char *name, int namlen,
 		buf->error = -EOVERFLOW;
 		return -EOVERFLOW;
 	}
+
+	if (!gr_acl_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+
 	dirent = buf->previous;
 	if (dirent) {
 		if (signal_pending(current))
@@ -227,6 +239,7 @@ SYSCALL_DEFINE3(getdents, unsigned int, fd,
 	if (!f.file)
 		return -EBADF;
 
+	buf.file = f.file;
 	error = iterate_dir(f.file, &buf.ctx);
 	if (error >= 0)
 		error = buf.error;
@@ -245,6 +258,7 @@ struct getdents_callback64 {
 	struct dir_context ctx;
 	struct linux_dirent64 __user * current_dir;
 	struct linux_dirent64 __user * previous;
+	struct file *file;
 	int count;
 	int error;
 };
@@ -261,6 +275,10 @@ static int filldir64(struct dir_context *ctx, const char *name, int namlen,
 	buf->error = -EINVAL;	/* only used if we fail.. */
 	if (reclen > buf->count)
 		return -EINVAL;
+
+	if (!gr_acl_handle_filldir(buf->file, name, namlen, ino))
+		return 0;
+
 	dirent = buf->previous;
 	if (dirent) {
 		if (signal_pending(current))
@@ -310,6 +328,7 @@ SYSCALL_DEFINE3(getdents64, unsigned int, fd,
 	if (!f.file)
 		return -EBADF;
 
+	buf.file = f.file;
 	error = iterate_dir(f.file, &buf.ctx);
 	if (error >= 0)
 		error = buf.error;
diff --git a/fs/reiserfs/item_ops.c b/fs/reiserfs/item_ops.c
index aca73dd73906..e3c558d1b78c 100644
--- a/fs/reiserfs/item_ops.c
+++ b/fs/reiserfs/item_ops.c
@@ -724,18 +724,18 @@ static void errcatch_print_vi(struct virtual_item *vi)
 }
 
 static struct item_operations errcatch_ops = {
-	errcatch_bytes_number,
-	errcatch_decrement_key,
-	errcatch_is_left_mergeable,
-	errcatch_print_item,
-	errcatch_check_item,
-
-	errcatch_create_vi,
-	errcatch_check_left,
-	errcatch_check_right,
-	errcatch_part_size,
-	errcatch_unit_num,
-	errcatch_print_vi
+	.bytes_number = errcatch_bytes_number,
+	.decrement_key = errcatch_decrement_key,
+	.is_left_mergeable = errcatch_is_left_mergeable,
+	.print_item = errcatch_print_item,
+	.check_item = errcatch_check_item,
+
+	.create_vi = errcatch_create_vi,
+	.check_left = errcatch_check_left,
+	.check_right = errcatch_check_right,
+	.part_size = errcatch_part_size,
+	.unit_num = errcatch_unit_num,
+	.print_vi = errcatch_print_vi
 };
 
 #if ! (TYPE_STAT_DATA == 0 && TYPE_INDIRECT == 1 && TYPE_DIRECT == 2 && TYPE_DIRENTRY == 3)
diff --git a/fs/reiserfs/super.c b/fs/reiserfs/super.c
index 0a6ad4e71e88..fbaf9b4cd281 100644
--- a/fs/reiserfs/super.c
+++ b/fs/reiserfs/super.c
@@ -1887,6 +1887,10 @@ static int reiserfs_fill_super(struct super_block *s, void *data, int silent)
 	sbi->s_mount_opt |= (1 << REISERFS_SMALLTAIL);
 	sbi->s_mount_opt |= (1 << REISERFS_ERROR_RO);
 	sbi->s_mount_opt |= (1 << REISERFS_BARRIER_FLUSH);
+#ifdef CONFIG_REISERFS_FS_XATTR
+	/* turn on user xattrs by default */
+	sbi->s_mount_opt |= (1 << REISERFS_XATTRS_USER);
+#endif
 	/* no preallocation minimum, be smart in reiserfs_file_write instead */
 	sbi->s_alloc_options.preallocmin = 0;
 	/* Preallocate by 16 blocks (17-1) at once */
diff --git a/fs/select.c b/fs/select.c
index b9ed87b5f7cc..98af55774ced 100644
--- a/fs/select.c
+++ b/fs/select.c
@@ -20,6 +20,7 @@
 #include <linux/export.h>
 #include <linux/slab.h>
 #include <linux/poll.h>
+#include <linux/security.h>
 #include <linux/personality.h> /* for STICKY_TIMEOUTS */
 #include <linux/file.h>
 #include <linux/fdtable.h>
@@ -894,6 +895,7 @@ int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,
  	struct poll_list *walk = head;
  	unsigned long todo = nfds;
 
+	gr_learn_resource(current, RLIMIT_NOFILE, nfds, 1);
 	if (nfds > rlimit(RLIMIT_NOFILE))
 		return -EINVAL;
 
diff --git a/fs/seq_file.c b/fs/seq_file.c
index 6cd7726dbbdf..5b43f3778284 100644
--- a/fs/seq_file.c
+++ b/fs/seq_file.c
@@ -14,6 +14,8 @@
 #include <linux/mm.h>
 #include <linux/printk.h>
 #include <linux/string_helpers.h>
+#include <linux/sched.h>
+#include <linux/grsecurity.h>
 
 #include <asm/uaccess.h>
 #include <asm/page.h>
@@ -26,7 +28,7 @@ static void seq_set_overflow(struct seq_file *m)
 static void *seq_buf_alloc(unsigned long size)
 {
 	void *buf;
-	gfp_t gfp = GFP_KERNEL;
+	gfp_t gfp = GFP_KERNEL | GFP_USERCOPY;
 
 	/*
 	 * For high order allocations, use __GFP_NORETRY to avoid oom-killing -
@@ -38,7 +40,7 @@ static void *seq_buf_alloc(unsigned long size)
 		gfp |= __GFP_NORETRY | __GFP_NOWARN;
 	buf = kmalloc(size, gfp);
 	if (!buf && size > PAGE_SIZE)
-		buf = vmalloc(size);
+		buf = vmalloc_usercopy(size);
 	return buf;
 }
 
@@ -77,6 +79,10 @@ int seq_open(struct file *file, const struct seq_operations *op)
 	// to the lifetime of the file.
 	p->file = file;
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	p->exec_id = current->exec_id;
+#endif
+
 	/*
 	 * Wrappers around seq_open(e.g. swaps_open) need to be
 	 * aware of this. If they set f_version themselves, they
@@ -98,6 +104,16 @@ int seq_open(struct file *file, const struct seq_operations *op)
 }
 EXPORT_SYMBOL(seq_open);
 
+
+int seq_open_restrict(struct file *file, const struct seq_operations *op)
+{
+	if (gr_proc_is_restricted())
+		return -EACCES;
+
+	return seq_open(file, op);
+}
+EXPORT_SYMBOL(seq_open_restrict);
+
 static int traverse(struct seq_file *m, loff_t offset)
 {
 	loff_t pos = 0, index;
@@ -602,6 +618,17 @@ int single_open_size(struct file *file, int (*show)(struct seq_file *, void *),
 }
 EXPORT_SYMBOL(single_open_size);
 
+int single_open_restrict(struct file *file, int (*show)(struct seq_file *, void *),
+		void *data)
+{
+	if (gr_proc_is_restricted())
+		return -EACCES;
+
+	return single_open(file, show, data);
+}
+EXPORT_SYMBOL(single_open_restrict);
+
+
 int single_release(struct inode *inode, struct file *file)
 {
 	const struct seq_operations *op = ((struct seq_file *)file->private_data)->op;
diff --git a/fs/stat.c b/fs/stat.c
index bc045c7994e1..68725c1426e1 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -28,8 +28,13 @@ void generic_fillattr(struct inode *inode, struct kstat *stat)
 	stat->gid = inode->i_gid;
 	stat->rdev = inode->i_rdev;
 	stat->size = i_size_read(inode);
-	stat->atime = inode->i_atime;
-	stat->mtime = inode->i_mtime;
+	if (is_sidechannel_device(inode) && !capable_nolog(CAP_MKNOD)) {
+		stat->atime = inode->i_ctime;
+		stat->mtime = inode->i_ctime;
+	} else {
+		stat->atime = inode->i_atime;
+		stat->mtime = inode->i_mtime;
+	}
 	stat->ctime = inode->i_ctime;
 	stat->blksize = (1 << inode->i_blkbits);
 	stat->blocks = inode->i_blocks;
@@ -52,9 +57,16 @@ EXPORT_SYMBOL(generic_fillattr);
 int vfs_getattr_nosec(struct path *path, struct kstat *stat)
 {
 	struct inode *inode = d_backing_inode(path->dentry);
+	int retval;
 
-	if (inode->i_op->getattr)
-		return inode->i_op->getattr(path->mnt, path->dentry, stat);
+	if (inode->i_op->getattr) {
+		retval = inode->i_op->getattr(path->mnt, path->dentry, stat);
+		if (!retval && is_sidechannel_device(inode) && !capable_nolog(CAP_MKNOD)) {
+			stat->atime = stat->ctime;
+			stat->mtime = stat->ctime;
+		}
+		return retval;
+	}
 
 	generic_fillattr(inode, stat);
 	return 0;
diff --git a/fs/sysfs/dir.c b/fs/sysfs/dir.c
index 2b67bda2021b..45acc9f129f1 100644
--- a/fs/sysfs/dir.c
+++ b/fs/sysfs/dir.c
@@ -33,6 +33,10 @@ void sysfs_warn_dup(struct kernfs_node *parent, const char *name)
 	kfree(buf);
 }
 
+#ifdef CONFIG_GRKERNSEC_SYSFS_RESTRICT
+extern int grsec_enable_sysfs_restrict;
+#endif
+
 /**
  * sysfs_create_dir_ns - create a directory for an object with a namespace tag
  * @kobj: object we're creating directory for
@@ -41,9 +45,16 @@ void sysfs_warn_dup(struct kernfs_node *parent, const char *name)
 int sysfs_create_dir_ns(struct kobject *kobj, const void *ns)
 {
 	struct kernfs_node *parent, *kn;
+	const char *name;
+	umode_t mode = S_IRWXU | S_IRUGO | S_IXUGO;
+#ifdef CONFIG_GRKERNSEC_SYSFS_RESTRICT
+	const char *parent_name;
+#endif
 
 	BUG_ON(!kobj);
 
+	name = kobject_name(kobj);
+
 	if (kobj->parent)
 		parent = kobj->parent->sd;
 	else
@@ -52,11 +63,24 @@ int sysfs_create_dir_ns(struct kobject *kobj, const void *ns)
 	if (!parent)
 		return -ENOENT;
 
-	kn = kernfs_create_dir_ns(parent, kobject_name(kobj),
-				  S_IRWXU | S_IRUGO | S_IXUGO, kobj, ns);
+#ifdef CONFIG_GRKERNSEC_SYSFS_RESTRICT
+	parent_name = parent->name;
+	mode = S_IRWXU;
+
+	if ((!strcmp(parent_name, "") && (!strcmp(name, "devices") || !strcmp(name, "fs"))) ||
+	    (!strcmp(parent_name, "devices") && !strcmp(name, "system")) ||
+	    (!strcmp(parent_name, "fs") && (!strcmp(name, "selinux") || !strcmp(name, "fuse") || !strcmp(name, "ecryptfs"))) ||
+	    (!strcmp(parent_name, "system") && !strcmp(name, "cpu")))
+		mode = S_IRWXU | S_IRUGO | S_IXUGO;
+	if (!grsec_enable_sysfs_restrict)
+		mode = S_IRWXU | S_IRUGO | S_IXUGO;
+#endif
+
+	kn = kernfs_create_dir_ns(parent, name,
+				  mode, kobj, ns);
 	if (IS_ERR(kn)) {
 		if (PTR_ERR(kn) == -EEXIST)
-			sysfs_warn_dup(parent, kobject_name(kobj));
+			sysfs_warn_dup(parent, name);
 		return PTR_ERR(kn);
 	}
 
diff --git a/fs/utimes.c b/fs/utimes.c
index 22307cdf7014..87b5f8665805 100644
--- a/fs/utimes.c
+++ b/fs/utimes.c
@@ -1,6 +1,7 @@
 #include <linux/compiler.h>
 #include <linux/file.h>
 #include <linux/fs.h>
+#include <linux/security.h>
 #include <linux/linkage.h>
 #include <linux/mount.h>
 #include <linux/namei.h>
@@ -90,6 +91,12 @@ static int utimes_common(struct path *path, struct timespec *times)
 		newattrs.ia_valid |= ATTR_TOUCH;
 	}
 retry_deleg:
+
+	if (!gr_acl_handle_utime(path->dentry, path->mnt)) {
+		error = -EACCES;
+		goto mnt_drop_write_and_out;
+	}
+
 	inode_lock(inode);
 	error = notify_change(path->dentry, &newattrs, &delegated_inode);
 	inode_unlock(inode);
@@ -99,6 +106,7 @@ static int utimes_common(struct path *path, struct timespec *times)
 			goto retry_deleg;
 	}
 
+mnt_drop_write_and_out:
 	mnt_drop_write(path->mnt);
 out:
 	return error;
diff --git a/fs/xattr.c b/fs/xattr.c
index 9126b1baef65..c9348e414867 100644
--- a/fs/xattr.c
+++ b/fs/xattr.c
@@ -428,7 +428,7 @@ EXPORT_SYMBOL_GPL(vfs_removexattr);
  * Extended attribute SET operations
  */
 static long
-setxattr(struct dentry *d, const char __user *name, const void __user *value,
+setxattr(struct path *path, const char __user *name, const void __user *value,
 	 size_t size, int flags)
 {
 	int error;
@@ -462,7 +462,12 @@ setxattr(struct dentry *d, const char __user *name, const void __user *value,
 			posix_acl_fix_xattr_from_user(kvalue, size);
 	}
 
-	error = vfs_setxattr(d, kname, kvalue, size, flags);
+	if (!gr_acl_handle_setxattr(path->dentry, path->mnt)) {
+		error = -EACCES;
+		goto out;
+	}
+
+	error = vfs_setxattr(path->dentry, kname, kvalue, size, flags);
 out:
 	kvfree(kvalue);
 
@@ -481,7 +486,7 @@ static int path_setxattr(const char __user *pathname,
 		return error;
 	error = mnt_want_write(path.mnt);
 	if (!error) {
-		error = setxattr(path.dentry, name, value, size, flags);
+		error = setxattr(&path, name, value, size, flags);
 		mnt_drop_write(path.mnt);
 	}
 	path_put(&path);
@@ -517,7 +522,7 @@ SYSCALL_DEFINE5(fsetxattr, int, fd, const char __user *, name,
 	audit_file(f.file);
 	error = mnt_want_write_file(f.file);
 	if (!error) {
-		error = setxattr(f.file->f_path.dentry, name, value, size, flags);
+		error = setxattr(&f.file->f_path, name, value, size, flags);
 		mnt_drop_write_file(f.file);
 	}
 	fdput(f);
@@ -697,7 +702,7 @@ SYSCALL_DEFINE3(flistxattr, int, fd, char __user *, list, size_t, size)
  * Extended attribute REMOVE operations
  */
 static long
-removexattr(struct dentry *d, const char __user *name)
+removexattr(struct path *path, const char __user *name)
 {
 	int error;
 	char kname[XATTR_NAME_MAX + 1];
@@ -708,7 +713,10 @@ removexattr(struct dentry *d, const char __user *name)
 	if (error < 0)
 		return error;
 
-	return vfs_removexattr(d, kname);
+	if (!gr_acl_handle_removexattr(path->dentry, path->mnt))
+		return -EACCES;
+
+	return vfs_removexattr(path->dentry, kname);
 }
 
 static int path_removexattr(const char __user *pathname,
@@ -722,7 +730,7 @@ static int path_removexattr(const char __user *pathname,
 		return error;
 	error = mnt_want_write(path.mnt);
 	if (!error) {
-		error = removexattr(path.dentry, name);
+		error = removexattr(&path, name);
 		mnt_drop_write(path.mnt);
 	}
 	path_put(&path);
@@ -748,14 +756,16 @@ SYSCALL_DEFINE2(lremovexattr, const char __user *, pathname,
 SYSCALL_DEFINE2(fremovexattr, int, fd, const char __user *, name)
 {
 	struct fd f = fdget(fd);
+	struct path *path;
 	int error = -EBADF;
 
 	if (!f.file)
 		return error;
+	path = &f.file->f_path;
 	audit_file(f.file);
 	error = mnt_want_write_file(f.file);
 	if (!error) {
-		error = removexattr(f.file->f_path.dentry, name);
+		error = removexattr(path, name);
 		mnt_drop_write_file(f.file);
 	}
 	fdput(f);
diff --git a/fs/xfs/xfs_ioctl.c b/fs/xfs/xfs_ioctl.c
index 64ed756202de..7474a848b05e 100644
--- a/fs/xfs/xfs_ioctl.c
+++ b/fs/xfs/xfs_ioctl.c
@@ -1659,6 +1659,12 @@ xfs_ioc_swapext(
 		goto out_put_tmp_file;
 	}
 
+	if (f.file->f_op != &xfs_file_operations ||
+	    tmp.file->f_op != &xfs_file_operations) {
+		error = -EINVAL;
+		goto out_put_tmp_file;
+	}
+
 	ip = XFS_I(file_inode(f.file));
 	tip = XFS_I(file_inode(tmp.file));
 
diff --git a/grsecurity/Kconfig b/grsecurity/Kconfig
new file mode 100644
index 000000000000..f1c1ee2847c7
--- /dev/null
+++ b/grsecurity/Kconfig
@@ -0,0 +1,1206 @@
+#
+# grecurity configuration
+#
+menu "Memory Protections"
+depends on GRKERNSEC
+
+config GRKERNSEC_KMEM
+	bool "Deny reading/writing to /dev/kmem, /dev/mem, and /dev/port"
+	default y if GRKERNSEC_CONFIG_AUTO
+	select STRICT_DEVMEM if (X86 || ARM || TILE || S390)
+	help
+	  If you say Y here, /dev/kmem and /dev/mem won't be allowed to
+	  be written to or read from to modify or leak the contents of the running
+	  kernel.  /dev/port will also not be allowed to be opened, writing to
+	  /dev/cpu/*/msr will be prevented, and support for kexec will be removed.
+	  If you have module support disabled, enabling this will close up several
+	  ways that are currently used to insert malicious code into the running
+	  kernel.
+
+	  Even with this feature enabled, we still highly recommend that
+	  you use the RBAC system, as it is still possible for an attacker to
+	  modify the running kernel through other more obscure methods.
+
+	  Enabling this feature will prevent the "cpupower" and "powertop" tools
+	  from working and excludes debugfs from being compiled into the kernel.
+
+	  It is highly recommended that you say Y here if you meet all the
+	  conditions above.
+
+config GRKERNSEC_VM86
+	bool "Restrict VM86 mode"
+	default y if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_SERVER)
+	depends on X86_32
+
+	help
+	  If you say Y here, only processes with CAP_SYS_RAWIO will be able to
+	  make use of a special execution mode on 32bit x86 processors called
+	  Virtual 8086 (VM86) mode.  XFree86 may need vm86 mode for certain
+	  video cards and will still work with this option enabled.  The purpose
+	  of the option is to prevent exploitation of emulation errors in
+	  virtualization of vm86 mode like the one discovered in VMWare in 2009.
+	  Nearly all users should be able to enable this option.
+
+config GRKERNSEC_IO
+	bool "Disable privileged I/O"
+	default y if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_SERVER)
+	depends on X86
+	select RTC_CLASS
+	select RTC_INTF_DEV
+	select RTC_DRV_CMOS
+
+	help
+	  If you say Y here, all ioperm and iopl calls will return an error.
+	  Ioperm and iopl can be used to modify the running kernel.
+	  Unfortunately, some programs need this access to operate properly,
+	  the most notable of which are XFree86 and hwclock.  hwclock can be
+	  remedied by having RTC support in the kernel, so real-time 
+	  clock support is enabled if this option is enabled, to ensure 
+	  that hwclock operates correctly.  If hwclock still does not work,
+	  either update udev or symlink /dev/rtc to /dev/rtc0.
+
+	  If you're using XFree86 or a version of Xorg from 2012 or earlier,
+	  you may not be able to boot into a graphical environment with this
+	  option enabled.  In this case, you should use the RBAC system instead.
+
+config GRKERNSEC_BPF_HARDEN
+	bool "Harden BPF interpreter"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  Unlike previous versions of grsecurity that hardened both the BPF
+	  interpreted code against corruption at rest as well as the JIT code
+	  against JIT-spray attacks and attacker-controlled immediate values
+	  for ROP, this feature will enforce disabling of the new eBPF JIT engine
+	  and will ensure the interpreted code is read-only at rest.  This feature
+	  may be removed at a later time when eBPF stabilizes to entirely revert
+	  back to the more secure pre-3.16 BPF interpreter/JIT.
+
+	  If you're using KERNEXEC, it's recommended that you enable this option
+	  to supplement the hardening of the kernel.
+  
+config GRKERNSEC_PERF_HARDEN
+	bool "Disable unprivileged PERF_EVENTS usage by default"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on PERF_EVENTS
+	help
+	  If you say Y here, the range of acceptable values for the
+	  /proc/sys/kernel/perf_event_paranoid sysctl will be expanded to allow and
+	  default to a new value: 3.  When the sysctl is set to this value, no
+	  unprivileged use of the PERF_EVENTS syscall interface will be permitted.
+
+	  Though PERF_EVENTS can be used legitimately for performance monitoring
+	  and low-level application profiling, it is forced on regardless of
+	  configuration, has been at fault for several vulnerabilities, and
+	  creates new opportunities for side channels and other information leaks.
+
+	  This feature puts PERF_EVENTS into a secure default state and permits
+	  the administrator to change out of it temporarily if unprivileged
+	  application profiling is needed.
+
+config GRKERNSEC_RAND_THREADSTACK
+	bool "Insert random gaps between thread stacks"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on PAX_RANDMMAP && !PPC
+	help
+	  If you say Y here, a random-sized gap will be enforced between allocated
+	  thread stacks.  Glibc's NPTL and other threading libraries that
+	  pass MAP_STACK to the kernel for thread stack allocation are supported.
+	  The implementation currently provides 8 bits of entropy for the gap.
+
+	  Many distributions do not compile threaded remote services with the
+	  -fstack-check argument to GCC, causing the variable-sized stack-based
+	  allocator, alloca(), to not probe the stack on allocation.  This
+	  permits an unbounded alloca() to skip over any guard page and potentially
+	  modify another thread's stack reliably.  An enforced random gap
+	  reduces the reliability of such an attack and increases the chance
+	  that such a read/write to another thread's stack instead lands in
+	  an unmapped area, causing a crash and triggering grsecurity's
+	  anti-bruteforcing logic.
+
+config GRKERNSEC_PROC_MEMMAP
+	bool "Harden ASLR against information leaks and entropy reduction"
+	default y if (GRKERNSEC_CONFIG_AUTO || PAX_NOEXEC || PAX_ASLR)
+	depends on PAX_NOEXEC || PAX_ASLR
+	help
+	  If you say Y here, the /proc/<pid>/maps and /proc/<pid>/stat files will
+	  give no information about the addresses of its mappings if
+	  PaX features that rely on random addresses are enabled on the task.
+	  In addition to sanitizing this information and disabling other
+	  dangerous sources of information, this option causes reads of sensitive
+	  /proc/<pid> entries where the file descriptor was opened in a different
+	  task than the one performing the read.  Such attempts are logged.
+	  This option also limits argv/env strings for suid/sgid binaries
+	  to 512KB to prevent a complete exhaustion of the stack entropy provided
+	  by ASLR.  Finally, it places an 8MB stack resource limit on suid/sgid
+	  binaries to prevent alternative mmap layouts from being abused.
+
+	  If you use PaX it is essential that you say Y here as it closes up
+	  several holes that make full ASLR useless locally.
+
+
+config GRKERNSEC_KSTACKOVERFLOW
+	bool "Prevent kernel stack overflows"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on X86_64
+	help
+	  If you say Y here, the kernel's process stacks will be allocated
+	  with vmalloc instead of the kernel's default allocator.  This
+	  introduces guard pages that in combination with the alloca checking
+	  of the STACKLEAK feature and removal of thread_info from the kernel
+	  stack prevents all forms of kernel process stack overflow abuse.
+          Note that this is different from kernel stack buffer overflows.
+
+config GRKERNSEC_BRUTE
+	bool "Deter exploit bruteforcing"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, attempts to bruteforce exploits against forking
+	  daemons such as apache or sshd, as well as against suid/sgid binaries
+	  will be deterred.  When a child of a forking daemon is killed by PaX
+	  or crashes due to an illegal instruction or other suspicious signal,
+	  the parent process will be delayed 30 seconds upon every subsequent
+	  fork until the administrator is able to assess the situation and
+	  restart the daemon.
+	  In the suid/sgid case, the attempt is logged, the user has all their
+	  existing instances of the suid/sgid binary terminated and will
+	  be unable to execute any suid/sgid binaries for 15 minutes.
+
+	  It is recommended that you also enable signal logging in the auditing
+	  section so that logs are generated when a process triggers a suspicious
+	  signal.
+	  If the sysctl option is enabled, a sysctl option with name
+	  "deter_bruteforce" is created.
+
+config GRKERNSEC_MODHARDEN
+	bool "Harden module auto-loading"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on MODULES
+	help
+	  If you say Y here, module auto-loading in response to use of some
+	  feature implemented by an unloaded module will be restricted to
+	  root users.  Enabling this option helps defend against attacks 
+	  by unprivileged users who abuse the auto-loading behavior to 
+	  cause a vulnerable module to load that is then exploited.
+
+	  If this option prevents a legitimate use of auto-loading for a 
+	  non-root user, the administrator can execute modprobe manually 
+	  with the exact name of the module mentioned in the alert log.
+	  Alternatively, the administrator can add the module to the list
+	  of modules loaded at boot by modifying init scripts.
+
+	  Modification of init scripts will most likely be needed on 
+	  Ubuntu servers with encrypted home directory support enabled,
+	  as the first non-root user logging in will cause the ecb(aes),
+	  ecb(aes)-all, cbc(aes), and cbc(aes)-all  modules to be loaded.
+
+config GRKERNSEC_HIDESYM
+	bool "Hide kernel symbols"
+	default y if GRKERNSEC_CONFIG_AUTO
+	select PAX_USERCOPY
+	help
+	  If you say Y here, getting information on loaded modules, and
+	  displaying all kernel symbols through a syscall will be restricted
+	  to users with CAP_SYS_MODULE.  For software compatibility reasons,
+	  /proc/kallsyms will be restricted to the root user.  The RBAC
+	  system can hide that entry even from root.
+
+	  This option also prevents leaking of kernel addresses through
+	  several /proc entries.
+
+	  Note that this option is only effective provided the following
+	  conditions are met:
+	  1) The kernel using grsecurity is not precompiled by some distribution
+	  2) You have also enabled GRKERNSEC_DMESG
+	  3) You are using the RBAC system and hiding other files such as your
+	     kernel image and System.map.  Alternatively, enabling this option
+	     causes the permissions on /boot, /lib/modules, and the kernel
+	     source directory to change at compile time to prevent 
+	     reading by non-root users.
+	  If the above conditions are met, this option will aid in providing a
+	  useful protection against local kernel exploitation of overflows
+	  and arbitrary read/write vulnerabilities.
+
+	  It is highly recommended that you enable GRKERNSEC_PERF_HARDEN
+	  in addition to this feature.
+
+config GRKERNSEC_RANDSTRUCT
+	bool "Randomize layout of sensitive kernel structures"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GCC_PLUGINS
+	select GRKERNSEC_HIDESYM
+	select MODVERSIONS if MODULES
+	help
+	  If you say Y here, the layouts of a number of sensitive kernel
+	  structures (task, fs, cred, etc) and all structures composed entirely
+	  of function pointers (aka "ops" structs) will be randomized at compile-time.
+	  This can introduce the requirement of an additional infoleak
+	  vulnerability for exploits targeting these structure types.
+
+	  Enabling this feature will introduce some performance impact, slightly
+	  increase memory usage, and prevent the use of forensic tools like
+	  Volatility against the system (unless the kernel source tree isn't
+	  cleaned after kernel installation).
+
+	  The seed used for compilation is located at tools/gcc/randomize_layout_seed.h.
+	  It remains after a make clean to allow for external modules to be compiled
+	  with the existing seed and will be removed by a make mrproper or
+	  make distclean.
+
+          Note that the implementation requires gcc 4.6.4. or newer.  You may need
+	  to install the supporting headers explicitly in addition to the normal
+	  gcc package.
+
+config GRKERNSEC_RANDSTRUCT_PERFORMANCE
+	bool "Use cacheline-aware structure randomization"
+	depends on GRKERNSEC_RANDSTRUCT
+	default y if GRKERNSEC_CONFIG_PRIORITY_PERF
+	help
+	  If you say Y here, the RANDSTRUCT randomization will make a best effort
+	  at restricting randomization to cacheline-sized groups of elements.  It
+	  will further not randomize bitfields in structures.  This reduces the
+	  performance hit of RANDSTRUCT at the cost of weakened randomization.
+
+config GRKERNSEC_KERN_LOCKOUT
+	bool "Active kernel exploit response"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on X86 || ARM || PPC || SPARC
+	help
+	  If you say Y here, when a PaX alert is triggered due to suspicious
+	  activity in the kernel (from KERNEXEC/UDEREF/USERCOPY)
+	  or an OOPS occurs due to bad memory accesses, instead of just
+	  terminating the offending process (and potentially allowing
+	  a subsequent exploit from the same user), we will take one of two
+	  actions:
+	   If the user was root, we will panic the system
+	   If the user was non-root, we will log the attempt, terminate
+	   all processes owned by the user, then prevent them from creating
+	   any new processes until the system is restarted
+	  This deters repeated kernel exploitation/bruteforcing attempts
+	  and is useful for later forensics.
+
+config GRKERNSEC_OLD_ARM_USERLAND
+	bool "Old ARM userland compatibility"
+	depends on ARM && (CPU_V6 || CPU_V6K || CPU_V7)
+	help
+	  If you say Y here, stubs of executable code to perform such operations
+	  as "compare-exchange" will be placed at fixed locations in the ARM vector
+	  table.  This is unfortunately needed for old ARM userland meant to run
+	  across a wide range of processors.  Without this option enabled,
+	  the get_tls and data memory barrier stubs will be emulated by the kernel,
+	  which is enough for Linaro userlands or other userlands designed for v6
+	  and newer ARM CPUs.  It's recommended that you try without this option enabled
+	  first, and only enable it if your userland does not boot (it will likely fail
+	  at init time).
+
+endmenu
+menu "Role Based Access Control Options"
+depends on GRKERNSEC
+
+config GRKERNSEC_RBAC_DEBUG
+	bool
+
+config GRKERNSEC_NO_RBAC
+	bool "Disable RBAC system"
+	help
+	  If you say Y here, the /dev/grsec device will be removed from the kernel,
+	  preventing the RBAC system from being enabled.  You should only say Y
+	  here if you have no intention of using the RBAC system, so as to prevent
+	  an attacker with root access from misusing the RBAC system to hide files
+	  and processes when loadable module support and /dev/[k]mem have been
+	  locked down.
+
+config GRKERNSEC_ACL_HIDEKERN
+	bool "Hide kernel processes"
+	help
+	  If you say Y here, all kernel threads will be hidden to all
+	  processes but those whose subject has the "view hidden processes"
+	  flag.
+
+config GRKERNSEC_ACL_MAXTRIES
+	int "Maximum tries before password lockout"
+	default 3
+	help
+	  This option enforces the maximum number of times a user can attempt
+	  to authorize themselves with the grsecurity RBAC system before being
+	  denied the ability to attempt authorization again for a specified time.
+	  The lower the number, the harder it will be to brute-force a password.
+
+config GRKERNSEC_ACL_TIMEOUT
+	int "Time to wait after max password tries, in seconds"
+	default 30
+	help
+	  This option specifies the time the user must wait after attempting to
+	  authorize to the RBAC system with the maximum number of invalid
+	  passwords.  The higher the number, the harder it will be to brute-force
+	  a password.
+
+endmenu
+menu "Filesystem Protections"
+depends on GRKERNSEC
+
+config GRKERNSEC_PROC
+	bool "Proc restrictions"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, the permissions of the /proc filesystem
+	  will be altered to enhance system security and privacy.  You MUST
+  	  choose either a user only restriction or a user and group restriction.
+	  Depending upon the option you choose, you can either restrict users to
+	  see only the processes they themselves run, or choose a group that can
+	  view all processes and files normally restricted to root if you choose
+	  the "restrict to user only" option.  NOTE: If you're running identd or
+	  ntpd as a non-root user, you will have to run it as the group you
+	  specify here.
+
+config GRKERNSEC_PROC_USER
+	bool "Restrict /proc to user only"
+	depends on GRKERNSEC_PROC
+	help
+	  If you say Y here, non-root users will only be able to view their own
+	  processes, and restricts them from viewing network-related information,
+	  and viewing kernel symbol and module information.
+
+config GRKERNSEC_PROC_USERGROUP
+	bool "Allow special group"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_PROC && !GRKERNSEC_PROC_USER
+	help
+	  If you say Y here, you will be able to select a group that will be
+	  able to view all processes and network-related information.  If you've
+	  enabled GRKERNSEC_HIDESYM, kernel and symbol information may still
+	  remain hidden.  This option is useful if you want to run identd as
+	  a non-root user.  The group you select may also be chosen at boot time
+	  via "grsec_proc_gid=" on the kernel commandline.
+
+config GRKERNSEC_PROC_GID
+	int "GID for special group"
+	depends on GRKERNSEC_PROC_USERGROUP
+	default 1001
+
+config GRKERNSEC_PROC_ADD
+	bool "Additional restrictions"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_PROC_USER || GRKERNSEC_PROC_USERGROUP
+	help
+	  If you say Y here, additional restrictions will be placed on
+	  /proc that keep normal users from viewing device information and 
+	  slabinfo information that could be useful for exploits.
+
+config GRKERNSEC_LINK
+	bool "Linking restrictions"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, /tmp race exploits will be prevented, since users
+	  will no longer be able to follow symlinks owned by other users in
+	  world-writable +t directories (e.g. /tmp), unless the owner of the
+	  symlink is the owner of the directory. users will also not be
+	  able to hardlink to files they do not own.  If the sysctl option is
+	  enabled, a sysctl option with name "linking_restrictions" is created.
+
+config GRKERNSEC_SYMLINKOWN
+	bool "Kernel-enforced SymlinksIfOwnerMatch"
+	default y if GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_SERVER
+	help
+	  Apache's SymlinksIfOwnerMatch option has an inherent race condition
+	  that prevents it from being used as a security feature.  As Apache
+	  verifies the symlink by performing a stat() against the target of
+	  the symlink before it is followed, an attacker can setup a symlink
+	  to point to a same-owned file, then replace the symlink with one
+	  that targets another user's file just after Apache "validates" the
+	  symlink -- a classic TOCTOU race.  If you say Y here, a complete,
+	  race-free replacement for Apache's "SymlinksIfOwnerMatch" option
+	  will be in place for the group you specify. If the sysctl option
+	  is enabled, a sysctl option with name "enforce_symlinksifowner" is
+	  created.
+
+config GRKERNSEC_SYMLINKOWN_GID
+	int "GID for users with kernel-enforced SymlinksIfOwnerMatch"
+	depends on GRKERNSEC_SYMLINKOWN
+	default 1006
+	help
+	  Setting this GID determines what group kernel-enforced
+	  SymlinksIfOwnerMatch will be enabled for.  If the sysctl option
+	  is enabled, a sysctl option with name "symlinkown_gid" is created.
+
+config GRKERNSEC_FIFO
+	bool "FIFO restrictions"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, users will not be able to write to FIFOs they don't
+	  own in world-writable +t directories (e.g. /tmp), unless the owner of
+	  the FIFO is the same owner of the directory it's held in.  If the sysctl
+	  option is enabled, a sysctl option with name "fifo_restrictions" is
+	  created.
+
+config GRKERNSEC_SYSFS_RESTRICT
+	bool "Sysfs/debugfs restriction"
+	default y if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_SERVER)
+	depends on SYSFS
+	help
+	  If you say Y here, sysfs (the pseudo-filesystem mounted at /sys) and
+	  any filesystem normally mounted under it (e.g. debugfs) will be
+	  mostly accessible only by root.  These filesystems generally provide access
+	  to hardware and debug information that isn't appropriate for unprivileged
+	  users of the system.  Sysfs and debugfs have also become a large source
+	  of new vulnerabilities, ranging from infoleaks to local compromise.
+	  There has been very little oversight with an eye toward security involved
+	  in adding new exporters of information to these filesystems, so their
+	  use is discouraged.
+	  For reasons of compatibility, a few directories have been whitelisted
+	  for access by non-root users:
+	  /sys/fs/selinux
+	  /sys/fs/fuse
+	  /sys/devices/system/cpu
+
+config GRKERNSEC_ROFS
+	bool "Runtime read-only mount protection"
+	depends on SYSCTL
+	help
+	  If you say Y here, a sysctl option with name "romount_protect" will
+	  be created.  By setting this option to 1 at runtime, filesystems
+	  will be protected in the following ways:
+	  * No new writable mounts will be allowed
+	  * Existing read-only mounts won't be able to be remounted read/write
+	  * Write operations will be denied on all block devices
+	  This option acts independently of grsec_lock: once it is set to 1,
+	  it cannot be turned off.  Therefore, please be mindful of the resulting
+	  behavior if this option is enabled in an init script on a read-only
+	  filesystem.
+	  Also be aware that as with other root-focused features, GRKERNSEC_KMEM
+	  and GRKERNSEC_IO should be enabled and module loading disabled via
+	  config or at runtime.
+	  This feature is mainly intended for secure embedded systems.
+	  
+
+config GRKERNSEC_DEVICE_SIDECHANNEL
+	bool "Eliminate stat/notify-based device sidechannels"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, timing analyses on block or character
+	  devices like /dev/ptmx using stat or inotify/dnotify/fanotify
+	  will be thwarted for unprivileged users.  If a process without
+	  CAP_MKNOD stats such a device, the last access and last modify times
+	  will match the device's create time.  No access or modify events
+	  will be triggered through inotify/dnotify/fanotify for such devices.
+	  This feature will prevent attacks that may at a minimum
+	  allow an attacker to determine the administrator's password length.
+
+config GRKERNSEC_CHROOT
+	bool "Chroot jail restrictions"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, you will be able to choose several options that will
+	  make breaking out of a chrooted jail much more difficult.  If you
+	  encounter no software incompatibilities with the following options, it
+	  is recommended that you enable each one.
+
+	  Note that the chroot restrictions are not intended to apply to "chroots"
+	  to directories that are simple bind mounts of the global root filesystem.
+	  For several other reasons, a user shouldn't expect any significant
+	  security by performing such a chroot.
+
+config GRKERNSEC_CHROOT_MOUNT
+	bool "Deny mounts"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to
+	  mount or remount filesystems.  If the sysctl option is enabled, a
+	  sysctl option with name "chroot_deny_mount" is created.
+
+config GRKERNSEC_CHROOT_DOUBLE
+	bool "Deny double-chroots"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to chroot
+	  again outside the chroot.  This is a widely used method of breaking
+	  out of a chroot jail and should not be allowed.  If the sysctl 
+	  option is enabled, a sysctl option with name 
+	  "chroot_deny_chroot" is created.
+
+config GRKERNSEC_CHROOT_PIVOT
+	bool "Deny pivot_root in chroot"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to use
+	  a function called pivot_root() that was introduced in Linux 2.3.41.  It
+	  works similar to chroot in that it changes the root filesystem.  This
+	  function could be misused in a chrooted process to attempt to break out
+	  of the chroot, and therefore should not be allowed.  If the sysctl
+	  option is enabled, a sysctl option with name "chroot_deny_pivot" is
+	  created.
+
+config GRKERNSEC_CHROOT_CHDIR
+	bool "Enforce chdir(\"/\") on all chroots"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, the current working directory of all newly-chrooted
+	  applications will be set to the the root directory of the chroot.
+	  The man page on chroot(2) states:
+	  Note that this call does not change  the  current  working
+	  directory,  so  that `.' can be outside the tree rooted at
+	  `/'.  In particular, the  super-user  can  escape  from  a
+	  `chroot jail' by doing `mkdir foo; chroot foo; cd ..'.
+
+	  It is recommended that you say Y here, since it's not known to break
+	  any software.  If the sysctl option is enabled, a sysctl option with
+	  name "chroot_enforce_chdir" is created.
+
+config GRKERNSEC_CHROOT_CHMOD
+	bool "Deny (f)chmod +s"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to chmod
+	  or fchmod files to make them have suid or sgid bits.  This protects
+	  against another published method of breaking a chroot.  If the sysctl
+	  option is enabled, a sysctl option with name "chroot_deny_chmod" is
+	  created.
+
+config GRKERNSEC_CHROOT_FCHDIR
+	bool "Deny fchdir and fhandle out of chroot"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, a well-known method of breaking chroots by fchdir'ing
+	  to a file descriptor of the chrooting process that points to a directory
+	  outside the filesystem will be stopped.  This option also prevents use of
+	  the recently-created syscall for opening files by a guessable "file handle"
+	  inside a chroot, as well as accessing relative paths outside of a
+	  directory passed in via file descriptor with openat and similar syscalls.
+	  If the sysctl option is enabled, a sysctl option with name "chroot_deny_fchdir"
+	  is created.
+
+config GRKERNSEC_CHROOT_MKNOD
+	bool "Deny mknod"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be allowed to
+	  mknod.  The problem with using mknod inside a chroot is that it
+	  would allow an attacker to create a device entry that is the same
+	  as one on the physical root of your system, which could range from
+	  anything from the console device to a device for your harddrive (which
+	  they could then use to wipe the drive or steal data).  It is recommended
+	  that you say Y here, unless you run into software incompatibilities.
+	  If the sysctl option is enabled, a sysctl option with name
+	  "chroot_deny_mknod" is created.
+
+config GRKERNSEC_CHROOT_SHMAT
+	bool "Deny shmat() out of chroot"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to attach
+	  to shared memory segments that were created outside of the chroot jail.
+	  It is recommended that you say Y here.  If the sysctl option is enabled,
+	  a sysctl option with name "chroot_deny_shmat" is created.
+
+config GRKERNSEC_CHROOT_UNIX
+	bool "Deny access to abstract AF_UNIX sockets out of chroot"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to
+	  connect to abstract (meaning not belonging to a filesystem) Unix
+	  domain sockets that were bound outside of a chroot.  It is recommended
+	  that you say Y here.  If the sysctl option is enabled, a sysctl option
+	  with name "chroot_deny_unix" is created.
+
+config GRKERNSEC_CHROOT_FINDTASK
+	bool "Protect outside processes"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to
+	  kill, send signals with fcntl, ptrace, capget, getpgid, setpgid, 
+	  getsid, or view any process outside of the chroot.  If the sysctl
+	  option is enabled, a sysctl option with name "chroot_findtask" is
+	  created.
+
+config GRKERNSEC_CHROOT_NICE
+	bool "Restrict priority changes"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, processes inside a chroot will not be able to raise
+	  the priority of processes in the chroot, or alter the priority of
+	  processes outside the chroot.  This provides more security than simply
+	  removing CAP_SYS_NICE from the process' capability set.  If the
+	  sysctl option is enabled, a sysctl option with name "chroot_restrict_nice"
+	  is created.
+
+config GRKERNSEC_CHROOT_SYSCTL
+	bool "Deny sysctl writes"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, an attacker in a chroot will not be able to
+	  write to sysctl entries, either by sysctl(2) or through a /proc
+	  interface.  It is strongly recommended that you say Y here. If the
+	  sysctl option is enabled, a sysctl option with name
+	  "chroot_deny_sysctl" is created.
+
+config GRKERNSEC_CHROOT_RENAME
+	bool "Deny bad renames"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, an attacker in a chroot will not be able to
+	  abuse the ability to create double chroots to break out of the
+	  chroot by exploiting a race condition between a rename of a directory
+	  within a chroot against an open of a symlink with relative path
+	  components.  This feature will likewise prevent an accomplice outside
+	  a chroot from enabling a user inside the chroot to break out and make
+	  use of their credentials on the global filesystem.  Enabling this
+	  feature is essential to prevent root users from breaking out of a
+	  chroot. If the sysctl option is enabled, a sysctl option with name
+	  "chroot_deny_bad_rename" is created.
+
+config GRKERNSEC_CHROOT_CAPS
+	bool "Capability restrictions"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT
+	help
+	  If you say Y here, the capabilities on all processes within a
+	  chroot jail will be lowered to stop module insertion, raw i/o,
+	  system and net admin tasks, rebooting the system, modifying immutable
+	  files, modifying IPC owned by another, and changing the system time.
+	  This is left an option because it can break some apps.  Disable this
+	  if your chrooted apps are having problems performing those kinds of
+	  tasks.  If the sysctl option is enabled, a sysctl option with
+	  name "chroot_caps" is created.
+
+config GRKERNSEC_CHROOT_INITRD
+	bool "Exempt initrd tasks from restrictions"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_CHROOT && BLK_DEV_INITRD
+	help
+	  If you say Y here, tasks started prior to init will be exempted from
+	  grsecurity's chroot restrictions.  This option is mainly meant to
+	  resolve Plymouth's performing privileged operations unnecessarily
+	  in a chroot.
+
+endmenu
+menu "Kernel Auditing"
+depends on GRKERNSEC
+
+config GRKERNSEC_AUDIT_GROUP
+	bool "Single group for auditing"
+	help
+	  If you say Y here, the exec and chdir logging features will only operate
+	  on a group you specify.  This option is recommended if you only want to
+	  watch certain users instead of having a large amount of logs from the
+	  entire system.  If the sysctl option is enabled, a sysctl option with
+	  name "audit_group" is created.
+
+config GRKERNSEC_AUDIT_GID
+	int "GID for auditing"
+	depends on GRKERNSEC_AUDIT_GROUP
+	default 1007
+
+config GRKERNSEC_EXECLOG
+	bool "Exec logging"
+	help
+	  If you say Y here, all execve() calls will be logged (since the
+	  other exec*() calls are frontends to execve(), all execution
+	  will be logged).  Useful for shell-servers that like to keep track
+	  of their users.  If the sysctl option is enabled, a sysctl option with
+	  name "exec_logging" is created.
+	  WARNING: This option when enabled will produce a LOT of logs, especially
+	  on an active system.
+
+config GRKERNSEC_RESLOG
+	bool "Resource logging"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, all attempts to overstep resource limits will
+	  be logged with the resource name, the requested size, and the current
+	  limit.  It is highly recommended that you say Y here.  If the sysctl
+	  option is enabled, a sysctl option with name "resource_logging" is
+	  created.  If the RBAC system is enabled, the sysctl value is ignored.
+
+config GRKERNSEC_CHROOT_EXECLOG
+	bool "Log execs within chroot"
+	help
+	  If you say Y here, all executions inside a chroot jail will be logged
+	  to syslog.  This can cause a large amount of logs if certain
+	  applications (eg. djb's daemontools) are installed on the system, and
+	  is therefore left as an option.  If the sysctl option is enabled, a
+	  sysctl option with name "chroot_execlog" is created.
+
+config GRKERNSEC_AUDIT_PTRACE
+	bool "Ptrace logging"
+	help
+	  If you say Y here, all attempts to attach to a process via ptrace
+	  will be logged.  If the sysctl option is enabled, a sysctl option
+	  with name "audit_ptrace" is created.
+
+config GRKERNSEC_AUDIT_CHDIR
+	bool "Chdir logging"
+	help
+	  If you say Y here, all chdir() calls will be logged.  If the sysctl
+ 	  option is enabled, a sysctl option with name "audit_chdir" is created.
+
+config GRKERNSEC_AUDIT_MOUNT
+	bool "(Un)Mount logging"
+	help
+	  If you say Y here, all mounts and unmounts will be logged.  If the
+	  sysctl option is enabled, a sysctl option with name "audit_mount" is
+	  created.
+
+config GRKERNSEC_SIGNAL
+	bool "Signal logging"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, certain important signals will be logged, such as
+	  SIGSEGV, which will as a result inform you of when a error in a program
+	  occurred, which in some cases could mean a possible exploit attempt.
+	  If the sysctl option is enabled, a sysctl option with name
+	  "signal_logging" is created.
+
+config GRKERNSEC_FORKFAIL
+	bool "Fork failure logging"
+	help
+	  If you say Y here, all failed fork() attempts will be logged.
+	  This could suggest a fork bomb, or someone attempting to overstep
+	  their process limit.  If the sysctl option is enabled, a sysctl option
+	  with name "forkfail_logging" is created.
+
+config GRKERNSEC_TIME
+	bool "Time change logging"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, any changes of the system clock will be logged.
+	  If the sysctl option is enabled, a sysctl option with name
+	  "timechange_logging" is created.
+
+config GRKERNSEC_PROC_IPADDR
+	bool "/proc/<pid>/ipaddr support"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, a new entry will be added to each /proc/<pid>
+	  directory that contains the IP address of the person using the task.
+	  The IP is carried across local TCP and AF_UNIX stream sockets.
+	  This information can be useful for IDS/IPSes to perform remote response
+	  to a local attack.  The entry is readable by only the owner of the
+	  process (and root if he has CAP_DAC_OVERRIDE, which can be removed via
+	  the RBAC system), and thus does not create privacy concerns.
+
+config GRKERNSEC_RWXMAP_LOG
+	bool 'Denied RWX mmap/mprotect logging'
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on PAX_MPROTECT && !PAX_EMUPLT && !PAX_EMUSIGRT
+	help
+	  If you say Y here, calls to mmap() and mprotect() with explicit
+	  usage of PROT_WRITE and PROT_EXEC together will be logged when
+	  denied by the PAX_MPROTECT feature.  This feature will also
+	  log other problematic scenarios that can occur when PAX_MPROTECT
+	  is enabled on a binary, like textrels and PT_GNU_STACK.  If the 
+          sysctl option is enabled, a sysctl option with name "rwxmap_logging"
+	  is created.
+
+endmenu
+
+menu "Executable Protections"
+depends on GRKERNSEC
+
+config GRKERNSEC_DMESG
+	bool "Dmesg(8) restriction"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, non-root users will not be able to use dmesg(8)
+	  to view the contents of the kernel's circular log buffer.
+	  The kernel's log buffer often contains kernel addresses and other
+	  identifying information useful to an attacker in fingerprinting a
+	  system for a targeted exploit.
+	  If the sysctl option is enabled, a sysctl option with name "dmesg" is
+	  created.
+
+config GRKERNSEC_HARDEN_PTRACE
+	bool "Deter ptrace-based process snooping"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, TTY sniffers and other malicious monitoring
+	  programs implemented through ptrace will be defeated.  If you
+	  have been using the RBAC system, this option has already been
+	  enabled for several years for all users, with the ability to make
+	  fine-grained exceptions.
+
+	  This option only affects the ability of non-root users to ptrace
+	  processes that are not a descendent of the ptracing process.
+	  This means that strace ./binary and gdb ./binary will still work,
+	  but attaching to arbitrary processes will not.  If the sysctl
+	  option is enabled, a sysctl option with name "harden_ptrace" is
+	  created.
+
+config GRKERNSEC_PTRACE_READEXEC
+	bool "Require read access to ptrace sensitive binaries"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, unprivileged users will not be able to ptrace unreadable
+	  binaries.  This option is useful in environments that
+	  remove the read bits (e.g. file mode 4711) from suid binaries to
+	  prevent infoleaking of their contents.  This option adds
+	  consistency to the use of that file mode, as the binary could normally
+	  be read out when run without privileges while ptracing.
+
+	  If the sysctl option is enabled, a sysctl option with name "ptrace_readexec"
+	  is created.
+
+config GRKERNSEC_SETXID
+	bool "Enforce consistent multithreaded privileges"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on (X86 || SPARC64 || PPC || ARM || MIPS)
+	help
+	  If you say Y here, a change from a root uid to a non-root uid
+	  in a multithreaded application will cause the resulting uids,
+	  gids, supplementary groups, and capabilities in that thread
+	  to be propagated to the other threads of the process.  In most
+	  cases this is unnecessary, as glibc will emulate this behavior
+	  on behalf of the application.  Other libcs do not act in the
+	  same way, allowing the other threads of the process to continue
+	  running with root privileges.  If the sysctl option is enabled,
+	  a sysctl option with name "consistent_setxid" is created.
+
+config GRKERNSEC_HARDEN_IPC
+	bool "Disallow access to overly-permissive IPC objects"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on SYSVIPC
+	help
+	  If you say Y here, access to overly-permissive IPC objects (shared
+	  memory, message queues, and semaphores) will be denied for processes
+	  given the following criteria beyond normal permission checks:
+	  1) If the IPC object is world-accessible and the euid doesn't match
+	     that of the creator or current uid for the IPC object
+	  2) If the IPC object is group-accessible and the egid doesn't
+	     match that of the creator or current gid for the IPC object
+	  It's a common error to grant too much permission to these objects,
+	  with impact ranging from denial of service and information leaking to
+	  privilege escalation.  This feature was developed in response to
+	  research by Tim Brown:
+	  http://labs.portcullis.co.uk/whitepapers/memory-squatting-attacks-on-system-v-shared-memory/
+	  who found hundreds of such insecure usages.  Processes with
+	  CAP_IPC_OWNER are still permitted to access these IPC objects.
+	  If the sysctl option is enabled, a sysctl option with name
+	  "harden_ipc" is created.
+
+config GRKERNSEC_HARDEN_TTY
+	bool "Disallow unprivileged use of command injection"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, the ability to use the TIOCSTI ioctl for
+	  terminal command injection will be denied for unprivileged users.
+	  There are very few legitimate uses for this functionality and it
+	  has made vulnerabilities in several 'su'-like programs possible in
+	  the past.  Even without these vulnerabilities, it provides an
+	  attacker with an easy mechanism to move laterally among other
+	  processes within the same user's compromised session.
+	  By default, Linux allows unprivileged use of command injection as
+	  long as the injection is being performed into the same tty session.
+	  This feature makes that case the same as attempting to inject into
+	  another session, making any TIOCSTI use require CAP_SYS_ADMIN.
+	  If the sysctl option is enabled, a sysctl option with name
+	  "harden_tty" is created.
+
+config GRKERNSEC_TPE
+	bool "Trusted Path Execution (TPE)"
+	default y if GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_SERVER
+	help
+	  If you say Y here, you will be able to choose a gid to add to the
+	  supplementary groups of users you want to mark as "untrusted."
+	  These users will not be able to execute any files that are not in
+	  root-owned directories writable only by root.  If the sysctl option
+	  is enabled, a sysctl option with name "tpe" is created.
+
+config GRKERNSEC_TPE_ALL
+	bool "Partially restrict all non-root users"
+	depends on GRKERNSEC_TPE
+	help
+	  If you say Y here, all non-root users will be covered under
+	  a weaker TPE restriction.  This is separate from, and in addition to,
+	  the main TPE options that you have selected elsewhere.  Thus, if a
+	  "trusted" GID is chosen, this restriction applies to even that GID.
+	  Under this restriction, all non-root users will only be allowed to
+	  execute files in directories they own that are not group or
+	  world-writable, or in directories owned by root and writable only by
+	  root.  If the sysctl option is enabled, a sysctl option with name
+	  "tpe_restrict_all" is created.
+
+config GRKERNSEC_TPE_INVERT
+	bool "Invert GID option"
+	depends on GRKERNSEC_TPE
+	help
+	  If you say Y here, the group you specify in the TPE configuration will
+	  decide what group TPE restrictions will be *disabled* for.  This
+	  option is useful if you want TPE restrictions to be applied to most
+	  users on the system.  If the sysctl option is enabled, a sysctl option
+	  with name "tpe_invert" is created.  Unlike other sysctl options, this
+	  entry will default to on for backward-compatibility.
+
+config GRKERNSEC_TPE_GID
+	int
+	default GRKERNSEC_TPE_UNTRUSTED_GID if (GRKERNSEC_TPE && !GRKERNSEC_TPE_INVERT)
+	default GRKERNSEC_TPE_TRUSTED_GID if (GRKERNSEC_TPE && GRKERNSEC_TPE_INVERT)
+	
+config GRKERNSEC_TPE_UNTRUSTED_GID
+	int "GID for TPE-untrusted users"
+	depends on GRKERNSEC_TPE && !GRKERNSEC_TPE_INVERT
+	default 1005
+	help
+	  Setting this GID determines what group TPE restrictions will be
+	  *enabled* for.  If the sysctl option is enabled, a sysctl option
+	  with name "tpe_gid" is created.
+
+config GRKERNSEC_TPE_TRUSTED_GID
+	int "GID for TPE-trusted users"
+	depends on GRKERNSEC_TPE && GRKERNSEC_TPE_INVERT
+	default 1005
+	help
+	  Setting this GID determines what group TPE restrictions will be
+	  *disabled* for.  If the sysctl option is enabled, a sysctl option
+	  with name "tpe_gid" is created.
+
+endmenu
+menu "Network Protections"
+depends on GRKERNSEC
+
+config GRKERNSEC_BLACKHOLE
+	bool "TCP/UDP blackhole and LAST_ACK DoS prevention"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on NET
+	help
+	  If you say Y here, neither TCP resets nor ICMP
+	  destination-unreachable packets will be sent in response to packets
+	  sent to ports for which no associated listening process exists.
+	  It will also prevent the sending of ICMP protocol unreachable packets
+	  in response to packets with unknown protocols.
+	  This feature supports both IPV4 and IPV6 and exempts the 
+	  loopback interface from blackholing.  Enabling this feature 
+	  makes a host more resilient to DoS attacks and reduces network
+	  visibility against scanners.
+
+	  The blackhole feature as-implemented is equivalent to the FreeBSD
+	  blackhole feature, as it prevents RST responses to all packets, not
+	  just SYNs.  Under most application behavior this causes no
+	  problems, but applications (like haproxy) may not close certain
+	  connections in a way that cleanly terminates them on the remote
+	  end, leaving the remote host in LAST_ACK state.  Because of this
+	  side-effect and to prevent intentional LAST_ACK DoSes, this
+	  feature also adds automatic mitigation against such attacks.
+	  The mitigation drastically reduces the amount of time a socket
+	  can spend in LAST_ACK state.  If you're using haproxy and not
+	  all servers it connects to have this option enabled, consider
+	  disabling this feature on the haproxy host.
+
+	  If the sysctl option is enabled, two sysctl options with names
+	  "ip_blackhole" and "lastack_retries" will be created.
+	  While "ip_blackhole" takes the standard zero/non-zero on/off
+	  toggle, "lastack_retries" uses the same kinds of values as
+	  "tcp_retries1" and "tcp_retries2".  The default value of 4
+	  prevents a socket from lasting more than 45 seconds in LAST_ACK
+	  state.
+
+config GRKERNSEC_NO_SIMULT_CONNECT
+	bool "Disable TCP Simultaneous Connect"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on NET
+	help
+	  If you say Y here, a feature by Willy Tarreau will be enabled that
+	  removes a weakness in Linux's strict implementation of TCP that
+	  allows two clients to connect to each other without either entering
+	  a listening state.  The weakness allows an attacker to easily prevent
+	  a client from connecting to a known server provided the source port
+	  for the connection is guessed correctly.
+
+	  As the weakness could be used to prevent an antivirus or IPS from
+	  fetching updates, or prevent an SSL gateway from fetching a CRL,
+	  it should be eliminated by enabling this option.  Though Linux is
+	  one of few operating systems supporting simultaneous connect, it
+	  has no legitimate use in practice and is rarely supported by firewalls.
+	
+config GRKERNSEC_SOCKET
+	bool "Socket restrictions"
+	depends on NET
+	help
+	  If you say Y here, you will be able to choose from several options.
+	  If you assign a GID on your system and add it to the supplementary
+	  groups of users you want to restrict socket access to, this patch
+	  will perform up to three things, based on the option(s) you choose.
+
+config GRKERNSEC_SOCKET_ALL
+	bool "Deny any sockets to group"
+	depends on GRKERNSEC_SOCKET
+	help
+	  If you say Y here, you will be able to choose a GID of whose users will
+	  be unable to connect to other hosts from your machine or run server
+	  applications from your machine.  If the sysctl option is enabled, a
+	  sysctl option with name "socket_all" is created.
+
+config GRKERNSEC_SOCKET_ALL_GID
+	int "GID to deny all sockets for"
+	depends on GRKERNSEC_SOCKET_ALL
+	default 1004
+	help
+	  Here you can choose the GID to disable socket access for. Remember to
+	  add the users you want socket access disabled for to the GID
+	  specified here.  If the sysctl option is enabled, a sysctl option
+	  with name "socket_all_gid" is created.
+
+config GRKERNSEC_SOCKET_CLIENT
+	bool "Deny client sockets to group"
+	depends on GRKERNSEC_SOCKET
+	help
+	  If you say Y here, you will be able to choose a GID of whose users will
+	  be unable to connect to other hosts from your machine, but will be
+	  able to run servers.  If this option is enabled, all users in the group
+	  you specify will have to use passive mode when initiating ftp transfers
+	  from the shell on your machine.  If the sysctl option is enabled, a
+	  sysctl option with name "socket_client" is created.
+
+config GRKERNSEC_SOCKET_CLIENT_GID
+	int "GID to deny client sockets for"
+	depends on GRKERNSEC_SOCKET_CLIENT
+	default 1003
+	help
+	  Here you can choose the GID to disable client socket access for.
+	  Remember to add the users you want client socket access disabled for to
+	  the GID specified here.  If the sysctl option is enabled, a sysctl
+	  option with name "socket_client_gid" is created.
+
+config GRKERNSEC_SOCKET_SERVER
+	bool "Deny server sockets to group"
+	depends on GRKERNSEC_SOCKET
+	help
+	  If you say Y here, you will be able to choose a GID of whose users will
+	  be unable to run server applications from your machine.  If the sysctl
+	  option is enabled, a sysctl option with name "socket_server" is created.
+
+config GRKERNSEC_SOCKET_SERVER_GID
+	int "GID to deny server sockets for"
+	depends on GRKERNSEC_SOCKET_SERVER
+	default 1002
+	help
+	  Here you can choose the GID to disable server socket access for.
+	  Remember to add the users you want server socket access disabled for to
+	  the GID specified here.  If the sysctl option is enabled, a sysctl
+	  option with name "socket_server_gid" is created.
+
+endmenu
+
+menu "Physical Protections"
+depends on GRKERNSEC
+
+config GRKERNSEC_DENYUSB
+	bool "Deny new USB connections after toggle"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on SYSCTL && USB_SUPPORT
+	help
+	  If you say Y here, a new sysctl option with name "deny_new_usb"
+	  will be created.  Setting its value to 1 will prevent any new
+	  USB devices from being recognized by the OS.  Any attempted USB
+	  device insertion will be logged.  This option is intended to be
+	  used against custom USB devices designed to exploit vulnerabilities
+	  in various USB device drivers.
+
+	  For greatest effectiveness, this sysctl should be set after any
+	  relevant init scripts.  This option is safe to enable in distros
+	  as each user can choose whether or not to toggle the sysctl.
+
+config GRKERNSEC_DENYUSB_FORCE
+	bool "Reject all USB devices not connected at boot"
+	select USB
+	depends on GRKERNSEC_DENYUSB
+	help
+	  If you say Y here, a variant of GRKERNSEC_DENYUSB will be enabled
+	  that doesn't involve a sysctl entry.  This option should only be
+	  enabled if you're sure you want to deny all new USB connections
+	  at runtime and don't want to modify init scripts.  This should not
+	  be enabled by distros.  It forces the core USB code to be built
+	  into the kernel image so that all devices connected at boot time
+	  can be recognized and new USB device connections can be prevented
+	  prior to init running.
+
+endmenu
+
+menu "Sysctl Support"
+depends on GRKERNSEC && SYSCTL
+
+config GRKERNSEC_SYSCTL
+	bool "Sysctl support"
+	default y if GRKERNSEC_CONFIG_AUTO
+	help
+	  If you say Y here, you will be able to change the options that
+	  grsecurity runs with at bootup, without having to recompile your
+	  kernel.  You can echo values to files in /proc/sys/kernel/grsecurity
+	  to enable (1) or disable (0) various features.  All the sysctl entries
+	  are mutable until the "grsec_lock" entry is set to a non-zero value.
+	  All features enabled in the kernel configuration are disabled at boot
+	  if you do not say Y to the "Turn on features by default" option.
+	  All options should be set at startup, and the grsec_lock entry should
+	  be set to a non-zero value after all the options are set.
+	  *THIS IS EXTREMELY IMPORTANT*
+
+config GRKERNSEC_SYSCTL_DISTRO
+	bool "Extra sysctl support for distro makers (READ HELP)"
+	depends on GRKERNSEC_SYSCTL && GRKERNSEC_IO
+	help
+	  If you say Y here, additional sysctl options will be created
+	  for features that affect processes running as root.  Therefore,
+	  it is critical when using this option that the grsec_lock entry be
+	  enabled after boot.  Only distros with prebuilt kernel packages
+	  with this option enabled that can ensure grsec_lock is enabled
+	  after boot should use this option.
+	  *Failure to set grsec_lock after boot makes all grsec features
+	  this option covers useless*
+
+	  Currently this option creates the following sysctl entries:
+	  "Disable Privileged I/O": "disable_priv_io"	
+
+config GRKERNSEC_SYSCTL_ON
+	bool "Turn on features by default"
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC_SYSCTL
+	help
+	  If you say Y here, instead of having all features enabled in the
+	  kernel configuration disabled at boot time, the features will be
+	  enabled at boot time.  It is recommended you say Y here unless
+	  there is some reason you would want all sysctl-tunable features to
+	  be disabled by default.  As mentioned elsewhere, it is important
+	  to enable the grsec_lock entry once you have finished modifying
+	  the sysctl entries.
+
+endmenu
+menu "Logging Options"
+depends on GRKERNSEC
+
+config GRKERNSEC_FLOODTIME
+	int "Seconds in between log messages (minimum)"
+	default 10
+	help
+	  This option allows you to enforce the number of seconds between
+	  grsecurity log messages.  The default should be suitable for most
+	  people, however, if you choose to change it, choose a value small enough
+	  to allow informative logs to be produced, but large enough to
+	  prevent flooding.
+
+	  Setting both this value and GRKERNSEC_FLOODBURST to 0 will disable
+	  any rate limiting on grsecurity log messages.
+
+config GRKERNSEC_FLOODBURST
+	int "Number of messages in a burst (maximum)"
+	default 6
+	help
+	  This option allows you to choose the maximum number of messages allowed
+	  within the flood time interval you chose in a separate option.  The
+	  default should be suitable for most people, however if you find that
+	  many of your logs are being interpreted as flooding, you may want to
+	  raise this value.
+
+	  Setting both this value and GRKERNSEC_FLOODTIME to 0 will disable
+	  any rate limiting on grsecurity log messages.
+
+endmenu
diff --git a/grsecurity/Makefile b/grsecurity/Makefile
new file mode 100644
index 000000000000..e136e5fd7b5b
--- /dev/null
+++ b/grsecurity/Makefile
@@ -0,0 +1,54 @@
+# grsecurity - access control and security hardening for Linux
+# All code in this directory and various hooks located throughout the Linux kernel are
+# Copyright (C) 2001-2014 Bradley Spengler, Open Source Security, Inc.
+# http://www.grsecurity.net spender@grsecurity.net
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License version 2
+# as published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+KBUILD_CFLAGS += -Werror
+
+obj-y = grsec_chdir.o grsec_chroot.o grsec_exec.o grsec_fifo.o grsec_fork.o \
+	grsec_mount.o grsec_sig.o grsec_sysctl.o \
+	grsec_time.o grsec_tpe.o grsec_link.o grsec_pax.o grsec_ptrace.o \
+	grsec_usb.o grsec_ipc.o grsec_proc.o grsec_tty.o
+
+obj-$(CONFIG_GRKERNSEC) += grsec_init.o grsum.o gracl.o gracl_segv.o \
+	gracl_cap.o gracl_alloc.o gracl_shm.o grsec_mem.o gracl_fs.o \
+	gracl_learn.o grsec_log.o gracl_policy.o
+ifdef CONFIG_COMPAT
+obj-$(CONFIG_GRKERNSEC) += gracl_compat.o
+endif
+
+obj-$(CONFIG_GRKERNSEC_RESLOG) += gracl_res.o
+
+ifdef CONFIG_NET
+obj-y += grsec_sock.o
+obj-$(CONFIG_GRKERNSEC) += gracl_ip.o
+endif
+
+ifndef CONFIG_GRKERNSEC
+obj-y += grsec_disabled.o
+endif
+
+ifdef CONFIG_GRKERNSEC_HIDESYM
+extra-y := grsec_hidesym.o
+$(obj)/grsec_hidesym.o:
+	@-chmod -f 500 /boot
+	@-chmod -f 500 /lib/modules
+	@-chmod -f 500 /lib64/modules
+	@-chmod -f 500 /lib32/modules
+	@-chmod -f 700 .
+	@-chmod -f 700 $(objtree)
+	@echo '  grsec: protected kernel image paths'
+endif
diff --git a/grsecurity/gracl.c b/grsecurity/gracl.c
new file mode 100644
index 000000000000..fa03095d6b94
--- /dev/null
+++ b/grsecurity/gracl.c
@@ -0,0 +1,2773 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/namei.h>
+#include <linux/mount.h>
+#include <linux/tty.h>
+#include <linux/proc_fs.h>
+#include <linux/slab.h>
+#include <linux/vmalloc.h>
+#include <linux/types.h>
+#include <linux/sysctl.h>
+#include <linux/netdevice.h>
+#include <linux/ptrace.h>
+#include <linux/gracl.h>
+#include <linux/gralloc.h>
+#include <linux/security.h>
+#include <linux/grinternal.h>
+#include <linux/pid_namespace.h>
+#include <linux/stop_machine.h>
+#include <linux/fdtable.h>
+#include <linux/percpu.h>
+#include <linux/hugetlb.h>
+#include <linux/posix-timers.h>
+#include <linux/prefetch.h>
+#if defined(CONFIG_BTRFS_FS) || defined(CONFIG_BTRFS_FS_MODULE)
+#include <linux/magic.h>
+#include <linux/pagemap.h>
+#include "../fs/btrfs/async-thread.h"
+#include "../fs/btrfs/ctree.h"
+#include "../fs/btrfs/btrfs_inode.h"
+#endif
+#include "../fs/mount.h"
+
+#include <asm/uaccess.h>
+#include <asm/errno.h>
+#include <asm/mman.h>
+
+#define FOR_EACH_ROLE_START(role) \
+	role = running_polstate.role_list; \
+	while (role) {
+
+#define FOR_EACH_ROLE_END(role) \
+		role = role->prev; \
+	}
+
+extern struct path gr_real_root;
+
+static struct gr_policy_state running_polstate;
+struct gr_policy_state *polstate = &running_polstate;
+extern struct gr_alloc_state *current_alloc_state;
+
+extern char *gr_shared_page[4];
+DEFINE_RWLOCK(gr_inode_lock);
+
+static unsigned int gr_status __read_only = GR_STATUS_INIT;
+
+#ifdef CONFIG_NET
+extern struct vfsmount *sock_mnt;
+#endif
+
+extern struct vfsmount *pipe_mnt;
+extern struct vfsmount *shm_mnt;
+
+#ifdef CONFIG_HUGETLBFS
+extern struct vfsmount *hugetlbfs_vfsmount[HUGE_MAX_HSTATE];
+#endif
+
+extern u16 acl_sp_role_value;
+extern struct acl_object_label *fakefs_obj_rw;
+extern struct acl_object_label *fakefs_obj_rwx;
+
+int gr_acl_is_enabled(void)
+{
+	return (gr_status & GR_READY);
+}
+
+void gr_enable_rbac_system(void)
+{
+	pax_open_kernel();
+	gr_status |= GR_READY;
+	pax_close_kernel();
+}
+
+int gr_rbac_disable(void *unused)
+{
+	pax_open_kernel();
+	gr_status &= ~GR_READY;
+	pax_close_kernel();
+
+	return 0;
+}
+
+static inline dev_t __get_dev(const struct dentry *dentry)
+{
+	struct dentry *ldentry = d_backing_dentry((struct dentry *)dentry);
+
+#if defined(CONFIG_BTRFS_FS) || defined(CONFIG_BTRFS_FS_MODULE)
+	if (ldentry->d_sb->s_magic == BTRFS_SUPER_MAGIC)
+		return BTRFS_I(d_inode(ldentry))->root->anon_dev;
+	else
+#endif
+		return d_inode(ldentry)->i_sb->s_dev;
+}
+
+static inline u64 __get_ino(const struct dentry *dentry)
+{
+	struct dentry *ldentry = d_backing_dentry((struct dentry *)dentry);
+
+#if defined(CONFIG_BTRFS_FS) || defined(CONFIG_BTRFS_FS_MODULE)
+	if (ldentry->d_sb->s_magic == BTRFS_SUPER_MAGIC)
+		return btrfs_ino(d_inode(dentry));
+	else
+#endif
+		return d_inode(ldentry)->i_ino;
+}
+
+dev_t gr_get_dev_from_dentry(struct dentry *dentry)
+{
+	return __get_dev(dentry);
+}
+
+u64 gr_get_ino_from_dentry(struct dentry *dentry)
+{
+	return __get_ino(dentry);
+}
+
+static char gr_task_roletype_to_char(struct task_struct *task)
+{
+	switch (task->role->roletype &
+		(GR_ROLE_DEFAULT | GR_ROLE_USER | GR_ROLE_GROUP |
+		 GR_ROLE_SPECIAL)) {
+	case GR_ROLE_DEFAULT:
+		return 'D';
+	case GR_ROLE_USER:
+		return 'U';
+	case GR_ROLE_GROUP:
+		return 'G';
+	case GR_ROLE_SPECIAL:
+		return 'S';
+	}
+
+	return 'X';
+}
+
+char gr_roletype_to_char(void)
+{
+	return gr_task_roletype_to_char(current);
+}
+
+int
+gr_acl_tpe_check(void)
+{
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+	if (current->role->roletype & GR_ROLE_TPE)
+		return 1;
+	else
+		return 0;
+}
+
+int
+gr_handle_rawio(const struct inode *inode)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_CAPS
+	if (inode && (S_ISBLK(inode->i_mode) || (S_ISCHR(inode->i_mode) && imajor(inode) == RAW_MAJOR)) &&
+	    grsec_enable_chroot_caps && proc_is_chrooted(current) &&
+	    !capable(CAP_SYS_RAWIO))
+		return 1;
+#endif
+	return 0;
+}
+
+int
+gr_streq(const char *a, const char *b, const unsigned int lena, const unsigned int lenb)
+{
+	if (likely(lena != lenb))
+		return 0;
+
+	return !memcmp(a, b, lena);
+}
+
+static int prepend(char **buffer, int *buflen, const char *str, int namelen)
+{
+	*buflen -= namelen;
+	if (*buflen < 0)
+		return -ENAMETOOLONG;
+	*buffer -= namelen;
+	memcpy(*buffer, str, namelen);
+	return 0;
+}
+
+static int prepend_name(char **buffer, int *buflen, struct qstr *name)
+{
+	return prepend(buffer, buflen, (const char *)name->name, name->len);
+}
+
+static int prepend_path(const struct path *path, struct path *root,
+			char **buffer, int *buflen)
+{
+	struct dentry *dentry = path->dentry;
+	struct vfsmount *vfsmnt = path->mnt;
+	struct mount *mnt = real_mount(vfsmnt);
+	bool slash = false;
+	int error = 0;
+
+	while (dentry != root->dentry || vfsmnt != root->mnt) {
+		struct dentry * parent;
+
+		if (dentry == vfsmnt->mnt_root || IS_ROOT(dentry)) {
+			/* Global root? */
+			if (!mnt_has_parent(mnt)) {
+				goto out;
+			}
+			dentry = mnt->mnt_mountpoint;
+			mnt = mnt->mnt_parent;
+			vfsmnt = &mnt->mnt;
+			continue;
+		}
+		parent = dentry->d_parent;
+		prefetch(parent);
+		spin_lock(&dentry->d_lock);
+		error = prepend_name(buffer, buflen, &dentry->d_name);
+		spin_unlock(&dentry->d_lock);
+		if (!error)
+			error = prepend(buffer, buflen, "/", 1);
+		if (error)
+			break;
+
+		slash = true;
+		dentry = parent;
+	}
+
+out:
+	if (!error && !slash)
+		error = prepend(buffer, buflen, "/", 1);
+
+	return error;
+}
+
+/* this must be called with mount_lock and rename_lock held */
+
+static char *__our_d_path(const struct path *path, struct path *root,
+			char *buf, int buflen)
+{
+	char *res = buf + buflen;
+	int error;
+
+	prepend(&res, &buflen, "\0", 1);
+	error = prepend_path(path, root, &res, &buflen);
+	if (error)
+		return ERR_PTR(error);
+
+	return res;
+}
+
+static char *
+gen_full_path(struct path *path, struct path *root, char *buf, int buflen)
+{
+	char *retval;
+
+	retval = __our_d_path(path, root, buf, buflen);
+	if (unlikely(IS_ERR(retval)))
+		retval = strcpy(buf, "<path too long>");
+	else if (unlikely(retval[1] == '/' && retval[2] == '\0'))
+		retval[1] = '\0';
+
+	return retval;
+}
+
+static char *
+__d_real_path(const struct dentry *dentry, const struct vfsmount *vfsmnt,
+		char *buf, int buflen)
+{
+	struct path path;
+	char *res;
+
+	path.dentry = (struct dentry *)dentry;
+	path.mnt = (struct vfsmount *)vfsmnt;
+
+	/* we can use gr_real_root.dentry, gr_real_root.mnt, because this is only called
+	   by the RBAC system */
+	res = gen_full_path(&path, &gr_real_root, buf, buflen);
+
+	return res;
+}
+
+static char *
+d_real_path(const struct dentry *dentry, const struct vfsmount *vfsmnt,
+	    char *buf, int buflen)
+{
+	char *res;
+	struct path path;
+	struct path root;
+	struct task_struct *reaper = init_pid_ns.child_reaper;
+
+	path.dentry = (struct dentry *)dentry;
+	path.mnt = (struct vfsmount *)vfsmnt;
+
+	/* we can't use gr_real_root.dentry, gr_real_root.mnt, because they belong only to the RBAC system */
+	get_fs_root(reaper->fs, &root);
+
+	read_seqlock_excl(&mount_lock);
+	write_seqlock(&rename_lock);
+	res = gen_full_path(&path, &root, buf, buflen);
+	write_sequnlock(&rename_lock);
+	read_sequnlock_excl(&mount_lock);
+
+	path_put(&root);
+	return res;
+}
+
+char *
+gr_to_filename_rbac(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	char *ret;
+	read_seqlock_excl(&mount_lock);
+	write_seqlock(&rename_lock);
+	ret = __d_real_path(dentry, mnt, per_cpu_ptr(gr_shared_page[0],smp_processor_id()),
+			     PAGE_SIZE);
+	write_sequnlock(&rename_lock);
+	read_sequnlock_excl(&mount_lock);
+	return ret;
+}
+
+static char *
+gr_to_proc_filename_rbac(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	char *ret;
+	char *buf;
+	int buflen;
+
+	read_seqlock_excl(&mount_lock);
+	write_seqlock(&rename_lock);
+	buf = per_cpu_ptr(gr_shared_page[0], smp_processor_id());
+	ret = __d_real_path(dentry, mnt, buf, PAGE_SIZE - 6);
+	buflen = (int)(ret - buf);
+	if (buflen >= 5)
+		prepend(&ret, &buflen, "/proc", 5);
+	else
+		ret = strcpy(buf, "<path too long>");
+	write_sequnlock(&rename_lock);
+	read_sequnlock_excl(&mount_lock);
+	return ret;
+}
+
+char *
+gr_to_filename_nolock(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return __d_real_path(dentry, mnt, per_cpu_ptr(gr_shared_page[0],smp_processor_id()),
+			     PAGE_SIZE);
+}
+
+char *
+gr_to_filename(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return d_real_path(dentry, mnt, per_cpu_ptr(gr_shared_page[0], smp_processor_id()),
+			   PAGE_SIZE);
+}
+
+char *
+gr_to_filename1(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return d_real_path(dentry, mnt, per_cpu_ptr(gr_shared_page[1], smp_processor_id()),
+			   PAGE_SIZE);
+}
+
+char *
+gr_to_filename2(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return d_real_path(dentry, mnt, per_cpu_ptr(gr_shared_page[2], smp_processor_id()),
+			   PAGE_SIZE);
+}
+
+char *
+gr_to_filename3(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return d_real_path(dentry, mnt, per_cpu_ptr(gr_shared_page[3], smp_processor_id()),
+			   PAGE_SIZE);
+}
+
+__u32
+to_gr_audit(const __u32 reqmode)
+{
+	/* masks off auditable permission flags, then shifts them to create
+	   auditing flags, and adds the special case of append auditing if
+	   we're requesting write */
+	return (((reqmode & ~GR_AUDITS) << 10) | ((reqmode & GR_WRITE) ? GR_AUDIT_APPEND : 0));
+}
+
+struct acl_role_label *
+__lookup_acl_role_label(const struct gr_policy_state *state, const struct task_struct *task, const uid_t uid,
+		      const gid_t gid)
+{
+	unsigned int index = gr_rhash(uid, GR_ROLE_USER, state->acl_role_set.r_size);
+	struct acl_role_label *match;
+	struct role_allowed_ip *ipp;
+	unsigned int x;
+	u32 curr_ip = task->signal->saved_ip;
+
+	match = state->acl_role_set.r_hash[index];
+
+	while (match) {
+		if ((match->roletype & (GR_ROLE_DOMAIN | GR_ROLE_USER)) == (GR_ROLE_DOMAIN | GR_ROLE_USER)) {
+			for (x = 0; x < match->domain_child_num; x++) {
+				if (match->domain_children[x] == uid)
+					goto found;
+			}
+		} else if (match->uidgid == uid && match->roletype & GR_ROLE_USER)
+			break;
+		match = match->next;
+	}
+found:
+	if (match == NULL) {
+	      try_group:
+		index = gr_rhash(gid, GR_ROLE_GROUP, state->acl_role_set.r_size);
+		match = state->acl_role_set.r_hash[index];
+
+		while (match) {
+			if ((match->roletype & (GR_ROLE_DOMAIN | GR_ROLE_GROUP)) == (GR_ROLE_DOMAIN | GR_ROLE_GROUP)) {
+				for (x = 0; x < match->domain_child_num; x++) {
+					if (match->domain_children[x] == gid)
+						goto found2;
+				}
+			} else if (match->uidgid == gid && match->roletype & GR_ROLE_GROUP)
+				break;
+			match = match->next;
+		}
+found2:
+		if (match == NULL)
+			match = state->default_role;
+		if (match->allowed_ips == NULL)
+			return match;
+		else {
+			for (ipp = match->allowed_ips; ipp; ipp = ipp->next) {
+				if (likely
+				    ((ntohl(curr_ip) & ipp->netmask) ==
+				     (ntohl(ipp->addr) & ipp->netmask)))
+					return match;
+			}
+			match = state->default_role;
+		}
+	} else if (match->allowed_ips == NULL) {
+		return match;
+	} else {
+		for (ipp = match->allowed_ips; ipp; ipp = ipp->next) {
+			if (likely
+			    ((ntohl(curr_ip) & ipp->netmask) ==
+			     (ntohl(ipp->addr) & ipp->netmask)))
+				return match;
+		}
+		goto try_group;
+	}
+
+	return match;
+}
+
+static struct acl_role_label *
+lookup_acl_role_label(const struct task_struct *task, const uid_t uid,
+		      const gid_t gid)
+{
+	return __lookup_acl_role_label(&running_polstate, task, uid, gid);
+}
+
+struct acl_subject_label *
+lookup_acl_subj_label(const u64 ino, const dev_t dev,
+		      const struct acl_role_label *role)
+{
+	unsigned int index = gr_fhash(ino, dev, role->subj_hash_size);
+	struct acl_subject_label *match;
+
+	match = role->subj_hash[index];
+
+	while (match && (match->inode != ino || match->device != dev ||
+	       (match->mode & GR_DELETED))) {
+		match = match->next;
+	}
+
+	if (match && !(match->mode & GR_DELETED))
+		return match;
+	else
+		return NULL;
+}
+
+struct acl_subject_label *
+lookup_acl_subj_label_deleted(const u64 ino, const dev_t dev,
+			  const struct acl_role_label *role)
+{
+	unsigned int index = gr_fhash(ino, dev, role->subj_hash_size);
+	struct acl_subject_label *match;
+
+	match = role->subj_hash[index];
+
+	while (match && (match->inode != ino || match->device != dev ||
+	       !(match->mode & GR_DELETED))) {
+		match = match->next;
+	}
+
+	if (match && (match->mode & GR_DELETED))
+		return match;
+	else
+		return NULL;
+}
+
+static struct acl_object_label *
+lookup_acl_obj_label(const u64 ino, const dev_t dev,
+		     const struct acl_subject_label *subj)
+{
+	unsigned int index = gr_fhash(ino, dev, subj->obj_hash_size);
+	struct acl_object_label *match;
+
+	match = subj->obj_hash[index];
+
+	while (match && (match->inode != ino || match->device != dev ||
+	       (match->mode & GR_DELETED))) {
+		match = match->next;
+	}
+
+	if (match && !(match->mode & GR_DELETED))
+		return match;
+	else
+		return NULL;
+}
+
+static struct acl_object_label *
+lookup_acl_obj_label_create(const u64 ino, const dev_t dev,
+		     const struct acl_subject_label *subj)
+{
+	unsigned int index = gr_fhash(ino, dev, subj->obj_hash_size);
+	struct acl_object_label *match;
+
+	match = subj->obj_hash[index];
+
+	while (match && (match->inode != ino || match->device != dev ||
+	       !(match->mode & GR_DELETED))) {
+		match = match->next;
+	}
+
+	if (match && (match->mode & GR_DELETED))
+		return match;
+
+	match = subj->obj_hash[index];
+
+	while (match && (match->inode != ino || match->device != dev ||
+	       (match->mode & GR_DELETED))) {
+		match = match->next;
+	}
+
+	if (match && !(match->mode & GR_DELETED))
+		return match;
+	else
+		return NULL;
+}
+
+struct name_entry *
+__lookup_name_entry(const struct gr_policy_state *state, const char *name)
+{
+	unsigned int len = strlen(name);
+	unsigned int key = full_name_hash(NULL, (const unsigned char *)name, len);
+	unsigned int index = key % state->name_set.n_size;
+	struct name_entry *match;
+
+	match = state->name_set.n_hash[index];
+
+	while (match && (match->key != key || !gr_streq(match->name, name, match->len, len)))
+		match = match->next;
+
+	return match;
+}
+
+static struct name_entry *
+lookup_name_entry(const char *name)
+{
+	return __lookup_name_entry(&running_polstate, name);
+}
+
+static struct name_entry *
+lookup_name_entry_create(const char *name)
+{
+	unsigned int len = strlen(name);
+	unsigned int key = full_name_hash(NULL, (const unsigned char *)name, len);
+	unsigned int index = key % running_polstate.name_set.n_size;
+	struct name_entry *match;
+
+	match = running_polstate.name_set.n_hash[index];
+
+	while (match && (match->key != key || !gr_streq(match->name, name, match->len, len) ||
+			 !match->deleted))
+		match = match->next;
+
+	if (match && match->deleted)
+		return match;
+
+	match = running_polstate.name_set.n_hash[index];
+
+	while (match && (match->key != key || !gr_streq(match->name, name, match->len, len) ||
+			 match->deleted))
+		match = match->next;
+
+	if (match && !match->deleted)
+		return match;
+	else
+		return NULL;
+}
+
+static struct inodev_entry *
+lookup_inodev_entry(const u64 ino, const dev_t dev)
+{
+	unsigned int index = gr_fhash(ino, dev, running_polstate.inodev_set.i_size);
+	struct inodev_entry *match;
+
+	match = running_polstate.inodev_set.i_hash[index];
+
+	while (match && (match->nentry->inode != ino || match->nentry->device != dev))
+		match = match->next;
+
+	return match;
+}
+
+void
+__insert_inodev_entry(const struct gr_policy_state *state, struct inodev_entry *entry)
+{
+	unsigned int index = gr_fhash(entry->nentry->inode, entry->nentry->device,
+				    state->inodev_set.i_size);
+	struct inodev_entry **curr;
+
+	entry->prev = NULL;
+
+	curr = &state->inodev_set.i_hash[index];
+	if (*curr != NULL)
+		(*curr)->prev = entry;
+	
+	entry->next = *curr;
+	*curr = entry;
+
+	return;
+}
+
+static void
+insert_inodev_entry(struct inodev_entry *entry)
+{
+	__insert_inodev_entry(&running_polstate, entry);
+}
+
+void
+insert_acl_obj_label(struct acl_object_label *obj,
+		     struct acl_subject_label *subj)
+{
+	unsigned int index =
+	    gr_fhash(obj->inode, obj->device, subj->obj_hash_size);
+	struct acl_object_label **curr;
+
+	obj->prev = NULL;
+
+	curr = &subj->obj_hash[index];
+	if (*curr != NULL)
+		(*curr)->prev = obj;
+
+	obj->next = *curr;
+	*curr = obj;
+
+	return;
+}
+
+void
+insert_acl_subj_label(struct acl_subject_label *obj,
+		      struct acl_role_label *role)
+{
+	unsigned int index = gr_fhash(obj->inode, obj->device, role->subj_hash_size);
+	struct acl_subject_label **curr;
+
+	obj->prev = NULL;
+
+	curr = &role->subj_hash[index];
+	if (*curr != NULL)
+		(*curr)->prev = obj;
+
+	obj->next = *curr;
+	*curr = obj;
+
+	return;
+}
+
+/* derived from glibc fnmatch() 0: match, 1: no match*/
+
+static int
+glob_match(const char *p, const char *n)
+{
+	char c;
+
+	while ((c = *p++) != '\0') {
+	switch (c) {
+		case '?':
+			if (*n == '\0')
+				return 1;
+			else if (*n == '/')
+				return 1;
+			break;
+		case '\\':
+			if (*n != c)
+				return 1;
+			break;
+		case '*':
+			for (c = *p++; c == '?' || c == '*'; c = *p++) {
+				if (*n == '/')
+					return 1;
+				else if (c == '?') {
+					if (*n == '\0')
+						return 1;
+					else
+						++n;
+				}
+			}
+			if (c == '\0') {
+				return 0;
+			} else {
+				const char *endp;
+
+				if ((endp = strchr(n, '/')) == NULL)
+					endp = n + strlen(n);
+
+				if (c == '[') {
+					for (--p; n < endp; ++n)
+						if (!glob_match(p, n))
+							return 0;
+				} else if (c == '/') {
+					while (*n != '\0' && *n != '/')
+						++n;
+					if (*n == '/' && !glob_match(p, n + 1))
+						return 0;
+				} else {
+					for (--p; n < endp; ++n)
+						if (*n == c && !glob_match(p, n))
+							return 0;
+				}
+
+				return 1;
+			}
+		case '[':
+			{
+			int not;
+			char cold;
+
+			if (*n == '\0' || *n == '/')
+				return 1;
+
+			not = (*p == '!' || *p == '^');
+			if (not)
+				++p;
+
+			c = *p++;
+			for (;;) {
+				unsigned char fn = (unsigned char)*n;
+
+				if (c == '\0')
+					return 1;
+				else {
+					if (c == fn)
+						goto matched;
+					cold = c;
+					c = *p++;
+
+					if (c == '-' && *p != ']') {
+						unsigned char cend = *p++;
+
+						if (cend == '\0')
+							return 1;
+
+						if (cold <= fn && fn <= cend)
+							goto matched;
+
+						c = *p++;
+					}
+				}
+
+				if (c == ']')
+					break;
+			}
+			if (!not)
+				return 1;
+			break;
+		matched:
+			while (c != ']') {
+				if (c == '\0')
+					return 1;
+
+				c = *p++;
+			}
+			if (not)
+				return 1;
+		}
+		break;
+	default:
+		if (c != *n)
+			return 1;
+	}
+
+	++n;
+	}
+
+	if (*n == '\0')
+		return 0;
+
+	if (*n == '/')
+		return 0;
+
+	return 1;
+}
+
+static struct acl_object_label *
+chk_glob_label(struct acl_object_label *globbed,
+	const struct dentry *dentry, const struct vfsmount *mnt, char **path)
+{
+	struct acl_object_label *tmp;
+
+	if (*path == NULL)
+		*path = gr_to_filename_nolock(dentry, mnt);
+
+	tmp = globbed;
+
+	while (tmp) {
+		if (!glob_match(tmp->filename, *path))
+			return tmp;
+		tmp = tmp->next;
+	}
+
+	return NULL;
+}
+
+static struct acl_object_label *
+__full_lookup(const struct dentry *orig_dentry, const struct vfsmount *orig_mnt,
+	    const u64 curr_ino, const dev_t curr_dev,
+	    const struct acl_subject_label *subj, char **path, const int checkglob)
+{
+	struct acl_subject_label *tmpsubj;
+	struct acl_object_label *retval;
+	struct acl_object_label *retval2;
+
+	tmpsubj = (struct acl_subject_label *) subj;
+	read_lock(&gr_inode_lock);
+	do {
+		retval = lookup_acl_obj_label(curr_ino, curr_dev, tmpsubj);
+		if (retval) {
+			if (checkglob && retval->globbed) {
+				retval2 = chk_glob_label(retval->globbed, orig_dentry, orig_mnt, path);
+				if (retval2)
+					retval = retval2;
+			}
+			break;
+		}
+	} while ((tmpsubj = tmpsubj->parent_subject));
+	read_unlock(&gr_inode_lock);
+
+	return retval;
+}
+
+static struct acl_object_label *
+full_lookup(const struct dentry *orig_dentry, const struct vfsmount *orig_mnt,
+	    struct dentry *curr_dentry,
+	    const struct acl_subject_label *subj, char **path, const int checkglob)
+{
+	int newglob = checkglob;
+	u64 inode;
+	dev_t device;
+
+	/* if we aren't checking a subdirectory of the original path yet, don't do glob checking
+	   as we don't want a / * rule to match instead of the / object
+	   don't do this for create lookups that call this function though, since they're looking up
+	   on the parent and thus need globbing checks on all paths
+	*/
+	if (orig_dentry == curr_dentry && newglob != GR_CREATE_GLOB)
+		newglob = GR_NO_GLOB;
+
+	spin_lock(&curr_dentry->d_lock);
+	inode = __get_ino(curr_dentry);
+	device = __get_dev(curr_dentry);
+	spin_unlock(&curr_dentry->d_lock);
+
+	return __full_lookup(orig_dentry, orig_mnt, inode, device, subj, path, newglob);
+}
+
+#ifdef CONFIG_HUGETLBFS
+static inline bool
+is_hugetlbfs_mnt(const struct vfsmount *mnt)
+{
+	int i;
+	for (i = 0; i < HUGE_MAX_HSTATE; i++) {
+		if (unlikely(hugetlbfs_vfsmount[i] == mnt))
+			return true;
+	}
+
+	return false;
+}
+#endif
+
+static struct acl_object_label *
+__chk_obj_label(const struct dentry *l_dentry, const struct vfsmount *l_mnt,
+	      const struct acl_subject_label *subj, char *path, const int checkglob)
+{
+	struct dentry *dentry = (struct dentry *) l_dentry;
+	struct vfsmount *mnt = (struct vfsmount *) l_mnt;
+	struct inode * inode = d_backing_inode(dentry);
+	struct mount *real_mnt = real_mount(mnt);
+	struct acl_object_label *retval;
+	struct dentry *parent;
+
+	read_seqlock_excl(&mount_lock);
+	write_seqlock(&rename_lock);
+
+	if (unlikely((mnt == shm_mnt && inode->i_nlink == 0) || mnt == pipe_mnt ||
+#ifdef CONFIG_NET
+	    mnt == sock_mnt ||
+#endif
+#ifdef CONFIG_HUGETLBFS
+	    (is_hugetlbfs_mnt(mnt) && inode->i_nlink == 0) ||
+#endif
+		/* ignore Eric Biederman */
+	    IS_PRIVATE(inode))) {
+		retval = (subj->mode & GR_SHMEXEC) ? fakefs_obj_rwx : fakefs_obj_rw;
+		goto out;
+	}
+
+	for (;;) {
+		if (dentry == gr_real_root.dentry && mnt == gr_real_root.mnt)
+			break;
+
+		if (dentry == mnt->mnt_root || IS_ROOT(dentry)) {
+			if (!mnt_has_parent(real_mnt))
+				break;
+
+			retval = full_lookup(l_dentry, l_mnt, dentry, subj, &path, checkglob);
+			if (retval != NULL)
+				goto out;
+
+			dentry = real_mnt->mnt_mountpoint;
+			real_mnt = real_mnt->mnt_parent;
+			mnt = &real_mnt->mnt;
+			continue;
+		}
+
+		parent = dentry->d_parent;
+		retval = full_lookup(l_dentry, l_mnt, dentry, subj, &path, checkglob);
+		if (retval != NULL)
+			goto out;
+
+		dentry = parent;
+	}
+
+	retval = full_lookup(l_dentry, l_mnt, dentry, subj, &path, checkglob);
+
+	/* gr_real_root is pinned so we don't have to hold a reference */
+	if (retval == NULL)
+		retval = full_lookup(l_dentry, l_mnt, gr_real_root.dentry, subj, &path, checkglob);
+out:
+	write_sequnlock(&rename_lock);
+	read_sequnlock_excl(&mount_lock);
+
+	BUG_ON(retval == NULL);
+
+	return retval;
+}
+
+static struct acl_object_label *
+chk_obj_label(const struct dentry *l_dentry, const struct vfsmount *l_mnt,
+	      const struct acl_subject_label *subj)
+{
+	char *path = NULL;
+	return __chk_obj_label(l_dentry, l_mnt, subj, path, GR_REG_GLOB);
+}
+
+static struct acl_object_label *
+chk_obj_label_noglob(const struct dentry *l_dentry, const struct vfsmount *l_mnt,
+	      const struct acl_subject_label *subj)
+{
+	char *path = NULL;
+	return __chk_obj_label(l_dentry, l_mnt, subj, path, GR_NO_GLOB);
+}
+
+static struct acl_object_label *
+chk_obj_create_label(const struct dentry *l_dentry, const struct vfsmount *l_mnt,
+		     const struct acl_subject_label *subj, char *path)
+{
+	return __chk_obj_label(l_dentry, l_mnt, subj, path, GR_CREATE_GLOB);
+}
+
+struct acl_subject_label *
+chk_subj_label(const struct dentry *l_dentry, const struct vfsmount *l_mnt,
+	       const struct acl_role_label *role)
+{
+	struct dentry *dentry = (struct dentry *) l_dentry;
+	struct vfsmount *mnt = (struct vfsmount *) l_mnt;
+	struct mount *real_mnt = real_mount(mnt);
+	struct acl_subject_label *retval;
+	struct dentry *parent;
+
+	read_seqlock_excl(&mount_lock);
+	write_seqlock(&rename_lock);
+
+	for (;;) {
+		if (dentry == gr_real_root.dentry && mnt == gr_real_root.mnt)
+			break;
+		if (dentry == mnt->mnt_root || IS_ROOT(dentry)) {
+			if (!mnt_has_parent(real_mnt))
+				break;
+
+			spin_lock(&dentry->d_lock);
+			read_lock(&gr_inode_lock);
+			retval =
+				lookup_acl_subj_label(__get_ino(dentry),
+						__get_dev(dentry), role);
+			read_unlock(&gr_inode_lock);
+			spin_unlock(&dentry->d_lock);
+			if (retval != NULL)
+				goto out;
+
+			dentry = real_mnt->mnt_mountpoint;
+			real_mnt = real_mnt->mnt_parent;
+			mnt = &real_mnt->mnt;
+			continue;
+		}
+
+		spin_lock(&dentry->d_lock);
+		read_lock(&gr_inode_lock);
+		retval = lookup_acl_subj_label(__get_ino(dentry),
+					  __get_dev(dentry), role);
+		read_unlock(&gr_inode_lock);
+		parent = dentry->d_parent;
+		spin_unlock(&dentry->d_lock);
+
+		if (retval != NULL)
+			goto out;
+
+		dentry = parent;
+	}
+
+	spin_lock(&dentry->d_lock);
+	read_lock(&gr_inode_lock);
+	retval = lookup_acl_subj_label(__get_ino(dentry),
+				  __get_dev(dentry), role);
+	read_unlock(&gr_inode_lock);
+	spin_unlock(&dentry->d_lock);
+
+	if (unlikely(retval == NULL)) {
+		/* gr_real_root is pinned, we don't need to hold a reference */
+		read_lock(&gr_inode_lock);
+		retval = lookup_acl_subj_label(__get_ino(gr_real_root.dentry),
+					  __get_dev(gr_real_root.dentry), role);
+		read_unlock(&gr_inode_lock);
+	}
+out:
+	write_sequnlock(&rename_lock);
+	read_sequnlock_excl(&mount_lock);
+
+	BUG_ON(retval == NULL);
+
+	return retval;
+}
+
+void
+assign_special_role(const char *rolename)
+{
+	struct acl_object_label *obj;
+	struct acl_role_label *r;
+	struct acl_role_label *assigned = NULL;
+	struct task_struct *tsk;
+	struct file *filp;
+
+	FOR_EACH_ROLE_START(r)
+		if (!strcmp(rolename, r->rolename) &&
+		    (r->roletype & GR_ROLE_SPECIAL)) {
+			assigned = r;
+			break;
+		}
+	FOR_EACH_ROLE_END(r)
+
+	if (!assigned)
+		return;
+
+	read_lock(&tasklist_lock);
+	read_lock(&grsec_exec_file_lock);
+
+	tsk = current->real_parent;
+	if (tsk == NULL)
+		goto out_unlock;
+
+	filp = tsk->exec_file;
+	if (filp == NULL)
+		goto out_unlock;
+
+	tsk->is_writable = 0;
+	tsk->inherited = 0;
+
+	tsk->acl_sp_role = 1;
+	tsk->acl_role_id = ++acl_sp_role_value;
+	tsk->role = assigned;
+	tsk->acl = chk_subj_label(filp->f_path.dentry, filp->f_path.mnt, tsk->role);
+
+	/* ignore additional mmap checks for processes that are writable
+	   by the default ACL */
+	obj = chk_obj_label(filp->f_path.dentry, filp->f_path.mnt, running_polstate.default_role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		tsk->is_writable = 1;
+	obj = chk_obj_label(filp->f_path.dentry, filp->f_path.mnt, tsk->role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		tsk->is_writable = 1;
+
+#ifdef CONFIG_GRKERNSEC_RBAC_DEBUG
+	printk(KERN_ALERT "Assigning special role:%s subject:%s to process (%s:%d)\n", tsk->role->rolename,
+			tsk->acl->filename, tsk->comm, task_pid_nr(tsk));
+#endif
+
+out_unlock:
+	read_unlock(&grsec_exec_file_lock);
+	read_unlock(&tasklist_lock);
+	return;
+}
+
+
+static void
+gr_log_learn(const struct dentry *dentry, const struct vfsmount *mnt, const __u32 mode)
+{
+	struct task_struct *task = current;
+	const struct cred *cred = current_cred();
+
+	security_learn(GR_LEARN_AUDIT_MSG, task->role->rolename, task->role->roletype,
+		       GR_GLOBAL_UID(cred->uid), GR_GLOBAL_GID(cred->gid), task->exec_file ? gr_to_filename1(task->exec_file->f_path.dentry,
+		       task->exec_file->f_path.mnt) : task->acl->filename, task->acl->filename,
+		       1UL, 1UL, gr_to_filename(dentry, mnt), (unsigned long) mode, &task->signal->saved_ip);
+
+	return;
+}
+
+static void
+gr_log_learn_uid_change(const kuid_t real, const kuid_t effective, const kuid_t fs)
+{
+	struct task_struct *task = current;
+	const struct cred *cred = current_cred();
+
+	security_learn(GR_ID_LEARN_MSG, task->role->rolename, task->role->roletype,
+		       GR_GLOBAL_UID(cred->uid), GR_GLOBAL_GID(cred->gid), task->exec_file ? gr_to_filename1(task->exec_file->f_path.dentry,
+		       task->exec_file->f_path.mnt) : task->acl->filename, task->acl->filename,
+		       'u', GR_GLOBAL_UID(real), GR_GLOBAL_UID(effective), GR_GLOBAL_UID(fs), &task->signal->saved_ip);
+
+	return;
+}
+
+static void
+gr_log_learn_gid_change(const kgid_t real, const kgid_t effective, const kgid_t fs)
+{
+	struct task_struct *task = current;
+	const struct cred *cred = current_cred();
+
+	security_learn(GR_ID_LEARN_MSG, task->role->rolename, task->role->roletype,
+		       GR_GLOBAL_UID(cred->uid), GR_GLOBAL_GID(cred->gid), task->exec_file ? gr_to_filename1(task->exec_file->f_path.dentry,
+		       task->exec_file->f_path.mnt) : task->acl->filename, task->acl->filename,
+		       'g', GR_GLOBAL_GID(real), GR_GLOBAL_GID(effective), GR_GLOBAL_GID(fs), &task->signal->saved_ip);
+
+	return;
+}
+
+static void
+gr_set_proc_res(struct task_struct *task)
+{
+	struct acl_subject_label *proc;
+	unsigned short i;
+
+	proc = task->acl;
+
+	if (proc->mode & (GR_LEARN | GR_INHERITLEARN))
+		return;
+
+	for (i = 0; i < RLIM_NLIMITS; i++) {
+		unsigned long rlim_cur, rlim_max;
+
+		if (!(proc->resmask & (1U << i)))
+			continue;
+
+		rlim_cur = proc->res[i].rlim_cur;
+		rlim_max = proc->res[i].rlim_max;
+
+		if (i == RLIMIT_NOFILE) {
+			unsigned long saved_sysctl_nr_open = sysctl_nr_open;
+			if (rlim_cur > saved_sysctl_nr_open)
+				rlim_cur = saved_sysctl_nr_open;
+			if (rlim_max > saved_sysctl_nr_open)
+				rlim_max = saved_sysctl_nr_open;
+		}
+
+		task->signal->rlim[i].rlim_cur = rlim_cur;
+		task->signal->rlim[i].rlim_max = rlim_max;
+
+		if (i == RLIMIT_CPU)
+			update_rlimit_cpu(task, rlim_cur);
+	}
+
+	return;
+}
+
+/* both of the below must be called with
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+	read_lock(&grsec_exec_file_lock);
+   except in the case of gr_set_role_label() (for __gr_get_subject_for_task)
+*/
+
+struct acl_subject_label *__gr_get_subject_for_task(const struct gr_policy_state *state, struct task_struct *task, const char *filename, int fallback)
+{
+	char *tmpname;
+	struct acl_subject_label *tmpsubj;
+	struct file *filp;
+	struct name_entry *nmatch;
+
+	filp = task->exec_file;
+	if (filp == NULL)
+		return NULL;
+
+	/* the following is to apply the correct subject
+	   on binaries running when the RBAC system
+	   is enabled, when the binaries have been
+	   replaced or deleted since their execution
+	   -----
+	   when the RBAC system starts, the inode/dev
+	   from exec_file will be one the RBAC system
+	   is unaware of.  It only knows the inode/dev
+	   of the present file on disk, or the absence
+	   of it.
+	*/
+
+	if (filename)
+		nmatch = __lookup_name_entry(state, filename);
+	else {
+		preempt_disable();
+		tmpname = gr_to_filename_rbac(filp->f_path.dentry, filp->f_path.mnt);
+
+		nmatch = __lookup_name_entry(state, tmpname);
+		preempt_enable();
+	}
+	tmpsubj = NULL;
+	if (nmatch) {
+		if (nmatch->deleted)
+			tmpsubj = lookup_acl_subj_label_deleted(nmatch->inode, nmatch->device, task->role);
+		else
+			tmpsubj = lookup_acl_subj_label(nmatch->inode, nmatch->device, task->role);
+	}
+	/* this also works for the reload case -- if we don't match a potentially inherited subject
+	   then we fall back to a normal lookup based on the binary's ino/dev
+	*/
+	if (tmpsubj == NULL && fallback)
+		tmpsubj = chk_subj_label(filp->f_path.dentry, filp->f_path.mnt, task->role);
+
+	return tmpsubj;
+}
+
+static struct acl_subject_label *gr_get_subject_for_task(struct task_struct *task, const char *filename, int fallback)
+{
+	return __gr_get_subject_for_task(&running_polstate, task, filename, fallback);
+}
+
+void __gr_apply_subject_to_task(const struct gr_policy_state *state, struct task_struct *task, struct acl_subject_label *subj)
+{
+	struct acl_object_label *obj;
+	struct file *filp;
+
+	filp = task->exec_file;
+
+	task->acl = subj;
+	task->is_writable = 0;
+	/* ignore additional mmap checks for processes that are writable 
+	   by the default ACL */
+	obj = chk_obj_label(filp->f_path.dentry, filp->f_path.mnt, state->default_role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		task->is_writable = 1;
+	obj = chk_obj_label(filp->f_path.dentry, filp->f_path.mnt, task->role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		task->is_writable = 1;
+
+	gr_set_proc_res(task);
+
+#ifdef CONFIG_GRKERNSEC_RBAC_DEBUG
+	printk(KERN_ALERT "gr_set_acls for (%s:%d): role:%s, subject:%s\n", task->comm, task_pid_nr(task), task->role->rolename, task->acl->filename);
+#endif
+}
+
+static void gr_apply_subject_to_task(struct task_struct *task, struct acl_subject_label *subj)
+{
+	__gr_apply_subject_to_task(&running_polstate, task, subj);
+}
+
+__u32
+gr_search_file(const struct dentry * dentry, const __u32 mode,
+	       const struct vfsmount * mnt)
+{
+	__u32 retval = mode;
+	struct acl_subject_label *curracl;
+	struct acl_object_label *currobj;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return (mode & ~GR_AUDITS);
+
+	curracl = current->acl;
+
+	currobj = chk_obj_label(dentry, mnt, curracl);
+	retval = currobj->mode & mode;
+
+	/* if we're opening a specified transfer file for writing
+	   (e.g. /dev/initctl), then transfer our role to init
+	*/
+	if (unlikely(currobj->mode & GR_INIT_TRANSFER && retval & GR_WRITE &&
+		     current->role->roletype & GR_ROLE_PERSIST)) {
+		struct task_struct *task = init_pid_ns.child_reaper;
+
+		if (task->role != current->role) {
+			struct acl_subject_label *subj;
+
+			task->acl_sp_role = 0;
+			task->acl_role_id = current->acl_role_id;
+			task->role = current->role;
+			rcu_read_lock();
+			read_lock(&grsec_exec_file_lock);
+			subj = gr_get_subject_for_task(task, NULL, 1);
+			gr_apply_subject_to_task(task, subj);
+			read_unlock(&grsec_exec_file_lock);
+			rcu_read_unlock();
+			gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_INIT_TRANSFER_MSG);
+		}
+	}
+
+	if (unlikely
+	    ((curracl->mode & (GR_LEARN | GR_INHERITLEARN)) && !(mode & GR_NOPTRACE)
+	     && (retval != (mode & ~(GR_AUDITS | GR_SUPPRESS))))) {
+		__u32 new_mode = mode;
+
+		new_mode &= ~(GR_AUDITS | GR_SUPPRESS);
+
+		retval = new_mode;
+
+		if (new_mode & GR_EXEC && curracl->mode & GR_INHERITLEARN)
+			new_mode |= GR_INHERIT;
+
+		if (!(mode & GR_NOLEARN))
+			gr_log_learn(dentry, mnt, new_mode);
+	}
+
+	return retval;
+}
+
+struct acl_object_label *gr_get_create_object(const struct dentry *new_dentry,
+					      const struct dentry *parent,
+					      const struct vfsmount *mnt)
+{
+	struct name_entry *match;
+	struct acl_object_label *matchpo;
+	struct acl_subject_label *curracl;
+	char *path;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return NULL;
+
+	preempt_disable();
+	path = gr_to_filename_rbac(new_dentry, mnt);
+	match = lookup_name_entry_create(path);
+
+	curracl = current->acl;
+
+	if (match) {
+		read_lock(&gr_inode_lock);
+		matchpo = lookup_acl_obj_label_create(match->inode, match->device, curracl);
+		read_unlock(&gr_inode_lock);
+
+		if (matchpo) {
+			preempt_enable();
+			return matchpo;
+		}
+	}
+
+	// lookup parent
+
+	matchpo = chk_obj_create_label(parent, mnt, curracl, path);
+
+	preempt_enable();
+	return matchpo;
+}
+
+__u32
+gr_check_create(const struct dentry * new_dentry, const struct dentry * parent,
+		const struct vfsmount * mnt, const __u32 mode)
+{
+	struct acl_object_label *matchpo;
+	__u32 retval;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return (mode & ~GR_AUDITS);
+
+	matchpo = gr_get_create_object(new_dentry, parent, mnt);
+
+	retval = matchpo->mode & mode;
+
+	if ((retval != (mode & ~(GR_AUDITS | GR_SUPPRESS)))
+	    && (current->acl->mode & (GR_LEARN | GR_INHERITLEARN))) {
+		__u32 new_mode = mode;
+
+		new_mode &= ~(GR_AUDITS | GR_SUPPRESS);
+
+		gr_log_learn(new_dentry, mnt, new_mode);
+		return new_mode;
+	}
+
+	return retval;
+}
+
+__u32
+gr_check_link(const struct dentry * new_dentry,
+	      const struct dentry * parent_dentry,
+	      const struct vfsmount * parent_mnt,
+	      const struct dentry * old_dentry, const struct vfsmount * old_mnt)
+{
+	struct acl_object_label *obj;
+	__u32 oldmode, newmode;
+	__u32 needmode;
+	__u32 checkmodes = GR_FIND | GR_APPEND | GR_WRITE | GR_EXEC | GR_SETID | GR_READ |
+			   GR_DELETE | GR_INHERIT;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return (GR_CREATE | GR_LINK);
+
+	obj = chk_obj_label(old_dentry, old_mnt, current->acl);
+	oldmode = obj->mode;
+
+	obj = gr_get_create_object(new_dentry, parent_dentry, parent_mnt);
+	newmode = obj->mode;
+
+	needmode = newmode & checkmodes;
+
+	// old name for hardlink must have at least the permissions of the new name
+	if ((oldmode & needmode) != needmode)
+		goto bad;
+
+	// if old name had restrictions/auditing, make sure the new name does as well
+	needmode = oldmode & (GR_NOPTRACE | GR_PTRACERD | GR_INHERIT | GR_AUDITS);
+
+	// don't allow hardlinking of suid/sgid/fcapped files without permission
+	if (is_privileged_binary(old_dentry))
+		needmode |= GR_SETID;
+
+	if ((newmode & needmode) != needmode)
+		goto bad;
+
+	// enforce minimum permissions
+	if ((newmode & (GR_CREATE | GR_LINK)) == (GR_CREATE | GR_LINK))
+		return newmode;
+bad:
+	needmode = oldmode;
+	if (is_privileged_binary(old_dentry))
+		needmode |= GR_SETID;
+	
+	if (current->acl->mode & (GR_LEARN | GR_INHERITLEARN)) {
+		gr_log_learn(old_dentry, old_mnt, needmode | GR_CREATE | GR_LINK);
+		return (GR_CREATE | GR_LINK);
+	} else if (newmode & GR_SUPPRESS)
+		return GR_SUPPRESS;
+	else
+		return 0;
+}
+
+int
+gr_check_hidden_task(const struct task_struct *task)
+{
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+
+	if (!(task->acl->mode & GR_PROCFIND) && !(current->acl->mode & GR_VIEW))
+		return 1;
+
+	return 0;
+}
+
+int
+gr_check_protected_task(const struct task_struct *task)
+{
+	if (unlikely(!(gr_status & GR_READY) || !task))
+		return 0;
+
+	if ((task->acl->mode & GR_PROTECTED) && !(current->acl->mode & GR_KILL) &&
+	    task->acl != current->acl)
+		return 1;
+
+	return 0;
+}
+
+int
+gr_check_protected_task_fowner(struct pid *pid, enum pid_type type)
+{
+	struct task_struct *p;
+	int ret = 0;
+
+	if (unlikely(!(gr_status & GR_READY) || !pid))
+		return ret;
+
+	read_lock(&tasklist_lock);
+	do_each_pid_task(pid, type, p) {
+		if ((p->acl->mode & GR_PROTECTED) && !(current->acl->mode & GR_KILL) &&
+		    p->acl != current->acl) {
+			ret = 1;
+			goto out;
+		}
+	} while_each_pid_task(pid, type, p);
+out:
+	read_unlock(&tasklist_lock);
+
+	return ret;
+}
+
+void
+gr_copy_label(struct task_struct *tsk)
+{
+	struct task_struct *p = current;
+
+	tsk->inherited = p->inherited;
+	tsk->acl_sp_role = 0;
+	tsk->acl_role_id = p->acl_role_id;
+	tsk->acl = p->acl;
+	tsk->role = p->role;
+	tsk->signal->used_accept = 0;
+	tsk->signal->curr_ip = p->signal->curr_ip;
+	tsk->signal->saved_ip = p->signal->saved_ip;
+	if (p->exec_file)
+		get_file(p->exec_file);
+	tsk->exec_file = p->exec_file;
+	tsk->is_writable = p->is_writable;
+	if (unlikely(p->signal->used_accept)) {
+		p->signal->curr_ip = 0;
+		p->signal->saved_ip = 0;
+	}
+
+	return;
+}
+
+extern int gr_process_kernel_setuid_ban(struct user_struct *user);
+
+int
+gr_check_user_change(kuid_t real, kuid_t effective, kuid_t fs)
+{
+	unsigned int i;
+	__u16 num;
+	uid_t *uidlist;
+	uid_t curuid;
+	int realok = 0;
+	int effectiveok = 0;
+	int fsok = 0;
+	uid_t globalreal, globaleffective, globalfs;
+
+#if defined(CONFIG_GRKERNSEC_KERN_LOCKOUT)
+	struct user_struct *user;
+
+	if (!uid_valid(real))
+		goto skipit;
+
+	/* find user based on global namespace */
+
+	globalreal = GR_GLOBAL_UID(real);
+
+	user = find_user(make_kuid(&init_user_ns, globalreal));
+	if (user == NULL)
+		goto skipit;
+
+	if (gr_process_kernel_setuid_ban(user)) {
+		/* for find_user */
+		free_uid(user);
+		return 1;
+	}
+
+	/* for find_user */
+	free_uid(user);
+
+skipit:
+#endif
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+
+	if (current->acl->mode & (GR_LEARN | GR_INHERITLEARN))
+		gr_log_learn_uid_change(real, effective, fs);
+
+	num = current->acl->user_trans_num;
+	uidlist = current->acl->user_transitions;
+
+	if (uidlist == NULL)
+		return 0;
+
+	if (!uid_valid(real)) {
+		realok = 1;
+		globalreal = (uid_t)-1;		
+	} else {
+		globalreal = GR_GLOBAL_UID(real);		
+	}
+	if (!uid_valid(effective)) {
+		effectiveok = 1;
+		globaleffective = (uid_t)-1;
+	} else {
+		globaleffective = GR_GLOBAL_UID(effective);
+	}
+	if (!uid_valid(fs)) {
+		fsok = 1;
+		globalfs = (uid_t)-1;
+	} else {
+		globalfs = GR_GLOBAL_UID(fs);
+	}
+
+	if (current->acl->user_trans_type & GR_ID_ALLOW) {
+		for (i = 0; i < num; i++) {
+			curuid = uidlist[i];
+			if (globalreal == curuid)
+				realok = 1;
+			if (globaleffective == curuid)
+				effectiveok = 1;
+			if (globalfs == curuid)
+				fsok = 1;
+		}
+	} else if (current->acl->user_trans_type & GR_ID_DENY) {
+		for (i = 0; i < num; i++) {
+			curuid = uidlist[i];
+			if (globalreal == curuid)
+				break;
+			if (globaleffective == curuid)
+				break;
+			if (globalfs == curuid)
+				break;
+		}
+		/* not in deny list */
+		if (i == num) {
+			realok = 1;
+			effectiveok = 1;
+			fsok = 1;
+		}
+	}
+
+	if (realok && effectiveok && fsok)
+		return 0;
+	else {
+		gr_log_int(GR_DONT_AUDIT, GR_USRCHANGE_ACL_MSG, realok ? (effectiveok ? (fsok ? 0 : globalfs) : globaleffective) : globalreal);
+		return 1;
+	}
+}
+
+int
+gr_check_group_change(kgid_t real, kgid_t effective, kgid_t fs)
+{
+	unsigned int i;
+	__u16 num;
+	gid_t *gidlist;
+	gid_t curgid;
+	int realok = 0;
+	int effectiveok = 0;
+	int fsok = 0;
+	gid_t globalreal, globaleffective, globalfs;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+
+	if (current->acl->mode & (GR_LEARN | GR_INHERITLEARN))
+		gr_log_learn_gid_change(real, effective, fs);
+
+	num = current->acl->group_trans_num;
+	gidlist = current->acl->group_transitions;
+
+	if (gidlist == NULL)
+		return 0;
+
+	if (!gid_valid(real)) {
+		realok = 1;
+		globalreal = (gid_t)-1;		
+	} else {
+		globalreal = GR_GLOBAL_GID(real);
+	}
+	if (!gid_valid(effective)) {
+		effectiveok = 1;
+		globaleffective = (gid_t)-1;		
+	} else {
+		globaleffective = GR_GLOBAL_GID(effective);
+	}
+	if (!gid_valid(fs)) {
+		fsok = 1;
+		globalfs = (gid_t)-1;		
+	} else {
+		globalfs = GR_GLOBAL_GID(fs);
+	}
+
+	if (current->acl->group_trans_type & GR_ID_ALLOW) {
+		for (i = 0; i < num; i++) {
+			curgid = gidlist[i];
+			if (globalreal == curgid)
+				realok = 1;
+			if (globaleffective == curgid)
+				effectiveok = 1;
+			if (globalfs == curgid)
+				fsok = 1;
+		}
+	} else if (current->acl->group_trans_type & GR_ID_DENY) {
+		for (i = 0; i < num; i++) {
+			curgid = gidlist[i];
+			if (globalreal == curgid)
+				break;
+			if (globaleffective == curgid)
+				break;
+			if (globalfs == curgid)
+				break;
+		}
+		/* not in deny list */
+		if (i == num) {
+			realok = 1;
+			effectiveok = 1;
+			fsok = 1;
+		}
+	}
+
+	if (realok && effectiveok && fsok)
+		return 0;
+	else {
+		gr_log_int(GR_DONT_AUDIT, GR_GRPCHANGE_ACL_MSG, realok ? (effectiveok ? (fsok ? 0 : globalfs) : globaleffective) : globalreal);
+		return 1;
+	}
+}
+
+extern int gr_acl_is_capable(const int cap);
+
+void
+gr_set_role_label(struct task_struct *task, const kuid_t kuid, const kgid_t kgid)
+{
+	struct acl_role_label *role = task->role;
+	struct acl_role_label *origrole = role;
+	struct acl_subject_label *subj = NULL;
+	struct acl_object_label *obj;
+	struct file *filp;
+	uid_t uid;
+	gid_t gid;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return;
+
+	uid = GR_GLOBAL_UID(kuid);
+	gid = GR_GLOBAL_GID(kgid);
+
+	filp = task->exec_file;
+
+	/* kernel process, we'll give them the kernel role */
+	if (unlikely(!filp)) {
+		task->role = running_polstate.kernel_role;
+		task->acl = running_polstate.kernel_role->root_label;
+		return;
+	} else if (!task->role || !(task->role->roletype & GR_ROLE_SPECIAL)) {
+		/* save the current ip at time of role lookup so that the proper
+		   IP will be learned for role_allowed_ip */
+		task->signal->saved_ip = task->signal->curr_ip;
+		role = lookup_acl_role_label(task, uid, gid);
+	}
+
+	/* don't change the role if we're not a privileged process */
+	if (role && task->role != role &&
+	    (((role->roletype & GR_ROLE_USER) && !gr_acl_is_capable(CAP_SETUID)) ||
+	     ((role->roletype & GR_ROLE_GROUP) && !gr_acl_is_capable(CAP_SETGID))))
+		return;
+
+	task->role = role;
+
+	if (task->inherited) {
+		/* if we reached our subject through inheritance, then first see
+		   if there's a subject of the same name in the new role that has
+		   an object that would result in the same inherited subject
+		*/
+		subj = gr_get_subject_for_task(task, task->acl->filename, 0);
+		if (subj) {
+			obj = chk_obj_label(filp->f_path.dentry, filp->f_path.mnt, subj);
+			if (!(obj->mode & GR_INHERIT))
+				subj = NULL;
+		}
+		
+	}
+	if (subj == NULL) {
+		/* otherwise:
+		   perform subject lookup in possibly new role
+		   we can use this result below in the case where role == task->role
+		*/
+		subj = chk_subj_label(filp->f_path.dentry, filp->f_path.mnt, role);
+	}
+
+	/* if we changed uid/gid, but result in the same role
+	   and are using inheritance, don't lose the inherited subject
+	   if current subject is other than what normal lookup
+	   would result in, we arrived via inheritance, don't
+	   lose subject
+	*/
+	if (role != origrole || (!(task->acl->mode & GR_INHERITLEARN) &&
+				   (subj == task->acl)))
+		task->acl = subj;
+
+	/* leave task->inherited unaffected */
+
+	task->is_writable = 0;
+
+	/* ignore additional mmap checks for processes that are writable 
+	   by the default ACL */
+	obj = chk_obj_label(filp->f_path.dentry, filp->f_path.mnt, running_polstate.default_role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		task->is_writable = 1;
+	obj = chk_obj_label(filp->f_path.dentry, filp->f_path.mnt, task->role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		task->is_writable = 1;
+
+#ifdef CONFIG_GRKERNSEC_RBAC_DEBUG
+	printk(KERN_ALERT "Set role label for (%s:%d): role:%s, subject:%s\n", task->comm, task_pid_nr(task), task->role->rolename, task->acl->filename);
+#endif
+
+	gr_set_proc_res(task);
+
+	return;
+}
+
+int
+gr_set_proc_label(const struct dentry *dentry, const struct vfsmount *mnt,
+		  const int unsafe_flags)
+{
+	struct task_struct *task = current;
+	struct acl_subject_label *newacl;
+	struct acl_object_label *obj;
+	__u32 retmode;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+
+	newacl = chk_subj_label(dentry, mnt, task->role);
+
+	/* special handling for if we did an strace -f -p <pid> from an admin role, where pid then
+	   did an exec
+	*/
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+	if (task->ptrace && task->parent && ((task->parent->role->roletype & GR_ROLE_GOD) ||
+	    (task->parent->acl->mode & GR_POVERRIDE))) {
+		read_unlock(&tasklist_lock);
+		rcu_read_unlock();
+		goto skip_check;
+	}
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+
+	if (unsafe_flags && !(task->acl->mode & GR_POVERRIDE) && (task->acl != newacl) &&
+	     !(task->role->roletype & GR_ROLE_GOD) &&
+	     !gr_search_file(dentry, GR_PTRACERD, mnt) &&
+	     !(task->acl->mode & (GR_LEARN | GR_INHERITLEARN))) {
+		if (unsafe_flags & LSM_UNSAFE_SHARE)
+			gr_log_fs_generic(GR_DONT_AUDIT, GR_UNSAFESHARE_EXEC_ACL_MSG, dentry, mnt);
+		else if (unsafe_flags & (LSM_UNSAFE_PTRACE_CAP | LSM_UNSAFE_PTRACE))
+			gr_log_fs_generic(GR_DONT_AUDIT, GR_PTRACE_EXEC_ACL_MSG, dentry, mnt);
+		else
+			gr_log_fs_generic(GR_DONT_AUDIT, GR_NNP_EXEC_ACL_MSG, dentry, mnt);
+		return -EACCES;
+	}
+
+skip_check:
+
+	obj = chk_obj_label(dentry, mnt, task->acl);
+	retmode = obj->mode & (GR_INHERIT | GR_AUDIT_INHERIT);
+
+	if (!(task->acl->mode & GR_INHERITLEARN) &&
+	    ((newacl->mode & GR_LEARN) || !(retmode & GR_INHERIT))) {
+		if (obj->nested)
+			task->acl = obj->nested;
+		else
+			task->acl = newacl;
+		task->inherited = 0;
+	} else {
+		task->inherited = 1;
+		if (retmode & GR_INHERIT && retmode & GR_AUDIT_INHERIT)
+			gr_log_str_fs(GR_DO_AUDIT, GR_INHERIT_ACL_MSG, task->acl->filename, dentry, mnt);
+	}
+
+	task->is_writable = 0;
+
+	/* ignore additional mmap checks for processes that are writable 
+	   by the default ACL */
+	obj = chk_obj_label(dentry, mnt, running_polstate.default_role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		task->is_writable = 1;
+	obj = chk_obj_label(dentry, mnt, task->role->root_label);
+	if (unlikely(obj->mode & GR_WRITE))
+		task->is_writable = 1;
+
+	gr_set_proc_res(task);
+
+#ifdef CONFIG_GRKERNSEC_RBAC_DEBUG
+	printk(KERN_ALERT "Set subject label for (%s:%d): role:%s, subject:%s\n", task->comm, task_pid_nr(task), task->role->rolename, task->acl->filename);
+#endif
+	return 0;
+}
+
+/* always called with valid inodev ptr */
+static void
+do_handle_delete(struct inodev_entry *inodev, const u64 ino, const dev_t dev)
+{
+	struct acl_object_label *matchpo;
+	struct acl_subject_label *matchps;
+	struct acl_subject_label *subj;
+	struct acl_role_label *role;
+	unsigned int x;
+
+	FOR_EACH_ROLE_START(role)
+		FOR_EACH_SUBJECT_START(role, subj, x)
+			if ((matchpo = lookup_acl_obj_label(ino, dev, subj)) != NULL)
+				matchpo->mode |= GR_DELETED;
+		FOR_EACH_SUBJECT_END(subj,x)
+		FOR_EACH_NESTED_SUBJECT_START(role, subj)
+			/* nested subjects aren't in the role's subj_hash table */
+			if ((matchpo = lookup_acl_obj_label(ino, dev, subj)) != NULL)
+				matchpo->mode |= GR_DELETED;
+		FOR_EACH_NESTED_SUBJECT_END(subj)
+		if ((matchps = lookup_acl_subj_label(ino, dev, role)) != NULL)
+			matchps->mode |= GR_DELETED;
+	FOR_EACH_ROLE_END(role)
+
+	inodev->nentry->deleted = 1;
+
+	return;
+}
+
+void
+gr_handle_delete(const u64 ino, const dev_t dev)
+{
+	struct inodev_entry *inodev;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return;
+
+	write_lock(&gr_inode_lock);
+	inodev = lookup_inodev_entry(ino, dev);
+	if (inodev != NULL)
+		do_handle_delete(inodev, ino, dev);
+	write_unlock(&gr_inode_lock);
+
+	return;
+}
+
+static void
+update_acl_obj_label(const u64 oldinode, const dev_t olddevice,
+		     const u64 newinode, const dev_t newdevice,
+		     struct acl_subject_label *subj)
+{
+	unsigned int index = gr_fhash(oldinode, olddevice, subj->obj_hash_size);
+	struct acl_object_label *match;
+
+	match = subj->obj_hash[index];
+
+	while (match && (match->inode != oldinode ||
+	       match->device != olddevice ||
+	       !(match->mode & GR_DELETED)))
+		match = match->next;
+
+	if (match && (match->inode == oldinode)
+	    && (match->device == olddevice)
+	    && (match->mode & GR_DELETED)) {
+		if (match->prev == NULL) {
+			subj->obj_hash[index] = match->next;
+			if (match->next != NULL)
+				match->next->prev = NULL;
+		} else {
+			match->prev->next = match->next;
+			if (match->next != NULL)
+				match->next->prev = match->prev;
+		}
+		match->prev = NULL;
+		match->next = NULL;
+		match->inode = newinode;
+		match->device = newdevice;
+		match->mode &= ~GR_DELETED;
+
+		insert_acl_obj_label(match, subj);
+	}
+
+	return;
+}
+
+static void
+update_acl_subj_label(const u64 oldinode, const dev_t olddevice,
+		      const u64 newinode, const dev_t newdevice,
+		      struct acl_role_label *role)
+{
+	unsigned int index = gr_fhash(oldinode, olddevice, role->subj_hash_size);
+	struct acl_subject_label *match;
+
+	match = role->subj_hash[index];
+
+	while (match && (match->inode != oldinode ||
+	       match->device != olddevice ||
+	       !(match->mode & GR_DELETED)))
+		match = match->next;
+
+	if (match && (match->inode == oldinode)
+	    && (match->device == olddevice)
+	    && (match->mode & GR_DELETED)) {
+		if (match->prev == NULL) {
+			role->subj_hash[index] = match->next;
+			if (match->next != NULL)
+				match->next->prev = NULL;
+		} else {
+			match->prev->next = match->next;
+			if (match->next != NULL)
+				match->next->prev = match->prev;
+		}
+		match->prev = NULL;
+		match->next = NULL;
+		match->inode = newinode;
+		match->device = newdevice;
+		match->mode &= ~GR_DELETED;
+
+		insert_acl_subj_label(match, role);
+	}
+
+	return;
+}
+
+static void
+update_inodev_entry(const u64 oldinode, const dev_t olddevice,
+		    const u64 newinode, const dev_t newdevice)
+{
+	unsigned int index = gr_fhash(oldinode, olddevice, running_polstate.inodev_set.i_size);
+	struct inodev_entry *match;
+
+	match = running_polstate.inodev_set.i_hash[index];
+
+	while (match && (match->nentry->inode != oldinode ||
+	       match->nentry->device != olddevice || !match->nentry->deleted))
+		match = match->next;
+
+	if (match && (match->nentry->inode == oldinode)
+	    && (match->nentry->device == olddevice) &&
+	    match->nentry->deleted) {
+		if (match->prev == NULL) {
+			running_polstate.inodev_set.i_hash[index] = match->next;
+			if (match->next != NULL)
+				match->next->prev = NULL;
+		} else {
+			match->prev->next = match->next;
+			if (match->next != NULL)
+				match->next->prev = match->prev;
+		}
+		match->prev = NULL;
+		match->next = NULL;
+		match->nentry->inode = newinode;
+		match->nentry->device = newdevice;
+		match->nentry->deleted = 0;
+
+		insert_inodev_entry(match);
+	}
+
+	return;
+}
+
+static void
+__do_handle_create(const struct name_entry *matchn, u64 ino, dev_t dev)
+{
+	struct acl_subject_label *subj;
+	struct acl_role_label *role;
+	unsigned int x;
+
+	FOR_EACH_ROLE_START(role)
+		update_acl_subj_label(matchn->inode, matchn->device, ino, dev, role);
+
+		FOR_EACH_NESTED_SUBJECT_START(role, subj)
+			if ((subj->inode == ino) && (subj->device == dev)) {
+				subj->inode = ino;
+				subj->device = dev;
+			}
+			/* nested subjects aren't in the role's subj_hash table */
+			update_acl_obj_label(matchn->inode, matchn->device,
+					     ino, dev, subj);
+		FOR_EACH_NESTED_SUBJECT_END(subj)
+		FOR_EACH_SUBJECT_START(role, subj, x)
+			update_acl_obj_label(matchn->inode, matchn->device,
+					     ino, dev, subj);
+		FOR_EACH_SUBJECT_END(subj,x)
+	FOR_EACH_ROLE_END(role)
+
+	update_inodev_entry(matchn->inode, matchn->device, ino, dev);
+
+	return;
+}
+
+static void
+do_handle_create(const struct name_entry *matchn, const struct dentry *dentry,
+		 const struct vfsmount *mnt)
+{
+	u64 ino = __get_ino(dentry);
+	dev_t dev = __get_dev(dentry);
+
+	__do_handle_create(matchn, ino, dev);	
+
+	return;
+}
+
+void
+gr_handle_create(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	struct name_entry *matchn;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return;
+
+	preempt_disable();
+	matchn = lookup_name_entry(gr_to_filename_rbac(dentry, mnt));
+
+	if (unlikely((unsigned long)matchn)) {
+		write_lock(&gr_inode_lock);
+		do_handle_create(matchn, dentry, mnt);
+		write_unlock(&gr_inode_lock);
+	}
+	preempt_enable();
+
+	return;
+}
+
+void
+gr_handle_proc_create(const struct dentry *dentry, const struct inode *inode)
+{
+	struct name_entry *matchn;
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return;
+
+	preempt_disable();
+	matchn = lookup_name_entry(gr_to_proc_filename_rbac(dentry, init_pid_ns.proc_mnt));
+
+	if (unlikely((unsigned long)matchn)) {
+		write_lock(&gr_inode_lock);
+		__do_handle_create(matchn, inode->i_ino, inode->i_sb->s_dev);
+		write_unlock(&gr_inode_lock);
+	}
+	preempt_enable();
+
+	return;
+}
+
+void
+gr_handle_rename(struct inode *old_dir, struct inode *new_dir,
+		 struct dentry *old_dentry,
+		 struct dentry *new_dentry,
+		 struct vfsmount *mnt, const __u8 replace, unsigned int flags)
+{
+	struct name_entry *matchn;
+	struct name_entry *matchn2 = NULL;
+	struct inodev_entry *inodev;
+	struct inode *inode = d_backing_inode(new_dentry);
+	struct inode *old_inode = d_backing_inode(old_dentry);
+	u64 old_ino = __get_ino(old_dentry);
+	dev_t old_dev = __get_dev(old_dentry);
+	unsigned int exchange = flags & RENAME_EXCHANGE;
+
+	/* vfs_rename swaps the name and parent link for old_dentry and
+	   new_dentry
+	   at this point, old_dentry has the new name, parent link, and inode
+	   for the renamed file
+	   if a file is being replaced by a rename, new_dentry has the inode
+	   and name for the replaced file
+	*/
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return;
+
+	preempt_disable();
+	matchn = lookup_name_entry(gr_to_filename_rbac(old_dentry, mnt));
+
+	/* exchange cases:
+	   a filename exists for the source, but not dest
+		do a recreate on source
+	   a filename exists for the dest, but not source
+		do a recreate on dest
+	   a filename exists for both source and dest
+		delete source and dest, then create source and dest
+	   a filename exists for neither source nor dest
+		no updates needed
+
+	   the name entry lookups get us the old inode/dev associated with
+	   each name, so do the deletes first (if possible) so that when
+	   we do the create, we pick up on the right entries
+	*/
+
+	if (exchange)
+		matchn2 = lookup_name_entry(gr_to_filename_rbac(new_dentry, mnt));
+
+	/* we wouldn't have to check d_inode if it weren't for
+	   NFS silly-renaming
+	 */
+
+	write_lock(&gr_inode_lock);
+	if (unlikely((replace || exchange) && inode)) {
+		u64 new_ino = __get_ino(new_dentry);
+		dev_t new_dev = __get_dev(new_dentry);
+
+		inodev = lookup_inodev_entry(new_ino, new_dev);
+		if (inodev != NULL && ((inode->i_nlink <= 1) || d_is_dir(new_dentry)))
+			do_handle_delete(inodev, new_ino, new_dev);
+	}
+
+	inodev = lookup_inodev_entry(old_ino, old_dev);
+	if (inodev != NULL && ((old_inode->i_nlink <= 1) || d_is_dir(old_dentry)))
+		do_handle_delete(inodev, old_ino, old_dev);
+
+	if (unlikely(matchn != NULL))
+		do_handle_create(matchn, old_dentry, mnt);
+
+	if (unlikely(matchn2 != NULL))
+		do_handle_create(matchn2, new_dentry, mnt);
+
+	write_unlock(&gr_inode_lock);
+	preempt_enable();
+
+	return;
+}
+
+#if defined(CONFIG_GRKERNSEC_RESLOG) || !defined(CONFIG_GRKERNSEC_NO_RBAC)
+static const unsigned long res_learn_bumps[GR_NLIMITS] = {
+	[RLIMIT_CPU] = GR_RLIM_CPU_BUMP,
+	[RLIMIT_FSIZE] = GR_RLIM_FSIZE_BUMP,
+	[RLIMIT_DATA] = GR_RLIM_DATA_BUMP,
+	[RLIMIT_STACK] = GR_RLIM_STACK_BUMP,
+	[RLIMIT_CORE] = GR_RLIM_CORE_BUMP,
+	[RLIMIT_RSS] = GR_RLIM_RSS_BUMP,
+	[RLIMIT_NPROC] = GR_RLIM_NPROC_BUMP,
+	[RLIMIT_NOFILE] = GR_RLIM_NOFILE_BUMP,
+	[RLIMIT_MEMLOCK] = GR_RLIM_MEMLOCK_BUMP,
+	[RLIMIT_AS] = GR_RLIM_AS_BUMP,
+	[RLIMIT_LOCKS] = GR_RLIM_LOCKS_BUMP,
+	[RLIMIT_SIGPENDING] = GR_RLIM_SIGPENDING_BUMP,
+	[RLIMIT_MSGQUEUE] = GR_RLIM_MSGQUEUE_BUMP,
+	[RLIMIT_NICE] = GR_RLIM_NICE_BUMP,
+	[RLIMIT_RTPRIO] = GR_RLIM_RTPRIO_BUMP,
+	[RLIMIT_RTTIME] = GR_RLIM_RTTIME_BUMP
+};
+
+void
+gr_learn_resource(const struct task_struct *task,
+		  const int res, const unsigned long wanted, const int gt)
+{
+	struct acl_subject_label *acl;
+	const struct cred *cred;
+
+	if (unlikely((gr_status & GR_READY) &&
+		     task->acl && (task->acl->mode & (GR_LEARN | GR_INHERITLEARN))))
+		goto skip_reslog;
+
+	gr_log_resource(task, res, wanted, gt);
+skip_reslog:
+
+	if (unlikely(!(gr_status & GR_READY) || !wanted || res >= GR_NLIMITS))
+		return;
+
+	acl = task->acl;
+
+	if (likely(!acl || !(acl->mode & (GR_LEARN | GR_INHERITLEARN)) ||
+		   !(acl->resmask & (1U << (unsigned short) res))))
+		return;
+
+	if (wanted >= acl->res[res].rlim_cur) {
+		unsigned long res_add;
+
+		res_add = wanted + res_learn_bumps[res];
+
+		acl->res[res].rlim_cur = res_add;
+
+		if (wanted > acl->res[res].rlim_max)
+			acl->res[res].rlim_max = res_add;
+
+		/* only log the subject filename, since resource logging is supported for
+		   single-subject learning only */
+		rcu_read_lock();
+		cred = __task_cred(task);
+		security_learn(GR_LEARN_AUDIT_MSG, task->role->rolename,
+			       task->role->roletype, GR_GLOBAL_UID(cred->uid), GR_GLOBAL_GID(cred->gid), acl->filename,
+			       acl->filename, acl->res[res].rlim_cur, acl->res[res].rlim_max,
+			       "", (unsigned long) res, &task->signal->saved_ip);
+		rcu_read_unlock();
+	}
+
+	return;
+}
+EXPORT_SYMBOL_GPL(gr_learn_resource);
+#endif
+
+#if defined(CONFIG_PAX_HAVE_ACL_FLAGS) && (defined(CONFIG_PAX_NOEXEC) || defined(CONFIG_PAX_ASLR))
+void
+pax_set_initial_flags(struct linux_binprm *bprm)
+{
+	struct task_struct *task = current;
+        struct acl_subject_label *proc;
+	unsigned long flags;
+
+        if (unlikely(!(gr_status & GR_READY)))
+                return;
+
+	flags = pax_get_flags(task);
+
+        proc = task->acl;
+
+	if (proc->pax_flags & GR_PAX_DISABLE_PAGEEXEC)
+		flags &= ~MF_PAX_PAGEEXEC;
+	if (proc->pax_flags & GR_PAX_DISABLE_SEGMEXEC)
+		flags &= ~MF_PAX_SEGMEXEC;
+	if (proc->pax_flags & GR_PAX_DISABLE_RANDMMAP)
+		flags &= ~MF_PAX_RANDMMAP;
+	if (proc->pax_flags & GR_PAX_DISABLE_EMUTRAMP)
+		flags &= ~MF_PAX_EMUTRAMP;
+	if (proc->pax_flags & GR_PAX_DISABLE_MPROTECT)
+		flags &= ~MF_PAX_MPROTECT;
+
+	if (proc->pax_flags & GR_PAX_ENABLE_PAGEEXEC)
+		flags |= MF_PAX_PAGEEXEC;
+	if (proc->pax_flags & GR_PAX_ENABLE_SEGMEXEC)
+		flags |= MF_PAX_SEGMEXEC;
+	if (proc->pax_flags & GR_PAX_ENABLE_RANDMMAP)
+		flags |= MF_PAX_RANDMMAP;
+	if (proc->pax_flags & GR_PAX_ENABLE_EMUTRAMP)
+		flags |= MF_PAX_EMUTRAMP;
+	if (proc->pax_flags & GR_PAX_ENABLE_MPROTECT)
+		flags |= MF_PAX_MPROTECT;
+
+	pax_set_flags(task, flags);
+
+        return;
+}
+#endif
+
+int
+gr_handle_proc_ptrace(struct task_struct *task)
+{
+	struct file *filp;
+	struct task_struct *tmp = task;
+	struct task_struct *curtemp = current;
+	__u32 retmode;
+
+#ifndef CONFIG_GRKERNSEC_HARDEN_PTRACE
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+#endif
+
+	read_lock(&tasklist_lock);
+	read_lock(&grsec_exec_file_lock);
+	filp = task->exec_file;
+
+	while (task_pid_nr(tmp) > 0) {
+		if (tmp == curtemp)
+			break;
+		tmp = tmp->real_parent;
+	}
+
+	if (!filp || (task_pid_nr(tmp) == 0 && ((grsec_enable_harden_ptrace && gr_is_global_nonroot(current_uid()) && !(gr_status & GR_READY)) ||
+				((gr_status & GR_READY)	&& !(current->acl->mode & GR_RELAXPTRACE))))) {
+		read_unlock(&grsec_exec_file_lock);
+		read_unlock(&tasklist_lock);
+		return 1;
+	}
+
+#ifdef CONFIG_GRKERNSEC_HARDEN_PTRACE
+	if (!(gr_status & GR_READY)) {
+		read_unlock(&grsec_exec_file_lock);
+		read_unlock(&tasklist_lock);
+		return 0;
+	}
+#endif
+
+	retmode = gr_search_file(filp->f_path.dentry, GR_NOPTRACE, filp->f_path.mnt);
+	read_unlock(&grsec_exec_file_lock);
+	read_unlock(&tasklist_lock);
+
+	if (retmode & GR_NOPTRACE)
+		return 1;
+
+	if (!(current->acl->mode & GR_POVERRIDE) && !(current->role->roletype & GR_ROLE_GOD)
+	    && (current->acl != task->acl || (current->acl != current->role->root_label
+	    && task_pid_nr(current) != task_pid_nr(task))))
+		return 1;
+
+	return 0;
+}
+
+void task_grsec_rbac(struct seq_file *m, struct task_struct *p)
+{
+	if (unlikely(!(gr_status & GR_READY)))
+		return;
+
+	if (!(current->role->roletype & GR_ROLE_GOD))
+		return;
+
+	seq_printf(m, "RBAC:\t%.64s:%c:%.950s\n",
+			p->role->rolename, gr_task_roletype_to_char(p),
+			p->acl->filename);
+}
+
+int
+gr_handle_ptrace(struct task_struct *task, const long request)
+{
+	struct task_struct *tmp = task;
+	struct task_struct *curtemp = current;
+	__u32 retmode;
+
+#ifndef CONFIG_GRKERNSEC_HARDEN_PTRACE
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+#endif
+	if (request == PTRACE_ATTACH || request == PTRACE_SEIZE) {
+		read_lock(&tasklist_lock);
+		while (task_pid_nr(tmp) > 0) {
+			if (tmp == curtemp)
+				break;
+			tmp = tmp->real_parent;
+		}
+
+		if (task_pid_nr(tmp) == 0 && ((grsec_enable_harden_ptrace && gr_is_global_nonroot(current_uid()) && !(gr_status & GR_READY)) ||
+					((gr_status & GR_READY)	&& !(current->acl->mode & GR_RELAXPTRACE)))) {
+			read_unlock(&tasklist_lock);
+			gr_log_ptrace(GR_DONT_AUDIT, GR_PTRACE_ACL_MSG, task);
+			return 1;
+		}
+		read_unlock(&tasklist_lock);
+	}
+
+#ifdef CONFIG_GRKERNSEC_HARDEN_PTRACE
+	if (!(gr_status & GR_READY))
+		return 0;
+#endif
+
+	read_lock(&grsec_exec_file_lock);
+	if (unlikely(!task->exec_file)) {
+		read_unlock(&grsec_exec_file_lock);
+		return 0;
+	}
+
+	retmode = gr_search_file(task->exec_file->f_path.dentry, GR_PTRACERD | GR_NOPTRACE, task->exec_file->f_path.mnt);
+	read_unlock(&grsec_exec_file_lock);
+
+	if (retmode & GR_NOPTRACE) {
+		gr_log_ptrace(GR_DONT_AUDIT, GR_PTRACE_ACL_MSG, task);
+		return 1;
+	}
+		
+	if (retmode & GR_PTRACERD) {
+		switch (request) {
+		case PTRACE_SEIZE:
+		case PTRACE_POKETEXT:
+		case PTRACE_POKEDATA:
+		case PTRACE_POKEUSR:
+#if !defined(CONFIG_PPC32) && !defined(CONFIG_PPC64) && !defined(CONFIG_PARISC) && !defined(CONFIG_ALPHA) && !defined(CONFIG_IA64) && !defined(CONFIG_ARM64)
+		case PTRACE_SETREGS:
+		case PTRACE_SETFPREGS:
+#endif
+#ifdef CONFIG_COMPAT
+#ifdef CONFIG_ARM64
+		case COMPAT_PTRACE_SETREGS:
+		case COMPAT_PTRACE_SETVFPREGS:
+#ifdef CONFIG_HAVE_HW_BREAKPOINT
+		case COMPAT_PTRACE_SETHBPREGS:
+#endif
+#endif
+#endif
+#ifdef CONFIG_X86
+		case PTRACE_SETFPXREGS:
+#endif
+#ifdef CONFIG_ALTIVEC
+		case PTRACE_SETVRREGS:
+#endif
+#ifdef CONFIG_ARM
+		case PTRACE_SET_SYSCALL:
+		case PTRACE_SETVFPREGS:
+#ifdef CONFIG_HAVE_HW_BREAKPOINT
+		case PTRACE_SETHBPREGS:
+#endif
+#endif
+			return 1;
+		default:
+			return 0;
+		}
+	} else if (!(current->acl->mode & GR_POVERRIDE) &&
+		   !(current->role->roletype & GR_ROLE_GOD) &&
+		   (current->acl != task->acl)) {
+		gr_log_ptrace(GR_DONT_AUDIT, GR_PTRACE_ACL_MSG, task);
+		return 1;
+	}
+
+	return 0;
+}
+
+static int is_writable_mmap(const struct file *filp)
+{
+	struct task_struct *task = current;
+	struct acl_object_label *obj, *obj2;
+	struct dentry *dentry = filp->f_path.dentry;
+	struct vfsmount *mnt = filp->f_path.mnt;
+	struct inode *inode = d_backing_inode(dentry);
+
+	if (gr_status & GR_READY && !(task->acl->mode & GR_OVERRIDE) &&
+	    !task->is_writable && d_is_reg(dentry) && (mnt != shm_mnt || (inode->i_nlink > 0))) {
+		obj = chk_obj_label(dentry, mnt, running_polstate.default_role->root_label);
+		obj2 = chk_obj_label(dentry, mnt, task->role->root_label);
+		if (unlikely((obj->mode & GR_WRITE) || (obj2->mode & GR_WRITE))) {
+			gr_log_fs_generic(GR_DONT_AUDIT, GR_WRITLIB_ACL_MSG, dentry, mnt);
+			return 1;
+		}
+	}
+	return 0;
+}
+
+int
+gr_acl_handle_mmap(const struct file *file, const unsigned long prot)
+{
+	__u32 mode;
+
+	if (unlikely(!file || !(prot & PROT_EXEC)))
+		return 1;
+
+	if (is_writable_mmap(file))
+		return 0;
+
+	mode =
+	    gr_search_file(file->f_path.dentry,
+			   GR_EXEC | GR_AUDIT_EXEC | GR_SUPPRESS,
+			   file->f_path.mnt);
+
+	if (!gr_tpe_allow(file))
+		return 0;
+
+	if (unlikely(!(mode & GR_EXEC) && !(mode & GR_SUPPRESS))) {
+		gr_log_fs_rbac_generic(GR_DONT_AUDIT, GR_MMAP_ACL_MSG, file->f_path.dentry, file->f_path.mnt);
+		return 0;
+	} else if (unlikely(!(mode & GR_EXEC))) {
+		return 0;
+	} else if (unlikely(mode & GR_EXEC && mode & GR_AUDIT_EXEC)) {
+		gr_log_fs_rbac_generic(GR_DO_AUDIT, GR_MMAP_ACL_MSG, file->f_path.dentry, file->f_path.mnt);
+		return 1;
+	}
+
+	return 1;
+}
+
+int
+gr_acl_handle_mprotect(const struct file *file, const unsigned long prot)
+{
+	__u32 mode;
+
+	if (unlikely(!file || !(prot & PROT_EXEC)))
+		return 1;
+
+	if (is_writable_mmap(file))
+		return 0;
+
+	mode =
+	    gr_search_file(file->f_path.dentry,
+			   GR_EXEC | GR_AUDIT_EXEC | GR_SUPPRESS,
+			   file->f_path.mnt);
+
+	if (!gr_tpe_allow(file))
+		return 0;
+
+	if (unlikely(!(mode & GR_EXEC) && !(mode & GR_SUPPRESS))) {
+		gr_log_fs_rbac_generic(GR_DONT_AUDIT, GR_MPROTECT_ACL_MSG, file->f_path.dentry, file->f_path.mnt);
+		return 0;
+	} else if (unlikely(!(mode & GR_EXEC))) {
+		return 0;
+	} else if (unlikely(mode & GR_EXEC && mode & GR_AUDIT_EXEC)) {
+		gr_log_fs_rbac_generic(GR_DO_AUDIT, GR_MPROTECT_ACL_MSG, file->f_path.dentry, file->f_path.mnt);
+		return 1;
+	}
+
+	return 1;
+}
+
+void
+gr_acl_handle_psacct(struct task_struct *task, const long code)
+{
+	unsigned long runtime, cputime;
+	cputime_t utime, stime;
+	unsigned int wday, cday;
+	__u8 whr, chr;
+	__u8 wmin, cmin;
+	__u8 wsec, csec;
+	struct timespec curtime, starttime;
+
+	if (unlikely(!(gr_status & GR_READY) || !task->acl ||
+		     !(task->acl->mode & GR_PROCACCT)))
+		return;
+	
+	curtime = ns_to_timespec(ktime_get_ns());
+	starttime = ns_to_timespec(task->start_time);
+	runtime = curtime.tv_sec - starttime.tv_sec;
+	wday = runtime / (60 * 60 * 24);
+	runtime -= wday * (60 * 60 * 24);
+	whr = runtime / (60 * 60);
+	runtime -= whr * (60 * 60);
+	wmin = runtime / 60;
+	runtime -= wmin * 60;
+	wsec = runtime;
+
+	task_cputime(task, &utime, &stime);
+	cputime = cputime_to_secs(utime + stime);
+	cday = cputime / (60 * 60 * 24);
+	cputime -= cday * (60 * 60 * 24);
+	chr = cputime / (60 * 60);
+	cputime -= chr * (60 * 60);
+	cmin = cputime / 60;
+	cputime -= cmin * 60;
+	csec = cputime;
+
+	gr_log_procacct(GR_DO_AUDIT, GR_ACL_PROCACCT_MSG, task, wday, whr, wmin, wsec, cday, chr, cmin, csec, code);
+
+	return;
+}
+
+#ifdef CONFIG_TASKSTATS
+int gr_is_taskstats_denied(int pid)
+{
+	struct task_struct *task;
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	const struct cred *cred;
+#endif
+	int ret = 0;
+
+	/* restrict taskstats viewing to un-chrooted root users
+	   who have the 'view' subject flag if the RBAC system is enabled
+	*/
+
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+	task = find_task_by_vpid(pid);
+	if (task) {
+#ifdef CONFIG_GRKERNSEC_CHROOT
+		if (proc_is_chrooted(task))
+			ret = -EACCES;
+#endif
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+		cred = __task_cred(task);
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+		if (gr_is_global_nonroot(cred->uid))
+			ret = -EACCES;
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+		if (gr_is_global_nonroot(cred->uid) && !groups_search(cred->group_info, grsec_proc_gid))
+			ret = -EACCES;
+#endif
+#endif
+		if (gr_status & GR_READY) {
+			if (!(task->acl->mode & GR_VIEW))
+				ret = -EACCES;
+		}
+	} else
+		ret = -ENOENT;
+
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+
+	return ret;
+}
+#endif
+
+/* AUXV entries are filled via a descendant of search_binary_handler
+   after we've already applied the subject for the target
+*/
+int gr_acl_enable_at_secure(void)
+{
+	if (unlikely(!(gr_status & GR_READY)))
+		return 0;
+
+	if (current->acl->mode & GR_ATSECURE)
+		return 1;
+
+	return 0;
+}
+	
+int gr_acl_handle_filldir(const struct file *file, const char *name, const unsigned int namelen, const u64 ino)
+{
+	struct task_struct *task = current;
+	struct dentry *dentry = file->f_path.dentry;
+	struct vfsmount *mnt = file->f_path.mnt;
+	struct acl_object_label *obj, *tmp;
+	struct acl_subject_label *subj;
+	unsigned int bufsize;
+	int is_not_root;
+	char *path;
+	dev_t dev = __get_dev(dentry);
+
+	if (unlikely(!(gr_status & GR_READY)))
+		return 1;
+
+	if (task->acl->mode & (GR_LEARN | GR_INHERITLEARN))
+		return 1;
+
+	/* ignore Eric Biederman */
+	if (IS_PRIVATE(d_backing_inode(dentry)))
+		return 1;
+
+	subj = task->acl;
+	read_lock(&gr_inode_lock);
+	do {
+		obj = lookup_acl_obj_label(ino, dev, subj);
+		if (obj != NULL) {
+			read_unlock(&gr_inode_lock);
+			return (obj->mode & GR_FIND) ? 1 : 0;
+		}
+	} while ((subj = subj->parent_subject));
+	read_unlock(&gr_inode_lock);
+	
+	/* this is purely an optimization since we're looking for an object
+	   for the directory we're doing a readdir on
+	   if it's possible for any globbed object to match the entry we're
+	   filling into the directory, then the object we find here will be
+	   an anchor point with attached globbed objects
+	*/
+	obj = chk_obj_label_noglob(dentry, mnt, task->acl);
+	if (obj->globbed == NULL)
+		return (obj->mode & GR_FIND) ? 1 : 0;
+
+	is_not_root = ((obj->filename[0] == '/') &&
+		   (obj->filename[1] == '\0')) ? 0 : 1;
+	bufsize = PAGE_SIZE - namelen - is_not_root;
+
+	/* check bufsize > PAGE_SIZE || bufsize == 0 */
+	if (unlikely((bufsize - 1) > (PAGE_SIZE - 1)))
+		return 1;
+
+	preempt_disable();
+	path = d_real_path(dentry, mnt, per_cpu_ptr(gr_shared_page[0], smp_processor_id()),
+			   bufsize);
+
+	bufsize = strlen(path);
+
+	/* if base is "/", don't append an additional slash */
+	if (is_not_root)
+		*(path + bufsize) = '/';
+	memcpy(path + bufsize + is_not_root, name, namelen);
+	*(path + bufsize + namelen + is_not_root) = '\0';
+
+	tmp = obj->globbed;
+	while (tmp) {
+		if (!glob_match(tmp->filename, path)) {
+			preempt_enable();
+			return (tmp->mode & GR_FIND) ? 1 : 0;
+		}
+		tmp = tmp->next;
+	}
+	preempt_enable();
+	return (obj->mode & GR_FIND) ? 1 : 0;
+}
+
+void gr_put_exec_file(struct task_struct *task)
+{
+	struct file *filp;  
+
+	write_lock(&grsec_exec_file_lock);
+	filp = task->exec_file;   
+	task->exec_file = NULL;
+	write_unlock(&grsec_exec_file_lock);
+
+	if (filp)
+		fput(filp);
+
+	return;
+}
+
+
+#ifdef CONFIG_NETFILTER_XT_MATCH_GRADM_MODULE
+EXPORT_SYMBOL_GPL(gr_acl_is_enabled);
+#endif
+#ifdef CONFIG_SECURITY
+EXPORT_SYMBOL_GPL(gr_check_user_change);
+EXPORT_SYMBOL_GPL(gr_check_group_change);
+#endif
+
diff --git a/grsecurity/gracl_alloc.c b/grsecurity/gracl_alloc.c
new file mode 100644
index 000000000000..9adc75c94817
--- /dev/null
+++ b/grsecurity/gracl_alloc.c
@@ -0,0 +1,105 @@
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/slab.h>
+#include <linux/vmalloc.h>
+#include <linux/gracl.h>
+#include <linux/grsecurity.h>
+
+static struct gr_alloc_state __current_alloc_state = { 1, 1, NULL };
+struct gr_alloc_state *current_alloc_state = &__current_alloc_state;
+
+static int
+alloc_pop(void)
+{
+	if (current_alloc_state->alloc_stack_next == 1)
+		return 0;
+
+	kfree(current_alloc_state->alloc_stack[current_alloc_state->alloc_stack_next - 2]);
+
+	current_alloc_state->alloc_stack_next--;
+
+	return 1;
+}
+
+static int
+alloc_push(void *buf)
+{
+	if (current_alloc_state->alloc_stack_next >= current_alloc_state->alloc_stack_size)
+		return 1;
+
+	current_alloc_state->alloc_stack[current_alloc_state->alloc_stack_next - 1] = buf;
+
+	current_alloc_state->alloc_stack_next++;
+
+	return 0;
+}
+
+void *
+acl_alloc(unsigned long len)
+{
+	void *ret = NULL;
+
+	if (!len || len > PAGE_SIZE)
+		goto out;
+
+	ret = kmalloc(len, GFP_KERNEL);
+
+	if (ret) {
+		if (alloc_push(ret)) {
+			kfree(ret);
+			ret = NULL;
+		}
+	}
+
+out:
+	return ret;
+}
+
+void *
+acl_alloc_num(unsigned long num, unsigned long len)
+{
+	if (!len || (num > (PAGE_SIZE / len)))
+		return NULL;
+
+	return acl_alloc(num * len);
+}
+
+void
+acl_free_all(void)
+{
+	if (!current_alloc_state->alloc_stack)
+		return;
+
+	while (alloc_pop()) ;
+
+	if (current_alloc_state->alloc_stack) {
+		if ((current_alloc_state->alloc_stack_size * sizeof (void *)) <= PAGE_SIZE)
+			kfree(current_alloc_state->alloc_stack);
+		else
+			vfree(current_alloc_state->alloc_stack);
+	}
+
+	current_alloc_state->alloc_stack = NULL;
+	current_alloc_state->alloc_stack_size = 1;
+	current_alloc_state->alloc_stack_next = 1;
+
+	return;
+}
+
+int
+acl_alloc_stack_init(unsigned long size)
+{
+	if ((size * sizeof (void *)) <= PAGE_SIZE)
+		current_alloc_state->alloc_stack =
+		    (void **) kmalloc(size * sizeof (void *), GFP_KERNEL);
+	else
+		current_alloc_state->alloc_stack = (void **) vmalloc(size * sizeof (void *));
+
+	current_alloc_state->alloc_stack_size = size;
+	current_alloc_state->alloc_stack_next = 1;
+
+	if (!current_alloc_state->alloc_stack)
+		return 0;
+	else
+		return 1;
+}
diff --git a/grsecurity/gracl_cap.c b/grsecurity/gracl_cap.c
new file mode 100644
index 000000000000..8747091f68d6
--- /dev/null
+++ b/grsecurity/gracl_cap.c
@@ -0,0 +1,96 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/gracl.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+extern const char *captab_log[];
+extern int captab_log_entries;
+
+int gr_learn_cap(const struct task_struct *task, const struct cred *cred, const int cap, bool log)
+{
+	struct acl_subject_label *curracl;
+
+	if (!gr_acl_is_enabled())
+		return 1;
+
+	curracl = task->acl;
+
+	if (curracl->mode & (GR_LEARN | GR_INHERITLEARN)) {
+		if (log)
+			security_learn(GR_LEARN_AUDIT_MSG, task->role->rolename,
+			       task->role->roletype, GR_GLOBAL_UID(cred->uid),
+			       GR_GLOBAL_GID(cred->gid), task->exec_file ?
+			       gr_to_filename(task->exec_file->f_path.dentry,
+			       task->exec_file->f_path.mnt) : curracl->filename,
+			       curracl->filename, 0UL,
+			       0UL, "", (unsigned long) cap, &task->signal->saved_ip);
+		return 1;
+	}
+
+	return 0;
+}
+
+int gr_task_acl_is_capable(const struct task_struct *task, const struct cred *cred, const int cap, bool log)
+{
+	struct acl_subject_label *curracl;
+	kernel_cap_t cap_drop = __cap_empty_set, cap_mask = __cap_empty_set;
+	kernel_cap_t cap_audit = __cap_empty_set;
+
+	if (!gr_acl_is_enabled())
+		return 1;
+
+	curracl = task->acl;
+
+	cap_drop = curracl->cap_lower;
+	cap_mask = curracl->cap_mask;
+	cap_audit = curracl->cap_invert_audit;
+
+	while ((curracl = curracl->parent_subject)) {
+		/* if the cap isn't specified in the current computed mask but is specified in the
+		   current level subject, and is lowered in the current level subject, then add
+		   it to the set of dropped capabilities
+		   otherwise, add the current level subject's mask to the current computed mask
+		 */
+		if (!cap_raised(cap_mask, cap) && cap_raised(curracl->cap_mask, cap)) {
+			cap_raise(cap_mask, cap);
+			if (cap_raised(curracl->cap_lower, cap))
+				cap_raise(cap_drop, cap);
+			if (cap_raised(curracl->cap_invert_audit, cap))
+				cap_raise(cap_audit, cap);
+		}
+	}
+
+	if (!cap_raised(cap_drop, cap)) {
+		if (log && cap_raised(cap_audit, cap))
+			gr_log_cap(GR_DO_AUDIT, GR_CAP_ACL_MSG2, task, captab_log[cap]);
+		return 1;
+	}
+
+	/* only learn the capability use if the process has the capability in the
+	   general case, the two uses in sys.c of gr_learn_cap are an exception
+	   to this rule to ensure any role transition involves what the full-learned
+	   policy believes in a privileged process
+	*/
+	if (cap_raised(cred->cap_effective, cap) && gr_learn_cap(task, cred, cap, log))
+		return 1;
+
+	if (log && (cap >= 0) && (cap < captab_log_entries) && cap_raised(cred->cap_effective, cap) && !cap_raised(cap_audit, cap))
+		gr_log_cap(GR_DONT_AUDIT, GR_CAP_ACL_MSG, task, captab_log[cap]);
+
+	return 0;
+}
+
+int
+gr_acl_is_capable(const int cap)
+{
+	return gr_task_acl_is_capable(current, current_cred(), cap, true);
+}
+
+int
+gr_acl_is_capable_nolog(const int cap)
+{
+	return gr_task_acl_is_capable(current, current_cred(), cap, false);
+}
+
diff --git a/grsecurity/gracl_compat.c b/grsecurity/gracl_compat.c
new file mode 100644
index 000000000000..a43dd06a2747
--- /dev/null
+++ b/grsecurity/gracl_compat.c
@@ -0,0 +1,269 @@
+#include <linux/kernel.h>
+#include <linux/gracl.h>
+#include <linux/compat.h>
+#include <linux/gracl_compat.h>
+
+#include <asm/uaccess.h>
+
+int copy_gr_arg_wrapper_compat(const char *buf, struct gr_arg_wrapper *uwrap)
+{
+	struct gr_arg_wrapper_compat uwrapcompat;
+
+        if (copy_from_user(&uwrapcompat, buf, sizeof(uwrapcompat)))
+                return -EFAULT;
+
+        if ((uwrapcompat.version != GRSECURITY_VERSION) ||
+	    (uwrapcompat.size != sizeof(struct gr_arg_compat)))  
+                return -EINVAL;
+
+	uwrap->arg = compat_ptr(uwrapcompat.arg);
+	uwrap->version = uwrapcompat.version;
+	uwrap->size = sizeof(struct gr_arg);
+
+        return 0;
+}
+
+int copy_gr_arg_compat(const struct gr_arg __user *buf, struct gr_arg *arg)
+{
+	struct gr_arg_compat argcompat;
+
+        if (copy_from_user(&argcompat, buf, sizeof(argcompat)))
+                return -EFAULT;
+
+	arg->role_db.r_table = compat_ptr(argcompat.role_db.r_table);
+	arg->role_db.num_pointers = argcompat.role_db.num_pointers;
+	arg->role_db.num_roles = argcompat.role_db.num_roles;
+	arg->role_db.num_domain_children = argcompat.role_db.num_domain_children;
+	arg->role_db.num_subjects = argcompat.role_db.num_subjects;
+	arg->role_db.num_objects = argcompat.role_db.num_objects;
+
+	memcpy(&arg->pw, &argcompat.pw, sizeof(arg->pw));
+	memcpy(&arg->salt, &argcompat.salt, sizeof(arg->salt));
+	memcpy(&arg->sum, &argcompat.sum, sizeof(arg->sum));
+	memcpy(&arg->sp_role, &argcompat.sp_role, sizeof(arg->sp_role));
+	arg->sprole_pws = compat_ptr(argcompat.sprole_pws);
+	arg->segv_device = argcompat.segv_device;
+	arg->segv_inode = argcompat.segv_inode;
+	arg->segv_uid = argcompat.segv_uid;
+	arg->num_sprole_pws = argcompat.num_sprole_pws;
+	arg->mode = argcompat.mode;
+
+	return 0;
+}
+
+int copy_acl_object_label_compat(struct acl_object_label *obj, const struct acl_object_label *userp)
+{
+	struct acl_object_label_compat objcompat;
+
+	if (copy_from_user(&objcompat, userp, sizeof(objcompat)))
+                return -EFAULT;
+
+	obj->filename = compat_ptr(objcompat.filename);
+	obj->inode = objcompat.inode;
+	obj->device = objcompat.device;
+	obj->mode = objcompat.mode;
+
+	obj->nested = compat_ptr(objcompat.nested);
+	obj->globbed = compat_ptr(objcompat.globbed);
+
+	obj->prev = compat_ptr(objcompat.prev);
+	obj->next = compat_ptr(objcompat.next);
+
+	return 0;
+}
+
+int copy_acl_subject_label_compat(struct acl_subject_label *subj, const struct acl_subject_label *userp)
+{
+	unsigned int i;
+	struct acl_subject_label_compat subjcompat;
+
+	if (copy_from_user(&subjcompat, userp, sizeof(subjcompat)))
+                return -EFAULT;
+
+	subj->filename = compat_ptr(subjcompat.filename);
+	subj->inode = subjcompat.inode;
+	subj->device = subjcompat.device;
+	subj->mode = subjcompat.mode;
+	subj->cap_mask = subjcompat.cap_mask;
+	subj->cap_lower = subjcompat.cap_lower;
+	subj->cap_invert_audit = subjcompat.cap_invert_audit;
+
+	for (i = 0; i < GR_NLIMITS; i++) {
+		if (subjcompat.res[i].rlim_cur == COMPAT_RLIM_INFINITY)
+			subj->res[i].rlim_cur = RLIM_INFINITY;
+		else
+			subj->res[i].rlim_cur = subjcompat.res[i].rlim_cur;
+		if (subjcompat.res[i].rlim_max == COMPAT_RLIM_INFINITY)
+			subj->res[i].rlim_max = RLIM_INFINITY;
+		else
+			subj->res[i].rlim_max = subjcompat.res[i].rlim_max;
+	}
+	subj->resmask = subjcompat.resmask;
+
+	subj->user_trans_type = subjcompat.user_trans_type;
+	subj->group_trans_type = subjcompat.group_trans_type;
+	subj->user_transitions = compat_ptr(subjcompat.user_transitions);
+	subj->group_transitions = compat_ptr(subjcompat.group_transitions);
+	subj->user_trans_num = subjcompat.user_trans_num;
+	subj->group_trans_num = subjcompat.group_trans_num;
+
+	memcpy(&subj->sock_families, &subjcompat.sock_families, sizeof(subj->sock_families));
+	memcpy(&subj->ip_proto, &subjcompat.ip_proto, sizeof(subj->ip_proto));
+	subj->ip_type = subjcompat.ip_type;
+	subj->ips = compat_ptr(subjcompat.ips);
+	subj->ip_num = subjcompat.ip_num;
+	subj->inaddr_any_override = subjcompat.inaddr_any_override;
+
+	subj->crashes = subjcompat.crashes;
+	subj->expires = subjcompat.expires;
+
+	subj->parent_subject = compat_ptr(subjcompat.parent_subject);
+	subj->hash = compat_ptr(subjcompat.hash);
+	subj->prev = compat_ptr(subjcompat.prev);
+	subj->next = compat_ptr(subjcompat.next);
+
+	subj->obj_hash = compat_ptr(subjcompat.obj_hash);
+	subj->obj_hash_size = subjcompat.obj_hash_size;
+	subj->pax_flags = subjcompat.pax_flags;
+
+	return 0;
+}
+
+int copy_acl_role_label_compat(struct acl_role_label *role, const struct acl_role_label *userp)
+{
+	struct acl_role_label_compat rolecompat;
+
+	if (copy_from_user(&rolecompat, userp, sizeof(rolecompat)))
+                return -EFAULT;
+
+	role->rolename = compat_ptr(rolecompat.rolename);
+	role->uidgid = rolecompat.uidgid;
+	role->roletype = rolecompat.roletype;
+
+	role->auth_attempts = rolecompat.auth_attempts;
+	role->expires = rolecompat.expires;
+
+	role->root_label = compat_ptr(rolecompat.root_label);
+	role->hash = compat_ptr(rolecompat.hash);
+
+	role->prev = compat_ptr(rolecompat.prev);
+	role->next = compat_ptr(rolecompat.next);
+
+	role->transitions = compat_ptr(rolecompat.transitions);
+	role->allowed_ips = compat_ptr(rolecompat.allowed_ips);
+	role->domain_children = compat_ptr(rolecompat.domain_children);
+	role->domain_child_num = rolecompat.domain_child_num;
+
+	role->umask = rolecompat.umask;
+
+	role->subj_hash = compat_ptr(rolecompat.subj_hash);
+	role->subj_hash_size = rolecompat.subj_hash_size;
+
+	return 0;
+}
+
+int copy_role_allowed_ip_compat(struct role_allowed_ip *roleip, const struct role_allowed_ip *userp)
+{
+	struct role_allowed_ip_compat roleip_compat;
+
+	if (copy_from_user(&roleip_compat, userp, sizeof(roleip_compat)))
+                return -EFAULT;
+
+	roleip->addr = roleip_compat.addr;
+	roleip->netmask = roleip_compat.netmask;
+
+	roleip->prev = compat_ptr(roleip_compat.prev);
+	roleip->next = compat_ptr(roleip_compat.next);
+
+	return 0;
+}
+
+int copy_role_transition_compat(struct role_transition *trans, const struct role_transition *userp)
+{
+	struct role_transition_compat trans_compat;
+
+	if (copy_from_user(&trans_compat, userp, sizeof(trans_compat)))
+                return -EFAULT;
+
+	trans->rolename = compat_ptr(trans_compat.rolename);
+
+	trans->prev = compat_ptr(trans_compat.prev);
+	trans->next = compat_ptr(trans_compat.next);
+
+	return 0;
+
+}
+
+int copy_gr_hash_struct_compat(struct gr_hash_struct *hash, const struct gr_hash_struct *userp)
+{
+	struct gr_hash_struct_compat hash_compat;
+
+	if (copy_from_user(&hash_compat, userp, sizeof(hash_compat)))
+                return -EFAULT;
+
+	hash->table = compat_ptr(hash_compat.table);
+	hash->nametable = compat_ptr(hash_compat.nametable);
+	hash->first = compat_ptr(hash_compat.first);
+
+	hash->table_size = hash_compat.table_size;
+	hash->used_size = hash_compat.used_size;
+
+	hash->type = hash_compat.type;
+
+	return 0;
+}
+
+int copy_pointer_from_array_compat(void *ptr, unsigned long idx, const void *userp)
+{
+	compat_uptr_t ptrcompat;
+
+	if (copy_from_user(&ptrcompat, userp + (idx * sizeof(ptrcompat)), sizeof(ptrcompat)))
+                return -EFAULT;
+
+	*(void **)ptr = compat_ptr(ptrcompat);
+
+	return 0;
+}
+
+int copy_acl_ip_label_compat(struct acl_ip_label *ip, const struct acl_ip_label *userp)
+{
+	struct acl_ip_label_compat ip_compat;
+
+	if (copy_from_user(&ip_compat, userp, sizeof(ip_compat)))
+                return -EFAULT;
+
+	ip->iface = compat_ptr(ip_compat.iface);
+	ip->addr = ip_compat.addr;
+	ip->netmask = ip_compat.netmask;
+	ip->low = ip_compat.low;
+	ip->high = ip_compat.high;
+	ip->mode = ip_compat.mode;
+	ip->type = ip_compat.type;
+
+	memcpy(&ip->proto, &ip_compat.proto, sizeof(ip->proto));
+
+	ip->prev = compat_ptr(ip_compat.prev);
+	ip->next = compat_ptr(ip_compat.next);
+
+	return 0;
+}
+
+int copy_sprole_pw_compat(struct sprole_pw *pw, unsigned long idx, const struct sprole_pw *userp)
+{
+	struct sprole_pw_compat pw_compat;
+
+	if (copy_from_user(&pw_compat, (const void *)userp + (sizeof(pw_compat) * idx), sizeof(pw_compat)))
+                return -EFAULT;
+
+	pw->rolename = compat_ptr(pw_compat.rolename);
+	memcpy(&pw->salt, pw_compat.salt, sizeof(pw->salt));
+	memcpy(&pw->sum, pw_compat.sum, sizeof(pw->sum));
+
+	return 0;
+}
+
+size_t get_gr_arg_wrapper_size_compat(void)
+{
+	return sizeof(struct gr_arg_wrapper_compat);
+}
+
diff --git a/grsecurity/gracl_fs.c b/grsecurity/gracl_fs.c
new file mode 100644
index 000000000000..fce7f71fb055
--- /dev/null
+++ b/grsecurity/gracl_fs.c
@@ -0,0 +1,448 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/types.h>
+#include <linux/fs.h>
+#include <linux/file.h>
+#include <linux/stat.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+#include <linux/gracl.h>
+
+umode_t
+gr_acl_umask(void)
+{
+	if (unlikely(!gr_acl_is_enabled()))
+		return 0;
+
+	return current->role->umask;
+}
+
+__u32
+gr_acl_handle_hidden_file(const struct dentry * dentry,
+			  const struct vfsmount * mnt)
+{
+	__u32 mode;
+
+	if (unlikely(d_is_negative(dentry)))
+		return GR_FIND;
+
+	mode =
+	    gr_search_file(dentry, GR_FIND | GR_AUDIT_FIND | GR_SUPPRESS, mnt);
+
+	if (unlikely(mode & GR_FIND && mode & GR_AUDIT_FIND)) {
+		gr_log_fs_rbac_generic(GR_DO_AUDIT, GR_HIDDEN_ACL_MSG, dentry, mnt);
+		return mode;
+	} else if (unlikely(!(mode & GR_FIND) && !(mode & GR_SUPPRESS))) {
+		gr_log_fs_rbac_generic(GR_DONT_AUDIT, GR_HIDDEN_ACL_MSG, dentry, mnt);
+		return 0;
+	} else if (unlikely(!(mode & GR_FIND)))
+		return 0;
+
+	return GR_FIND;
+}
+
+__u32
+gr_acl_handle_open(const struct dentry * dentry, const struct vfsmount * mnt,
+		   int acc_mode)
+{
+	__u32 reqmode = GR_FIND;
+	__u32 mode;
+
+	if (unlikely(d_is_negative(dentry)))
+		return reqmode;
+
+	if (acc_mode & MAY_APPEND)
+		reqmode |= GR_APPEND;
+	else if (acc_mode & MAY_WRITE)
+		reqmode |= GR_WRITE;
+	if ((acc_mode & MAY_READ) && !d_is_dir(dentry))
+		reqmode |= GR_READ;
+
+	mode =
+	    gr_search_file(dentry, reqmode | to_gr_audit(reqmode) | GR_SUPPRESS,
+			   mnt);
+
+	if (unlikely(((mode & reqmode) == reqmode) && mode & GR_AUDITS)) {
+		gr_log_fs_rbac_mode2(GR_DO_AUDIT, GR_OPEN_ACL_MSG, dentry, mnt,
+			       reqmode & GR_READ ? " reading" : "",
+			       reqmode & GR_WRITE ? " writing" : reqmode &
+			       GR_APPEND ? " appending" : "");
+		return reqmode;
+	} else
+	    if (unlikely((mode & reqmode) != reqmode && !(mode & GR_SUPPRESS)))
+	{
+		gr_log_fs_rbac_mode2(GR_DONT_AUDIT, GR_OPEN_ACL_MSG, dentry, mnt,
+			       reqmode & GR_READ ? " reading" : "",
+			       reqmode & GR_WRITE ? " writing" : reqmode &
+			       GR_APPEND ? " appending" : "");
+		return 0;
+	} else if (unlikely((mode & reqmode) != reqmode))
+		return 0;
+
+	return reqmode;
+}
+
+__u32
+gr_acl_handle_creat(const struct dentry * dentry,
+		    const struct dentry * p_dentry,
+		    const struct vfsmount * p_mnt, int open_flags, int acc_mode,
+		    const int imode)
+{
+	__u32 reqmode = GR_WRITE | GR_CREATE;
+	__u32 mode;
+
+	if (acc_mode & MAY_APPEND)
+		reqmode |= GR_APPEND;
+	// if a directory was required or the directory already exists, then
+	// don't count this open as a read
+	if ((acc_mode & MAY_READ) &&
+	    !((open_flags & O_DIRECTORY) || d_is_dir(dentry)))
+		reqmode |= GR_READ;
+	if ((open_flags & O_CREAT) &&
+	    ((imode & S_ISUID) || ((imode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP))))
+		reqmode |= GR_SETID;
+
+	mode =
+	    gr_check_create(dentry, p_dentry, p_mnt,
+			    reqmode | to_gr_audit(reqmode) | GR_SUPPRESS);
+
+	if (unlikely(((mode & reqmode) == reqmode) && mode & GR_AUDITS)) {
+		gr_log_fs_rbac_mode2(GR_DO_AUDIT, GR_CREATE_ACL_MSG, dentry, p_mnt,
+			       reqmode & GR_READ ? " reading" : "",
+			       reqmode & GR_WRITE ? " writing" : reqmode &
+			       GR_APPEND ? " appending" : "");
+		return reqmode;
+	} else
+	    if (unlikely((mode & reqmode) != reqmode && !(mode & GR_SUPPRESS)))
+	{
+		gr_log_fs_rbac_mode2(GR_DONT_AUDIT, GR_CREATE_ACL_MSG, dentry, p_mnt,
+			       reqmode & GR_READ ? " reading" : "",
+			       reqmode & GR_WRITE ? " writing" : reqmode &
+			       GR_APPEND ? " appending" : "");
+		return 0;
+	} else if (unlikely((mode & reqmode) != reqmode))
+		return 0;
+
+	return reqmode;
+}
+
+__u32
+gr_acl_handle_access(const struct dentry * dentry, const struct vfsmount * mnt,
+		     const int fmode)
+{
+	__u32 mode, reqmode = GR_FIND;
+
+	if ((fmode & S_IXOTH) && !d_is_dir(dentry))
+		reqmode |= GR_EXEC;
+	if (fmode & S_IWOTH)
+		reqmode |= GR_WRITE;
+	if (fmode & S_IROTH)
+		reqmode |= GR_READ;
+
+	mode =
+	    gr_search_file(dentry, reqmode | to_gr_audit(reqmode) | GR_SUPPRESS,
+			   mnt);
+
+	if (unlikely(((mode & reqmode) == reqmode) && mode & GR_AUDITS)) {
+		gr_log_fs_rbac_mode3(GR_DO_AUDIT, GR_ACCESS_ACL_MSG, dentry, mnt,
+			       reqmode & GR_READ ? " reading" : "",
+			       reqmode & GR_WRITE ? " writing" : "",
+			       reqmode & GR_EXEC ? " executing" : "");
+		return reqmode;
+	} else
+	    if (unlikely((mode & reqmode) != reqmode && !(mode & GR_SUPPRESS)))
+	{
+		gr_log_fs_rbac_mode3(GR_DONT_AUDIT, GR_ACCESS_ACL_MSG, dentry, mnt,
+			       reqmode & GR_READ ? " reading" : "",
+			       reqmode & GR_WRITE ? " writing" : "",
+			       reqmode & GR_EXEC ? " executing" : "");
+		return 0;
+	} else if (unlikely((mode & reqmode) != reqmode))
+		return 0;
+
+	return reqmode;
+}
+
+static __u32 generic_fs_handler(const struct dentry *dentry, const struct vfsmount *mnt, __u32 reqmode, const char *fmt)
+{
+	__u32 mode;
+
+	mode = gr_search_file(dentry, reqmode | to_gr_audit(reqmode) | GR_SUPPRESS, mnt);
+
+	if (unlikely(((mode & (reqmode)) == (reqmode)) && mode & GR_AUDITS)) {
+		gr_log_fs_rbac_generic(GR_DO_AUDIT, fmt, dentry, mnt);
+		return mode;
+	} else if (unlikely((mode & (reqmode)) != (reqmode) && !(mode & GR_SUPPRESS))) {
+		gr_log_fs_rbac_generic(GR_DONT_AUDIT, fmt, dentry, mnt);
+		return 0;
+	} else if (unlikely((mode & (reqmode)) != (reqmode)))
+		return 0;
+
+	return (reqmode);
+}
+
+__u32
+gr_acl_handle_rmdir(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_WRITE | GR_DELETE , GR_RMDIR_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_unlink(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_WRITE | GR_DELETE , GR_UNLINK_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_truncate(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_WRITE, GR_TRUNCATE_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_utime(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_WRITE, GR_ATIME_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_chmod(const struct dentry *dentry, const struct vfsmount *mnt,
+		     umode_t *modeptr)
+{
+	umode_t mode;
+	struct inode *inode = d_backing_inode(dentry);
+
+	*modeptr &= ~gr_acl_umask();
+	mode = *modeptr;
+
+	if (unlikely(inode && S_ISSOCK(inode->i_mode)))
+		return 1;
+
+	if (unlikely(!d_is_dir(dentry) &&
+		     ((mode & S_ISUID) || ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP))))) {
+		return generic_fs_handler(dentry, mnt, GR_WRITE | GR_SETID,
+				   GR_CHMOD_ACL_MSG);
+	} else {
+		return generic_fs_handler(dentry, mnt, GR_WRITE, GR_CHMOD_ACL_MSG);
+	}
+}
+
+__u32
+gr_acl_handle_chown(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_WRITE, GR_CHOWN_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_setxattr(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_WRITE, GR_SETXATTR_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_removexattr(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_WRITE, GR_REMOVEXATTR_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_execve(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_EXEC, GR_EXEC_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_unix(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return generic_fs_handler(dentry, mnt, GR_READ | GR_WRITE,
+			   GR_UNIXCONNECT_ACL_MSG);
+}
+
+/* hardlinks require at minimum create and link permission,
+   any additional privilege required is based on the
+   privilege of the file being linked to
+*/
+__u32
+gr_acl_handle_link(const struct dentry * new_dentry,
+		   const struct dentry * parent_dentry,
+		   const struct vfsmount * parent_mnt,
+		   const struct dentry * old_dentry,
+		   const struct vfsmount * old_mnt, const struct filename *to)
+{
+	__u32 mode;
+	__u32 needmode = GR_CREATE | GR_LINK;
+	__u32 needaudit = GR_AUDIT_CREATE | GR_AUDIT_LINK;
+
+	mode =
+	    gr_check_link(new_dentry, parent_dentry, parent_mnt, old_dentry,
+			  old_mnt);
+
+	if (unlikely(((mode & needmode) == needmode) && (mode & needaudit))) {
+		gr_log_fs_rbac_str(GR_DO_AUDIT, GR_LINK_ACL_MSG, old_dentry, old_mnt, to->name);
+		return mode;
+	} else if (unlikely(((mode & needmode) != needmode) && !(mode & GR_SUPPRESS))) {
+		gr_log_fs_rbac_str(GR_DONT_AUDIT, GR_LINK_ACL_MSG, old_dentry, old_mnt, to->name);
+		return 0;
+	} else if (unlikely((mode & needmode) != needmode))
+		return 0;
+
+	return 1;
+}
+
+__u32
+gr_acl_handle_symlink(const struct dentry * new_dentry,
+		      const struct dentry * parent_dentry,
+		      const struct vfsmount * parent_mnt, const struct filename *from)
+{
+	__u32 needmode = GR_WRITE | GR_CREATE;
+	__u32 mode;
+
+	mode =
+	    gr_check_create(new_dentry, parent_dentry, parent_mnt,
+			    GR_CREATE | GR_AUDIT_CREATE |
+			    GR_WRITE | GR_AUDIT_WRITE | GR_SUPPRESS);
+
+	if (unlikely(mode & GR_WRITE && mode & GR_AUDITS)) {
+		gr_log_fs_str_rbac(GR_DO_AUDIT, GR_SYMLINK_ACL_MSG, from->name, new_dentry, parent_mnt);
+		return mode;
+	} else if (unlikely(((mode & needmode) != needmode) && !(mode & GR_SUPPRESS))) {
+		gr_log_fs_str_rbac(GR_DONT_AUDIT, GR_SYMLINK_ACL_MSG, from->name, new_dentry, parent_mnt);
+		return 0;
+	} else if (unlikely((mode & needmode) != needmode))
+		return 0;
+
+	return (GR_WRITE | GR_CREATE);
+}
+
+static __u32 generic_fs_create_handler(const struct dentry *new_dentry, const struct dentry *parent_dentry, const struct vfsmount *parent_mnt, __u32 reqmode, const char *fmt)
+{
+	__u32 mode;
+
+	mode = gr_check_create(new_dentry, parent_dentry, parent_mnt, reqmode | to_gr_audit(reqmode) | GR_SUPPRESS);
+
+	if (unlikely(((mode & (reqmode)) == (reqmode)) && mode & GR_AUDITS)) {
+		gr_log_fs_rbac_generic(GR_DO_AUDIT, fmt, new_dentry, parent_mnt);
+		return mode;
+	} else if (unlikely((mode & (reqmode)) != (reqmode) && !(mode & GR_SUPPRESS))) {
+		gr_log_fs_rbac_generic(GR_DONT_AUDIT, fmt, new_dentry, parent_mnt);
+		return 0;
+	} else if (unlikely((mode & (reqmode)) != (reqmode)))
+		return 0;
+
+	return (reqmode);
+}
+
+__u32
+gr_acl_handle_mknod(const struct dentry * new_dentry,
+		    const struct dentry * parent_dentry,
+		    const struct vfsmount * parent_mnt,
+		    const int mode)
+{
+	__u32 reqmode = GR_WRITE | GR_CREATE;
+	if (unlikely((mode & S_ISUID) || ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP))))
+		reqmode |= GR_SETID;
+
+	return generic_fs_create_handler(new_dentry, parent_dentry, parent_mnt,
+				  reqmode, GR_MKNOD_ACL_MSG);
+}
+
+__u32
+gr_acl_handle_mkdir(const struct dentry *new_dentry,
+		    const struct dentry *parent_dentry,
+		    const struct vfsmount *parent_mnt)
+{
+	return generic_fs_create_handler(new_dentry, parent_dentry, parent_mnt,
+				  GR_WRITE | GR_CREATE, GR_MKDIR_ACL_MSG);
+}
+
+#define RENAME_CHECK_SUCCESS(old, new) \
+	(((old & (GR_WRITE | GR_READ)) == (GR_WRITE | GR_READ)) && \
+	 ((new & (GR_WRITE | GR_READ)) == (GR_WRITE | GR_READ)))
+
+int
+gr_acl_handle_rename(struct dentry *new_dentry,
+		     struct dentry *parent_dentry,
+		     const struct vfsmount *parent_mnt,
+		     struct dentry *old_dentry,
+		     struct inode *old_parent_inode,
+		     struct vfsmount *old_mnt, const struct filename *newname, unsigned int flags)
+{
+	__u32 comp1, comp2;
+	int error = 0;
+
+	if (unlikely(!gr_acl_is_enabled()))
+		return 0;
+
+	if (flags & RENAME_EXCHANGE) {
+		comp1 = gr_search_file(new_dentry, GR_READ | GR_WRITE |
+				       GR_AUDIT_READ | GR_AUDIT_WRITE |
+				       GR_SUPPRESS, parent_mnt);
+		comp2 =
+		    gr_search_file(old_dentry,
+				   GR_READ | GR_WRITE | GR_AUDIT_READ |
+				   GR_AUDIT_WRITE | GR_SUPPRESS, old_mnt);
+	} else if (d_is_negative(new_dentry)) {
+		comp1 = gr_check_create(new_dentry, parent_dentry, parent_mnt,
+					GR_READ | GR_WRITE | GR_CREATE | GR_AUDIT_READ |
+					GR_AUDIT_WRITE | GR_AUDIT_CREATE | GR_SUPPRESS);
+		comp2 = gr_search_file(old_dentry, GR_READ | GR_WRITE |
+				       GR_DELETE | GR_AUDIT_DELETE |
+				       GR_AUDIT_READ | GR_AUDIT_WRITE |
+				       GR_SUPPRESS, old_mnt);
+	} else {
+		comp1 = gr_search_file(new_dentry, GR_READ | GR_WRITE |
+				       GR_CREATE | GR_DELETE |
+				       GR_AUDIT_CREATE | GR_AUDIT_DELETE |
+				       GR_AUDIT_READ | GR_AUDIT_WRITE |
+				       GR_SUPPRESS, parent_mnt);
+		comp2 =
+		    gr_search_file(old_dentry,
+				   GR_READ | GR_WRITE | GR_AUDIT_READ |
+				   GR_DELETE | GR_AUDIT_DELETE |
+				   GR_AUDIT_WRITE | GR_SUPPRESS, old_mnt);
+	}
+
+	if (RENAME_CHECK_SUCCESS(comp1, comp2) &&
+	    ((comp1 & GR_AUDITS) || (comp2 & GR_AUDITS)))
+		gr_log_fs_rbac_str(GR_DO_AUDIT, GR_RENAME_ACL_MSG, old_dentry, old_mnt, newname->name);
+	else if (!RENAME_CHECK_SUCCESS(comp1, comp2) && !(comp1 & GR_SUPPRESS)
+		 && !(comp2 & GR_SUPPRESS)) {
+		gr_log_fs_rbac_str(GR_DONT_AUDIT, GR_RENAME_ACL_MSG, old_dentry, old_mnt, newname->name);
+		error = -EACCES;
+	} else if (unlikely(!RENAME_CHECK_SUCCESS(comp1, comp2)))
+		error = -EACCES;
+
+	return error;
+}
+
+void
+gr_acl_handle_exit(void)
+{
+	u16 id;
+	char *rolename;
+
+	if (unlikely(current->acl_sp_role && gr_acl_is_enabled() &&
+	    !(current->role->roletype & GR_ROLE_PERSIST))) {
+		id = current->acl_role_id;
+		rolename = current->role->rolename;
+		gr_set_acls(1);
+		gr_log_str_int(GR_DONT_AUDIT_GOOD, GR_SPROLEL_ACL_MSG, rolename, id);
+	}
+
+	gr_put_exec_file(current);
+	return;
+}
+
+int
+gr_acl_handle_procpidmem(const struct task_struct *task)
+{
+	if (unlikely(!gr_acl_is_enabled()))
+		return 0;
+
+	if (task != current && (task->acl->mode & GR_PROTPROCFD) &&
+	    !(current->acl->mode & GR_POVERRIDE) &&
+	    !(current->role->roletype & GR_ROLE_GOD))
+		return -EACCES;
+
+	return 0;
+}
diff --git a/grsecurity/gracl_ip.c b/grsecurity/gracl_ip.c
new file mode 100644
index 000000000000..d877c3879fa6
--- /dev/null
+++ b/grsecurity/gracl_ip.c
@@ -0,0 +1,387 @@
+#include <linux/kernel.h>
+#include <asm/uaccess.h>
+#include <asm/errno.h>
+#include <net/sock.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/net.h>
+#include <linux/in.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+#include <linux/udp.h>
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/netdevice.h>
+#include <linux/inetdevice.h>
+#include <linux/gracl.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+#define GR_BIND			0x01
+#define GR_CONNECT		0x02
+#define GR_INVERT		0x04
+#define GR_BINDOVERRIDE		0x08
+#define GR_CONNECTOVERRIDE	0x10
+#define GR_SOCK_FAMILY		0x20
+
+static const char * gr_protocols[IPPROTO_MAX] = {
+	"ip", "icmp", "igmp", "ggp", "ipencap", "st", "tcp", "cbt",
+	"egp", "igp", "bbn-rcc", "nvp", "pup", "argus", "emcon", "xnet",
+	"chaos", "udp", "mux", "dcn", "hmp", "prm", "xns-idp", "trunk-1",
+	"trunk-2", "leaf-1", "leaf-2", "rdp", "irtp", "iso-tp4", "netblt", "mfe-nsp",
+	"merit-inp", "sep", "3pc", "idpr", "xtp", "ddp", "idpr-cmtp", "tp++",
+	"il", "ipv6", "sdrp", "ipv6-route", "ipv6-frag", "idrp", "rsvp", "gre",
+	"mhrp", "bna", "ipv6-crypt", "ipv6-auth", "i-nlsp", "swipe", "narp", "mobile",
+	"tlsp", "skip", "ipv6-icmp", "ipv6-nonxt", "ipv6-opts", "unknown:61", "cftp", "unknown:63",
+	"sat-expak", "kryptolan", "rvd", "ippc", "unknown:68", "sat-mon", "visa", "ipcv",
+	"cpnx", "cphb", "wsn", "pvp", "br-sat-mon", "sun-nd", "wb-mon", "wb-expak", 
+	"iso-ip", "vmtp", "secure-vmtp", "vines", "ttp", "nfsnet-igp", "dgp", "tcf", 
+	"eigrp", "ospf", "sprite-rpc", "larp", "mtp", "ax.25", "ipip", "micp",
+	"scc-sp", "etherip", "encap", "unknown:99", "gmtp", "ifmp", "pnni", "pim",
+	"aris", "scps", "qnx", "a/n", "ipcomp", "snp", "compaq-peer", "ipx-in-ip",
+	"vrrp", "pgm", "unknown:114", "l2tp", "ddx", "iatp", "stp", "srp",
+	"uti", "smp", "sm", "ptp", "isis", "fire", "crtp", "crdup",
+	"sscopmce", "iplt", "sps", "pipe", "sctp", "fc", "unkown:134", "unknown:135",
+	"unknown:136", "unknown:137", "unknown:138", "unknown:139", "unknown:140", "unknown:141", "unknown:142", "unknown:143",
+	"unknown:144", "unknown:145", "unknown:146", "unknown:147", "unknown:148", "unknown:149", "unknown:150", "unknown:151",
+	"unknown:152", "unknown:153", "unknown:154", "unknown:155", "unknown:156", "unknown:157", "unknown:158", "unknown:159",
+	"unknown:160", "unknown:161", "unknown:162", "unknown:163", "unknown:164", "unknown:165", "unknown:166", "unknown:167",
+	"unknown:168", "unknown:169", "unknown:170", "unknown:171", "unknown:172", "unknown:173", "unknown:174", "unknown:175",
+	"unknown:176", "unknown:177", "unknown:178", "unknown:179", "unknown:180", "unknown:181", "unknown:182", "unknown:183",
+	"unknown:184", "unknown:185", "unknown:186", "unknown:187", "unknown:188", "unknown:189", "unknown:190", "unknown:191",
+	"unknown:192", "unknown:193", "unknown:194", "unknown:195", "unknown:196", "unknown:197", "unknown:198", "unknown:199",
+	"unknown:200", "unknown:201", "unknown:202", "unknown:203", "unknown:204", "unknown:205", "unknown:206", "unknown:207",
+	"unknown:208", "unknown:209", "unknown:210", "unknown:211", "unknown:212", "unknown:213", "unknown:214", "unknown:215",
+	"unknown:216", "unknown:217", "unknown:218", "unknown:219", "unknown:220", "unknown:221", "unknown:222", "unknown:223",
+	"unknown:224", "unknown:225", "unknown:226", "unknown:227", "unknown:228", "unknown:229", "unknown:230", "unknown:231",
+	"unknown:232", "unknown:233", "unknown:234", "unknown:235", "unknown:236", "unknown:237", "unknown:238", "unknown:239",
+	"unknown:240", "unknown:241", "unknown:242", "unknown:243", "unknown:244", "unknown:245", "unknown:246", "unknown:247",
+	"unknown:248", "unknown:249", "unknown:250", "unknown:251", "unknown:252", "unknown:253", "unknown:254", "unknown:255",
+	};
+
+static const char * gr_socktypes[SOCK_MAX] = {
+	"unknown:0", "stream", "dgram", "raw", "rdm", "seqpacket", "unknown:6", 
+	"unknown:7", "unknown:8", "unknown:9", "packet"
+	};
+
+static const char * gr_sockfamilies[AF_MAX] = {
+	"unspec", "unix", "inet", "ax25", "ipx", "appletalk", "netrom", "bridge", "atmpvc", "x25",
+	"inet6", "rose", "decnet", "netbeui", "security", "key", "netlink", "packet", "ash",
+	"econet", "atmsvc", "rds", "sna", "irda", "ppox", "wanpipe", "llc", "ib", "mpls", "can",
+	"tipc", "bluetooth", "iucv", "rxrpc", "isdn", "phonet", "ieee802154", "ciaf", "alg",
+	"nfc", "vsock", "kcm", "qipcrtr"
+	};
+
+const char *
+gr_proto_to_name(unsigned char proto)
+{
+	return gr_protocols[proto];
+}
+
+const char *
+gr_socktype_to_name(unsigned char type)
+{
+	return gr_socktypes[type];
+}
+
+const char *
+gr_sockfamily_to_name(unsigned char family)
+{
+	return gr_sockfamilies[family];
+}
+
+extern const struct net_proto_family __rcu *net_families[NPROTO] __read_mostly;
+
+int
+gr_search_socket(const int domain, const int type, const int protocol)
+{
+	struct acl_subject_label *curr;
+	const struct cred *cred = current_cred();
+
+	if (unlikely(!gr_acl_is_enabled()))
+		goto exit;
+
+	if ((domain < 0) || (type < 0) || (protocol < 0) ||
+	    (domain >= AF_MAX) || (type >= SOCK_MAX) || (protocol >= IPPROTO_MAX))
+		goto exit;	// let the kernel handle it
+
+	curr = current->acl;
+
+	if (curr->sock_families[domain / 32] & (1U << (domain % 32))) {
+		/* the family is allowed, if this is PF_INET allow it only if
+		   the extra sock type/protocol checks pass */
+		if (domain == PF_INET)
+			goto inet_check;
+		goto exit;
+	} else {
+		if (curr->mode & (GR_LEARN | GR_INHERITLEARN)) {
+			__u32 fakeip = 0;
+			security_learn(GR_IP_LEARN_MSG, current->role->rolename,
+				       current->role->roletype, GR_GLOBAL_UID(cred->uid),
+				       GR_GLOBAL_GID(cred->gid), current->exec_file ?
+				       gr_to_filename(current->exec_file->f_path.dentry,
+				       current->exec_file->f_path.mnt) :
+				       curr->filename, curr->filename,
+				       &fakeip, domain, 0, 0, GR_SOCK_FAMILY,
+				       &current->signal->saved_ip);
+			goto exit;
+		}
+		goto exit_fail;
+	}
+
+inet_check:
+	/* the rest of this checking is for IPv4 only */
+	if (!curr->ips)
+		goto exit;
+
+	if ((curr->ip_type & (1U << type)) &&
+	    (curr->ip_proto[protocol / 32] & (1U << (protocol % 32))))
+		goto exit;
+
+	if (curr->mode & (GR_LEARN | GR_INHERITLEARN)) {
+		/* we don't place acls on raw sockets , and sometimes
+		   dgram/ip sockets are opened for ioctl and not
+		   bind/connect, so we'll fake a bind learn log */
+		if (type == SOCK_RAW || type == SOCK_PACKET) {
+			__u32 fakeip = 0;
+			security_learn(GR_IP_LEARN_MSG, current->role->rolename,
+				       current->role->roletype, GR_GLOBAL_UID(cred->uid),
+				       GR_GLOBAL_GID(cred->gid), current->exec_file ?
+				       gr_to_filename(current->exec_file->f_path.dentry,
+				       current->exec_file->f_path.mnt) :
+				       curr->filename, curr->filename,
+				       &fakeip, 0, type,
+				       protocol, GR_CONNECT, &current->signal->saved_ip);
+		} else if ((type == SOCK_DGRAM) && (protocol == IPPROTO_IP)) {
+			__u32 fakeip = 0;
+			security_learn(GR_IP_LEARN_MSG, current->role->rolename,
+				       current->role->roletype, GR_GLOBAL_UID(cred->uid),
+				       GR_GLOBAL_GID(cred->gid), current->exec_file ?
+				       gr_to_filename(current->exec_file->f_path.dentry,
+				       current->exec_file->f_path.mnt) :
+				       curr->filename, curr->filename,
+				       &fakeip, 0, type,
+				       protocol, GR_BIND, &current->signal->saved_ip);
+		}
+		/* we'll log when they use connect or bind */
+		goto exit;
+	}
+
+exit_fail:
+	if (domain == PF_INET)
+		gr_log_str3(GR_DONT_AUDIT, GR_SOCK_MSG, gr_sockfamily_to_name(domain), 
+			    gr_socktype_to_name(type), gr_proto_to_name(protocol));
+	else if (rcu_access_pointer(net_families[domain]) != NULL)
+		gr_log_str2_int(GR_DONT_AUDIT, GR_SOCK_NOINET_MSG, gr_sockfamily_to_name(domain), 
+			    gr_socktype_to_name(type), protocol);
+
+	return 0;
+exit:
+	return 1;
+}
+
+int check_ip_policy(struct acl_ip_label *ip, __u32 ip_addr, __u16 ip_port, __u8 protocol, const int mode, const int type, __u32 our_addr, __u32 our_netmask)
+{
+	if ((ip->mode & mode) &&
+	    (ip_port >= ip->low) &&
+	    (ip_port <= ip->high) &&
+	    ((ntohl(ip_addr) & our_netmask) ==
+	     (ntohl(our_addr) & our_netmask))
+	    && (ip->proto[protocol / 32] & (1U << (protocol % 32)))
+	    && (ip->type & (1U << type))) {
+		if (ip->mode & GR_INVERT)
+			return 2; // specifically denied
+		else
+			return 1; // allowed
+	}
+
+	return 0; // not specifically allowed, may continue parsing
+}
+
+static int
+gr_search_connectbind(const int full_mode, struct sock *sk,
+		      struct sockaddr_in *addr, const int type)
+{
+	char iface[IFNAMSIZ] = {0};
+	struct acl_subject_label *curr;
+	struct acl_ip_label *ip;
+	struct inet_sock *isk;
+	struct net_device *dev;
+	struct in_device *idev;
+	unsigned long i;
+	int ret;
+	int mode = full_mode & (GR_BIND | GR_CONNECT);
+	__u32 ip_addr = 0;
+	__u32 our_addr;
+	__u32 our_netmask;
+	char *p;
+	__u16 ip_port = 0;
+	const struct cred *cred = current_cred();
+
+	if (unlikely(!gr_acl_is_enabled() || sk->sk_family != PF_INET))
+		return 0;
+
+	curr = current->acl;
+	isk = inet_sk(sk);
+
+	/* INADDR_ANY overriding for binds, inaddr_any_override is already in network order */
+	if ((full_mode & GR_BINDOVERRIDE) && addr->sin_addr.s_addr == htonl(INADDR_ANY) && curr->inaddr_any_override != 0)
+		addr->sin_addr.s_addr = curr->inaddr_any_override;
+	if ((full_mode & GR_CONNECT) && isk->inet_saddr == htonl(INADDR_ANY) && curr->inaddr_any_override != 0) {
+		struct sockaddr_in saddr;
+		int err;
+
+		saddr.sin_family = AF_INET;
+		saddr.sin_addr.s_addr = curr->inaddr_any_override;
+		saddr.sin_port = isk->inet_sport;
+
+		err = security_socket_bind(sk->sk_socket, (struct sockaddr *)&saddr, sizeof(struct sockaddr_in));
+		if (err)
+			return err;
+
+		err = sk->sk_socket->ops->bind(sk->sk_socket, (struct sockaddr *)&saddr, sizeof(struct sockaddr_in));
+		if (err)
+			return err;
+	}
+
+	if (!curr->ips)
+		return 0;
+
+	ip_addr = addr->sin_addr.s_addr;
+	ip_port = ntohs(addr->sin_port);
+
+	if (curr->mode & (GR_LEARN | GR_INHERITLEARN)) {
+		security_learn(GR_IP_LEARN_MSG, current->role->rolename,
+			       current->role->roletype, GR_GLOBAL_UID(cred->uid),
+			       GR_GLOBAL_GID(cred->gid), current->exec_file ?
+			       gr_to_filename(current->exec_file->f_path.dentry,
+			       current->exec_file->f_path.mnt) :
+			       curr->filename, curr->filename,
+			       &ip_addr, ip_port, type,
+			       sk->sk_protocol, mode, &current->signal->saved_ip);
+		return 0;
+	}
+
+	for (i = 0; i < curr->ip_num; i++) {
+		ip = *(curr->ips + i);
+		if (ip->iface != NULL) {
+			strncpy(iface, ip->iface, IFNAMSIZ - 1);
+			p = strchr(iface, ':');
+			if (p != NULL)
+				*p = '\0';
+			dev = dev_get_by_name(sock_net(sk), iface);
+			if (dev == NULL)
+				continue;
+			idev = in_dev_get(dev);
+			if (idev == NULL) {
+				dev_put(dev);
+				continue;
+			}
+			rcu_read_lock();
+			for_ifa(idev) {
+				if (!strcmp(ip->iface, ifa->ifa_label)) {
+					our_addr = ifa->ifa_address;
+					our_netmask = 0xffffffff;
+					ret = check_ip_policy(ip, ip_addr, ip_port, sk->sk_protocol, mode, type, our_addr, our_netmask);
+					if (ret == 1) {
+						rcu_read_unlock();
+						in_dev_put(idev);
+						dev_put(dev);
+						return 0;
+					} else if (ret == 2) {
+						rcu_read_unlock();
+						in_dev_put(idev);
+						dev_put(dev);
+						goto denied;
+					}
+				}
+			} endfor_ifa(idev);
+			rcu_read_unlock();
+			in_dev_put(idev);
+			dev_put(dev);
+		} else {
+			our_addr = ip->addr;
+			our_netmask = ip->netmask;
+			ret = check_ip_policy(ip, ip_addr, ip_port, sk->sk_protocol, mode, type, our_addr, our_netmask);
+			if (ret == 1)
+				return 0;
+			else if (ret == 2)
+				goto denied;
+		}
+	}
+
+denied:
+	if (mode == GR_BIND)
+		gr_log_int5_str2(GR_DONT_AUDIT, GR_BIND_ACL_MSG, &ip_addr, ip_port, gr_socktype_to_name(type), gr_proto_to_name(sk->sk_protocol));
+	else if (mode == GR_CONNECT)
+		gr_log_int5_str2(GR_DONT_AUDIT, GR_CONNECT_ACL_MSG, &ip_addr, ip_port, gr_socktype_to_name(type), gr_proto_to_name(sk->sk_protocol));
+
+	return -EACCES;
+}
+
+int
+gr_search_connect(struct socket *sock, struct sockaddr_in *addr)
+{
+	/* always allow disconnection of dgram sockets with connect */
+	if (addr->sin_family == AF_UNSPEC)
+		return 0;
+	return gr_search_connectbind(GR_CONNECT | GR_CONNECTOVERRIDE, sock->sk, addr, sock->type);
+}
+
+int
+gr_search_bind(struct socket *sock, struct sockaddr_in *addr)
+{
+	return gr_search_connectbind(GR_BIND | GR_BINDOVERRIDE, sock->sk, addr, sock->type);
+}
+
+int gr_search_listen(struct socket *sock)
+{
+	struct sock *sk = sock->sk;
+	struct sockaddr_in addr;
+
+	addr.sin_addr.s_addr = inet_sk(sk)->inet_saddr;
+	addr.sin_port = inet_sk(sk)->inet_sport;
+
+	return gr_search_connectbind(GR_BIND | GR_CONNECTOVERRIDE, sock->sk, &addr, sock->type);
+}
+
+int gr_search_accept(struct socket *sock)
+{
+	struct sock *sk = sock->sk;
+	struct sockaddr_in addr;
+
+	addr.sin_addr.s_addr = inet_sk(sk)->inet_saddr;
+	addr.sin_port = inet_sk(sk)->inet_sport;
+
+	return gr_search_connectbind(GR_BIND | GR_CONNECTOVERRIDE, sock->sk, &addr, sock->type);
+}
+
+int
+gr_search_udp_sendmsg(struct sock *sk, struct sockaddr_in *addr)
+{
+	if (addr)
+		return gr_search_connectbind(GR_CONNECT, sk, addr, SOCK_DGRAM);
+	else {
+		struct sockaddr_in sin;
+		const struct inet_sock *inet = inet_sk(sk);
+
+		sin.sin_addr.s_addr = inet->inet_daddr;
+		sin.sin_port = inet->inet_dport;
+
+		return gr_search_connectbind(GR_CONNECT | GR_CONNECTOVERRIDE, sk, &sin, SOCK_DGRAM);
+	}
+}
+
+int
+gr_search_udp_recvmsg(struct sock *sk, const struct sk_buff *skb)
+{
+	struct sockaddr_in sin;
+
+	if (unlikely(skb->len < sizeof (struct udphdr)))
+		return 0;	// skip this packet
+
+	sin.sin_addr.s_addr = ip_hdr(skb)->saddr;
+	sin.sin_port = udp_hdr(skb)->source;
+
+	return gr_search_connectbind(GR_CONNECT | GR_CONNECTOVERRIDE, sk, &sin, SOCK_DGRAM);
+}
diff --git a/grsecurity/gracl_learn.c b/grsecurity/gracl_learn.c
new file mode 100644
index 000000000000..c5abda5c83e3
--- /dev/null
+++ b/grsecurity/gracl_learn.c
@@ -0,0 +1,209 @@
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/sched.h>
+#include <linux/poll.h>
+#include <linux/string.h>
+#include <linux/file.h>
+#include <linux/types.h>
+#include <linux/vmalloc.h>
+#include <linux/grinternal.h>
+
+extern ssize_t write_grsec_handler(struct file * file, const char __user * buf,
+				   size_t count, loff_t *ppos);
+extern int gr_acl_is_enabled(void);
+
+static DECLARE_WAIT_QUEUE_HEAD(learn_wait);
+static int gr_learn_attached;
+
+/* use a 512k buffer */
+#define LEARN_BUFFER_SIZE (512 * 1024)
+
+static DEFINE_SPINLOCK(gr_learn_lock);
+static DEFINE_MUTEX(gr_learn_user_mutex);
+
+/* we need to maintain two buffers, so that the kernel context of grlearn
+   uses a semaphore around the userspace copying, and the other kernel contexts
+   use a spinlock when copying into the buffer, since they cannot sleep
+*/
+static char *learn_buffer;
+static char *learn_buffer_user;
+static int learn_buffer_len;
+static int learn_buffer_user_len;
+
+static ssize_t
+read_learn(struct file *file, char __user * buf, size_t count, loff_t * ppos)
+{
+	DECLARE_WAITQUEUE(wait, current);
+	ssize_t retval = 0;
+
+	add_wait_queue(&learn_wait, &wait);
+	do {
+		mutex_lock(&gr_learn_user_mutex);
+		set_current_state(TASK_INTERRUPTIBLE);
+		spin_lock(&gr_learn_lock);
+		if (learn_buffer_len) {
+			set_current_state(TASK_RUNNING);
+			break;
+		}
+		spin_unlock(&gr_learn_lock);
+		mutex_unlock(&gr_learn_user_mutex);
+		if (file->f_flags & O_NONBLOCK) {
+			retval = -EAGAIN;
+			goto out;
+		}
+		if (signal_pending(current)) {
+			retval = -ERESTARTSYS;
+			goto out;
+		}
+
+		schedule();
+	} while (1);
+
+	memcpy(learn_buffer_user, learn_buffer, learn_buffer_len);
+	learn_buffer_user_len = learn_buffer_len;
+	retval = learn_buffer_len;
+	learn_buffer_len = 0;
+
+	spin_unlock(&gr_learn_lock);
+
+	if (copy_to_user(buf, learn_buffer_user, learn_buffer_user_len))
+		retval = -EFAULT;
+
+	mutex_unlock(&gr_learn_user_mutex);
+out:
+	set_current_state(TASK_RUNNING);
+	remove_wait_queue(&learn_wait, &wait);
+	return retval;
+}
+
+static unsigned int
+poll_learn(struct file * file, poll_table * wait)
+{
+	poll_wait(file, &learn_wait, wait);
+
+	if (learn_buffer_len)
+		return (POLLIN | POLLRDNORM);
+
+	return 0;
+}
+
+void
+gr_clear_learn_entries(void)
+{
+	char *tmp;
+
+	mutex_lock(&gr_learn_user_mutex);
+	spin_lock(&gr_learn_lock);
+	tmp = learn_buffer;
+	learn_buffer = NULL;
+	spin_unlock(&gr_learn_lock);
+	if (tmp)
+		vfree(tmp);
+	if (learn_buffer_user != NULL) {
+		vfree(learn_buffer_user);
+		learn_buffer_user = NULL;
+	}
+	learn_buffer_len = 0;
+	mutex_unlock(&gr_learn_user_mutex);
+
+	return;
+}
+
+void
+gr_add_learn_entry(const char *fmt, ...)
+{
+	va_list args;
+	unsigned int len;
+
+	if (!gr_learn_attached)
+		return;
+
+	spin_lock(&gr_learn_lock);
+
+	/* leave a gap at the end so we know when it's "full" but don't have to
+	   compute the exact length of the string we're trying to append
+	*/
+	if (learn_buffer_len > LEARN_BUFFER_SIZE - 16384) {
+		spin_unlock(&gr_learn_lock);
+		wake_up_interruptible(&learn_wait);
+		return;
+	}
+	if (learn_buffer == NULL) {
+		spin_unlock(&gr_learn_lock);
+		return;
+	}
+
+	va_start(args, fmt);
+	len = vsnprintf(learn_buffer + learn_buffer_len, LEARN_BUFFER_SIZE - learn_buffer_len, fmt, args);
+	va_end(args);
+
+	learn_buffer_len += len + 1;
+
+	spin_unlock(&gr_learn_lock);
+	wake_up_interruptible(&learn_wait);
+
+	return;
+}
+
+static int
+open_learn(struct inode *inode, struct file *file)
+{
+	if (file->f_mode & FMODE_READ && gr_learn_attached)
+		return -EBUSY;
+	if (file->f_mode & FMODE_READ) {
+		int retval = 0;
+		mutex_lock(&gr_learn_user_mutex);
+		if (learn_buffer == NULL)
+			learn_buffer = vmalloc(LEARN_BUFFER_SIZE);
+		if (learn_buffer_user == NULL)
+			learn_buffer_user = vmalloc(LEARN_BUFFER_SIZE);
+		if (learn_buffer == NULL) {
+			retval = -ENOMEM;
+			goto out_error;
+		}
+		if (learn_buffer_user == NULL) {
+			retval = -ENOMEM;
+			goto out_error;
+		}
+		learn_buffer_len = 0;
+		learn_buffer_user_len = 0;
+		gr_learn_attached = 1;
+out_error:
+		mutex_unlock(&gr_learn_user_mutex);
+		return retval;
+	}
+	return 0;
+}
+
+static int
+close_learn(struct inode *inode, struct file *file)
+{
+	if (file->f_mode & FMODE_READ) {
+		char *tmp = NULL;
+		mutex_lock(&gr_learn_user_mutex);
+		spin_lock(&gr_learn_lock);
+		tmp = learn_buffer;
+		learn_buffer = NULL;
+		spin_unlock(&gr_learn_lock);
+		if (tmp)
+			vfree(tmp);
+		if (learn_buffer_user != NULL) {
+			vfree(learn_buffer_user);
+			learn_buffer_user = NULL;
+		}
+		learn_buffer_len = 0;
+		learn_buffer_user_len = 0;
+		gr_learn_attached = 0;
+		mutex_unlock(&gr_learn_user_mutex);
+	}
+
+	return 0;
+}
+		
+const struct file_operations grsec_fops = {
+	.read		= read_learn,
+	.write		= write_grsec_handler,
+	.open		= open_learn,
+	.release	= close_learn,
+	.poll		= poll_learn,
+};
diff --git a/grsecurity/gracl_policy.c b/grsecurity/gracl_policy.c
new file mode 100644
index 000000000000..7c42102d6593
--- /dev/null
+++ b/grsecurity/gracl_policy.c
@@ -0,0 +1,1782 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/namei.h>
+#include <linux/mount.h>
+#include <linux/tty.h>
+#include <linux/proc_fs.h>
+#include <linux/slab.h>
+#include <linux/vmalloc.h>
+#include <linux/types.h>
+#include <linux/sysctl.h>
+#include <linux/netdevice.h>
+#include <linux/ptrace.h>
+#include <linux/gracl.h>
+#include <linux/gralloc.h>
+#include <linux/security.h>
+#include <linux/grinternal.h>
+#include <linux/pid_namespace.h>
+#include <linux/stop_machine.h>
+#include <linux/fdtable.h>
+#include <linux/percpu.h>
+#include <linux/hugetlb.h>
+#include <linux/posix-timers.h>
+#include "../fs/mount.h"
+
+#include <asm/uaccess.h>
+#include <asm/errno.h>
+#include <asm/mman.h>
+
+extern struct gr_policy_state *polstate;
+
+#define FOR_EACH_ROLE_START(role) \
+	role = polstate->role_list; \
+	while (role) {
+
+#define FOR_EACH_ROLE_END(role) \
+		role = role->prev; \
+	}
+
+struct path gr_real_root;
+
+extern struct gr_alloc_state *current_alloc_state;
+
+u16 acl_sp_role_value;
+
+static DEFINE_MUTEX(gr_dev_mutex);
+
+extern int chkpw(struct gr_arg *entry, unsigned char *salt, unsigned char *sum);
+extern void gr_clear_learn_entries(void);
+
+struct gr_arg *gr_usermode __read_only;
+unsigned char *gr_system_salt __read_only;
+unsigned char *gr_system_sum __read_only;
+
+static unsigned int gr_auth_attempts = 0;
+static unsigned long gr_auth_expires = 0UL;
+
+struct acl_object_label *fakefs_obj_rw;
+struct acl_object_label *fakefs_obj_rwx;
+
+extern int gr_init_uidset(void);
+extern void gr_free_uidset(void);
+extern int gr_find_and_remove_uid(uid_t uid);
+
+extern struct acl_subject_label *__gr_get_subject_for_task(const struct gr_policy_state *state, struct task_struct *task, const char *filename, int fallback);
+extern void __gr_apply_subject_to_task(const struct gr_policy_state *state, struct task_struct *task, struct acl_subject_label *subj);
+extern int gr_streq(const char *a, const char *b, const unsigned int lena, const unsigned int lenb);
+extern void __insert_inodev_entry(const struct gr_policy_state *state, struct inodev_entry *entry);
+extern struct acl_role_label *__lookup_acl_role_label(const struct gr_policy_state *state, const struct task_struct *task, const uid_t uid, const gid_t gid);
+extern void insert_acl_obj_label(struct acl_object_label *obj, struct acl_subject_label *subj);
+extern void insert_acl_subj_label(struct acl_subject_label *obj, struct acl_role_label *role);
+extern struct name_entry * __lookup_name_entry(const struct gr_policy_state *state, const char *name);
+extern char *gr_to_filename_rbac(const struct dentry *dentry, const struct vfsmount *mnt);
+extern struct acl_subject_label *lookup_acl_subj_label(const u64 ino, const dev_t dev, const struct acl_role_label *role);
+extern struct acl_subject_label *lookup_acl_subj_label_deleted(const u64 ino, const dev_t dev, const struct acl_role_label *role);
+extern void assign_special_role(const char *rolename);
+extern struct acl_subject_label *chk_subj_label(const struct dentry *l_dentry, const struct vfsmount *l_mnt, const struct acl_role_label *role);
+extern int gr_rbac_disable(void *unused);
+extern void gr_enable_rbac_system(void);
+
+static int copy_acl_object_label_normal(struct acl_object_label *obj, const struct acl_object_label *userp)
+{
+	if (copy_from_user(obj, userp, sizeof(struct acl_object_label)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_acl_ip_label_normal(struct acl_ip_label *ip, const struct acl_ip_label *userp)
+{
+	if (copy_from_user(ip, userp, sizeof(struct acl_ip_label)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_acl_subject_label_normal(struct acl_subject_label *subj, const struct acl_subject_label *userp)
+{
+	if (copy_from_user(subj, userp, sizeof(struct acl_subject_label)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_acl_role_label_normal(struct acl_role_label *role, const struct acl_role_label *userp)
+{
+	if (copy_from_user(role, userp, sizeof(struct acl_role_label)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_role_allowed_ip_normal(struct role_allowed_ip *roleip, const struct role_allowed_ip *userp)
+{
+	if (copy_from_user(roleip, userp, sizeof(struct role_allowed_ip)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_sprole_pw_normal(struct sprole_pw *pw, unsigned long idx, const struct sprole_pw *userp)
+{
+	if (copy_from_user(pw, userp + idx, sizeof(struct sprole_pw)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_gr_hash_struct_normal(struct gr_hash_struct *hash, const struct gr_hash_struct *userp)
+{
+	if (copy_from_user(hash, userp, sizeof(struct gr_hash_struct)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_role_transition_normal(struct role_transition *trans, const struct role_transition *userp)
+{
+	if (copy_from_user(trans, userp, sizeof(struct role_transition)))
+		return -EFAULT;
+
+	return 0;
+}
+
+int copy_pointer_from_array_normal(void *ptr, unsigned long idx, const void *userp)
+{
+	if (copy_from_user(ptr, userp + (idx * sizeof(void *)), sizeof(void *)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int copy_gr_arg_wrapper_normal(const char __user *buf, struct gr_arg_wrapper *uwrap)
+{
+	if (copy_from_user(uwrap, buf, sizeof (struct gr_arg_wrapper)))
+		return -EFAULT;
+
+	if ((uwrap->version != GRSECURITY_VERSION) ||
+	    (uwrap->size != sizeof(struct gr_arg)))
+		return -EINVAL;
+
+	return 0;
+}
+
+static int copy_gr_arg_normal(const struct gr_arg __user *buf, struct gr_arg *arg)
+{
+	if (copy_from_user(arg, buf, sizeof (struct gr_arg)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static size_t get_gr_arg_wrapper_size_normal(void)
+{
+	return sizeof(struct gr_arg_wrapper);
+}
+
+#ifdef CONFIG_COMPAT
+extern int copy_gr_arg_wrapper_compat(const char *buf, struct gr_arg_wrapper *uwrap);
+extern int copy_gr_arg_compat(const struct gr_arg __user *buf, struct gr_arg *arg);
+extern int copy_acl_object_label_compat(struct acl_object_label *obj, const struct acl_object_label *userp);
+extern int copy_acl_subject_label_compat(struct acl_subject_label *subj, const struct acl_subject_label *userp);
+extern int copy_acl_role_label_compat(struct acl_role_label *role, const struct acl_role_label *userp);
+extern int copy_role_allowed_ip_compat(struct role_allowed_ip *roleip, const struct role_allowed_ip *userp);
+extern int copy_role_transition_compat(struct role_transition *trans, const struct role_transition *userp);
+extern int copy_gr_hash_struct_compat(struct gr_hash_struct *hash, const struct gr_hash_struct *userp);
+extern int copy_pointer_from_array_compat(void *ptr, unsigned long idx, const void *userp);
+extern int copy_acl_ip_label_compat(struct acl_ip_label *ip, const struct acl_ip_label *userp);
+extern int copy_sprole_pw_compat(struct sprole_pw *pw, unsigned long idx, const struct sprole_pw *userp);
+extern size_t get_gr_arg_wrapper_size_compat(void);
+
+int (* copy_gr_arg_wrapper)(const char *buf, struct gr_arg_wrapper *uwrap) __read_only;
+int (* copy_gr_arg)(const struct gr_arg *buf, struct gr_arg *arg) __read_only;
+int (* copy_acl_object_label)(struct acl_object_label *obj, const struct acl_object_label *userp) __read_only;
+int (* copy_acl_subject_label)(struct acl_subject_label *subj, const struct acl_subject_label *userp) __read_only;
+int (* copy_acl_role_label)(struct acl_role_label *role, const struct acl_role_label *userp) __read_only;
+int (* copy_acl_ip_label)(struct acl_ip_label *ip, const struct acl_ip_label *userp) __read_only;
+int (* copy_pointer_from_array)(void *ptr, unsigned long idx, const void *userp) __read_only;
+int (* copy_sprole_pw)(struct sprole_pw *pw, unsigned long idx, const struct sprole_pw *userp) __read_only;
+int (* copy_gr_hash_struct)(struct gr_hash_struct *hash, const struct gr_hash_struct *userp) __read_only;
+int (* copy_role_transition)(struct role_transition *trans, const struct role_transition *userp) __read_only;
+int (* copy_role_allowed_ip)(struct role_allowed_ip *roleip, const struct role_allowed_ip *userp) __read_only;
+size_t (* get_gr_arg_wrapper_size)(void) __read_only;
+
+#else
+#define copy_gr_arg_wrapper copy_gr_arg_wrapper_normal
+#define copy_gr_arg copy_gr_arg_normal
+#define copy_gr_hash_struct copy_gr_hash_struct_normal
+#define copy_acl_object_label copy_acl_object_label_normal
+#define copy_acl_subject_label copy_acl_subject_label_normal
+#define copy_acl_role_label copy_acl_role_label_normal
+#define copy_acl_ip_label copy_acl_ip_label_normal
+#define copy_pointer_from_array copy_pointer_from_array_normal
+#define copy_sprole_pw copy_sprole_pw_normal
+#define copy_role_transition copy_role_transition_normal
+#define copy_role_allowed_ip copy_role_allowed_ip_normal
+#define get_gr_arg_wrapper_size get_gr_arg_wrapper_size_normal
+#endif
+
+static struct acl_subject_label *
+lookup_subject_map(const struct acl_subject_label *userp)
+{
+	unsigned int index = gr_shash(userp, polstate->subj_map_set.s_size);
+	struct subject_map *match;
+
+	match = polstate->subj_map_set.s_hash[index];
+
+	while (match && match->user != userp)
+		match = match->next;
+
+	if (match != NULL)
+		return match->kernel;
+	else
+		return NULL;
+}
+
+static void
+insert_subj_map_entry(struct subject_map *subjmap)
+{
+	unsigned int index = gr_shash(subjmap->user, polstate->subj_map_set.s_size);
+	struct subject_map **curr;
+
+	subjmap->prev = NULL;
+
+	curr = &polstate->subj_map_set.s_hash[index];
+	if (*curr != NULL)
+		(*curr)->prev = subjmap;
+
+	subjmap->next = *curr;
+	*curr = subjmap;
+
+	return;
+}
+
+static void
+__insert_acl_role_label(struct acl_role_label *role, uid_t uidgid)
+{
+	unsigned int index =
+	    gr_rhash(uidgid, role->roletype & (GR_ROLE_USER | GR_ROLE_GROUP), polstate->acl_role_set.r_size);
+	struct acl_role_label **curr;
+	struct acl_role_label *tmp, *tmp2;
+
+	curr = &polstate->acl_role_set.r_hash[index];
+
+	/* simple case, slot is empty, just set it to our role */
+	if (*curr == NULL) {
+		*curr = role;
+	} else {
+		/* example:
+		   1 -> 2 -> 3 (adding 2 -> 3 to here)
+		   2 -> 3
+		*/
+		/* first check to see if we can already be reached via this slot */
+		tmp = *curr;
+		while (tmp && tmp != role)
+			tmp = tmp->next;
+		if (tmp == role) {
+			/* we don't need to add ourselves to this slot's chain */
+			return;
+		}
+		/* we need to add ourselves to this chain, two cases */
+		if (role->next == NULL) {
+			/* simple case, append the current chain to our role */
+			role->next = *curr;
+			*curr = role;
+		} else {
+			/* 1 -> 2 -> 3 -> 4
+			   2 -> 3 -> 4
+			   3 -> 4 (adding 1 -> 2 -> 3 -> 4 to here)
+			*/			   
+			/* trickier case: walk our role's chain until we find
+			   the role for the start of the current slot's chain */
+			tmp = role;
+			tmp2 = *curr;
+			while (tmp->next && tmp->next != tmp2)
+				tmp = tmp->next;
+			if (tmp->next == tmp2) {
+				/* from example above, we found 3, so just
+				   replace this slot's chain with ours */
+				*curr = role;
+			} else {
+				/* we didn't find a subset of our role's chain
+				   in the current slot's chain, so append their
+				   chain to ours, and set us as the first role in
+				   the slot's chain
+
+				   we could fold this case with the case above,
+				   but making it explicit for clarity
+				*/
+				tmp->next = tmp2;
+				*curr = role;
+			}
+		}
+	}
+
+	return;
+}
+
+static void
+insert_acl_role_label(struct acl_role_label *role)
+{
+	int i;
+
+	if (polstate->role_list == NULL) {
+		polstate->role_list = role;
+		role->prev = NULL;
+	} else {
+		role->prev = polstate->role_list;
+		polstate->role_list = role;
+	}
+	
+	/* used for hash chains */
+	role->next = NULL;
+
+	if (role->roletype & GR_ROLE_DOMAIN) {
+		for (i = 0; i < role->domain_child_num; i++)
+			__insert_acl_role_label(role, role->domain_children[i]);
+	} else
+		__insert_acl_role_label(role, role->uidgid);
+}
+					
+static int
+insert_name_entry(char *name, const u64 inode, const dev_t device, __u8 deleted)
+{
+	struct name_entry **curr, *nentry;
+	struct inodev_entry *ientry;
+	unsigned int len = strlen(name);
+	unsigned int key = full_name_hash(NULL, (const unsigned char *)name, len);
+	unsigned int index = key % polstate->name_set.n_size;
+
+	curr = &polstate->name_set.n_hash[index];
+
+	while (*curr && ((*curr)->key != key || !gr_streq((*curr)->name, name, (*curr)->len, len)))
+		curr = &((*curr)->next);
+
+	if (*curr != NULL)
+		return 1;
+
+	nentry = acl_alloc(sizeof (struct name_entry));
+	if (nentry == NULL)
+		return 0;
+	ientry = acl_alloc(sizeof (struct inodev_entry));
+	if (ientry == NULL)
+		return 0;
+	ientry->nentry = nentry;
+
+	nentry->key = key;
+	nentry->name = name;
+	nentry->inode = inode;
+	nentry->device = device;
+	nentry->len = len;
+	nentry->deleted = deleted;
+
+	nentry->prev = NULL;
+	curr = &polstate->name_set.n_hash[index];
+	if (*curr != NULL)
+		(*curr)->prev = nentry;
+	nentry->next = *curr;
+	*curr = nentry;
+
+	/* insert us into the table searchable by inode/dev */
+	__insert_inodev_entry(polstate, ientry);
+
+	return 1;
+}
+
+/* allocating chained hash tables, so optimal size is where lambda ~ 1 */
+
+static void *
+create_table(__u32 * len, int elementsize)
+{
+	unsigned int table_sizes[] = {
+		7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381,
+		32749, 65521, 131071, 262139, 524287, 1048573, 2097143,
+		4194301, 8388593, 16777213, 33554393, 67108859
+	};
+	void *newtable = NULL;
+	unsigned int pwr = 0;
+
+	while ((pwr < ((sizeof (table_sizes) / sizeof (table_sizes[0])) - 1)) &&
+	       table_sizes[pwr] <= *len)
+		pwr++;
+
+	if (table_sizes[pwr] <= *len || (table_sizes[pwr] > ULONG_MAX / elementsize))
+		return newtable;
+
+	if ((table_sizes[pwr] * elementsize) <= PAGE_SIZE)
+		newtable =
+		    kmalloc(table_sizes[pwr] * elementsize, GFP_KERNEL);
+	else
+		newtable = vmalloc(table_sizes[pwr] * elementsize);
+
+	*len = table_sizes[pwr];
+
+	return newtable;
+}
+
+static int
+init_variables(const struct gr_arg *arg, bool reload)
+{
+	struct task_struct *reaper = init_pid_ns.child_reaper;
+	unsigned int stacksize;
+
+	polstate->subj_map_set.s_size = arg->role_db.num_subjects;
+	polstate->acl_role_set.r_size = arg->role_db.num_roles + arg->role_db.num_domain_children;
+	polstate->name_set.n_size = arg->role_db.num_objects;
+	polstate->inodev_set.i_size = arg->role_db.num_objects;
+
+	if (!polstate->subj_map_set.s_size || !polstate->acl_role_set.r_size ||
+	    !polstate->name_set.n_size || !polstate->inodev_set.i_size)
+		return 1;
+
+	if (!reload) {
+		if (!gr_init_uidset())
+			return 1;
+	}
+
+	/* set up the stack that holds allocation info */
+
+	stacksize = arg->role_db.num_pointers + 5;
+
+	if (!acl_alloc_stack_init(stacksize))
+		return 1;
+
+	if (!reload) {
+		/* grab reference for the real root dentry and vfsmount */
+		get_fs_root(reaper->fs, &gr_real_root);
+	
+#ifdef CONFIG_GRKERNSEC_RBAC_DEBUG
+	printk(KERN_ALERT "Obtained real root device=%d, inode=%lu\n", gr_get_dev_from_dentry(gr_real_root.dentry), gr_get_ino_from_dentry(gr_real_root.dentry));
+#endif
+
+		fakefs_obj_rw = kzalloc(sizeof(struct acl_object_label), GFP_KERNEL);
+		if (fakefs_obj_rw == NULL)
+			return 1;
+		fakefs_obj_rw->mode = GR_FIND | GR_READ | GR_WRITE;
+	
+		fakefs_obj_rwx = kzalloc(sizeof(struct acl_object_label), GFP_KERNEL);
+		if (fakefs_obj_rwx == NULL)
+			return 1;
+		fakefs_obj_rwx->mode = GR_FIND | GR_READ | GR_WRITE | GR_EXEC;
+	}
+
+	polstate->subj_map_set.s_hash =
+	    (struct subject_map **) create_table(&polstate->subj_map_set.s_size, sizeof(void *));
+	polstate->acl_role_set.r_hash =
+	    (struct acl_role_label **) create_table(&polstate->acl_role_set.r_size, sizeof(void *));
+	polstate->name_set.n_hash = (struct name_entry **) create_table(&polstate->name_set.n_size, sizeof(void *));
+	polstate->inodev_set.i_hash =
+	    (struct inodev_entry **) create_table(&polstate->inodev_set.i_size, sizeof(void *));
+
+	if (!polstate->subj_map_set.s_hash || !polstate->acl_role_set.r_hash ||
+	    !polstate->name_set.n_hash || !polstate->inodev_set.i_hash)
+		return 1;
+
+	memset(polstate->subj_map_set.s_hash, 0,
+	       sizeof(struct subject_map *) * polstate->subj_map_set.s_size);
+	memset(polstate->acl_role_set.r_hash, 0,
+	       sizeof (struct acl_role_label *) * polstate->acl_role_set.r_size);
+	memset(polstate->name_set.n_hash, 0,
+	       sizeof (struct name_entry *) * polstate->name_set.n_size);
+	memset(polstate->inodev_set.i_hash, 0,
+	       sizeof (struct inodev_entry *) * polstate->inodev_set.i_size);
+
+	return 0;
+}
+
+/* free information not needed after startup
+   currently contains user->kernel pointer mappings for subjects
+*/
+
+static void
+free_init_variables(void)
+{
+	__u32 i;
+
+	if (polstate->subj_map_set.s_hash) {
+		for (i = 0; i < polstate->subj_map_set.s_size; i++) {
+			if (polstate->subj_map_set.s_hash[i]) {
+				kfree(polstate->subj_map_set.s_hash[i]);
+				polstate->subj_map_set.s_hash[i] = NULL;
+			}
+		}
+
+		if ((polstate->subj_map_set.s_size * sizeof (struct subject_map *)) <=
+		    PAGE_SIZE)
+			kfree(polstate->subj_map_set.s_hash);
+		else
+			vfree(polstate->subj_map_set.s_hash);
+	}
+
+	return;
+}
+
+static void
+free_variables(bool reload)
+{
+	struct acl_subject_label *s;
+	struct acl_role_label *r;
+	struct task_struct *task, *task2;
+	unsigned int x;
+
+	if (!reload) {
+		gr_clear_learn_entries();
+
+		read_lock(&tasklist_lock);
+		do_each_thread(task2, task) {
+			task->acl_sp_role = 0;
+			task->acl_role_id = 0;
+			task->inherited = 0;
+			task->acl = NULL;
+			task->role = NULL;
+		} while_each_thread(task2, task);
+		read_unlock(&tasklist_lock);
+
+		kfree(fakefs_obj_rw);
+		fakefs_obj_rw = NULL;
+		kfree(fakefs_obj_rwx);
+		fakefs_obj_rwx = NULL;
+
+		/* release the reference to the real root dentry and vfsmount */
+		path_put(&gr_real_root);
+		memset(&gr_real_root, 0, sizeof(gr_real_root));
+	}
+
+	/* free all object hash tables */
+
+	FOR_EACH_ROLE_START(r)
+		if (r->subj_hash == NULL)
+			goto next_role;
+		FOR_EACH_SUBJECT_START(r, s, x)
+			if (s->obj_hash == NULL)
+				break;
+			if ((s->obj_hash_size * sizeof (struct acl_object_label *)) <= PAGE_SIZE)
+				kfree(s->obj_hash);
+			else
+				vfree(s->obj_hash);
+		FOR_EACH_SUBJECT_END(s, x)
+		FOR_EACH_NESTED_SUBJECT_START(r, s)
+			if (s->obj_hash == NULL)
+				break;
+			if ((s->obj_hash_size * sizeof (struct acl_object_label *)) <= PAGE_SIZE)
+				kfree(s->obj_hash);
+			else
+				vfree(s->obj_hash);
+		FOR_EACH_NESTED_SUBJECT_END(s)
+		if ((r->subj_hash_size * sizeof (struct acl_subject_label *)) <= PAGE_SIZE)
+			kfree(r->subj_hash);
+		else
+			vfree(r->subj_hash);
+		r->subj_hash = NULL;
+next_role:
+	FOR_EACH_ROLE_END(r)
+
+	acl_free_all();
+
+	if (polstate->acl_role_set.r_hash) {
+		if ((polstate->acl_role_set.r_size * sizeof (struct acl_role_label *)) <=
+		    PAGE_SIZE)
+			kfree(polstate->acl_role_set.r_hash);
+		else
+			vfree(polstate->acl_role_set.r_hash);
+	}
+	if (polstate->name_set.n_hash) {
+		if ((polstate->name_set.n_size * sizeof (struct name_entry *)) <=
+		    PAGE_SIZE)
+			kfree(polstate->name_set.n_hash);
+		else
+			vfree(polstate->name_set.n_hash);
+	}
+
+	if (polstate->inodev_set.i_hash) {
+		if ((polstate->inodev_set.i_size * sizeof (struct inodev_entry *)) <=
+		    PAGE_SIZE)
+			kfree(polstate->inodev_set.i_hash);
+		else
+			vfree(polstate->inodev_set.i_hash);
+	}
+
+	if (!reload)
+		gr_free_uidset();
+
+	memset(&polstate->name_set, 0, sizeof (struct name_db));
+	memset(&polstate->inodev_set, 0, sizeof (struct inodev_db));
+	memset(&polstate->acl_role_set, 0, sizeof (struct acl_role_db));
+	memset(&polstate->subj_map_set, 0, sizeof (struct acl_subj_map_db));
+
+	polstate->default_role = NULL;
+	polstate->kernel_role = NULL;
+	polstate->role_list = NULL;
+
+	return;
+}
+
+static struct acl_subject_label *
+do_copy_user_subj(struct acl_subject_label *userp, struct acl_role_label *role, int *already_copied);
+
+static int alloc_and_copy_string(char **name, unsigned int maxlen)
+{
+	unsigned int len = strnlen_user(*name, maxlen);
+	char *tmp;
+
+	if (!len || len >= maxlen)
+		return -EINVAL;
+
+	if ((tmp = (char *) acl_alloc(len)) == NULL)
+		return -ENOMEM;
+
+	if (copy_from_user(tmp, *name, len))
+		return -EFAULT;
+
+	tmp[len-1] = '\0';
+	*name = tmp;
+
+	return 0;
+}
+
+static int
+copy_user_glob(struct acl_object_label *obj)
+{
+	struct acl_object_label *g_tmp, **guser;
+	int error;
+
+	if (obj->globbed == NULL)
+		return 0;
+
+	guser = &obj->globbed;
+	while (*guser) {
+		g_tmp = (struct acl_object_label *)
+			acl_alloc(sizeof (struct acl_object_label));
+		if (g_tmp == NULL)
+			return -ENOMEM;
+
+		if (copy_acl_object_label(g_tmp, *guser))
+			return -EFAULT;
+
+		error = alloc_and_copy_string(&g_tmp->filename, PATH_MAX);
+		if (error)
+			return error;
+
+		*guser = g_tmp;
+		guser = &(g_tmp->next);
+	}
+
+	return 0;
+}
+
+static int
+copy_user_objs(struct acl_object_label *userp, struct acl_subject_label *subj,
+	       struct acl_role_label *role)
+{
+	struct acl_object_label *o_tmp;
+	int ret;
+
+	while (userp) {
+		if ((o_tmp = (struct acl_object_label *)
+		     acl_alloc(sizeof (struct acl_object_label))) == NULL)
+			return -ENOMEM;
+
+		if (copy_acl_object_label(o_tmp, userp))
+			return -EFAULT;
+
+		userp = o_tmp->prev;
+
+		ret = alloc_and_copy_string(&o_tmp->filename, PATH_MAX);
+		if (ret)
+			return ret;
+
+		insert_acl_obj_label(o_tmp, subj);
+		if (!insert_name_entry(o_tmp->filename, o_tmp->inode,
+				       o_tmp->device, (o_tmp->mode & GR_DELETED) ? 1 : 0))
+			return -ENOMEM;
+
+		ret = copy_user_glob(o_tmp);
+		if (ret)
+			return ret;
+
+		if (o_tmp->nested) {
+			int already_copied;
+
+			o_tmp->nested = do_copy_user_subj(o_tmp->nested, role, &already_copied);
+			if (IS_ERR(o_tmp->nested))
+				return PTR_ERR(o_tmp->nested);
+
+			/* insert into nested subject list if we haven't copied this one yet
+			   to prevent duplicate entries */
+			if (!already_copied) {
+				o_tmp->nested->next = role->hash->first;
+				role->hash->first = o_tmp->nested;
+			}
+		}
+	}
+
+	return 0;
+}
+
+static __u32
+count_user_subjs(struct acl_subject_label *userp)
+{
+	struct acl_subject_label s_tmp;
+	__u32 num = 0;
+
+	while (userp) {
+		if (copy_acl_subject_label(&s_tmp, userp))
+			break;
+
+		userp = s_tmp.prev;
+	}
+
+	return num;
+}
+
+static int
+copy_user_allowedips(struct acl_role_label *rolep)
+{
+	struct role_allowed_ip *ruserip, *rtmp = NULL, *rlast;
+
+	ruserip = rolep->allowed_ips;
+
+	while (ruserip) {
+		rlast = rtmp;
+
+		if ((rtmp = (struct role_allowed_ip *)
+		     acl_alloc(sizeof (struct role_allowed_ip))) == NULL)
+			return -ENOMEM;
+
+		if (copy_role_allowed_ip(rtmp, ruserip))
+			return -EFAULT;
+
+		ruserip = rtmp->prev;
+
+		if (!rlast) {
+			rtmp->prev = NULL;
+			rolep->allowed_ips = rtmp;
+		} else {
+			rlast->next = rtmp;
+			rtmp->prev = rlast;
+		}
+
+		if (!ruserip)
+			rtmp->next = NULL;
+	}
+
+	return 0;
+}
+
+static int
+copy_user_transitions(struct acl_role_label *rolep)
+{
+	struct role_transition *rusertp, *rtmp = NULL, *rlast;
+	int error;
+
+	rusertp = rolep->transitions;
+
+	while (rusertp) {
+		rlast = rtmp;
+
+		if ((rtmp = (struct role_transition *)
+		     acl_alloc(sizeof (struct role_transition))) == NULL)
+			return -ENOMEM;
+
+		if (copy_role_transition(rtmp, rusertp))
+			return -EFAULT;
+
+		rusertp = rtmp->prev;
+
+		error = alloc_and_copy_string(&rtmp->rolename, GR_SPROLE_LEN);
+		if (error)
+			return error;
+
+		if (!rlast) {
+			rtmp->prev = NULL;
+			rolep->transitions = rtmp;
+		} else {
+			rlast->next = rtmp;
+			rtmp->prev = rlast;
+		}
+
+		if (!rusertp)
+			rtmp->next = NULL;
+	}
+
+	return 0;
+}
+
+static __u32 count_user_objs(const struct acl_object_label __user *userp)
+{
+	struct acl_object_label o_tmp;
+	__u32 num = 0;
+
+	while (userp) {
+		if (copy_acl_object_label(&o_tmp, userp))
+			break;
+
+		userp = o_tmp.prev;
+		num++;
+	}
+
+	return num;
+}
+
+static struct acl_subject_label *
+do_copy_user_subj(struct acl_subject_label *userp, struct acl_role_label *role, int *already_copied)
+{
+	struct acl_subject_label *s_tmp = NULL, *s_tmp2;
+	__u32 num_objs;
+	struct acl_ip_label **i_tmp, *i_utmp2;
+	struct gr_hash_struct ghash;
+	struct subject_map *subjmap;
+	unsigned int i_num;
+	int err;
+
+	if (already_copied != NULL)
+		*already_copied = 0;
+
+	s_tmp = lookup_subject_map(userp);
+
+	/* we've already copied this subject into the kernel, just return
+	   the reference to it, and don't copy it over again
+	*/
+	if (s_tmp) {
+		if (already_copied != NULL)
+			*already_copied = 1;
+		return(s_tmp);
+	}
+
+	if ((s_tmp = (struct acl_subject_label *)
+	    acl_alloc(sizeof (struct acl_subject_label))) == NULL)
+		return ERR_PTR(-ENOMEM);
+
+	subjmap = (struct subject_map *)kmalloc(sizeof (struct subject_map), GFP_KERNEL);
+	if (subjmap == NULL)
+		return ERR_PTR(-ENOMEM);
+
+	subjmap->user = userp;
+	subjmap->kernel = s_tmp;
+	insert_subj_map_entry(subjmap);
+
+	if (copy_acl_subject_label(s_tmp, userp))
+		return ERR_PTR(-EFAULT);
+
+	err = alloc_and_copy_string(&s_tmp->filename, PATH_MAX);
+	if (err)
+		return ERR_PTR(err);
+
+	if (!strcmp(s_tmp->filename, "/"))
+		role->root_label = s_tmp;
+
+	if (copy_gr_hash_struct(&ghash, s_tmp->hash))
+		return ERR_PTR(-EFAULT);
+
+	/* copy user and group transition tables */
+
+	if (s_tmp->user_trans_num) {
+		uid_t *uidlist;
+
+		uidlist = (uid_t *)acl_alloc_num(s_tmp->user_trans_num, sizeof(uid_t));
+		if (uidlist == NULL)
+			return ERR_PTR(-ENOMEM);
+		if (copy_from_user(uidlist, s_tmp->user_transitions, s_tmp->user_trans_num * sizeof(uid_t)))
+			return ERR_PTR(-EFAULT);
+
+		s_tmp->user_transitions = uidlist;
+	}
+
+	if (s_tmp->group_trans_num) {
+		gid_t *gidlist;
+
+		gidlist = (gid_t *)acl_alloc_num(s_tmp->group_trans_num, sizeof(gid_t));
+		if (gidlist == NULL)
+			return ERR_PTR(-ENOMEM);
+		if (copy_from_user(gidlist, s_tmp->group_transitions, s_tmp->group_trans_num * sizeof(gid_t)))
+			return ERR_PTR(-EFAULT);
+
+		s_tmp->group_transitions = gidlist;
+	}
+
+	/* set up object hash table */
+	num_objs = count_user_objs(ghash.first);
+
+	s_tmp->obj_hash_size = num_objs;
+	s_tmp->obj_hash =
+	    (struct acl_object_label **)
+	    create_table(&(s_tmp->obj_hash_size), sizeof(void *));
+
+	if (!s_tmp->obj_hash)
+		return ERR_PTR(-ENOMEM);
+
+	memset(s_tmp->obj_hash, 0,
+	       s_tmp->obj_hash_size *
+	       sizeof (struct acl_object_label *));
+
+	/* add in objects */
+	err = copy_user_objs(ghash.first, s_tmp, role);
+
+	if (err)
+		return ERR_PTR(err);
+
+	/* set pointer for parent subject */
+	if (s_tmp->parent_subject) {
+		s_tmp2 = do_copy_user_subj(s_tmp->parent_subject, role, NULL);
+
+		if (IS_ERR(s_tmp2))
+			return s_tmp2;
+
+		s_tmp->parent_subject = s_tmp2;
+	}
+
+	/* add in ip acls */
+
+	if (!s_tmp->ip_num) {
+		s_tmp->ips = NULL;
+		goto insert;
+	}
+
+	i_tmp =
+	    (struct acl_ip_label **) acl_alloc_num(s_tmp->ip_num,
+					       sizeof (struct acl_ip_label *));
+
+	if (!i_tmp)
+		return ERR_PTR(-ENOMEM);
+
+	for (i_num = 0; i_num < s_tmp->ip_num; i_num++) {
+		*(i_tmp + i_num) =
+		    (struct acl_ip_label *)
+		    acl_alloc(sizeof (struct acl_ip_label));
+		if (!*(i_tmp + i_num))
+			return ERR_PTR(-ENOMEM);
+
+		if (copy_pointer_from_array(&i_utmp2, i_num, s_tmp->ips))
+			return ERR_PTR(-EFAULT);
+
+		if (copy_acl_ip_label(*(i_tmp + i_num), i_utmp2))
+			return ERR_PTR(-EFAULT);
+		
+		if ((*(i_tmp + i_num))->iface == NULL)
+			continue;
+
+		err = alloc_and_copy_string(&(*(i_tmp + i_num))->iface, IFNAMSIZ);
+		if (err)
+			return ERR_PTR(err);
+	}
+
+	s_tmp->ips = i_tmp;
+
+insert:
+	if (!insert_name_entry(s_tmp->filename, s_tmp->inode,
+			       s_tmp->device, (s_tmp->mode & GR_DELETED) ? 1 : 0))
+		return ERR_PTR(-ENOMEM);
+
+	return s_tmp;
+}
+
+static int
+copy_user_subjs(struct acl_subject_label *userp, struct acl_role_label *role)
+{
+	struct acl_subject_label s_pre;
+	struct acl_subject_label * ret;
+	int err;
+
+	while (userp) {
+		if (copy_acl_subject_label(&s_pre, userp))
+			return -EFAULT;
+		
+		ret = do_copy_user_subj(userp, role, NULL);
+
+		err = PTR_ERR(ret);
+		if (IS_ERR(ret))
+			return err;
+
+		insert_acl_subj_label(ret, role);
+
+		userp = s_pre.prev;
+	}
+
+	return 0;
+}
+
+static int
+copy_user_acl(struct gr_arg *arg)
+{
+	struct acl_role_label *r_tmp = NULL, **r_utmp, *r_utmp2;
+	struct acl_subject_label *subj_list;
+	struct sprole_pw *sptmp;
+	struct gr_hash_struct *ghash;
+	uid_t *domainlist;
+	unsigned int r_num;
+	int err = 0;
+	__u16 i;
+	__u32 num_subjs;
+
+	/* we need a default and kernel role */
+	if (arg->role_db.num_roles < 2)
+		return -EINVAL;
+
+	/* copy special role authentication info from userspace */
+
+	polstate->num_sprole_pws = arg->num_sprole_pws;
+	polstate->acl_special_roles = (struct sprole_pw **) acl_alloc_num(polstate->num_sprole_pws, sizeof(struct sprole_pw *));
+
+	if (!polstate->acl_special_roles && polstate->num_sprole_pws)
+		return -ENOMEM;
+
+	for (i = 0; i < polstate->num_sprole_pws; i++) {
+		sptmp = (struct sprole_pw *) acl_alloc(sizeof(struct sprole_pw));
+		if (!sptmp)
+			return -ENOMEM;
+		if (copy_sprole_pw(sptmp, i, arg->sprole_pws))
+			return -EFAULT;
+
+		err = alloc_and_copy_string((char **)&sptmp->rolename, GR_SPROLE_LEN);
+		if (err)
+			return err;
+
+#ifdef CONFIG_GRKERNSEC_RBAC_DEBUG
+		printk(KERN_ALERT "Copying special role %s\n", sptmp->rolename);
+#endif
+
+		polstate->acl_special_roles[i] = sptmp;
+	}
+
+	r_utmp = (struct acl_role_label **) arg->role_db.r_table;
+
+	for (r_num = 0; r_num < arg->role_db.num_roles; r_num++) {
+		r_tmp = acl_alloc(sizeof (struct acl_role_label));
+
+		if (!r_tmp)
+			return -ENOMEM;
+
+		if (copy_pointer_from_array(&r_utmp2, r_num, r_utmp))
+			return -EFAULT;
+
+		if (copy_acl_role_label(r_tmp, r_utmp2))
+			return -EFAULT;
+
+		err = alloc_and_copy_string(&r_tmp->rolename, GR_SPROLE_LEN);
+		if (err)
+			return err;
+
+		if (!strcmp(r_tmp->rolename, "default")
+		    && (r_tmp->roletype & GR_ROLE_DEFAULT)) {
+			polstate->default_role = r_tmp;
+		} else if (!strcmp(r_tmp->rolename, ":::kernel:::")) {
+			polstate->kernel_role = r_tmp;
+		}
+
+		if ((ghash = (struct gr_hash_struct *) acl_alloc(sizeof(struct gr_hash_struct))) == NULL)
+			return -ENOMEM;
+
+		if (copy_gr_hash_struct(ghash, r_tmp->hash))
+			return -EFAULT;
+
+		r_tmp->hash = ghash;
+
+		num_subjs = count_user_subjs(r_tmp->hash->first);
+
+		r_tmp->subj_hash_size = num_subjs;
+		r_tmp->subj_hash =
+		    (struct acl_subject_label **)
+		    create_table(&(r_tmp->subj_hash_size), sizeof(void *));
+
+		if (!r_tmp->subj_hash)
+			return -ENOMEM;
+
+		err = copy_user_allowedips(r_tmp);
+		if (err)
+			return err;
+
+		/* copy domain info */
+		if (r_tmp->domain_children != NULL) {
+			domainlist = acl_alloc_num(r_tmp->domain_child_num, sizeof(uid_t));
+			if (domainlist == NULL)
+				return -ENOMEM;
+
+			if (copy_from_user(domainlist, r_tmp->domain_children, r_tmp->domain_child_num * sizeof(uid_t)))
+				return -EFAULT;
+
+			r_tmp->domain_children = domainlist;
+		}
+
+		err = copy_user_transitions(r_tmp);
+		if (err)
+			return err;
+
+		memset(r_tmp->subj_hash, 0,
+		       r_tmp->subj_hash_size *
+		       sizeof (struct acl_subject_label *));
+
+		/* acquire the list of subjects, then NULL out
+		   the list prior to parsing the subjects for this role,
+		   as during this parsing the list is replaced with a list
+		   of *nested* subjects for the role
+		*/
+		subj_list = r_tmp->hash->first;
+
+		/* set nested subject list to null */
+		r_tmp->hash->first = NULL;
+
+		err = copy_user_subjs(subj_list, r_tmp);
+
+		if (err)
+			return err;
+
+		insert_acl_role_label(r_tmp);
+	}
+
+	if (polstate->default_role == NULL || polstate->kernel_role == NULL)
+		return -EINVAL;
+
+	return err;
+}
+
+static int gracl_reload_apply_policies(void *reload)
+{
+	struct gr_reload_state *reload_state = (struct gr_reload_state *)reload;
+	struct task_struct *task, *task2;
+	struct acl_role_label *role, *rtmp;
+	struct acl_subject_label *subj;
+	const struct cred *cred;
+	int role_applied;
+	int ret = 0;
+
+	memcpy(&reload_state->oldpolicy, reload_state->oldpolicy_ptr, sizeof(struct gr_policy_state));
+	memcpy(&reload_state->oldalloc, reload_state->oldalloc_ptr, sizeof(struct gr_alloc_state));
+
+	/* first make sure we'll be able to apply the new policy cleanly */
+	do_each_thread(task2, task) {
+		if (task->exec_file == NULL)
+			continue;
+		role_applied = 0;
+		if (!reload_state->oldmode && task->role->roletype & GR_ROLE_SPECIAL) {
+			/* preserve special roles */
+			FOR_EACH_ROLE_START(role)
+				if ((role->roletype & GR_ROLE_SPECIAL) && !strcmp(task->role->rolename, role->rolename)) {
+					rtmp = task->role;
+					task->role = role;
+					role_applied = 1;
+					break;
+				}
+			FOR_EACH_ROLE_END(role)
+		}
+		if (!role_applied) {
+			cred = __task_cred(task);
+			rtmp = task->role;
+			task->role = __lookup_acl_role_label(polstate, task, GR_GLOBAL_UID(cred->uid), GR_GLOBAL_GID(cred->gid));
+		}
+		/* this handles non-nested inherited subjects, nested subjects will still
+		   be dropped currently */
+		subj = __gr_get_subject_for_task(polstate, task, task->acl->filename, 1);
+		task->tmpacl = __gr_get_subject_for_task(polstate, task, NULL, 1);
+		/* change the role back so that we've made no modifications to the policy */
+		task->role = rtmp;
+
+		if (subj == NULL || task->tmpacl == NULL) {
+			ret = -EINVAL;
+			goto out;
+		}
+	} while_each_thread(task2, task);
+
+	/* now actually apply the policy */
+
+	do_each_thread(task2, task) {
+		if (task->exec_file) {
+			role_applied = 0;
+			if (!reload_state->oldmode && task->role->roletype & GR_ROLE_SPECIAL) {
+				/* preserve special roles */
+				FOR_EACH_ROLE_START(role)
+					if ((role->roletype & GR_ROLE_SPECIAL) && !strcmp(task->role->rolename, role->rolename)) {
+						task->role = role;
+						role_applied = 1;
+						break;
+					}
+				FOR_EACH_ROLE_END(role)
+			}
+			if (!role_applied) {
+				cred = __task_cred(task);
+				task->role = __lookup_acl_role_label(polstate, task, GR_GLOBAL_UID(cred->uid), GR_GLOBAL_GID(cred->gid));
+			}
+			/* this handles non-nested inherited subjects, nested subjects will still
+			   be dropped currently */
+			if (!reload_state->oldmode && task->inherited)
+				subj = __gr_get_subject_for_task(polstate, task, task->acl->filename, 1);
+			else {
+				/* looked up and tagged to the task previously */
+				subj = task->tmpacl;
+			}
+			/* subj will be non-null */
+			__gr_apply_subject_to_task(polstate, task, subj);
+			if (reload_state->oldmode) {
+				task->acl_role_id = 0;
+				task->acl_sp_role = 0;
+				task->inherited = 0;
+			}
+		} else {
+			// it's a kernel process
+			task->role = polstate->kernel_role;
+			task->acl = polstate->kernel_role->root_label;
+#ifdef CONFIG_GRKERNSEC_ACL_HIDEKERN
+			task->acl->mode &= ~GR_PROCFIND;
+#endif
+		}
+	} while_each_thread(task2, task);
+
+	memcpy(reload_state->oldpolicy_ptr, &reload_state->newpolicy, sizeof(struct gr_policy_state));
+	memcpy(reload_state->oldalloc_ptr, &reload_state->newalloc, sizeof(struct gr_alloc_state));
+
+out:
+
+	return ret;
+}
+
+static int gracl_reload(struct gr_arg *args, unsigned char oldmode)
+{
+	struct gr_reload_state new_reload_state = { };
+	int err;
+
+	new_reload_state.oldpolicy_ptr = polstate;
+	new_reload_state.oldalloc_ptr = current_alloc_state;
+	new_reload_state.oldmode = oldmode;
+
+	current_alloc_state = &new_reload_state.newalloc;
+	polstate = &new_reload_state.newpolicy;
+
+	/* everything relevant is now saved off, copy in the new policy */
+	if (init_variables(args, true)) {
+		gr_log_str(GR_DONT_AUDIT_GOOD, GR_INITF_ACL_MSG, GR_VERSION);
+		err = -ENOMEM;
+		goto error;
+	}
+
+	err = copy_user_acl(args);
+	free_init_variables();
+	if (err)
+		goto error;
+	/* the new policy is copied in, with the old policy available via saved_state
+	   first go through applying roles, making sure to preserve special roles
+	   then apply new subjects, making sure to preserve inherited and nested subjects,
+	   though currently only inherited subjects will be preserved
+	*/
+	err = stop_machine(gracl_reload_apply_policies, &new_reload_state, NULL);
+	if (err)
+		goto error;
+
+	/* we've now applied the new policy, so restore the old policy state to free it */
+	polstate = &new_reload_state.oldpolicy;
+	current_alloc_state = &new_reload_state.oldalloc;
+	free_variables(true);
+
+	/* oldpolicy/oldalloc_ptr point to the new policy/alloc states as they were copied
+	   to running_polstate/current_alloc_state inside stop_machine
+	*/
+	err = 0;
+	goto out;
+error:
+	/* on error of loading the new policy, we'll just keep the previous
+	   policy set around
+	*/
+	free_variables(true);
+
+	/* doesn't affect runtime, but maintains consistent state */
+out:
+	polstate = new_reload_state.oldpolicy_ptr;
+	current_alloc_state = new_reload_state.oldalloc_ptr;
+
+	return err;
+}
+
+static int
+gracl_init(struct gr_arg *args)
+{
+	int error = 0;
+
+	memcpy(gr_system_salt, args->salt, GR_SALT_LEN);
+	memcpy(gr_system_sum, args->sum, GR_SHA_LEN);
+
+	if (init_variables(args, false)) {
+		gr_log_str(GR_DONT_AUDIT_GOOD, GR_INITF_ACL_MSG, GR_VERSION);
+		error = -ENOMEM;
+		goto out;
+	}
+
+	error = copy_user_acl(args);
+	free_init_variables();
+	if (error)
+		goto out;
+
+	error = gr_set_acls(0);
+	if (error)
+		goto out;
+
+	gr_enable_rbac_system();
+
+	return 0;
+
+out:
+	free_variables(false);
+	return error;
+}
+
+static int
+lookup_special_role_auth(__u16 mode, const char *rolename, unsigned char **salt,
+			 unsigned char **sum)
+{
+	struct acl_role_label *r;
+	struct role_allowed_ip *ipp;
+	struct role_transition *trans;
+	unsigned int i;
+	int found = 0;
+	u32 curr_ip = current->signal->curr_ip;
+
+	current->signal->saved_ip = curr_ip;
+
+	/* check transition table */
+
+	for (trans = current->role->transitions; trans; trans = trans->next) {
+		if (!strcmp(rolename, trans->rolename)) {
+			found = 1;
+			break;
+		}
+	}
+
+	if (!found)
+		return 0;
+
+	/* handle special roles that do not require authentication
+	   and check ip */
+
+	FOR_EACH_ROLE_START(r)
+		if (!strcmp(rolename, r->rolename) &&
+		    (r->roletype & GR_ROLE_SPECIAL)) {
+			found = 0;
+			if (r->allowed_ips != NULL) {
+				for (ipp = r->allowed_ips; ipp; ipp = ipp->next) {
+					if ((ntohl(curr_ip) & ipp->netmask) ==
+					     (ntohl(ipp->addr) & ipp->netmask))
+						found = 1;
+				}
+			} else
+				found = 2;
+			if (!found)
+				return 0;
+
+			if (((mode == GR_SPROLE) && (r->roletype & GR_ROLE_NOPW)) ||
+			    ((mode == GR_SPROLEPAM) && (r->roletype & GR_ROLE_PAM))) {
+				*salt = NULL;
+				*sum = NULL;
+				return 1;
+			}
+		}
+	FOR_EACH_ROLE_END(r)
+
+	for (i = 0; i < polstate->num_sprole_pws; i++) {
+		if (!strcmp(rolename, (const char *)polstate->acl_special_roles[i]->rolename)) {
+			*salt = polstate->acl_special_roles[i]->salt;
+			*sum = polstate->acl_special_roles[i]->sum;
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
+int gr_check_secure_terminal(struct task_struct *task)
+{
+	struct task_struct *p, *p2, *p3;
+	struct files_struct *files;
+	struct fdtable *fdt;
+	struct file *our_file = NULL, *file;
+	struct inode *our_inode = NULL;
+	int i;
+
+	if (task->signal->tty == NULL)
+		return 1;
+
+	files = get_files_struct(task);
+	if (files != NULL) {
+		rcu_read_lock();
+		fdt = files_fdtable(files);
+		for (i=0; i < fdt->max_fds; i++) {
+			file = fcheck_files(files, i);
+			if (file && (our_file == NULL) && (file->private_data == task->signal->tty)) {
+				get_file(file);
+				our_file = file;
+			}
+		}
+		rcu_read_unlock();
+		put_files_struct(files);
+	}
+
+	if (our_file == NULL)
+		return 1;
+
+	our_inode = d_backing_inode(our_file->f_path.dentry);
+
+	read_lock(&tasklist_lock);
+	do_each_thread(p2, p) {
+		files = get_files_struct(p);
+		if (files == NULL ||
+		    (p->signal && p->signal->tty == task->signal->tty)) {
+			if (files != NULL)
+				put_files_struct(files);
+			continue;
+		}
+		rcu_read_lock();
+		fdt = files_fdtable(files);
+		for (i=0; i < fdt->max_fds; i++) {
+			struct inode *inode = NULL;
+			file = fcheck_files(files, i);
+			if (file)
+				inode = d_backing_inode(file->f_path.dentry);
+			if (inode && S_ISCHR(inode->i_mode) && inode->i_rdev == our_inode->i_rdev) {
+				p3 = task;
+				while (task_pid_nr(p3) > 0) {
+					if (p3 == p)
+						break;
+					p3 = p3->real_parent;
+				}
+				if (p3 == p)
+					break;
+				gr_log_ttysniff(GR_DONT_AUDIT_GOOD, GR_TTYSNIFF_ACL_MSG, p);
+				gr_handle_alertkill(p);
+				rcu_read_unlock();
+				put_files_struct(files);
+				read_unlock(&tasklist_lock);
+				fput(our_file);
+				return 0;
+			}
+		}
+		rcu_read_unlock();
+		put_files_struct(files);
+	} while_each_thread(p2, p);
+	read_unlock(&tasklist_lock);
+
+	fput(our_file);
+	return 1;
+}
+
+ssize_t
+write_grsec_handler(struct file *file, const char __user * buf, size_t count, loff_t *ppos)
+{
+	struct gr_arg_wrapper uwrap;
+	unsigned char *sprole_salt = NULL;
+	unsigned char *sprole_sum = NULL;
+	int error = 0;
+	int error2 = 0;
+	size_t req_count = 0;
+	unsigned char oldmode = 0;
+
+	mutex_lock(&gr_dev_mutex);
+
+	if (gr_acl_is_enabled() && !(current->acl->mode & GR_KERNELAUTH)) {
+		error = -EPERM;
+		goto out;
+	}
+
+#ifdef CONFIG_COMPAT
+	pax_open_kernel();
+	if (in_compat_syscall()) {
+		copy_gr_arg_wrapper = &copy_gr_arg_wrapper_compat;
+		copy_gr_arg = &copy_gr_arg_compat;
+		copy_acl_object_label = &copy_acl_object_label_compat;
+		copy_acl_subject_label = &copy_acl_subject_label_compat;
+		copy_acl_role_label = &copy_acl_role_label_compat;
+		copy_acl_ip_label = &copy_acl_ip_label_compat;
+		copy_role_allowed_ip = &copy_role_allowed_ip_compat;
+		copy_role_transition = &copy_role_transition_compat;
+		copy_sprole_pw = &copy_sprole_pw_compat;
+		copy_gr_hash_struct = &copy_gr_hash_struct_compat;
+		copy_pointer_from_array = &copy_pointer_from_array_compat;
+		get_gr_arg_wrapper_size = &get_gr_arg_wrapper_size_compat;
+	} else {
+		copy_gr_arg_wrapper = &copy_gr_arg_wrapper_normal;
+		copy_gr_arg = &copy_gr_arg_normal;
+		copy_acl_object_label = &copy_acl_object_label_normal;
+		copy_acl_subject_label = &copy_acl_subject_label_normal;
+		copy_acl_role_label = &copy_acl_role_label_normal;
+		copy_acl_ip_label = &copy_acl_ip_label_normal;
+		copy_role_allowed_ip = &copy_role_allowed_ip_normal;
+		copy_role_transition = &copy_role_transition_normal;
+		copy_sprole_pw = &copy_sprole_pw_normal;
+		copy_gr_hash_struct = &copy_gr_hash_struct_normal;
+		copy_pointer_from_array = &copy_pointer_from_array_normal;
+		get_gr_arg_wrapper_size = &get_gr_arg_wrapper_size_normal;
+	}
+	pax_close_kernel();
+#endif
+
+	req_count = get_gr_arg_wrapper_size();
+
+	if (count != req_count) {
+		gr_log_int_int(GR_DONT_AUDIT_GOOD, GR_DEV_ACL_MSG, (int)count, (int)req_count);
+		error = -EINVAL;
+		goto out;
+	}
+
+	
+	if (gr_auth_expires && time_after_eq(get_seconds(), gr_auth_expires)) {
+		gr_auth_expires = 0;
+		gr_auth_attempts = 0;
+	}
+
+	error = copy_gr_arg_wrapper(buf, &uwrap);
+	if (error)
+		goto out;
+
+	error = copy_gr_arg(uwrap.arg, gr_usermode);
+	if (error)
+		goto out;
+
+	if (gr_usermode->mode != GR_SPROLE && gr_usermode->mode != GR_SPROLEPAM &&
+	    gr_auth_attempts >= CONFIG_GRKERNSEC_ACL_MAXTRIES &&
+	    time_after(gr_auth_expires, get_seconds())) {
+		error = -EBUSY;
+		goto out;
+	}
+
+	/* if non-root trying to do anything other than use a special role,
+	   do not attempt authentication, do not count towards authentication
+	   locking
+	 */
+
+	if (gr_usermode->mode != GR_SPROLE && gr_usermode->mode != GR_STATUS &&
+	    gr_usermode->mode != GR_UNSPROLE && gr_usermode->mode != GR_SPROLEPAM &&
+	    gr_is_global_nonroot(current_uid())) {
+		error = -EPERM;
+		goto out;
+	}
+
+	/* ensure pw and special role name are null terminated */
+
+	gr_usermode->pw[GR_PW_LEN - 1] = '\0';
+	gr_usermode->sp_role[GR_SPROLE_LEN - 1] = '\0';
+
+	/* Okay. 
+	 * We have our enough of the argument structure..(we have yet
+	 * to copy_from_user the tables themselves) . Copy the tables
+	 * only if we need them, i.e. for loading operations. */
+
+	switch (gr_usermode->mode) {
+	case GR_STATUS:
+			if (gr_acl_is_enabled()) {
+				error = 1;
+				if (!gr_check_secure_terminal(current))
+					error = 3;
+			} else
+				error = 2;
+			goto out;
+	case GR_SHUTDOWN:
+		if (gr_acl_is_enabled() && !(chkpw(gr_usermode, gr_system_salt, gr_system_sum))) {
+			stop_machine(gr_rbac_disable, NULL, NULL);
+			free_variables(false);
+			memset(gr_usermode, 0, sizeof(struct gr_arg));
+			memset(gr_system_salt, 0, GR_SALT_LEN);
+			memset(gr_system_sum, 0, GR_SHA_LEN);
+			gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_SHUTS_ACL_MSG);
+		} else if (gr_acl_is_enabled()) {
+			gr_log_noargs(GR_DONT_AUDIT, GR_SHUTF_ACL_MSG);
+			error = -EPERM;
+		} else {
+			gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_SHUTI_ACL_MSG);
+			error = -EAGAIN;
+		}
+		break;
+	case GR_ENABLE:
+		if (!gr_acl_is_enabled() && !(error2 = gracl_init(gr_usermode)))
+			gr_log_str(GR_DONT_AUDIT_GOOD, GR_ENABLE_ACL_MSG, GR_VERSION);
+		else {
+			if (gr_acl_is_enabled())
+				error = -EAGAIN;
+			else
+				error = error2;
+			gr_log_str(GR_DONT_AUDIT, GR_ENABLEF_ACL_MSG, GR_VERSION);
+		}
+		break;
+	case GR_OLDRELOAD:
+		oldmode = 1;
+	case GR_RELOAD:
+		if (!gr_acl_is_enabled()) {
+			gr_log_str(GR_DONT_AUDIT_GOOD, GR_RELOADI_ACL_MSG, GR_VERSION);
+			error = -EAGAIN;
+		} else if (!(chkpw(gr_usermode, gr_system_salt, gr_system_sum))) {
+			error2 = gracl_reload(gr_usermode, oldmode);
+			if (!error2)
+				gr_log_str(GR_DONT_AUDIT_GOOD, GR_RELOAD_ACL_MSG, GR_VERSION);
+			else {
+				gr_log_str(GR_DONT_AUDIT, GR_RELOADF_ACL_MSG, GR_VERSION);
+				error = error2;
+			}
+		} else {
+			gr_log_str(GR_DONT_AUDIT, GR_RELOADF_ACL_MSG, GR_VERSION);
+			error = -EPERM;
+		}
+		break;
+	case GR_SEGVMOD:
+		if (unlikely(!gr_acl_is_enabled())) {
+			gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_SEGVMODI_ACL_MSG);
+			error = -EAGAIN;
+			break;
+		}
+
+		if (!(chkpw(gr_usermode, gr_system_salt, gr_system_sum))) {
+			gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_SEGVMODS_ACL_MSG);
+			if (gr_usermode->segv_device && gr_usermode->segv_inode) {
+				struct acl_subject_label *segvacl;
+				segvacl =
+				    lookup_acl_subj_label(gr_usermode->segv_inode,
+							  gr_usermode->segv_device,
+							  current->role);
+				if (segvacl) {
+					segvacl->crashes = 0;
+					segvacl->expires = 0;
+				}
+			} else
+				gr_find_and_remove_uid(gr_usermode->segv_uid);
+		} else {
+			gr_log_noargs(GR_DONT_AUDIT, GR_SEGVMODF_ACL_MSG);
+			error = -EPERM;
+		}
+		break;
+	case GR_SPROLE:
+	case GR_SPROLEPAM:
+		if (unlikely(!gr_acl_is_enabled())) {
+			gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_SPROLEI_ACL_MSG);
+			error = -EAGAIN;
+			break;
+		}
+
+		if (current->role->expires && time_after_eq(get_seconds(), current->role->expires)) {
+			current->role->expires = 0;
+			current->role->auth_attempts = 0;
+		}
+
+		if (current->role->auth_attempts >= CONFIG_GRKERNSEC_ACL_MAXTRIES &&
+		    time_after(current->role->expires, get_seconds())) {
+			error = -EBUSY;
+			goto out;
+		}
+
+		if (lookup_special_role_auth
+		    (gr_usermode->mode, (const char *)gr_usermode->sp_role, &sprole_salt, &sprole_sum)
+		    && ((!sprole_salt && !sprole_sum)
+			|| !(chkpw(gr_usermode, sprole_salt, sprole_sum)))) {
+			char *p = "";
+			assign_special_role((const char *)gr_usermode->sp_role);
+			read_lock(&tasklist_lock);
+			if (current->real_parent)
+				p = current->real_parent->role->rolename;
+			read_unlock(&tasklist_lock);
+			gr_log_str_int(GR_DONT_AUDIT_GOOD, GR_SPROLES_ACL_MSG,
+					p, acl_sp_role_value);
+		} else {
+			gr_log_str(GR_DONT_AUDIT, GR_SPROLEF_ACL_MSG, gr_usermode->sp_role);
+			error = -EPERM;
+			if(!(current->role->auth_attempts++))
+				current->role->expires = get_seconds() + CONFIG_GRKERNSEC_ACL_TIMEOUT;
+
+			goto out;
+		}
+		break;
+	case GR_UNSPROLE:
+		if (unlikely(!gr_acl_is_enabled())) {
+			gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_UNSPROLEI_ACL_MSG);
+			error = -EAGAIN;
+			break;
+		}
+
+		if (current->role->roletype & GR_ROLE_SPECIAL) {
+			char *p = "";
+			int i = 0;
+
+			read_lock(&tasklist_lock);
+			if (current->real_parent) {
+				p = current->real_parent->role->rolename;
+				i = current->real_parent->acl_role_id;
+			}
+			read_unlock(&tasklist_lock);
+
+			gr_log_str_int(GR_DONT_AUDIT_GOOD, GR_UNSPROLES_ACL_MSG, p, i);
+			gr_set_acls(1);
+		} else {
+			error = -EPERM;
+			goto out;
+		}
+		break;
+	default:
+		gr_log_int(GR_DONT_AUDIT, GR_INVMODE_ACL_MSG, gr_usermode->mode);
+		error = -EINVAL;
+		break;
+	}
+
+	if (error != -EPERM)
+		goto out;
+
+	if(!(gr_auth_attempts++))
+		gr_auth_expires = get_seconds() + CONFIG_GRKERNSEC_ACL_TIMEOUT;
+
+      out:
+	mutex_unlock(&gr_dev_mutex);
+
+	if (!error)
+		error = req_count;
+
+	return error;
+}
+
+int
+gr_set_acls(const int type)
+{
+	struct task_struct *task, *task2;
+	struct acl_role_label *role = current->role;
+	struct acl_subject_label *subj;
+	__u16 acl_role_id = current->acl_role_id;
+	const struct cred *cred;
+	int ret;
+
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+	read_lock(&grsec_exec_file_lock);
+	do_each_thread(task2, task) {
+		/* check to see if we're called from the exit handler,
+		   if so, only replace ACLs that have inherited the admin
+		   ACL */
+
+		if (type && (task->role != role ||
+			     task->acl_role_id != acl_role_id))
+			continue;
+
+		task->acl_role_id = 0;
+		task->acl_sp_role = 0;
+		task->inherited = 0;
+
+		if (task->exec_file) {
+			cred = __task_cred(task);
+			task->role = __lookup_acl_role_label(polstate, task, GR_GLOBAL_UID(cred->uid), GR_GLOBAL_GID(cred->gid));
+			subj = __gr_get_subject_for_task(polstate, task, NULL, 1);
+			if (subj == NULL) {
+				ret = -EINVAL;
+				read_unlock(&grsec_exec_file_lock);
+				read_unlock(&tasklist_lock);
+				rcu_read_unlock();
+				gr_log_str_int(GR_DONT_AUDIT_GOOD, GR_DEFACL_MSG, task->comm, task_pid_nr(task));
+				return ret;
+			}
+			__gr_apply_subject_to_task(polstate, task, subj);
+		} else {
+			// it's a kernel process
+			task->role = polstate->kernel_role;
+			task->acl = polstate->kernel_role->root_label;
+#ifdef CONFIG_GRKERNSEC_ACL_HIDEKERN
+			task->acl->mode &= ~GR_PROCFIND;
+#endif
+		}
+	} while_each_thread(task2, task);
+	read_unlock(&grsec_exec_file_lock);
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+
+	return 0;
+}
diff --git a/grsecurity/gracl_res.c b/grsecurity/gracl_res.c
new file mode 100644
index 000000000000..dfba8fd4ba9a
--- /dev/null
+++ b/grsecurity/gracl_res.c
@@ -0,0 +1,74 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/gracl.h>
+#include <linux/grinternal.h>
+
+static const char *restab_log[] = {
+	[RLIMIT_CPU] = "RLIMIT_CPU",
+	[RLIMIT_FSIZE] = "RLIMIT_FSIZE",
+	[RLIMIT_DATA] = "RLIMIT_DATA",
+	[RLIMIT_STACK] = "RLIMIT_STACK",
+	[RLIMIT_CORE] = "RLIMIT_CORE",
+	[RLIMIT_RSS] = "RLIMIT_RSS",
+	[RLIMIT_NPROC] = "RLIMIT_NPROC",
+	[RLIMIT_NOFILE] = "RLIMIT_NOFILE",
+	[RLIMIT_MEMLOCK] = "RLIMIT_MEMLOCK",
+	[RLIMIT_AS] = "RLIMIT_AS",
+	[RLIMIT_LOCKS] = "RLIMIT_LOCKS",
+	[RLIMIT_SIGPENDING] = "RLIMIT_SIGPENDING",
+	[RLIMIT_MSGQUEUE] = "RLIMIT_MSGQUEUE",
+	[RLIMIT_NICE] = "RLIMIT_NICE",
+	[RLIMIT_RTPRIO] = "RLIMIT_RTPRIO",
+	[RLIMIT_RTTIME] = "RLIMIT_RTTIME",
+	[GR_CRASH_RES] = "RLIMIT_CRASH"
+};
+
+void
+gr_log_resource(const struct task_struct *task,
+		const int res, const unsigned long wanted, const int gt)
+{
+	const struct cred *cred;
+	unsigned long rlim;
+
+	if (!gr_acl_is_enabled() && !grsec_resource_logging)
+		return;
+
+	// not yet supported resource
+	if (unlikely(!restab_log[res]))
+		return;
+
+	/*
+	 * not really security relevant, too much userland code shared
+	 * from pulseaudio that blindly attempts to violate limits in a loop,
+	 * resulting in log spam
+	 */
+	if (res == RLIMIT_NICE)
+		return;
+
+	if (res == RLIMIT_CPU || res == RLIMIT_RTTIME)
+		rlim = task_rlimit_max(task, res);
+	else
+		rlim = task_rlimit(task, res);
+
+	if (likely((rlim == RLIM_INFINITY) || (gt && wanted <= rlim) || (!gt && wanted < rlim)))
+		return;
+
+	rcu_read_lock();
+	cred = __task_cred(task);
+
+	if (res == RLIMIT_NPROC && 
+	    (cap_raised(cred->cap_effective, CAP_SYS_ADMIN) || 
+	     cap_raised(cred->cap_effective, CAP_SYS_RESOURCE)))
+		goto out_rcu_unlock;
+	else if (res == RLIMIT_MEMLOCK &&
+		 cap_raised(cred->cap_effective, CAP_IPC_LOCK))
+		goto out_rcu_unlock;
+	rcu_read_unlock();
+
+	gr_log_res_ulong2_str(GR_DONT_AUDIT, GR_RESOURCE_MSG, task, wanted, restab_log[res], rlim);
+
+	return;
+out_rcu_unlock:
+	rcu_read_unlock();
+	return;
+}
diff --git a/grsecurity/gracl_segv.c b/grsecurity/gracl_segv.c
new file mode 100644
index 000000000000..02c5a2bb9c15
--- /dev/null
+++ b/grsecurity/gracl_segv.c
@@ -0,0 +1,306 @@
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <asm/uaccess.h>
+#include <asm/errno.h>
+#include <asm/mman.h>
+#include <net/sock.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/net.h>
+#include <linux/in.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/timer.h>
+#include <linux/gracl.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+#if defined(CONFIG_BTRFS_FS) || defined(CONFIG_BTRFS_FS_MODULE)
+#include <linux/magic.h>
+#include <linux/pagemap.h>
+#include "../fs/btrfs/async-thread.h"
+#include "../fs/btrfs/ctree.h"
+#include "../fs/btrfs/btrfs_inode.h"
+#endif
+
+static struct crash_uid *uid_set;
+static unsigned short uid_used;
+static DEFINE_SPINLOCK(gr_uid_lock);
+extern rwlock_t gr_inode_lock;
+extern struct acl_subject_label *
+	lookup_acl_subj_label(const u64 inode, const dev_t dev,
+			      const struct acl_role_label *role);
+
+int
+gr_init_uidset(void)
+{
+	uid_set =
+	    kmalloc(GR_UIDTABLE_MAX * sizeof (struct crash_uid), GFP_KERNEL);
+	uid_used = 0;
+
+	return uid_set ? 1 : 0;
+}
+
+void
+gr_free_uidset(void)
+{
+	if (uid_set) {
+		struct crash_uid *tmpset;
+		spin_lock(&gr_uid_lock);
+		tmpset = uid_set;
+		uid_set = NULL;
+		uid_used = 0;
+		spin_unlock(&gr_uid_lock);
+		if (tmpset)
+			kfree(tmpset);
+	}
+
+	return;
+}
+
+int
+gr_find_uid(const uid_t uid)
+{
+	struct crash_uid *tmp = uid_set;
+	uid_t buid;
+	int low = 0, high = uid_used - 1, mid;
+
+	while (high >= low) {
+		mid = (low + high) >> 1;
+		buid = tmp[mid].uid;
+		if (buid == uid)
+			return mid;
+		if (buid > uid)
+			high = mid - 1;
+		if (buid < uid)
+			low = mid + 1;
+	}
+
+	return -1;
+}
+
+static void
+gr_insertsort(void)
+{
+	unsigned short i, j;
+	struct crash_uid index;
+
+	for (i = 1; i < uid_used; i++) {
+		index = uid_set[i];
+		j = i;
+		while ((j > 0) && uid_set[j - 1].uid > index.uid) {
+			uid_set[j] = uid_set[j - 1];
+			j--;
+		}
+		uid_set[j] = index;
+	}
+
+	return;
+}
+
+static void
+gr_insert_uid(const kuid_t kuid, const unsigned long expires)
+{
+	int loc;
+	uid_t uid = GR_GLOBAL_UID(kuid);
+
+	if (uid_used == GR_UIDTABLE_MAX)
+		return;
+
+	loc = gr_find_uid(uid);
+
+	if (loc >= 0) {
+		uid_set[loc].expires = expires;
+		return;
+	}
+
+	uid_set[uid_used].uid = uid;
+	uid_set[uid_used].expires = expires;
+	uid_used++;
+
+	gr_insertsort();
+
+	return;
+}
+
+void
+gr_remove_uid(const unsigned short loc)
+{
+	unsigned short i;
+
+	for (i = loc + 1; i < uid_used; i++)
+		uid_set[i - 1] = uid_set[i];
+
+	uid_used--;
+
+	return;
+}
+
+int gr_find_and_remove_uid(uid_t uid)
+{
+	int loc;
+
+	spin_lock(&gr_uid_lock);
+	loc = gr_find_uid(uid);
+	if (loc >= 0)
+		gr_remove_uid(loc);
+	spin_unlock(&gr_uid_lock);
+
+	return loc >= 0 ? 1 : 0;
+}
+
+int
+gr_check_crash_uid(const kuid_t kuid)
+{
+	int loc;
+	int ret = 0;
+	uid_t uid;
+
+	if (unlikely(!gr_acl_is_enabled()))
+		return 0;
+
+	uid = GR_GLOBAL_UID(kuid);
+
+	spin_lock(&gr_uid_lock);
+	loc = gr_find_uid(uid);
+
+	if (loc < 0)
+		goto out_unlock;
+
+	if (time_before_eq(uid_set[loc].expires, get_seconds()))
+		gr_remove_uid(loc);
+	else
+		ret = 1;
+
+out_unlock:
+	spin_unlock(&gr_uid_lock);
+	return ret;
+}
+
+extern int gr_fake_force_sig(int sig, struct task_struct *t);
+
+void
+gr_handle_crash(struct task_struct *task, const int sig)
+{
+	struct acl_subject_label *curr;
+	struct task_struct *tsk, *tsk2;
+	const struct cred *cred;
+	const struct cred *cred2;
+
+	if (sig != SIGSEGV && sig != SIGKILL && sig != SIGBUS && sig != SIGILL)
+		return;
+
+	if (unlikely(!gr_acl_is_enabled()))
+		return;
+
+	curr = task->acl;
+
+	if (!(curr->resmask & (1U << GR_CRASH_RES)))
+		return;
+
+	if (time_before_eq(curr->expires, get_seconds())) {
+		curr->expires = 0;
+		curr->crashes = 0;
+	}
+
+	curr->crashes++;
+
+	if (!curr->expires)
+		curr->expires = get_seconds() + curr->res[GR_CRASH_RES].rlim_max;
+
+	if ((curr->crashes >= curr->res[GR_CRASH_RES].rlim_cur) &&
+	    time_after(curr->expires, get_seconds())) {
+		int is_priv = is_privileged_binary(task->mm->exe_file->f_path.dentry);
+
+		rcu_read_lock();
+		cred = __task_cred(task);
+		if (gr_is_global_nonroot(cred->uid) && is_priv) {
+			gr_log_crash1(GR_DONT_AUDIT, GR_SEGVSTART_ACL_MSG, task, curr->res[GR_CRASH_RES].rlim_max);
+			spin_lock(&gr_uid_lock);
+			gr_insert_uid(cred->uid, curr->expires);
+			spin_unlock(&gr_uid_lock);
+			curr->expires = 0;
+			curr->crashes = 0;
+			read_lock(&tasklist_lock);
+			do_each_thread(tsk2, tsk) {
+				cred2 = __task_cred(tsk);
+				if (tsk != task && uid_eq(cred2->uid, cred->uid))
+					gr_fake_force_sig(SIGKILL, tsk);
+			} while_each_thread(tsk2, tsk);
+			read_unlock(&tasklist_lock);
+		} else {
+			gr_log_crash2(GR_DONT_AUDIT, GR_SEGVNOSUID_ACL_MSG, task, curr->res[GR_CRASH_RES].rlim_max);
+			read_lock(&tasklist_lock);
+			read_lock(&grsec_exec_file_lock);
+			do_each_thread(tsk2, tsk) {
+				if (likely(tsk != task)) {
+					// if this thread has the same subject as the one that triggered
+					// RES_CRASH and it's the same binary, kill it
+					if (tsk->acl == task->acl && gr_is_same_file(tsk->exec_file, task->exec_file))
+						gr_fake_force_sig(SIGKILL, tsk);
+				}
+			} while_each_thread(tsk2, tsk);
+			read_unlock(&grsec_exec_file_lock);
+			read_unlock(&tasklist_lock);
+		}
+		rcu_read_unlock();
+	}
+
+	return;
+}
+
+int
+gr_check_crash_exec(const struct file *filp)
+{
+	struct acl_subject_label *curr;
+	struct dentry *dentry;
+
+	if (unlikely(!gr_acl_is_enabled()))
+		return 0;
+
+	read_lock(&gr_inode_lock);
+	dentry = filp->f_path.dentry;
+	curr = lookup_acl_subj_label(gr_get_ino_from_dentry(dentry), gr_get_dev_from_dentry(dentry),
+				     current->role);
+	read_unlock(&gr_inode_lock);
+
+	if (!curr || !(curr->resmask & (1U << GR_CRASH_RES)) ||
+	    (!curr->crashes && !curr->expires))
+		return 0;
+
+	if ((curr->crashes >= curr->res[GR_CRASH_RES].rlim_cur) &&
+	    time_after(curr->expires, get_seconds()))
+		return 1;
+	else if (time_before_eq(curr->expires, get_seconds())) {
+		curr->crashes = 0;
+		curr->expires = 0;
+	}
+
+	return 0;
+}
+
+void
+gr_handle_alertkill(struct task_struct *task)
+{
+	struct acl_subject_label *curracl;
+	__u32 curr_ip;
+	struct task_struct *p, *p2;
+
+	if (unlikely(!gr_acl_is_enabled()))
+		return;
+
+	curracl = task->acl;
+	curr_ip = task->signal->curr_ip;
+
+	if ((curracl->mode & GR_KILLIPPROC) && curr_ip) {
+		read_lock(&tasklist_lock);
+		do_each_thread(p2, p) {
+			if (p->signal->curr_ip == curr_ip)
+				gr_fake_force_sig(SIGKILL, p);
+		} while_each_thread(p2, p);
+		read_unlock(&tasklist_lock);
+	} else if (curracl->mode & GR_KILLPROC)
+		gr_fake_force_sig(SIGKILL, task);
+
+	return;
+}
diff --git a/grsecurity/gracl_shm.c b/grsecurity/gracl_shm.c
new file mode 100644
index 000000000000..6b0c9cc644ff
--- /dev/null
+++ b/grsecurity/gracl_shm.c
@@ -0,0 +1,40 @@
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/ipc.h>
+#include <linux/gracl.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+int
+gr_handle_shmat(const pid_t shm_cprid, const pid_t shm_lapid,
+		const u64 shm_createtime, const kuid_t cuid, const int shmid)
+{
+	struct task_struct *task;
+
+	if (!gr_acl_is_enabled())
+		return 1;
+
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+
+	task = find_task_by_vpid(shm_cprid);
+
+	if (unlikely(!task))
+		task = find_task_by_vpid(shm_lapid);
+
+	if (unlikely(task && (time_before_eq64(task->start_time, shm_createtime) ||
+			      (task_pid_nr(task) == shm_lapid)) &&
+		     (task->acl->mode & GR_PROTSHM) &&
+		     (task->acl != current->acl))) {
+		read_unlock(&tasklist_lock);
+		rcu_read_unlock();
+		gr_log_int3(GR_DONT_AUDIT, GR_SHMAT_ACL_MSG, GR_GLOBAL_UID(cuid), shm_cprid, shmid);
+		return 0;
+	}
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+
+	return 1;
+}
diff --git a/grsecurity/grsec_chdir.c b/grsecurity/grsec_chdir.c
new file mode 100644
index 000000000000..bc0be01b02a0
--- /dev/null
+++ b/grsecurity/grsec_chdir.c
@@ -0,0 +1,19 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/fs.h>
+#include <linux/file.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+void
+gr_log_chdir(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+#ifdef CONFIG_GRKERNSEC_AUDIT_CHDIR
+	if ((grsec_enable_chdir && grsec_enable_group &&
+	     in_group_p(grsec_audit_gid)) || (grsec_enable_chdir &&
+					      !grsec_enable_group)) {
+		gr_log_fs_generic(GR_DO_AUDIT, GR_CHDIR_AUDIT_MSG, dentry, mnt);
+	}
+#endif
+	return;
+}
diff --git a/grsecurity/grsec_chroot.c b/grsecurity/grsec_chroot.c
new file mode 100644
index 000000000000..1964ab1c888e
--- /dev/null
+++ b/grsecurity/grsec_chroot.c
@@ -0,0 +1,506 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/mount.h>
+#include <linux/types.h>
+#include <linux/namei.h>
+#include "../fs/mount.h"
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+#ifdef CONFIG_GRKERNSEC_CHROOT_INITRD
+int gr_init_ran;
+#endif
+
+void gr_inc_chroot_refcnts(struct dentry *dentry, struct vfsmount *mnt)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+	struct dentry *tmpd = dentry;
+
+	read_seqlock_excl(&mount_lock);
+	write_seqlock(&rename_lock);
+
+	while (tmpd != mnt->mnt_root) {
+		atomic_inc(&tmpd->chroot_refcnt);
+		tmpd = tmpd->d_parent;
+	}
+	atomic_inc(&tmpd->chroot_refcnt);
+
+	write_sequnlock(&rename_lock);
+	read_sequnlock_excl(&mount_lock);
+#endif
+}
+
+void gr_dec_chroot_refcnts(struct dentry *dentry, struct vfsmount *mnt)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+	struct dentry *tmpd = dentry;
+
+	read_seqlock_excl(&mount_lock);
+	write_seqlock(&rename_lock);
+
+	while (tmpd != mnt->mnt_root) {
+		atomic_dec(&tmpd->chroot_refcnt);
+		tmpd = tmpd->d_parent;
+	}
+	atomic_dec(&tmpd->chroot_refcnt);
+
+	write_sequnlock(&rename_lock);
+	read_sequnlock_excl(&mount_lock);
+#endif
+}
+
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+static struct dentry *get_closest_chroot(struct dentry *dentry)
+{
+	write_seqlock(&rename_lock);
+	do {
+		if (atomic_read(&dentry->chroot_refcnt)) {
+			write_sequnlock(&rename_lock);
+			return dentry;
+		}
+		dentry = dentry->d_parent;
+	} while (!IS_ROOT(dentry));
+	write_sequnlock(&rename_lock);
+	return NULL;
+}
+#endif
+
+int gr_bad_chroot_rename(struct dentry *olddentry, struct vfsmount *oldmnt,
+			 struct dentry *newdentry, struct vfsmount *newmnt)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+	struct dentry *chroot;
+
+	if (unlikely(!grsec_enable_chroot_rename))
+		return 0;
+
+	if (likely(!proc_is_chrooted(current) && gr_is_global_root(current_uid())))
+		return 0;
+
+	chroot = get_closest_chroot(olddentry);
+
+	if (chroot == NULL)
+		return 0;
+
+	if (is_subdir(newdentry, chroot))
+		return 0;
+
+	gr_log_fs_generic(GR_DONT_AUDIT, GR_CHROOT_RENAME_MSG, olddentry, oldmnt);
+
+	return 1;
+#else
+	return 0;
+#endif
+}
+
+void gr_set_chroot_entries(struct task_struct *task, const struct path *path)
+{
+#ifdef CONFIG_GRKERNSEC
+	if (task_pid_nr(task) > 1 && path->dentry != init_task.fs->root.dentry &&
+	    		     path->dentry != task->nsproxy->mnt_ns->root->mnt.mnt_root
+#ifdef CONFIG_GRKERNSEC_CHROOT_INITRD
+			     && gr_init_ran
+#endif
+	   )
+		task->gr_is_chrooted = 1;
+	else {
+#ifdef CONFIG_GRKERNSEC_CHROOT_INITRD
+		if (task_pid_nr(task) == 1 && !gr_init_ran)
+			gr_init_ran = 1;
+#endif
+		task->gr_is_chrooted = 0;
+	}
+
+	task->gr_chroot_dentry = path->dentry;
+#endif
+	return;
+}
+
+void gr_clear_chroot_entries(struct task_struct *task)
+{
+#ifdef CONFIG_GRKERNSEC
+	task->gr_is_chrooted = 0;
+	task->gr_chroot_dentry = NULL;
+#endif
+	return;
+}	
+
+int
+gr_handle_chroot_unix(const pid_t pid)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_UNIX
+	struct task_struct *p;
+
+	if (unlikely(!grsec_enable_chroot_unix))
+		return 1;
+
+	if (likely(!proc_is_chrooted(current)))
+		return 1;
+
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+	p = find_task_by_vpid_unrestricted(pid);
+	if (unlikely(p && !have_same_root(current, p))) {
+		read_unlock(&tasklist_lock);
+		rcu_read_unlock();
+		gr_log_noargs(GR_DONT_AUDIT, GR_UNIX_CHROOT_MSG);
+		return 0;
+	}
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+#endif
+	return 1;
+}
+
+int
+gr_handle_chroot_nice(void)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_NICE
+	if (grsec_enable_chroot_nice && proc_is_chrooted(current)) {
+		gr_log_noargs(GR_DONT_AUDIT, GR_NICE_CHROOT_MSG);
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_chroot_setpriority(struct task_struct *p, const int niceval)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_NICE
+	if (grsec_enable_chroot_nice && (niceval < task_nice(p))
+			&& proc_is_chrooted(current)) {
+		gr_log_str_int(GR_DONT_AUDIT, GR_PRIORITY_CHROOT_MSG, p->comm, task_pid_nr(p));
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_chroot_fowner(struct pid *pid, enum pid_type type)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_FINDTASK
+	struct task_struct *p;
+	int ret = 0;
+	if (!grsec_enable_chroot_findtask || !proc_is_chrooted(current) || !pid)
+		return ret;
+
+	read_lock(&tasklist_lock);
+	do_each_pid_task(pid, type, p) {
+		if (!have_same_root(current, p)) {
+			ret = 1;
+			goto out;
+		}
+	} while_each_pid_task(pid, type, p);
+out:
+	read_unlock(&tasklist_lock);
+	return ret;
+#endif
+	return 0;
+}
+
+int
+gr_pid_is_chrooted(struct task_struct *p)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_FINDTASK
+	if (!grsec_enable_chroot_findtask || !proc_is_chrooted(current) || p == NULL)
+		return 0;
+
+	if ((p->exit_state & (EXIT_ZOMBIE | EXIT_DEAD)) ||
+	    !have_same_root(current, p)) {
+		return 1;
+	}
+#endif
+	return 0;
+}
+
+EXPORT_SYMBOL_GPL(gr_pid_is_chrooted);
+
+#if defined(CONFIG_GRKERNSEC_CHROOT_DOUBLE) || defined(CONFIG_GRKERNSEC_CHROOT_FCHDIR)
+int gr_is_outside_chroot(const struct dentry *u_dentry, const struct vfsmount *u_mnt)
+{
+	struct path path, currentroot;
+	int ret = 0;
+
+	path.dentry = (struct dentry *)u_dentry;
+	path.mnt = (struct vfsmount *)u_mnt;
+	get_fs_root(current->fs, &currentroot);
+	if (path_is_under(&path, &currentroot))
+		ret = 1;
+	path_put(&currentroot);
+
+	return ret;
+}
+#endif
+
+int
+gr_chroot_fchdir(struct dentry *u_dentry, struct vfsmount *u_mnt)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_FCHDIR
+	if (!grsec_enable_chroot_fchdir)
+		return 1;
+
+	if (!proc_is_chrooted(current))
+		return 1;
+	else if (!gr_is_outside_chroot(u_dentry, u_mnt)) {
+		gr_log_fs_generic(GR_DONT_AUDIT, GR_CHROOT_FCHDIR_MSG, u_dentry, u_mnt);
+		return 0;
+	}
+#endif
+	return 1;
+}
+
+int
+gr_chroot_pathat(int dfd, struct dentry *u_dentry, struct vfsmount *u_mnt, unsigned flags)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_FCHDIR
+	struct fd f;
+	struct path fd_path;
+	struct path file_path;
+
+	if (!grsec_enable_chroot_fchdir)
+		return 0;
+
+	if (!proc_is_chrooted(current) || dfd == -1 || dfd == AT_FDCWD)
+		return 0;
+
+	if (flags & LOOKUP_RCU)
+		return -ECHILD;
+
+	f = fdget_raw(dfd);
+	if (!f.file)
+		return 0;
+
+	fd_path = f.file->f_path;
+	path_get(&fd_path);
+	fdput(f);
+
+	file_path.dentry = u_dentry;
+	file_path.mnt = u_mnt;
+
+	if (!gr_is_outside_chroot(u_dentry, u_mnt) && !path_is_under(&file_path, &fd_path)) {
+		path_put(&fd_path);
+		gr_log_fs_generic(GR_DONT_AUDIT, GR_CHROOT_PATHAT_MSG, u_dentry, u_mnt);
+		return -ENOENT;
+	}
+	path_put(&fd_path);
+#endif
+	return 0;
+}
+
+int
+gr_chroot_fhandle(void)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_FCHDIR
+	if (!grsec_enable_chroot_fchdir)
+		return 1;
+
+	if (!proc_is_chrooted(current))
+		return 1;
+	else {
+		gr_log_noargs(GR_DONT_AUDIT, GR_CHROOT_FHANDLE_MSG);
+		return 0;
+	}
+#endif
+	return 1;
+}
+
+int
+gr_chroot_shmat(const pid_t shm_cprid, const pid_t shm_lapid,
+		const u64 shm_createtime)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_SHMAT
+	struct task_struct *p;
+
+	if (unlikely(!grsec_enable_chroot_shmat))
+		return 1;
+
+	if (likely(!proc_is_chrooted(current)))
+		return 1;
+
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+
+	if ((p = find_task_by_vpid_unrestricted(shm_cprid))) {
+		if (time_before_eq64(p->start_time, shm_createtime)) {
+			if (have_same_root(current, p)) {
+				goto allow;
+			} else {
+				read_unlock(&tasklist_lock);
+				rcu_read_unlock();
+				gr_log_noargs(GR_DONT_AUDIT, GR_SHMAT_CHROOT_MSG);
+				return 0;
+			}
+		}
+		/* creator exited, pid reuse, fall through to next check */
+	}
+	if ((p = find_task_by_vpid_unrestricted(shm_lapid))) {
+		if (unlikely(!have_same_root(current, p))) {
+			read_unlock(&tasklist_lock);
+			rcu_read_unlock();
+			gr_log_noargs(GR_DONT_AUDIT, GR_SHMAT_CHROOT_MSG);
+			return 0;
+		}
+	}
+
+allow:
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+#endif
+	return 1;
+}
+
+void
+gr_log_chroot_exec(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_EXECLOG
+	if (grsec_enable_chroot_execlog && proc_is_chrooted(current))
+		gr_log_fs_generic(GR_DO_AUDIT, GR_EXEC_CHROOT_MSG, dentry, mnt);
+#endif
+	return;
+}
+
+int
+gr_handle_chroot_mknod(const struct dentry *dentry,
+		       const struct vfsmount *mnt, const int mode)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_MKNOD
+	if (grsec_enable_chroot_mknod && !S_ISFIFO(mode) && !S_ISREG(mode) && 
+	    proc_is_chrooted(current)) {
+		gr_log_fs_generic(GR_DONT_AUDIT, GR_MKNOD_CHROOT_MSG, dentry, mnt);
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_chroot_mount(const struct dentry *dentry,
+		       const struct vfsmount *mnt, const char *dev_name)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_MOUNT
+	if (grsec_enable_chroot_mount && proc_is_chrooted(current)) {
+		gr_log_str_fs(GR_DONT_AUDIT, GR_MOUNT_CHROOT_MSG, dev_name ? dev_name : "none", dentry, mnt);
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_chroot_pivot(void)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_PIVOT
+	if (grsec_enable_chroot_pivot && proc_is_chrooted(current)) {
+		gr_log_noargs(GR_DONT_AUDIT, GR_PIVOT_CHROOT_MSG);
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_chroot_chroot(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_DOUBLE
+	if (grsec_enable_chroot_double && proc_is_chrooted(current) &&
+	    !gr_is_outside_chroot(dentry, mnt)) {
+		gr_log_fs_generic(GR_DONT_AUDIT, GR_CHROOT_CHROOT_MSG, dentry, mnt);
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
+
+extern const char *captab_log[];
+extern int captab_log_entries;
+
+int
+gr_task_chroot_is_capable(const struct task_struct *task, const struct cred *cred, const int cap)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_CAPS
+	if (grsec_enable_chroot_caps && proc_is_chrooted(task)) {
+		kernel_cap_t chroot_caps = GR_CHROOT_CAPS;
+		if (cap_raised(chroot_caps, cap)) {
+			if (cap_raised(cred->cap_effective, cap) && cap < captab_log_entries) {
+				gr_log_cap(GR_DONT_AUDIT, GR_CAP_CHROOT_MSG, task, captab_log[cap]);
+			}
+			return 0;
+		}
+	}
+#endif
+	return 1;
+}
+
+int
+gr_chroot_is_capable(const int cap)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_CAPS
+	return gr_task_chroot_is_capable(current, current_cred(), cap);
+#endif
+	return 1;
+}
+
+int
+gr_task_chroot_is_capable_nolog(const struct task_struct *task, const int cap)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_CAPS
+	if (grsec_enable_chroot_caps && proc_is_chrooted(task)) {
+		kernel_cap_t chroot_caps = GR_CHROOT_CAPS;
+		if (cap_raised(chroot_caps, cap)) {
+			return 0;
+		}
+	}
+#endif
+	return 1;
+}
+
+int
+gr_chroot_is_capable_nolog(const int cap)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_CAPS
+	return gr_task_chroot_is_capable_nolog(current, cap);
+#endif
+	return 1;
+}
+
+int
+gr_handle_chroot_sysctl(const int op)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_SYSCTL
+	if (grsec_enable_chroot_sysctl && (op & MAY_WRITE) &&
+	    proc_is_chrooted(current))
+		return -EACCES;
+#endif
+	return 0;
+}
+
+void
+gr_handle_chroot_chdir(const struct path *path)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_CHDIR
+	if (grsec_enable_chroot_chdir)
+		set_fs_pwd(current->fs, path);
+#endif
+	return;
+}
+
+int
+gr_handle_chroot_chmod(const struct dentry *dentry,
+		       const struct vfsmount *mnt, const int mode)
+{
+#ifdef CONFIG_GRKERNSEC_CHROOT_CHMOD
+	/* allow chmod +s on directories, but not files */
+	if (grsec_enable_chroot_chmod && !d_is_dir(dentry) &&
+	    ((mode & S_ISUID) || ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP))) &&
+	    proc_is_chrooted(current)) {
+		gr_log_fs_generic(GR_DONT_AUDIT, GR_CHMOD_CHROOT_MSG, dentry, mnt);
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_disabled.c b/grsecurity/grsec_disabled.c
new file mode 100644
index 000000000000..ba8d9971ed37
--- /dev/null
+++ b/grsecurity/grsec_disabled.c
@@ -0,0 +1,445 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/kdev_t.h>
+#include <linux/net.h>
+#include <linux/in.h>
+#include <linux/ip.h>
+#include <linux/skbuff.h>
+#include <linux/sysctl.h>
+
+#ifdef CONFIG_PAX_HAVE_ACL_FLAGS
+void
+pax_set_initial_flags(struct linux_binprm *bprm)
+{
+	return;
+}
+#endif
+
+#ifdef CONFIG_SYSCTL
+__u32
+gr_handle_sysctl(const struct ctl_table * table, const int op)
+{
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_TASKSTATS
+int gr_is_taskstats_denied(int pid)
+{
+	return 0;
+}
+#endif
+
+int
+gr_acl_is_enabled(void)
+{
+	return 0;
+}
+
+int
+gr_learn_cap(const struct task_struct *task, const struct cred *cred, const int cap, bool log)
+{
+	return 0;
+}
+
+void
+gr_handle_proc_create(const struct dentry *dentry, const struct inode *inode) 
+{
+	return;
+}
+
+int
+gr_handle_rawio(const struct inode *inode)
+{
+	return 0;
+}
+
+void
+gr_acl_handle_psacct(struct task_struct *task, const long code)
+{
+	return;
+}
+
+int
+gr_handle_ptrace(struct task_struct *task, const long request)
+{
+	return 0;
+}
+
+int
+gr_handle_proc_ptrace(struct task_struct *task)
+{
+	return 0;
+}
+
+int
+gr_set_acls(const int type)
+{
+	return 0;
+}
+
+int
+gr_check_hidden_task(const struct task_struct *tsk)
+{
+	return 0;
+}
+
+int
+gr_check_protected_task(const struct task_struct *task)
+{
+	return 0;
+}
+
+int
+gr_check_protected_task_fowner(struct pid *pid, enum pid_type type)
+{
+	return 0;
+}
+
+void
+gr_copy_label(struct task_struct *tsk)
+{
+	return;
+}
+
+void
+gr_set_pax_flags(struct task_struct *task)
+{
+	return;
+}
+
+int
+gr_set_proc_label(const struct dentry *dentry, const struct vfsmount *mnt,
+		  const int unsafe_share)
+{
+	return 0;
+}
+
+void
+gr_handle_delete(const u64 ino, const dev_t dev)
+{
+	return;
+}
+
+void
+gr_handle_create(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+	return;
+}
+
+void
+gr_handle_crash(struct task_struct *task, const int sig)
+{
+	return;
+}
+
+int
+gr_check_crash_exec(const struct file *filp)
+{
+	return 0;
+}
+
+int
+gr_check_crash_uid(const kuid_t uid)
+{
+	return 0;
+}
+
+void
+gr_handle_rename(struct inode *old_dir, struct inode *new_dir,
+		 struct dentry *old_dentry,
+		 struct dentry *new_dentry,
+		 struct vfsmount *mnt, const __u8 replace, unsigned int flags)
+{
+	return;
+}
+
+int
+gr_search_socket(const int family, const int type, const int protocol)
+{
+	return 1;
+}
+
+int
+gr_search_connectbind(const int mode, const struct socket *sock,
+		      const struct sockaddr_in *addr)
+{
+	return 0;
+}
+
+void
+gr_handle_alertkill(struct task_struct *task)
+{
+	return;
+}
+
+__u32
+gr_acl_handle_execve(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_hidden_file(const struct dentry * dentry,
+			  const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_open(const struct dentry * dentry, const struct vfsmount * mnt,
+		   int acc_mode)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_rmdir(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_unlink(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+int
+gr_acl_handle_mmap(const struct file *file, const unsigned long prot,
+		   unsigned int *vm_flags)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_truncate(const struct dentry * dentry,
+		       const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_utime(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_access(const struct dentry * dentry,
+		     const struct vfsmount * mnt, const int fmode)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_chmod(const struct dentry * dentry, const struct vfsmount * mnt,
+		    umode_t *mode)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_chown(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_setxattr(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_removexattr(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+void
+grsecurity_init(void)
+{
+	return;
+}
+
+umode_t gr_acl_umask(void)
+{
+	return 0;
+}
+
+__u32
+gr_acl_handle_mknod(const struct dentry * new_dentry,
+		    const struct dentry * parent_dentry,
+		    const struct vfsmount * parent_mnt,
+		    const int mode)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_mkdir(const struct dentry * new_dentry,
+		    const struct dentry * parent_dentry,
+		    const struct vfsmount * parent_mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_symlink(const struct dentry * new_dentry,
+		      const struct dentry * parent_dentry,
+		      const struct vfsmount * parent_mnt, const struct filename *from)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_link(const struct dentry * new_dentry,
+		   const struct dentry * parent_dentry,
+		   const struct vfsmount * parent_mnt,
+		   const struct dentry * old_dentry,
+		   const struct vfsmount * old_mnt, const struct filename *to)
+{
+	return 1;
+}
+
+int
+gr_acl_handle_rename(const struct dentry *new_dentry,
+		     const struct dentry *parent_dentry,
+		     const struct vfsmount *parent_mnt,
+		     const struct dentry *old_dentry,
+		     const struct inode *old_parent_inode,
+		     const struct vfsmount *old_mnt, const struct filename *newname,
+		     unsigned int flags)
+{
+	return 0;
+}
+
+int
+gr_acl_handle_filldir(const struct file *file, const char *name,
+		      const int namelen, const u64 ino)
+{
+	return 1;
+}
+
+int
+gr_handle_shmat(const pid_t shm_cprid, const pid_t shm_lapid,
+		const u64 shm_createtime, const kuid_t cuid, const int shmid)
+{
+	return 1;
+}
+
+int
+gr_search_bind(const struct socket *sock, const struct sockaddr_in *addr)
+{
+	return 0;
+}
+
+int
+gr_search_accept(const struct socket *sock)
+{
+	return 0;
+}
+
+int
+gr_search_listen(const struct socket *sock)
+{
+	return 0;
+}
+
+int
+gr_search_connect(const struct socket *sock, const struct sockaddr_in *addr)
+{
+	return 0;
+}
+
+__u32
+gr_acl_handle_unix(const struct dentry * dentry, const struct vfsmount * mnt)
+{
+	return 1;
+}
+
+__u32
+gr_acl_handle_creat(const struct dentry * dentry,
+		    const struct dentry * p_dentry,
+		    const struct vfsmount * p_mnt, int open_flags, int acc_mode,
+		    const int imode)
+{
+	return 1;
+}
+
+void
+gr_acl_handle_exit(void)
+{
+	return;
+}
+
+int
+gr_acl_handle_mprotect(const struct file *file, const unsigned long prot)
+{
+	return 1;
+}
+
+void
+gr_set_role_label(const kuid_t uid, const kgid_t gid)
+{
+	return;
+}
+
+int
+gr_acl_handle_procpidmem(const struct task_struct *task)
+{
+	return 0;
+}
+
+int
+gr_search_udp_recvmsg(struct sock *sk, const struct sk_buff *skb)
+{
+	return 0;
+}
+
+int
+gr_search_udp_sendmsg(struct sock *sk, struct sockaddr_in *addr)
+{
+	return 0;
+}
+
+int
+gr_check_user_change(kuid_t real, kuid_t effective, kuid_t fs)
+{
+	return 0;
+}
+
+int
+gr_check_group_change(kgid_t real, kgid_t effective, kgid_t fs)
+{
+	return 0;
+}
+
+int gr_acl_enable_at_secure(void)
+{
+	return 0;
+}
+
+dev_t gr_get_dev_from_dentry(struct dentry *dentry)
+{
+	return d_backing_inode(dentry)->i_sb->s_dev;
+}
+
+u64 gr_get_ino_from_dentry(struct dentry *dentry)
+{
+	return d_backing_inode(dentry)->i_ino;
+}
+
+void gr_put_exec_file(struct task_struct *task)
+{
+	return;
+}
+
+#ifdef CONFIG_SECURITY
+EXPORT_SYMBOL_GPL(gr_check_user_change);
+EXPORT_SYMBOL_GPL(gr_check_group_change);
+#endif
diff --git a/grsecurity/grsec_exec.c b/grsecurity/grsec_exec.c
new file mode 100644
index 000000000000..808006ec242c
--- /dev/null
+++ b/grsecurity/grsec_exec.c
@@ -0,0 +1,188 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/binfmts.h>
+#include <linux/fs.h>
+#include <linux/types.h>
+#include <linux/grdefs.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+#include <linux/capability.h>
+#include <linux/module.h>
+#include <linux/compat.h>
+
+#include <asm/uaccess.h>
+
+#ifdef CONFIG_GRKERNSEC_EXECLOG
+static char gr_exec_arg_buf[132];
+static DEFINE_MUTEX(gr_exec_arg_mutex);
+#endif
+
+struct user_arg_ptr {
+#ifdef CONFIG_COMPAT
+	bool is_compat;
+#endif
+	union {
+		const char __user *const __user *native;
+#ifdef CONFIG_COMPAT
+		const compat_uptr_t __user *compat;
+#endif
+	} ptr;
+};
+
+extern const char __user *get_user_arg_ptr(struct user_arg_ptr argv, int nr);
+
+void
+gr_handle_exec_args(struct linux_binprm *bprm, struct user_arg_ptr argv)
+{
+#ifdef CONFIG_GRKERNSEC_EXECLOG
+	char *grarg = gr_exec_arg_buf;
+	unsigned int i, x, execlen = 0;
+	char c;
+
+	if (!((grsec_enable_execlog && grsec_enable_group &&
+	       in_group_p(grsec_audit_gid))
+	      || (grsec_enable_execlog && !grsec_enable_group)))
+		return;
+
+	mutex_lock(&gr_exec_arg_mutex);
+	memset(grarg, 0, sizeof(gr_exec_arg_buf));
+
+	for (i = 0; i < bprm->argc && execlen < 128; i++) {
+		const char __user *p;
+		unsigned int len;
+
+		p = get_user_arg_ptr(argv, i);
+		if (IS_ERR(p))
+			goto log;
+
+		len = strnlen_user(p, 128 - execlen);
+		if (len > 128 - execlen)
+			len = 128 - execlen;
+		else if (len > 0)
+			len--;
+		if (copy_from_user(grarg + execlen, p, len))
+			goto log;
+
+		/* rewrite unprintable characters */
+		for (x = 0; x < len; x++) {
+			c = *(grarg + execlen + x);
+			if (c < 32 || c > 126)
+				*(grarg + execlen + x) = ' ';
+		}
+
+		execlen += len;
+		*(grarg + execlen) = ' ';
+		*(grarg + execlen + 1) = '\0';
+		execlen++;
+	}
+
+      log:
+	gr_log_fs_str(GR_DO_AUDIT, GR_EXEC_AUDIT_MSG, bprm->file->f_path.dentry,
+			bprm->file->f_path.mnt, grarg);
+	mutex_unlock(&gr_exec_arg_mutex);
+#endif
+	return;
+}
+
+#ifdef CONFIG_GRKERNSEC
+extern int gr_acl_is_capable(const int cap);
+extern int gr_acl_is_capable_nolog(const int cap);
+extern int gr_task_acl_is_capable(const struct task_struct *task, const struct cred *cred, const int cap, bool log);
+extern int gr_chroot_is_capable(const int cap);
+extern int gr_chroot_is_capable_nolog(const int cap);
+extern int gr_task_chroot_is_capable(const struct task_struct *task, const struct cred *cred, const int cap);
+extern int gr_task_chroot_is_capable_nolog(const struct task_struct *task, const int cap);
+#endif
+
+const char *captab_log[] = {
+	"CAP_CHOWN",
+	"CAP_DAC_OVERRIDE",
+	"CAP_DAC_READ_SEARCH",
+	"CAP_FOWNER",
+	"CAP_FSETID",
+	"CAP_KILL",
+	"CAP_SETGID",
+	"CAP_SETUID",
+	"CAP_SETPCAP",
+	"CAP_LINUX_IMMUTABLE",
+	"CAP_NET_BIND_SERVICE",
+	"CAP_NET_BROADCAST",
+	"CAP_NET_ADMIN",
+	"CAP_NET_RAW",
+	"CAP_IPC_LOCK",
+	"CAP_IPC_OWNER",
+	"CAP_SYS_MODULE",
+	"CAP_SYS_RAWIO",
+	"CAP_SYS_CHROOT",
+	"CAP_SYS_PTRACE",
+	"CAP_SYS_PACCT",
+	"CAP_SYS_ADMIN",
+	"CAP_SYS_BOOT",
+	"CAP_SYS_NICE",
+	"CAP_SYS_RESOURCE",
+	"CAP_SYS_TIME",
+	"CAP_SYS_TTY_CONFIG",
+	"CAP_MKNOD",
+	"CAP_LEASE",
+	"CAP_AUDIT_WRITE",
+	"CAP_AUDIT_CONTROL",
+	"CAP_SETFCAP",
+	"CAP_MAC_OVERRIDE",
+	"CAP_MAC_ADMIN",
+	"CAP_SYSLOG",
+	"CAP_WAKE_ALARM",
+	"CAP_BLOCK_SUSPEND",
+	"CAP_AUDIT_READ"
+};
+
+int captab_log_entries = sizeof(captab_log)/sizeof(captab_log[0]);
+
+int gr_is_capable(const int cap)
+{
+#ifdef CONFIG_GRKERNSEC
+	if (gr_acl_is_capable(cap) && gr_chroot_is_capable(cap))
+		return 1;
+	return 0;
+#else
+	return 1;
+#endif
+}
+
+int gr_task_is_capable(const struct task_struct *task, const struct cred *cred, const int cap)
+{
+#ifdef CONFIG_GRKERNSEC
+	if (gr_task_acl_is_capable(task, cred, cap, true) && gr_task_chroot_is_capable(task, cred, cap))
+		return 1;
+	return 0;
+#else
+	return 1;
+#endif
+}
+
+int gr_is_capable_nolog(const int cap)
+{
+#ifdef CONFIG_GRKERNSEC
+	if (gr_acl_is_capable_nolog(cap) && gr_chroot_is_capable_nolog(cap))
+		return 1;
+	return 0;
+#else
+	return 1;
+#endif
+}
+
+int gr_task_is_capable_nolog(const struct task_struct *task, const struct cred *cred, const int cap)
+{
+#ifdef CONFIG_GRKERNSEC
+	if (gr_task_acl_is_capable(task, cred, cap, false) && gr_task_chroot_is_capable_nolog(task, cap))
+		return 1;
+	return 0;
+#else
+	return 1;
+#endif
+}
+
+EXPORT_SYMBOL_GPL(gr_is_capable);
+EXPORT_SYMBOL_GPL(gr_is_capable_nolog);
+EXPORT_SYMBOL_GPL(gr_task_is_capable);
+EXPORT_SYMBOL_GPL(gr_task_is_capable_nolog);
diff --git a/grsecurity/grsec_fifo.c b/grsecurity/grsec_fifo.c
new file mode 100644
index 000000000000..cdec49b4f5da
--- /dev/null
+++ b/grsecurity/grsec_fifo.c
@@ -0,0 +1,26 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/fs.h>
+#include <linux/file.h>
+#include <linux/grinternal.h>
+
+int
+gr_handle_fifo(const struct dentry *dentry, const struct vfsmount *mnt,
+	       const struct dentry *dir, const int flag, const int acc_mode)
+{
+#ifdef CONFIG_GRKERNSEC_FIFO
+	const struct cred *cred = current_cred();
+	struct inode *inode = d_backing_inode(dentry);
+	struct inode *dir_inode = d_backing_inode(dir);
+
+	if (grsec_enable_fifo && S_ISFIFO(inode->i_mode) &&
+	    !(flag & O_EXCL) && (dir_inode->i_mode & S_ISVTX) &&
+	    !uid_eq(inode->i_uid, dir_inode->i_uid) &&
+	    !uid_eq(cred->fsuid, inode->i_uid)) {
+		if (!inode_permission(inode, acc_mode))
+			gr_log_fs_int2(GR_DONT_AUDIT, GR_FIFO_MSG, dentry, mnt, GR_GLOBAL_UID(inode->i_uid), GR_GLOBAL_GID(inode->i_gid));
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_fork.c b/grsecurity/grsec_fork.c
new file mode 100644
index 000000000000..8ca18bfafe1c
--- /dev/null
+++ b/grsecurity/grsec_fork.c
@@ -0,0 +1,23 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+#include <linux/errno.h>
+
+void
+gr_log_forkfail(const int retval)
+{
+#ifdef CONFIG_GRKERNSEC_FORKFAIL
+	if (grsec_enable_forkfail && (retval == -EAGAIN || retval == -ENOMEM)) {
+		switch (retval) {
+			case -EAGAIN:
+				gr_log_str(GR_DONT_AUDIT, GR_FAILFORK_MSG, "EAGAIN");
+				break;
+			case -ENOMEM:
+				gr_log_str(GR_DONT_AUDIT, GR_FAILFORK_MSG, "ENOMEM");
+				break;
+		}
+	}
+#endif
+	return;
+}
diff --git a/grsecurity/grsec_init.c b/grsecurity/grsec_init.c
new file mode 100644
index 000000000000..68222080fd42
--- /dev/null
+++ b/grsecurity/grsec_init.c
@@ -0,0 +1,294 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/gracl.h>
+#include <linux/slab.h>
+#include <linux/vmalloc.h>
+#include <linux/percpu.h>
+#include <linux/module.h>
+
+int grsec_enable_ptrace_readexec __read_only;
+int grsec_enable_setxid __read_only;
+int grsec_enable_symlinkown __read_only;
+kgid_t grsec_symlinkown_gid __read_only;
+int grsec_enable_brute __read_only;
+int grsec_enable_link __read_only;
+int grsec_enable_dmesg __read_only;
+int grsec_enable_harden_ptrace __read_only;
+int grsec_enable_harden_ipc __read_only;
+int grsec_enable_fifo __read_only;
+int grsec_enable_execlog __read_only;
+int grsec_enable_signal __read_only;
+int grsec_enable_forkfail __read_only;
+int grsec_enable_audit_ptrace __read_only;
+int grsec_enable_time __read_only;
+int grsec_enable_group __read_only;
+kgid_t grsec_audit_gid __read_only;
+int grsec_enable_chdir __read_only;
+int grsec_enable_mount __read_only;
+int grsec_enable_rofs __read_only;
+int grsec_deny_new_usb __read_only;
+int grsec_enable_chroot_findtask __read_only;
+int grsec_enable_chroot_mount __read_only;
+int grsec_enable_chroot_shmat __read_only;
+int grsec_enable_chroot_fchdir __read_only;
+int grsec_enable_chroot_double __read_only;
+int grsec_enable_chroot_pivot __read_only;
+int grsec_enable_chroot_chdir __read_only;
+int grsec_enable_chroot_chmod __read_only;
+int grsec_enable_chroot_mknod __read_only;
+int grsec_enable_chroot_nice __read_only;
+int grsec_enable_chroot_execlog __read_only;
+int grsec_enable_chroot_caps __read_only;
+int grsec_enable_chroot_rename __read_only;
+int grsec_enable_chroot_sysctl __read_only;
+int grsec_enable_chroot_unix __read_only;
+int grsec_enable_tpe __read_only;
+kgid_t grsec_tpe_gid __read_only;
+int grsec_enable_blackhole __read_only;
+#ifdef CONFIG_IPV6_MODULE
+EXPORT_SYMBOL_GPL(grsec_enable_blackhole);
+#endif
+int grsec_lastack_retries __read_only;
+int grsec_enable_tpe_all __read_only;
+int grsec_enable_tpe_invert __read_only;
+int grsec_enable_socket_all __read_only;
+kgid_t grsec_socket_all_gid __read_only;
+int grsec_enable_socket_client __read_only;
+kgid_t grsec_socket_client_gid __read_only;
+int grsec_enable_socket_server __read_only;
+kgid_t grsec_socket_server_gid __read_only;
+int grsec_resource_logging __read_only;
+int grsec_disable_privio __read_only;
+int grsec_enable_log_rwxmaps __read_only;
+int grsec_enable_harden_tty __read_only;
+int grsec_lock __read_only;
+
+DEFINE_SPINLOCK(grsec_alert_lock);
+unsigned long grsec_alert_wtime = 0;
+unsigned long grsec_alert_fyet = 0;
+
+DEFINE_SPINLOCK(grsec_audit_lock);
+
+DEFINE_RWLOCK(grsec_exec_file_lock);
+
+char *gr_shared_page[4];
+
+char *gr_alert_log_fmt;
+char *gr_audit_log_fmt;
+char *gr_alert_log_buf;
+char *gr_audit_log_buf;
+
+extern struct gr_arg *gr_usermode;
+extern unsigned char *gr_system_salt;
+extern unsigned char *gr_system_sum;
+
+void __init
+grsecurity_init(void)
+{
+	int j;
+	/* create the per-cpu shared pages */
+
+#ifdef CONFIG_X86
+	memset((char *)(0x41a + PAGE_OFFSET), 0, 36);
+#endif
+
+	for (j = 0; j < 4; j++) {
+		gr_shared_page[j] = (char *)__alloc_percpu(PAGE_SIZE, __alignof__(unsigned long long));
+		if (gr_shared_page[j] == NULL) {
+			panic("Unable to allocate grsecurity shared page");
+			return;
+		}
+	}
+
+	/* allocate log buffers */
+	gr_alert_log_fmt = kmalloc(512, GFP_KERNEL);
+	if (!gr_alert_log_fmt) {
+		panic("Unable to allocate grsecurity alert log format buffer");
+		return;
+	}
+	gr_audit_log_fmt = kmalloc(512, GFP_KERNEL);
+	if (!gr_audit_log_fmt) {
+		panic("Unable to allocate grsecurity audit log format buffer");
+		return;
+	}
+	gr_alert_log_buf = (char *) get_zeroed_page(GFP_KERNEL);
+	if (!gr_alert_log_buf) {
+		panic("Unable to allocate grsecurity alert log buffer");
+		return;
+	}
+	gr_audit_log_buf = (char *) get_zeroed_page(GFP_KERNEL);
+	if (!gr_audit_log_buf) {
+		panic("Unable to allocate grsecurity audit log buffer");
+		return;
+	}
+
+	/* allocate memory for authentication structure */
+	gr_usermode = kmalloc(sizeof(struct gr_arg), GFP_KERNEL);
+	gr_system_salt = kmalloc(GR_SALT_LEN, GFP_KERNEL);
+	gr_system_sum = kmalloc(GR_SHA_LEN, GFP_KERNEL);
+
+	if (!gr_usermode || !gr_system_salt || !gr_system_sum) {
+		panic("Unable to allocate grsecurity authentication structure");
+		return;
+	}
+
+#ifdef CONFIG_GRKERNSEC_IO
+#if !defined(CONFIG_GRKERNSEC_SYSCTL_DISTRO)
+	grsec_disable_privio = 1;
+#elif defined(CONFIG_GRKERNSEC_SYSCTL_ON)
+	grsec_disable_privio = 1;
+#else
+	grsec_disable_privio = 0;
+#endif
+#endif
+
+#ifdef CONFIG_GRKERNSEC_TPE_INVERT
+	/* for backward compatibility, tpe_invert always defaults to on if
+	   enabled in the kernel
+	*/
+	grsec_enable_tpe_invert = 1;
+#endif
+
+#if !defined(CONFIG_GRKERNSEC_SYSCTL) || defined(CONFIG_GRKERNSEC_SYSCTL_ON)
+#ifndef CONFIG_GRKERNSEC_SYSCTL
+	grsec_lock = 1;
+#endif
+
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+	grsec_enable_log_rwxmaps = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_GROUP
+	grsec_enable_group = 1;
+	grsec_audit_gid = KGIDT_INIT(CONFIG_GRKERNSEC_AUDIT_GID);
+#endif
+#ifdef CONFIG_GRKERNSEC_PTRACE_READEXEC
+	grsec_enable_ptrace_readexec = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_CHDIR
+	grsec_enable_chdir = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_HARDEN_PTRACE
+	grsec_enable_harden_ptrace = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_HARDEN_IPC
+	grsec_enable_harden_ipc = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_HARDEN_TTY
+	grsec_enable_harden_tty = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_MOUNT
+	grsec_enable_mount = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_LINK
+	grsec_enable_link = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_BRUTE
+	grsec_enable_brute = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_DMESG
+	grsec_enable_dmesg = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+	grsec_enable_blackhole = 1;
+	grsec_lastack_retries = 4;
+#endif
+#ifdef CONFIG_GRKERNSEC_FIFO
+	grsec_enable_fifo = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_EXECLOG
+	grsec_enable_execlog = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_SETXID
+	grsec_enable_setxid = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_SIGNAL
+	grsec_enable_signal = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_FORKFAIL
+	grsec_enable_forkfail = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_TIME
+	grsec_enable_time = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_RESLOG
+	grsec_resource_logging = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_FINDTASK
+	grsec_enable_chroot_findtask = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_UNIX
+	grsec_enable_chroot_unix = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_MOUNT
+	grsec_enable_chroot_mount = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_FCHDIR
+	grsec_enable_chroot_fchdir = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_SHMAT
+	grsec_enable_chroot_shmat = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_PTRACE
+	grsec_enable_audit_ptrace = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_DOUBLE
+	grsec_enable_chroot_double = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_PIVOT
+	grsec_enable_chroot_pivot = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_CHDIR
+	grsec_enable_chroot_chdir = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_CHMOD
+	grsec_enable_chroot_chmod = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_MKNOD
+	grsec_enable_chroot_mknod = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_NICE
+	grsec_enable_chroot_nice = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_EXECLOG
+	grsec_enable_chroot_execlog = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_CAPS
+	grsec_enable_chroot_caps = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+	grsec_enable_chroot_rename = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_SYSCTL
+	grsec_enable_chroot_sysctl = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	grsec_enable_symlinkown = 1;
+	grsec_symlinkown_gid = KGIDT_INIT(CONFIG_GRKERNSEC_SYMLINKOWN_GID);
+#endif
+#ifdef CONFIG_GRKERNSEC_TPE
+	grsec_enable_tpe = 1;
+	grsec_tpe_gid = KGIDT_INIT(CONFIG_GRKERNSEC_TPE_GID);
+#ifdef CONFIG_GRKERNSEC_TPE_ALL
+	grsec_enable_tpe_all = 1;
+#endif
+#endif
+#ifdef CONFIG_GRKERNSEC_SOCKET_ALL
+	grsec_enable_socket_all = 1;
+	grsec_socket_all_gid = KGIDT_INIT(CONFIG_GRKERNSEC_SOCKET_ALL_GID);
+#endif
+#ifdef CONFIG_GRKERNSEC_SOCKET_CLIENT
+	grsec_enable_socket_client = 1;
+	grsec_socket_client_gid = KGIDT_INIT(CONFIG_GRKERNSEC_SOCKET_CLIENT_GID);
+#endif
+#ifdef CONFIG_GRKERNSEC_SOCKET_SERVER
+	grsec_enable_socket_server = 1;
+	grsec_socket_server_gid = KGIDT_INIT(CONFIG_GRKERNSEC_SOCKET_SERVER_GID);
+#endif
+#endif
+#ifdef CONFIG_GRKERNSEC_DENYUSB_FORCE
+	grsec_deny_new_usb = 1;
+#endif
+
+	return;
+}
diff --git a/grsecurity/grsec_ipc.c b/grsecurity/grsec_ipc.c
new file mode 100644
index 000000000000..6a8ed69052f8
--- /dev/null
+++ b/grsecurity/grsec_ipc.c
@@ -0,0 +1,48 @@
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/ipc.h>
+#include <linux/ipc_namespace.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+int
+gr_ipc_permitted(struct ipc_namespace *ns, struct kern_ipc_perm *ipcp, int requested_mode, int granted_mode)
+{
+#ifdef CONFIG_GRKERNSEC_HARDEN_IPC
+	int write;
+	int orig_granted_mode;
+	kuid_t euid;
+	kgid_t egid;
+
+	if (!grsec_enable_harden_ipc)
+		return 1;
+
+	euid = current_euid();
+	egid = current_egid();
+
+	write = requested_mode & 00002;
+	orig_granted_mode = ipcp->mode;
+
+	if (uid_eq(euid, ipcp->cuid) || uid_eq(euid, ipcp->uid))
+		orig_granted_mode >>= 6;
+	else {
+		/* if likely wrong permissions, lock to user */
+		if (orig_granted_mode & 0007)
+			orig_granted_mode = 0;
+		/* otherwise do a egid-only check */
+		else if (gid_eq(egid, ipcp->cgid) || gid_eq(egid, ipcp->gid))
+			orig_granted_mode >>= 3;
+		/* otherwise, no access */
+		else
+			orig_granted_mode = 0;
+	}
+	if (!(requested_mode & ~granted_mode & 0007) && (requested_mode & ~orig_granted_mode & 0007) &&
+	    !ns_capable_noaudit(ns->user_ns, CAP_IPC_OWNER)) {
+		gr_log_str_int(GR_DONT_AUDIT, GR_IPC_DENIED_MSG, write ? "write" : "read", GR_GLOBAL_UID(ipcp->cuid));
+		return 0;
+	}
+#endif
+	return 1;
+}
diff --git a/grsecurity/grsec_link.c b/grsecurity/grsec_link.c
new file mode 100644
index 000000000000..84c44a03caa9
--- /dev/null
+++ b/grsecurity/grsec_link.c
@@ -0,0 +1,65 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/fs.h>
+#include <linux/file.h>
+#include <linux/grinternal.h>
+
+int gr_get_symlinkown_enabled(void)
+{
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (grsec_enable_symlinkown && in_group_p(grsec_symlinkown_gid))
+		return 1;
+#endif
+	return 0;
+}
+
+int gr_handle_symlink_owner(const struct path *link, const struct inode *target)
+{
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	const struct inode *link_inode = d_backing_inode(link->dentry);
+
+	if (target && !uid_eq(link_inode->i_uid, target->i_uid)) {
+		gr_log_fs_int2(GR_DONT_AUDIT, GR_SYMLINKOWNER_MSG, link->dentry, link->mnt, GR_GLOBAL_UID(link_inode->i_uid), GR_GLOBAL_UID(target->i_uid));
+		return 1;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_follow_link(const struct dentry *dentry, const struct vfsmount *mnt)
+{
+#ifdef CONFIG_GRKERNSEC_LINK
+	struct inode *inode = d_backing_inode(dentry);
+	struct inode *parent = d_backing_inode(dentry->d_parent);
+	const struct cred *cred = current_cred();
+
+	if (grsec_enable_link && d_is_symlink(dentry) &&
+	    (parent->i_mode & S_ISVTX) && !uid_eq(parent->i_uid, inode->i_uid) &&
+	    (parent->i_mode & S_IWOTH) && !uid_eq(cred->fsuid, inode->i_uid)) {
+		gr_log_fs_int2(GR_DONT_AUDIT, GR_SYMLINK_MSG, dentry, mnt, GR_GLOBAL_UID(inode->i_uid), GR_GLOBAL_GID(inode->i_gid));
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_hardlink(const struct dentry *dentry,
+		   const struct vfsmount *mnt,
+		   const struct filename *to)
+{
+#ifdef CONFIG_GRKERNSEC_LINK
+	struct inode *inode = d_backing_inode(dentry);
+	const struct cred *cred = current_cred();
+
+	if (grsec_enable_link && !uid_eq(cred->fsuid, inode->i_uid) &&
+	    (!d_is_reg(dentry) || is_privileged_binary(dentry) || 
+	     (inode_permission(inode, MAY_READ | MAY_WRITE))) &&
+	    !capable(CAP_FOWNER) && gr_is_global_nonroot(cred->uid)) {
+		gr_log_fs_int2_str(GR_DONT_AUDIT, GR_HARDLINK_MSG, dentry, mnt, GR_GLOBAL_UID(inode->i_uid), GR_GLOBAL_GID(inode->i_gid), to->name);
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_log.c b/grsecurity/grsec_log.c
new file mode 100644
index 000000000000..a24b3385dcbb
--- /dev/null
+++ b/grsecurity/grsec_log.c
@@ -0,0 +1,340 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/tty.h>
+#include <linux/fs.h>
+#include <linux/mm.h>
+#include <linux/grinternal.h>
+
+#ifdef CONFIG_TREE_PREEMPT_RCU
+#define DISABLE_PREEMPT() preempt_disable()
+#define ENABLE_PREEMPT() preempt_enable()
+#else
+#define DISABLE_PREEMPT()
+#define ENABLE_PREEMPT()
+#endif
+
+#define BEGIN_LOCKS(x) \
+	DISABLE_PREEMPT(); \
+	rcu_read_lock(); \
+	read_lock(&tasklist_lock); \
+	read_lock(&grsec_exec_file_lock); \
+	if (x != GR_DO_AUDIT) \
+		spin_lock(&grsec_alert_lock); \
+	else \
+		spin_lock(&grsec_audit_lock)
+
+#define END_LOCKS(x) \
+	if (x != GR_DO_AUDIT) \
+		spin_unlock(&grsec_alert_lock); \
+	else \
+		spin_unlock(&grsec_audit_lock); \
+	read_unlock(&grsec_exec_file_lock); \
+	read_unlock(&tasklist_lock); \
+	rcu_read_unlock(); \
+	ENABLE_PREEMPT(); \
+	if (x == GR_DONT_AUDIT) \
+		gr_handle_alertkill(current)
+
+enum {
+	FLOODING,
+	NO_FLOODING
+};
+
+extern char *gr_alert_log_fmt;
+extern char *gr_audit_log_fmt;
+extern char *gr_alert_log_buf;
+extern char *gr_audit_log_buf;
+
+static int gr_log_start(int audit)
+{
+	char *loglevel = (audit == GR_DO_AUDIT) ? KERN_INFO : KERN_ALERT;
+	char *fmt = (audit == GR_DO_AUDIT) ? gr_audit_log_fmt : gr_alert_log_fmt;
+	char *buf = (audit == GR_DO_AUDIT) ? gr_audit_log_buf : gr_alert_log_buf;
+#if (CONFIG_GRKERNSEC_FLOODTIME > 0 && CONFIG_GRKERNSEC_FLOODBURST > 0)
+	unsigned long curr_secs = get_seconds();
+
+	if (audit == GR_DO_AUDIT)
+		goto set_fmt;
+
+	if (!grsec_alert_wtime || time_after(curr_secs, grsec_alert_wtime + CONFIG_GRKERNSEC_FLOODTIME)) {
+		grsec_alert_wtime = curr_secs;
+		grsec_alert_fyet = 0;
+	} else if (time_before_eq(curr_secs, grsec_alert_wtime + CONFIG_GRKERNSEC_FLOODTIME)
+		    && (grsec_alert_fyet < CONFIG_GRKERNSEC_FLOODBURST)) {
+		grsec_alert_fyet++;
+	} else if (grsec_alert_fyet == CONFIG_GRKERNSEC_FLOODBURST) {
+		grsec_alert_wtime = curr_secs;
+		grsec_alert_fyet++;
+		printk(KERN_ALERT "grsec: more alerts, logging disabled for %d seconds\n", CONFIG_GRKERNSEC_FLOODTIME);
+		return FLOODING;
+	}
+	else return FLOODING;
+
+set_fmt:
+#endif
+	memset(buf, 0, PAGE_SIZE);
+	if (current->signal->curr_ip && gr_acl_is_enabled()) {
+		sprintf(fmt, "%s%s", loglevel, "grsec: From %pI4: (%.64s:%c:%.950s) ");
+		snprintf(buf, PAGE_SIZE - 1, fmt, &current->signal->curr_ip, current->role->rolename, gr_roletype_to_char(), current->acl->filename);
+	} else if (current->signal->curr_ip) {
+		sprintf(fmt, "%s%s", loglevel, "grsec: From %pI4: ");
+		snprintf(buf, PAGE_SIZE - 1, fmt, &current->signal->curr_ip);
+	} else if (gr_acl_is_enabled()) {
+		sprintf(fmt, "%s%s", loglevel, "grsec: (%.64s:%c:%.950s) ");
+		snprintf(buf, PAGE_SIZE - 1, fmt, current->role->rolename, gr_roletype_to_char(), current->acl->filename);
+	} else {
+		sprintf(fmt, "%s%s", loglevel, "grsec: ");
+		strcpy(buf, fmt);
+	}
+
+	return NO_FLOODING;
+}
+
+static void gr_log_middle(int audit, const char *msg, va_list ap)
+	__attribute__ ((format (printf, 2, 0)));
+
+static void gr_log_middle(int audit, const char *msg, va_list ap)
+{
+	char *buf = (audit == GR_DO_AUDIT) ? gr_audit_log_buf : gr_alert_log_buf;
+	unsigned int len = strlen(buf);
+
+	vsnprintf(buf + len, PAGE_SIZE - len - 1, msg, ap);
+
+	return;
+}
+
+static void gr_log_middle_varargs(int audit, const char *msg, ...)
+	__attribute__ ((format (printf, 2, 3)));
+
+static void gr_log_middle_varargs(int audit, const char *msg, ...)
+{
+	char *buf = (audit == GR_DO_AUDIT) ? gr_audit_log_buf : gr_alert_log_buf;
+	unsigned int len = strlen(buf);
+	va_list ap;
+
+	va_start(ap, msg);
+	vsnprintf(buf + len, PAGE_SIZE - len - 1, msg, ap);
+	va_end(ap);
+
+	return;
+}
+
+static void gr_log_end(int audit, int append_default)
+{
+	char *buf = (audit == GR_DO_AUDIT) ? gr_audit_log_buf : gr_alert_log_buf;
+	if (append_default) {
+		struct task_struct *task = current;
+		struct task_struct *parent = task->real_parent;
+		const struct cred *cred = __task_cred(task);
+		const struct cred *pcred = __task_cred(parent);
+		unsigned int len = strlen(buf);
+
+		snprintf(buf + len, PAGE_SIZE - len - 1, DEFAULTSECMSG, gr_task_fullpath(task), task->comm, task_pid_nr(task), GR_GLOBAL_UID(cred->uid), GR_GLOBAL_UID(cred->euid), GR_GLOBAL_GID(cred->gid), GR_GLOBAL_GID(cred->egid), gr_parent_task_fullpath(task), parent->comm, task_pid_nr(task->real_parent), GR_GLOBAL_UID(pcred->uid), GR_GLOBAL_UID(pcred->euid), GR_GLOBAL_GID(pcred->gid), GR_GLOBAL_GID(pcred->egid));
+	}
+
+	printk("%s\n", buf);
+
+	return;
+}
+
+void gr_log_varargs(int audit, const char *msg, int argtypes, ...)
+{
+	int logtype;
+	char *result = (audit == GR_DO_AUDIT) ? "successful" : "denied";
+	char *str1 = NULL, *str2 = NULL, *str3 = NULL;
+	void *voidptr = NULL;
+	int num1 = 0, num2 = 0;
+	unsigned long ulong1 = 0, ulong2 = 0;
+	struct dentry *dentry = NULL;
+	struct vfsmount *mnt = NULL;
+	struct file *file = NULL;
+	struct task_struct *task = NULL;
+	struct vm_area_struct *vma = NULL;
+	const struct cred *cred, *pcred;
+	va_list ap;
+
+	BEGIN_LOCKS(audit);
+	logtype = gr_log_start(audit);
+	if (logtype == FLOODING) {
+		END_LOCKS(audit);
+		return;
+	}
+	va_start(ap, argtypes);
+	switch (argtypes) {
+	case GR_TTYSNIFF:
+		task = va_arg(ap, struct task_struct *);
+		gr_log_middle_varargs(audit, msg, &task->signal->curr_ip, gr_task_fullpath0(task), task->comm, task_pid_nr(task), gr_parent_task_fullpath0(task), task->real_parent->comm, task_pid_nr(task->real_parent));
+		break;
+	case GR_SYSCTL_HIDDEN:
+		str1 = va_arg(ap, char *);
+		gr_log_middle_varargs(audit, msg, result, str1);
+		break;
+	case GR_RBAC:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		gr_log_middle_varargs(audit, msg, result, gr_to_filename(dentry, mnt));
+		break;
+	case GR_RBAC_STR:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		str1 = va_arg(ap, char *);
+		gr_log_middle_varargs(audit, msg, result, gr_to_filename(dentry, mnt), str1);
+		break;
+	case GR_STR_RBAC:
+		str1 = va_arg(ap, char *);
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		gr_log_middle_varargs(audit, msg, result, str1, gr_to_filename(dentry, mnt));
+		break;
+	case GR_RBAC_MODE2:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		str1 = va_arg(ap, char *);
+		str2 = va_arg(ap, char *);
+		gr_log_middle_varargs(audit, msg, result, gr_to_filename(dentry, mnt), str1, str2);
+		break;
+	case GR_RBAC_MODE3:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		str1 = va_arg(ap, char *);
+		str2 = va_arg(ap, char *);
+		str3 = va_arg(ap, char *);
+		gr_log_middle_varargs(audit, msg, result, gr_to_filename(dentry, mnt), str1, str2, str3);
+		break;
+	case GR_FILENAME:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		gr_log_middle_varargs(audit, msg, gr_to_filename(dentry, mnt));
+		break;
+	case GR_STR_FILENAME:
+		str1 = va_arg(ap, char *);
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		gr_log_middle_varargs(audit, msg, str1, gr_to_filename(dentry, mnt));
+		break;
+	case GR_FILENAME_STR:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		str1 = va_arg(ap, char *);
+		gr_log_middle_varargs(audit, msg, gr_to_filename(dentry, mnt), str1);
+		break;
+	case GR_FILENAME_TWO_INT:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		num1 = va_arg(ap, int);
+		num2 = va_arg(ap, int);
+		gr_log_middle_varargs(audit, msg, gr_to_filename(dentry, mnt), num1, num2);
+		break;
+	case GR_FILENAME_TWO_INT_STR:
+		dentry = va_arg(ap, struct dentry *);
+		mnt = va_arg(ap, struct vfsmount *);
+		num1 = va_arg(ap, int);
+		num2 = va_arg(ap, int);
+		str1 = va_arg(ap, char *);
+		gr_log_middle_varargs(audit, msg, gr_to_filename(dentry, mnt), num1, num2, str1);
+		break;
+	case GR_TEXTREL:
+		str1 = va_arg(ap, char *);
+		file = va_arg(ap, struct file *);
+		ulong1 = va_arg(ap, unsigned long);
+		ulong2 = va_arg(ap, unsigned long);
+		gr_log_middle_varargs(audit, msg, str1, file ? gr_to_filename(file->f_path.dentry, file->f_path.mnt) : "<anonymous mapping>", ulong1, ulong2);
+		break;
+	case GR_PTRACE:
+		task = va_arg(ap, struct task_struct *);
+		gr_log_middle_varargs(audit, msg, task->exec_file ? gr_to_filename(task->exec_file->f_path.dentry, task->exec_file->f_path.mnt) : "(none)", task->comm, task_pid_nr(task));
+		break;
+	case GR_RESOURCE:
+		task = va_arg(ap, struct task_struct *);
+		cred = __task_cred(task);
+		pcred = __task_cred(task->real_parent);
+		ulong1 = va_arg(ap, unsigned long);
+		str1 = va_arg(ap, char *);
+		ulong2 = va_arg(ap, unsigned long);
+		gr_log_middle_varargs(audit, msg, ulong1, str1, ulong2, gr_task_fullpath(task), task->comm, task_pid_nr(task), GR_GLOBAL_UID(cred->uid), GR_GLOBAL_UID(cred->euid), GR_GLOBAL_GID(cred->gid), GR_GLOBAL_GID(cred->egid), gr_parent_task_fullpath(task), task->real_parent->comm, task_pid_nr(task->real_parent), GR_GLOBAL_UID(pcred->uid), GR_GLOBAL_UID(pcred->euid), GR_GLOBAL_GID(pcred->gid), GR_GLOBAL_GID(pcred->egid));
+		break;
+	case GR_CAP:
+		task = va_arg(ap, struct task_struct *);
+		cred = __task_cred(task);
+		pcred = __task_cred(task->real_parent);
+		str1 = va_arg(ap, char *);
+		gr_log_middle_varargs(audit, msg, str1, gr_task_fullpath(task), task->comm, task_pid_nr(task), GR_GLOBAL_UID(cred->uid), GR_GLOBAL_UID(cred->euid), GR_GLOBAL_GID(cred->gid), GR_GLOBAL_GID(cred->egid), gr_parent_task_fullpath(task), task->real_parent->comm, task_pid_nr(task->real_parent), GR_GLOBAL_UID(pcred->uid), GR_GLOBAL_UID(pcred->euid), GR_GLOBAL_GID(pcred->gid), GR_GLOBAL_GID(pcred->egid));
+		break;
+	case GR_SIG:
+		str1 = va_arg(ap, char *);
+		voidptr = va_arg(ap, void *);
+		gr_log_middle_varargs(audit, msg, str1, voidptr);
+		break;
+	case GR_SIG2:
+		task = va_arg(ap, struct task_struct *);
+		cred = __task_cred(task);
+		pcred = __task_cred(task->real_parent);
+		num1 = va_arg(ap, int);
+		gr_log_middle_varargs(audit, msg, num1, gr_task_fullpath0(task), task->comm, task_pid_nr(task), GR_GLOBAL_UID(cred->uid), GR_GLOBAL_UID(cred->euid), GR_GLOBAL_GID(cred->gid), GR_GLOBAL_GID(cred->egid), gr_parent_task_fullpath0(task), task->real_parent->comm, task_pid_nr(task->real_parent), GR_GLOBAL_UID(pcred->uid), GR_GLOBAL_UID(pcred->euid), GR_GLOBAL_GID(pcred->gid), GR_GLOBAL_GID(pcred->egid));
+		break;
+	case GR_CRASH1:
+		task = va_arg(ap, struct task_struct *);
+		cred = __task_cred(task);
+		pcred = __task_cred(task->real_parent);
+		ulong1 = va_arg(ap, unsigned long);
+		gr_log_middle_varargs(audit, msg, gr_task_fullpath(task), task->comm, task_pid_nr(task), GR_GLOBAL_UID(cred->uid), GR_GLOBAL_UID(cred->euid), GR_GLOBAL_GID(cred->gid), GR_GLOBAL_GID(cred->egid), gr_parent_task_fullpath(task), task->real_parent->comm, task_pid_nr(task->real_parent), GR_GLOBAL_UID(pcred->uid), GR_GLOBAL_UID(pcred->euid), GR_GLOBAL_GID(pcred->gid), GR_GLOBAL_GID(pcred->egid), GR_GLOBAL_UID(cred->uid), ulong1);
+		break;
+	case GR_CRASH2:
+		task = va_arg(ap, struct task_struct *);
+		cred = __task_cred(task);
+		pcred = __task_cred(task->real_parent);
+		ulong1 = va_arg(ap, unsigned long);
+		gr_log_middle_varargs(audit, msg, gr_task_fullpath(task), task->comm, task_pid_nr(task), GR_GLOBAL_UID(cred->uid), GR_GLOBAL_UID(cred->euid), GR_GLOBAL_GID(cred->gid), GR_GLOBAL_GID(cred->egid), gr_parent_task_fullpath(task), task->real_parent->comm, task_pid_nr(task->real_parent), GR_GLOBAL_UID(pcred->uid), GR_GLOBAL_UID(pcred->euid), GR_GLOBAL_GID(pcred->gid), GR_GLOBAL_GID(pcred->egid), ulong1);
+		break;
+	case GR_RWXMAP:
+		file = va_arg(ap, struct file *);
+		gr_log_middle_varargs(audit, msg, file ? gr_to_filename(file->f_path.dentry, file->f_path.mnt) : "<anonymous mapping>");
+		break;
+	case GR_RWXMAPVMA:
+		vma = va_arg(ap, struct vm_area_struct *);
+		if (vma->vm_file)
+			str1 = gr_to_filename(vma->vm_file->f_path.dentry, vma->vm_file->f_path.mnt);
+		else if (vma->vm_flags & (VM_GROWSDOWN | VM_GROWSUP))
+			str1 = "<stack>";
+		else if (vma->vm_start <= current->mm->brk &&
+			 vma->vm_end >= current->mm->start_brk)
+			str1 = "<heap>";
+		else
+			str1 = "<anonymous mapping>";
+		gr_log_middle_varargs(audit, msg, str1);
+		break;
+	case GR_PSACCT:
+		{
+			unsigned int wday, cday;
+			__u8 whr, chr;
+			__u8 wmin, cmin;
+			__u8 wsec, csec;
+
+			task = va_arg(ap, struct task_struct *);
+			wday = va_arg(ap, unsigned int);
+			cday = va_arg(ap, unsigned int);
+			whr = va_arg(ap, int);
+			chr = va_arg(ap, int);
+			wmin = va_arg(ap, int);
+			cmin = va_arg(ap, int);
+			wsec = va_arg(ap, int);
+			csec = va_arg(ap, int);
+			ulong1 = va_arg(ap, unsigned long);
+			cred = __task_cred(task);
+			pcred = __task_cred(task->real_parent);
+
+			gr_log_middle_varargs(audit, msg, gr_task_fullpath(task), task->comm, task_pid_nr(task), &task->signal->curr_ip, tty_name(task->signal->tty), GR_GLOBAL_UID(cred->uid), GR_GLOBAL_UID(cred->euid), GR_GLOBAL_GID(cred->gid), GR_GLOBAL_GID(cred->egid), wday, whr, wmin, wsec, cday, chr, cmin, csec, (task->flags & PF_SIGNALED) ? "killed by signal" : "exited", ulong1, gr_parent_task_fullpath(task), task->real_parent->comm, task_pid_nr(task->real_parent), &task->real_parent->signal->curr_ip, tty_name(task->real_parent->signal->tty), GR_GLOBAL_UID(pcred->uid), GR_GLOBAL_UID(pcred->euid), GR_GLOBAL_GID(pcred->gid), GR_GLOBAL_GID(pcred->egid));
+		}
+		break;
+	default:
+		gr_log_middle(audit, msg, ap);
+	}
+	va_end(ap);
+	// these don't need DEFAULTSECARGS printed on the end
+	if (argtypes == GR_CRASH1 || argtypes == GR_CRASH2)
+		gr_log_end(audit, 0);
+	else
+		gr_log_end(audit, 1);
+	END_LOCKS(audit);
+}
diff --git a/grsecurity/grsec_mem.c b/grsecurity/grsec_mem.c
new file mode 100644
index 000000000000..0e39d8c703dc
--- /dev/null
+++ b/grsecurity/grsec_mem.c
@@ -0,0 +1,48 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/mman.h>
+#include <linux/module.h>
+#include <linux/grinternal.h>
+
+void gr_handle_msr_write(void)
+{
+	gr_log_noargs(GR_DONT_AUDIT, GR_MSRWRITE_MSG);
+	return;
+}
+EXPORT_SYMBOL_GPL(gr_handle_msr_write);
+
+void
+gr_handle_ioperm(void)
+{
+	gr_log_noargs(GR_DONT_AUDIT, GR_IOPERM_MSG);
+	return;
+}
+
+void
+gr_handle_iopl(void)
+{
+	gr_log_noargs(GR_DONT_AUDIT, GR_IOPL_MSG);
+	return;
+}
+
+void
+gr_handle_mem_readwrite(u64 from, u64 to)
+{
+	gr_log_two_u64(GR_DONT_AUDIT, GR_MEM_READWRITE_MSG, from, to);
+	return;
+}
+
+void
+gr_handle_vm86(void)
+{
+	gr_log_noargs(GR_DONT_AUDIT, GR_VM86_MSG);
+	return;
+}
+
+void
+gr_log_badprocpid(const char *entry)
+{
+	gr_log_str(GR_DONT_AUDIT, GR_BADPROCPID_MSG, entry);
+	return;
+}
diff --git a/grsecurity/grsec_mount.c b/grsecurity/grsec_mount.c
new file mode 100644
index 000000000000..fe02bf495ba5
--- /dev/null
+++ b/grsecurity/grsec_mount.c
@@ -0,0 +1,65 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/mount.h>
+#include <linux/major.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+void
+gr_log_remount(const char *devname, const int retval)
+{
+#ifdef CONFIG_GRKERNSEC_AUDIT_MOUNT
+	if (grsec_enable_mount && (retval >= 0))
+		gr_log_str(GR_DO_AUDIT, GR_REMOUNT_AUDIT_MSG, devname ? devname : "none");
+#endif
+	return;
+}
+
+void
+gr_log_unmount(const char *devname, const int retval)
+{
+#ifdef CONFIG_GRKERNSEC_AUDIT_MOUNT
+	if (grsec_enable_mount && (retval >= 0))
+		gr_log_str(GR_DO_AUDIT, GR_UNMOUNT_AUDIT_MSG, devname ? devname : "none");
+#endif
+	return;
+}
+
+void
+gr_log_mount(const char *from, struct path *to, const int retval)
+{
+#ifdef CONFIG_GRKERNSEC_AUDIT_MOUNT
+	if (grsec_enable_mount && (retval >= 0))
+		gr_log_str_fs(GR_DO_AUDIT, GR_MOUNT_AUDIT_MSG, from ? from : "none", to->dentry, to->mnt);
+#endif
+	return;
+}
+
+int
+gr_handle_rofs_mount(struct dentry *dentry, struct vfsmount *mnt, int mnt_flags)
+{
+#ifdef CONFIG_GRKERNSEC_ROFS
+	if (grsec_enable_rofs && !(mnt_flags & MNT_READONLY)) {
+		gr_log_fs_generic(GR_DO_AUDIT, GR_ROFS_MOUNT_MSG, dentry, mnt);
+		return -EPERM;
+	} else
+		return 0;
+#endif
+	return 0;
+}
+
+int
+gr_handle_rofs_blockwrite(struct dentry *dentry, struct vfsmount *mnt, int acc_mode)
+{
+#ifdef CONFIG_GRKERNSEC_ROFS
+	struct inode *inode = d_backing_inode(dentry);
+
+	if (grsec_enable_rofs && (acc_mode & MAY_WRITE) &&
+	    inode && (S_ISBLK(inode->i_mode) || (S_ISCHR(inode->i_mode) && imajor(inode) == RAW_MAJOR))) {
+		gr_log_fs_generic(GR_DO_AUDIT, GR_ROFS_BLOCKWRITE_MSG, dentry, mnt);
+		return -EPERM;
+	} else
+		return 0;
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_pax.c b/grsecurity/grsec_pax.c
new file mode 100644
index 000000000000..2ad7b964a20b
--- /dev/null
+++ b/grsecurity/grsec_pax.c
@@ -0,0 +1,47 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/file.h>
+#include <linux/grinternal.h>
+#include <linux/grsecurity.h>
+
+void
+gr_log_textrel(struct vm_area_struct * vma, bool is_textrel_rw)
+{
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+	if (grsec_enable_log_rwxmaps)
+		gr_log_textrel_ulong_ulong(GR_DONT_AUDIT, GR_TEXTREL_AUDIT_MSG,
+			is_textrel_rw ? "executable to writable" : "writable to executable",
+			vma->vm_file, vma->vm_start, vma->vm_pgoff);
+#endif
+	return;
+}
+
+void gr_log_ptgnustack(struct file *file)
+{
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+	if (grsec_enable_log_rwxmaps)
+		gr_log_rwxmap(GR_DONT_AUDIT, GR_PTGNUSTACK_MSG, file);
+#endif
+	return;
+}
+
+void
+gr_log_rwxmmap(struct file *file)
+{
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+	if (grsec_enable_log_rwxmaps)
+		gr_log_rwxmap(GR_DONT_AUDIT, GR_RWXMMAP_MSG, file);
+#endif
+	return;
+}
+
+void
+gr_log_rwxmprotect(struct vm_area_struct *vma)
+{
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+	if (grsec_enable_log_rwxmaps)
+		gr_log_rwxmap_vma(GR_DONT_AUDIT, GR_RWXMPROTECT_MSG, vma);
+#endif
+	return;
+}
diff --git a/grsecurity/grsec_proc.c b/grsecurity/grsec_proc.c
new file mode 100644
index 000000000000..2005a3a3224d
--- /dev/null
+++ b/grsecurity/grsec_proc.c
@@ -0,0 +1,20 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+int gr_proc_is_restricted(void)
+{
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	const struct cred *cred = current_cred();
+#endif
+
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+	if (!uid_eq(cred->fsuid, GLOBAL_ROOT_UID))
+		return -EACCES;
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	if (!uid_eq(cred->fsuid, GLOBAL_ROOT_UID) && !in_group_p(grsec_proc_gid))
+		return -EACCES;
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_ptrace.c b/grsecurity/grsec_ptrace.c
new file mode 100644
index 000000000000..304c5180b929
--- /dev/null
+++ b/grsecurity/grsec_ptrace.c
@@ -0,0 +1,30 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/grinternal.h>
+#include <linux/security.h>
+
+void
+gr_audit_ptrace(struct task_struct *task)
+{
+#ifdef CONFIG_GRKERNSEC_AUDIT_PTRACE
+	if (grsec_enable_audit_ptrace)
+		gr_log_ptrace(GR_DO_AUDIT, GR_PTRACE_AUDIT_MSG, task);
+#endif
+	return;
+}
+
+int
+gr_ptrace_readexec(struct file *file, int unsafe_flags)
+{
+#ifdef CONFIG_GRKERNSEC_PTRACE_READEXEC
+	const struct dentry *dentry = file->f_path.dentry;
+	const struct vfsmount *mnt = file->f_path.mnt;
+
+	if (grsec_enable_ptrace_readexec && (unsafe_flags & LSM_UNSAFE_PTRACE) && 
+	    (inode_permission(d_backing_inode(dentry), MAY_READ) || !gr_acl_handle_open(dentry, mnt, MAY_READ))) {
+		gr_log_fs_generic(GR_DONT_AUDIT, GR_PTRACE_READEXEC_MSG, dentry, mnt);
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_sig.c b/grsecurity/grsec_sig.c
new file mode 100644
index 000000000000..f072c9d4291a
--- /dev/null
+++ b/grsecurity/grsec_sig.c
@@ -0,0 +1,248 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/fs.h>
+#include <linux/delay.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+#include <linux/hardirq.h>
+#include <asm/pgtable.h>
+
+char *signames[] = {
+	[SIGSEGV] = "Segmentation fault",
+	[SIGILL] = "Illegal instruction",
+	[SIGABRT] = "Abort",
+	[SIGBUS] = "Invalid alignment/Bus error"
+};
+
+void
+gr_log_signal(const int sig, const void *addr, const struct task_struct *t)
+{
+#ifdef CONFIG_GRKERNSEC_SIGNAL
+	if (grsec_enable_signal && ((sig == SIGSEGV) || (sig == SIGILL) ||
+				    (sig == SIGABRT) || (sig == SIGBUS))) {
+		if (task_pid_nr(t) == task_pid_nr(current)) {
+			gr_log_sig_addr(GR_DONT_AUDIT_GOOD, GR_UNISIGLOG_MSG, signames[sig], addr);
+		} else {
+			gr_log_sig_task(GR_DONT_AUDIT_GOOD, GR_DUALSIGLOG_MSG, t, sig);
+		}
+	}
+#endif
+	return;
+}
+
+int
+gr_handle_signal(const struct task_struct *p, const int sig)
+{
+#ifdef CONFIG_GRKERNSEC
+	/* ignore the 0 signal for protected task checks */
+	if (task_pid_nr(current) > 1 && sig && gr_check_protected_task(p)) {
+		gr_log_sig_task(GR_DONT_AUDIT, GR_SIG_ACL_MSG, p, sig);
+		return -EPERM;
+	} else if (gr_pid_is_chrooted((struct task_struct *)p)) {
+		return -EPERM;
+	}
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_GRKERNSEC
+extern int specific_send_sig_info(int sig, struct siginfo *info, struct task_struct *t);
+
+int gr_fake_force_sig(int sig, struct task_struct *t)
+{
+	unsigned long int flags;
+	int ret, blocked, ignored;
+	struct k_sigaction *action;
+
+	spin_lock_irqsave(&t->sighand->siglock, flags);
+	action = &t->sighand->action[sig-1];
+	ignored = action->sa.sa_handler == SIG_IGN;
+	blocked = sigismember(&t->blocked, sig);
+	if (blocked || ignored) {
+		action->sa.sa_handler = SIG_DFL;
+		if (blocked) {
+			sigdelset(&t->blocked, sig);
+			recalc_sigpending_and_wake(t);
+		}
+	}
+	if (action->sa.sa_handler == SIG_DFL)
+		t->signal->flags &= ~SIGNAL_UNKILLABLE;
+	ret = specific_send_sig_info(sig, SEND_SIG_PRIV, t);
+
+	spin_unlock_irqrestore(&t->sighand->siglock, flags);
+
+	return ret;
+}
+#endif
+
+#define GR_USER_BAN_TIME (15 * 60)
+#define GR_DAEMON_BRUTE_TIME (30 * 60)
+
+void gr_handle_brute_attach(int dumpable)
+{
+#ifdef CONFIG_GRKERNSEC_BRUTE
+	struct task_struct *p = current;
+	kuid_t uid = GLOBAL_ROOT_UID;
+	int is_priv = 0;
+	int daemon = 0;
+
+	if (!grsec_enable_brute)
+		return;
+
+	if (is_privileged_binary(p->mm->exe_file->f_path.dentry))
+		is_priv = 1;
+
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+	read_lock(&grsec_exec_file_lock);
+	if (!is_priv && p->real_parent && gr_is_same_file(p->real_parent->exec_file, p->exec_file)) {
+		p->real_parent->brute_expires = get_seconds() + GR_DAEMON_BRUTE_TIME;
+		p->real_parent->brute = 1;
+		daemon = 1;
+	} else {
+		const struct cred *cred = __task_cred(p), *cred2;
+		struct task_struct *tsk, *tsk2;
+
+		if (dumpable != SUID_DUMP_USER && gr_is_global_nonroot(cred->uid)) {
+			struct user_struct *user;
+
+			uid = cred->uid;
+
+			/* this is put upon execution past expiration */
+			user = find_user(uid);
+			if (user == NULL)
+				goto unlock;
+			user->sugid_banned = 1;
+			user->sugid_ban_expires = get_seconds() + GR_USER_BAN_TIME;
+			if (user->sugid_ban_expires == ~0UL)
+				user->sugid_ban_expires--;
+
+			/* only kill other threads of the same binary, from the same user */
+			do_each_thread(tsk2, tsk) {
+				cred2 = __task_cred(tsk);
+				if (tsk != p && uid_eq(cred2->uid, uid) && gr_is_same_file(tsk->exec_file, p->exec_file))
+					gr_fake_force_sig(SIGKILL, tsk);
+			} while_each_thread(tsk2, tsk);
+		}
+	}
+unlock:
+	read_unlock(&grsec_exec_file_lock);
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+
+	if (gr_is_global_nonroot(uid))
+		gr_log_fs_int2(GR_DONT_AUDIT, GR_BRUTE_SUID_MSG, p->exec_file->f_path.dentry, p->exec_file->f_path.mnt, GR_GLOBAL_UID(uid), GR_USER_BAN_TIME / 60);
+	else if (daemon)
+		gr_log_noargs(GR_DONT_AUDIT, GR_BRUTE_DAEMON_MSG);
+
+#endif
+	return;
+}
+
+void gr_handle_brute_check(void)
+{
+#ifdef CONFIG_GRKERNSEC_BRUTE
+	struct task_struct *p = current;
+
+	if (unlikely(p->brute)) {
+		if (!grsec_enable_brute)
+			p->brute = 0;
+		else if (time_before(get_seconds(), p->brute_expires))
+			msleep(30 * 1000);
+	}
+#endif
+	return;
+}
+
+void gr_handle_kernel_exploit(void)
+{
+#ifdef CONFIG_GRKERNSEC_KERN_LOCKOUT
+	static unsigned int num_banned_users __read_only;
+	const struct cred *cred;
+	struct task_struct *tsk, *tsk2;
+	struct user_struct *user;
+	kuid_t uid;
+
+	if (in_irq() || in_serving_softirq() || in_nmi())
+		panic("grsec: halting the system due to suspicious kernel crash caused in interrupt context");
+
+	uid = current_uid();
+
+	if (gr_is_global_root(uid))
+		panic("grsec: halting the system due to suspicious kernel crash caused by root");
+	else {
+		pax_open_kernel();
+		num_banned_users++;
+		pax_close_kernel();
+		if (num_banned_users > 8)
+			panic("grsec: halting the system due to suspicious kernel crash caused by a large number of different users");
+
+		/* kill all the processes of this user, hold a reference
+		   to their creds struct, and prevent them from creating
+		   another process until system reset
+		*/
+		printk(KERN_ALERT "grsec: banning user with uid %u until system restart for suspicious kernel crash\n",
+			GR_GLOBAL_UID(uid));
+		/* we intentionally leak this ref */
+		user = get_uid(current->cred->user);
+		if (user)
+			user->kernel_banned = 1;
+
+		/* kill all processes of this user */
+		read_lock(&tasklist_lock);
+		do_each_thread(tsk2, tsk) {
+			cred = __task_cred(tsk);
+			if (uid_eq(cred->uid, uid))
+				gr_fake_force_sig(SIGKILL, tsk);
+		} while_each_thread(tsk2, tsk);
+		read_unlock(&tasklist_lock); 
+	}
+#endif
+}
+
+#ifdef CONFIG_GRKERNSEC_BRUTE
+static bool sugid_ban_expired(struct user_struct *user)
+{
+	if (user->sugid_ban_expires != ~0UL && time_after_eq(get_seconds(), user->sugid_ban_expires)) {
+		user->sugid_banned = 0;
+		user->sugid_ban_expires = 0;
+		free_uid(user);
+		return true;
+	}
+
+	return false;
+}
+#endif
+
+int gr_process_kernel_exec_ban(void)
+{
+#ifdef CONFIG_GRKERNSEC_KERN_LOCKOUT
+	if (unlikely(current->cred->user->kernel_banned))
+		return -EPERM;
+#endif
+	return 0;
+}
+
+int gr_process_kernel_setuid_ban(struct user_struct *user)
+{
+#ifdef CONFIG_GRKERNSEC_KERN_LOCKOUT
+	if (unlikely(user->kernel_banned))
+		gr_fake_force_sig(SIGKILL, current);
+#endif
+	return 0;
+}
+
+int gr_process_sugid_exec_ban(const struct linux_binprm *bprm)
+{
+#ifdef CONFIG_GRKERNSEC_BRUTE
+	struct user_struct *user = current->cred->user;
+	if (unlikely(user->sugid_banned)) {
+		if (sugid_ban_expired(user))
+			return 0;
+		/* disallow execution of suid/sgid binaries only */
+		else if (is_privileged_binary(bprm->file->f_path.dentry))
+			return -EPERM;
+	}
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_sock.c b/grsecurity/grsec_sock.c
new file mode 100644
index 000000000000..3cdd9461fc9d
--- /dev/null
+++ b/grsecurity/grsec_sock.c
@@ -0,0 +1,244 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/net.h>
+#include <linux/in.h>
+#include <linux/ip.h>
+#include <net/sock.h>
+#include <net/inet_sock.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+#include <linux/gracl.h>
+
+extern int gr_search_udp_recvmsg(struct sock *sk, const struct sk_buff *skb);
+extern int gr_search_udp_sendmsg(struct sock *sk, struct sockaddr_in *addr);
+
+EXPORT_SYMBOL_GPL(gr_search_udp_recvmsg);
+EXPORT_SYMBOL_GPL(gr_search_udp_sendmsg);
+
+#ifdef CONFIG_UNIX_MODULE
+EXPORT_SYMBOL_GPL(gr_acl_handle_unix);
+EXPORT_SYMBOL_GPL(gr_acl_handle_mknod);
+EXPORT_SYMBOL_GPL(gr_handle_chroot_unix);
+EXPORT_SYMBOL_GPL(gr_handle_create);
+#endif
+
+#ifdef CONFIG_GRKERNSEC
+#define gr_conn_table_size 32749
+struct conn_table_entry {
+	struct conn_table_entry *next;
+	struct signal_struct *sig;
+};
+
+struct conn_table_entry *gr_conn_table[gr_conn_table_size];
+DEFINE_SPINLOCK(gr_conn_table_lock);
+
+extern const char * gr_socktype_to_name(unsigned char type);
+extern const char * gr_proto_to_name(unsigned char proto);
+extern const char * gr_sockfamily_to_name(unsigned char family);
+
+static int 
+conn_hash(__u32 saddr, __u32 daddr, __u16 sport, __u16 dport, unsigned int size)
+{
+	return ((daddr + saddr + (sport << 8) + (dport << 16)) % size);
+}
+
+static int
+conn_match(const struct signal_struct *sig, __u32 saddr, __u32 daddr, 
+	   __u16 sport, __u16 dport)
+{
+	if (unlikely(sig->gr_saddr == saddr && sig->gr_daddr == daddr &&
+		     sig->gr_sport == sport && sig->gr_dport == dport))
+		return 1;
+	else
+		return 0;
+}
+
+static void gr_add_to_task_ip_table_nolock(struct signal_struct *sig, struct conn_table_entry *newent)
+{
+	struct conn_table_entry **match;
+	unsigned int index;
+
+	index = conn_hash(sig->gr_saddr, sig->gr_daddr, 
+			  sig->gr_sport, sig->gr_dport, 
+			  gr_conn_table_size);
+
+	newent->sig = sig;
+	
+	match = &gr_conn_table[index];
+	newent->next = *match;
+	*match = newent;
+
+	return;
+}
+
+static void gr_del_task_from_ip_table_nolock(struct signal_struct *sig)
+{
+	struct conn_table_entry *match, *last = NULL;
+	unsigned int index;
+
+	index = conn_hash(sig->gr_saddr, sig->gr_daddr, 
+			  sig->gr_sport, sig->gr_dport, 
+			  gr_conn_table_size);
+
+	match = gr_conn_table[index];
+	while (match && !conn_match(match->sig, 
+		sig->gr_saddr, sig->gr_daddr, sig->gr_sport, 
+		sig->gr_dport)) {
+		last = match;
+		match = match->next;
+	}
+
+	if (match) {
+		if (last)
+			last->next = match->next;
+		else
+			gr_conn_table[index] = NULL;
+		kfree(match);
+	}
+
+	return;
+}
+
+static struct signal_struct * gr_lookup_task_ip_table(__u32 saddr, __u32 daddr,
+					     __u16 sport, __u16 dport)
+{
+	struct conn_table_entry *match;
+	unsigned int index;
+
+	index = conn_hash(saddr, daddr, sport, dport, gr_conn_table_size);
+
+	match = gr_conn_table[index];
+	while (match && !conn_match(match->sig, saddr, daddr, sport, dport))
+		match = match->next;
+
+	if (match)
+		return match->sig;
+	else
+		return NULL;
+}
+
+#endif
+
+void gr_update_task_in_ip_table(const struct inet_sock *inet)
+{
+#ifdef CONFIG_GRKERNSEC
+	struct signal_struct *sig = current->signal;
+	struct conn_table_entry *newent;
+
+	newent = kmalloc(sizeof(struct conn_table_entry), GFP_ATOMIC);
+	if (newent == NULL)
+		return;
+	/* no bh lock needed since we are called with bh disabled */
+	spin_lock(&gr_conn_table_lock);
+	gr_del_task_from_ip_table_nolock(sig);
+	sig->gr_saddr = inet->inet_rcv_saddr;
+	sig->gr_daddr = inet->inet_daddr;
+	sig->gr_sport = inet->inet_sport;
+	sig->gr_dport = inet->inet_dport;
+	gr_add_to_task_ip_table_nolock(sig, newent);
+	spin_unlock(&gr_conn_table_lock);
+#endif
+	return;
+}
+
+void gr_del_task_from_ip_table(struct task_struct *task)
+{
+#ifdef CONFIG_GRKERNSEC
+	spin_lock_bh(&gr_conn_table_lock);
+	gr_del_task_from_ip_table_nolock(task->signal);
+	spin_unlock_bh(&gr_conn_table_lock);
+#endif
+	return;
+}
+
+void
+gr_attach_curr_ip(const struct sock *sk)
+{
+#ifdef CONFIG_GRKERNSEC
+	struct signal_struct *p, *set;
+	const struct inet_sock *inet = inet_sk(sk);	
+
+	if (unlikely(sk->sk_protocol != IPPROTO_TCP))
+		return;
+
+	set = current->signal;
+
+	spin_lock_bh(&gr_conn_table_lock);
+	p = gr_lookup_task_ip_table(inet->inet_daddr, inet->inet_rcv_saddr,
+				    inet->inet_dport, inet->inet_sport);
+	if (unlikely(p != NULL)) {
+		set->curr_ip = p->curr_ip;
+		set->used_accept = 1;
+		gr_del_task_from_ip_table_nolock(p);
+		spin_unlock_bh(&gr_conn_table_lock);
+		return;
+	}
+	spin_unlock_bh(&gr_conn_table_lock);
+
+	set->curr_ip = inet->inet_daddr;
+	set->used_accept = 1;
+#endif
+	return;
+}
+
+int
+gr_handle_sock_all(const int family, const int type, const int protocol)
+{
+#ifdef CONFIG_GRKERNSEC_SOCKET_ALL
+	if (grsec_enable_socket_all && in_group_p(grsec_socket_all_gid) &&
+	    (family != AF_UNIX)) {
+		if (family == AF_INET)
+			gr_log_str3(GR_DONT_AUDIT, GR_SOCK_MSG, gr_sockfamily_to_name(family), gr_socktype_to_name(type), gr_proto_to_name(protocol));
+		else
+			gr_log_str2_int(GR_DONT_AUDIT, GR_SOCK_NOINET_MSG, gr_sockfamily_to_name(family), gr_socktype_to_name(type), protocol);
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_sock_server(const struct sockaddr *sck)
+{
+#ifdef CONFIG_GRKERNSEC_SOCKET_SERVER
+	if (grsec_enable_socket_server &&
+	    in_group_p(grsec_socket_server_gid) &&
+	    sck && (sck->sa_family != AF_UNIX) &&
+	    (sck->sa_family != AF_LOCAL)) {
+		gr_log_noargs(GR_DONT_AUDIT, GR_BIND_MSG);
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_sock_server_other(const struct sock *sck)
+{
+#ifdef CONFIG_GRKERNSEC_SOCKET_SERVER
+	if (grsec_enable_socket_server &&
+	    in_group_p(grsec_socket_server_gid) &&
+	    sck && (sck->sk_family != AF_UNIX) &&
+	    (sck->sk_family != AF_LOCAL)) {
+		gr_log_noargs(GR_DONT_AUDIT, GR_BIND_MSG);
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
+
+int
+gr_handle_sock_client(const struct sockaddr *sck)
+{
+#ifdef CONFIG_GRKERNSEC_SOCKET_CLIENT
+	if (grsec_enable_socket_client && in_group_p(grsec_socket_client_gid) &&
+	    sck && (sck->sa_family != AF_UNIX) &&
+	    (sck->sa_family != AF_LOCAL)) {
+		gr_log_noargs(GR_DONT_AUDIT, GR_CONNECT_MSG);
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_sysctl.c b/grsecurity/grsec_sysctl.c
new file mode 100644
index 000000000000..4f673f8c21d8
--- /dev/null
+++ b/grsecurity/grsec_sysctl.c
@@ -0,0 +1,497 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/sysctl.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+
+int
+gr_handle_sysctl_mod(const char *dirname, const char *name, const int op)
+{
+#ifdef CONFIG_GRKERNSEC_SYSCTL
+	if (dirname == NULL || name == NULL)
+		return 0;
+	if (!strcmp(dirname, "grsecurity") && grsec_lock && (op & MAY_WRITE)) {
+		gr_log_str(GR_DONT_AUDIT, GR_SYSCTL_MSG, name);
+		return -EACCES;
+	}
+#endif
+	return 0;
+}
+
+#if defined(CONFIG_GRKERNSEC_ROFS) || defined(CONFIG_GRKERNSEC_DENYUSB)
+static int __maybe_unused __read_only one = 1;
+#endif
+
+#if defined(CONFIG_GRKERNSEC_SYSCTL) || defined(CONFIG_GRKERNSEC_ROFS) || \
+	defined(CONFIG_GRKERNSEC_DENYUSB)
+struct ctl_table grsecurity_table[] = {
+#ifdef CONFIG_GRKERNSEC_SYSCTL
+#ifdef CONFIG_GRKERNSEC_SYSCTL_DISTRO
+#ifdef CONFIG_GRKERNSEC_IO
+	{
+		.procname	= "disable_priv_io",
+		.data		= &grsec_disable_privio,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#endif
+#ifdef CONFIG_GRKERNSEC_LINK
+	{
+		.procname	= "linking_restrictions",
+		.data		= &grsec_enable_link,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	{
+		.procname	= "enforce_symlinksifowner",
+		.data		= &grsec_enable_symlinkown,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+	{
+		.procname	= "symlinkown_gid",
+		.data		= &grsec_symlinkown_gid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_BRUTE
+	{
+		.procname	= "deter_bruteforce",
+		.data		= &grsec_enable_brute,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_FIFO
+	{
+		.procname	= "fifo_restrictions",
+		.data		= &grsec_enable_fifo,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_PTRACE_READEXEC
+	{
+		.procname	= "ptrace_readexec",
+		.data		= &grsec_enable_ptrace_readexec,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_SETXID
+	{
+		.procname	= "consistent_setxid",
+		.data		= &grsec_enable_setxid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+	{
+		.procname	= "ip_blackhole",
+		.data		= &grsec_enable_blackhole,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+	{
+		.procname	= "lastack_retries",
+		.data		= &grsec_lastack_retries,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_EXECLOG
+	{
+		.procname	= "exec_logging",
+		.data		= &grsec_enable_execlog,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+	{
+		.procname	= "rwxmap_logging",
+		.data		= &grsec_enable_log_rwxmaps,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_SIGNAL
+	{
+		.procname	= "signal_logging",
+		.data		= &grsec_enable_signal,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_FORKFAIL
+	{
+		.procname	= "forkfail_logging",
+		.data		= &grsec_enable_forkfail,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_TIME
+	{
+		.procname	= "timechange_logging",
+		.data		= &grsec_enable_time,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_SHMAT
+	{
+		.procname	= "chroot_deny_shmat",
+		.data		= &grsec_enable_chroot_shmat,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_UNIX
+	{
+		.procname	= "chroot_deny_unix",
+		.data		= &grsec_enable_chroot_unix,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_MOUNT
+	{
+		.procname	= "chroot_deny_mount",
+		.data		= &grsec_enable_chroot_mount,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_FCHDIR
+	{
+		.procname	= "chroot_deny_fchdir",
+		.data		= &grsec_enable_chroot_fchdir,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_DOUBLE
+	{
+		.procname	= "chroot_deny_chroot",
+		.data		= &grsec_enable_chroot_double,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_PIVOT
+	{
+		.procname	= "chroot_deny_pivot",
+		.data		= &grsec_enable_chroot_pivot,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_CHDIR
+	{
+		.procname	= "chroot_enforce_chdir",
+		.data		= &grsec_enable_chroot_chdir,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_CHMOD
+	{
+		.procname	= "chroot_deny_chmod",
+		.data		= &grsec_enable_chroot_chmod,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_MKNOD
+	{
+		.procname	= "chroot_deny_mknod",
+		.data		= &grsec_enable_chroot_mknod,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_NICE
+	{
+		.procname	= "chroot_restrict_nice",
+		.data		= &grsec_enable_chroot_nice,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_EXECLOG
+	{
+		.procname	= "chroot_execlog",
+		.data		= &grsec_enable_chroot_execlog,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_CAPS
+	{
+		.procname	= "chroot_caps",
+		.data		= &grsec_enable_chroot_caps,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+	{
+		.procname	= "chroot_deny_bad_rename",
+		.data		= &grsec_enable_chroot_rename,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_SYSCTL
+	{
+		.procname	= "chroot_deny_sysctl",
+		.data		= &grsec_enable_chroot_sysctl,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_TPE
+	{
+		.procname	= "tpe",
+		.data		= &grsec_enable_tpe,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+	{
+		.procname	= "tpe_gid",
+		.data		= &grsec_tpe_gid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_TPE_INVERT
+	{
+		.procname	= "tpe_invert",
+		.data		= &grsec_enable_tpe_invert,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_TPE_ALL
+	{
+		.procname	= "tpe_restrict_all",
+		.data		= &grsec_enable_tpe_all,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_SOCKET_ALL
+	{
+		.procname	= "socket_all",
+		.data		= &grsec_enable_socket_all,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+	{
+		.procname	= "socket_all_gid",
+		.data		= &grsec_socket_all_gid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_SOCKET_CLIENT
+	{
+		.procname	= "socket_client",
+		.data		= &grsec_enable_socket_client,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+	{
+		.procname	= "socket_client_gid",
+		.data		= &grsec_socket_client_gid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_SOCKET_SERVER
+	{
+		.procname	= "socket_server",
+		.data		= &grsec_enable_socket_server,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+	{
+		.procname	= "socket_server_gid",
+		.data		= &grsec_socket_server_gid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_GROUP
+	{
+		.procname	= "audit_group",
+		.data		= &grsec_enable_group,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+	{
+		.procname	= "audit_gid",
+		.data		= &grsec_audit_gid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_CHDIR
+	{
+		.procname	= "audit_chdir",
+		.data		= &grsec_enable_chdir,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_MOUNT
+	{
+		.procname	= "audit_mount",
+		.data		= &grsec_enable_mount,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_DMESG
+	{
+		.procname	= "dmesg",
+		.data		= &grsec_enable_dmesg,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_CHROOT_FINDTASK
+	{
+		.procname	= "chroot_findtask",
+		.data		= &grsec_enable_chroot_findtask,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_RESLOG
+	{
+		.procname	= "resource_logging",
+		.data		= &grsec_resource_logging,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_AUDIT_PTRACE
+	{
+		.procname	= "audit_ptrace",
+		.data		= &grsec_enable_audit_ptrace,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_HARDEN_PTRACE
+	{
+		.procname	= "harden_ptrace",
+		.data		= &grsec_enable_harden_ptrace,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_HARDEN_IPC
+	{
+		.procname	= "harden_ipc",
+		.data		= &grsec_enable_harden_ipc,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_HARDEN_TTY
+	{
+		.procname	= "harden_tty",
+		.data		= &grsec_enable_harden_tty,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+	{
+		.procname	= "grsec_lock",
+		.data		= &grsec_lock,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_ROFS
+	{
+		.procname	= "romount_protect",
+		.data		= &grsec_enable_rofs,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_minmax_secure,
+		.extra1		= &one,
+		.extra2		= &one,
+	},
+#endif
+#if defined(CONFIG_GRKERNSEC_DENYUSB) && !defined(CONFIG_GRKERNSEC_DENYUSB_FORCE)
+	{
+		.procname	= "deny_new_usb",
+		.data		= &grsec_deny_new_usb,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec_secure,
+	},
+#endif
+	{ }
+};
+#endif
diff --git a/grsecurity/grsec_time.c b/grsecurity/grsec_time.c
new file mode 100644
index 000000000000..61b514e0d46c
--- /dev/null
+++ b/grsecurity/grsec_time.c
@@ -0,0 +1,16 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/grinternal.h>
+#include <linux/module.h>
+
+void
+gr_log_timechange(void)
+{
+#ifdef CONFIG_GRKERNSEC_TIME
+	if (grsec_enable_time)
+		gr_log_noargs(GR_DONT_AUDIT_GOOD, GR_TIME_MSG);
+#endif
+	return;
+}
+
+EXPORT_SYMBOL_GPL(gr_log_timechange);
diff --git a/grsecurity/grsec_tpe.c b/grsecurity/grsec_tpe.c
new file mode 100644
index 000000000000..cbd277622bbf
--- /dev/null
+++ b/grsecurity/grsec_tpe.c
@@ -0,0 +1,78 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/grinternal.h>
+
+extern int gr_acl_tpe_check(void);
+
+int
+gr_tpe_allow(const struct file *file)
+{
+#ifdef CONFIG_GRKERNSEC
+	struct inode *inode = d_backing_inode(file->f_path.dentry->d_parent);
+	struct inode *file_inode = d_backing_inode(file->f_path.dentry);
+	const struct cred *cred = current_cred();
+	char *msg = NULL;
+	char *msg2 = NULL;
+
+	// never restrict root
+	if (gr_is_global_root(cred->uid))
+		return 1;
+
+	if (grsec_enable_tpe) {
+#ifdef CONFIG_GRKERNSEC_TPE_INVERT
+		if (grsec_enable_tpe_invert && !in_group_p(grsec_tpe_gid))
+			msg = "not being in trusted group";
+		else if (!grsec_enable_tpe_invert && in_group_p(grsec_tpe_gid))
+			msg = "being in untrusted group";
+#else
+		if (in_group_p(grsec_tpe_gid))
+			msg = "being in untrusted group";
+#endif
+	}
+	if (!msg && gr_acl_tpe_check())
+		msg = "being in untrusted role";
+
+	// not in any affected group/role
+	if (!msg)
+		goto next_check;
+
+	if (gr_is_global_nonroot(inode->i_uid))
+		msg2 = "file in non-root-owned directory";
+	else if (inode->i_mode & S_IWOTH)
+		msg2 = "file in world-writable directory";
+	else if ((inode->i_mode & S_IWGRP) && gr_is_global_nonroot_gid(inode->i_gid))
+		msg2 = "file in group-writable directory";
+	else if (file_inode->i_mode & S_IWOTH)
+		msg2 = "file is world-writable";
+
+	if (msg && msg2) {
+		char fullmsg[70] = {0};
+		snprintf(fullmsg, sizeof(fullmsg)-1, "%s and %s", msg, msg2);
+		gr_log_str_fs(GR_DONT_AUDIT, GR_EXEC_TPE_MSG, fullmsg, file->f_path.dentry, file->f_path.mnt);
+		return 0;
+	}
+	msg = NULL;
+next_check:
+#ifdef CONFIG_GRKERNSEC_TPE_ALL
+	if (!grsec_enable_tpe || !grsec_enable_tpe_all)
+		return 1;
+
+	if (gr_is_global_nonroot(inode->i_uid) && !uid_eq(inode->i_uid, cred->uid))
+		msg = "directory not owned by user";
+	else if (inode->i_mode & S_IWOTH)
+		msg = "file in world-writable directory";
+	else if ((inode->i_mode & S_IWGRP) && gr_is_global_nonroot_gid(inode->i_gid))
+		msg = "file in group-writable directory";
+	else if (file_inode->i_mode & S_IWOTH)
+		msg = "file is world-writable";
+
+	if (msg) {
+		gr_log_str_fs(GR_DONT_AUDIT, GR_EXEC_TPE_MSG, msg, file->f_path.dentry, file->f_path.mnt);
+		return 0;
+	}
+#endif
+#endif
+	return 1;
+}
diff --git a/grsecurity/grsec_tty.c b/grsecurity/grsec_tty.c
new file mode 100644
index 000000000000..ad8b9c542388
--- /dev/null
+++ b/grsecurity/grsec_tty.c
@@ -0,0 +1,18 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/grsecurity.h>
+#include <linux/grinternal.h>
+#include <linux/capability.h>
+#include <linux/tty.h>
+
+int gr_handle_tiocsti(struct tty_struct *tty)
+{
+#ifdef CONFIG_GRKERNSEC_HARDEN_TTY
+	if (grsec_enable_harden_tty && (current->signal->tty == tty) &&
+	    !capable(CAP_SYS_ADMIN)) {
+		gr_log_noargs(GR_DONT_AUDIT, GR_TIOCSTI_MSG);
+		return 1;
+	}
+#endif
+	return 0;
+}
diff --git a/grsecurity/grsec_usb.c b/grsecurity/grsec_usb.c
new file mode 100644
index 000000000000..ae02d8e05267
--- /dev/null
+++ b/grsecurity/grsec_usb.c
@@ -0,0 +1,15 @@
+#include <linux/kernel.h>
+#include <linux/grinternal.h>
+#include <linux/module.h>
+
+int gr_handle_new_usb(void)
+{
+#ifdef CONFIG_GRKERNSEC_DENYUSB
+	if (grsec_deny_new_usb) {
+		printk(KERN_ALERT "grsec: denied insert of new USB device\n");
+		return 1;
+	}
+#endif
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gr_handle_new_usb);
diff --git a/grsecurity/grsum.c b/grsecurity/grsum.c
new file mode 100644
index 000000000000..1af1e63a35c5
--- /dev/null
+++ b/grsecurity/grsum.c
@@ -0,0 +1,56 @@
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/scatterlist.h>
+#include <linux/crypto.h>
+#include <linux/gracl.h>
+#include <crypto/algapi.h>
+#include <crypto/hash.h>
+
+#if !defined(CONFIG_CRYPTO) || defined(CONFIG_CRYPTO_MODULE) || !defined(CONFIG_CRYPTO_SHA256) || defined(CONFIG_CRYPTO_SHA256_MODULE)
+#error "crypto and sha256 must be built into the kernel"
+#endif
+
+int
+chkpw(struct gr_arg *entry, unsigned char *salt, unsigned char *sum)
+{
+	struct crypto_ahash *tfm;
+	struct ahash_request *req;
+	struct scatterlist sg[2];
+	unsigned char temp_sum[GR_SHA_LEN];
+	unsigned long *tmpsumptr = (unsigned long *)temp_sum;
+	unsigned long *sumptr = (unsigned long *)sum;
+	int retval = 1;
+
+	tfm = crypto_alloc_ahash("sha256", 0, CRYPTO_ALG_ASYNC);
+	if (IS_ERR(tfm))
+		goto out_wipe;
+
+	sg_init_table(sg, 2);
+	sg_set_buf(&sg[0], salt, GR_SALT_LEN);
+	sg_set_buf(&sg[1], entry->pw, strlen((const char *)entry->pw));
+
+	req = ahash_request_alloc(tfm, GFP_KERNEL);
+	if (!req) {
+		crypto_free_ahash(tfm);
+		goto out_wipe;
+	}
+
+	ahash_request_set_callback(req, 0, NULL, NULL);
+	ahash_request_set_crypt(req, sg, temp_sum, GR_SALT_LEN + strlen((const char *)entry->pw));
+
+	if (crypto_ahash_digest(req))
+		goto out_free;
+
+	if (!crypto_memneq(sumptr, tmpsumptr, GR_SHA_LEN))
+		retval = 0;
+
+out_free:
+	ahash_request_free(req);
+	crypto_free_ahash(tfm);
+out_wipe:
+	memset(entry->pw, 0, GR_PW_LEN);
+
+	return retval;
+}
diff --git a/include/linux/binfmts.h b/include/linux/binfmts.h
index 3b1f424034c5..c8196d80551a 100644
--- a/include/linux/binfmts.h
+++ b/include/linux/binfmts.h
@@ -44,7 +44,7 @@ struct linux_binprm {
 	unsigned interp_flags;
 	unsigned interp_data;
 	unsigned long loader, exec;
-};
+} __randomize_layout;
 
 #define BINPRM_FLAGS_ENFORCE_NONDUMP_BIT 0
 #define BINPRM_FLAGS_ENFORCE_NONDUMP (1 << BINPRM_FLAGS_ENFORCE_NONDUMP_BIT)
@@ -79,8 +79,9 @@ struct linux_binfmt {
 	int (*load_shlib)(struct file *);
 	int (*core_dump)(struct coredump_params *cprm);
 	void (*handle_mprotect)(struct vm_area_struct *vma, unsigned long newflags);
+	void (*handle_mmap)(struct file *);
 	unsigned long min_coredump;	/* minimal dump size */
-} __do_const;
+} __do_const __randomize_layout;
 
 extern void __register_binfmt(struct linux_binfmt *fmt, int insert);
 
diff --git a/include/linux/capability.h b/include/linux/capability.h
index 6ffb67e10c06..ef1ec2aa023f 100644
--- a/include/linux/capability.h
+++ b/include/linux/capability.h
@@ -231,6 +231,10 @@ static inline bool capable(int cap)
 {
 	return true;
 }
+static inline bool capable_nolog(int cap)
+{
+	return true;
+}
 static inline bool ns_capable(struct user_namespace *ns, int cap)
 {
 	return true;
@@ -242,10 +246,14 @@ static inline bool ns_capable_noaudit(struct user_namespace *ns, int cap)
 #endif /* CONFIG_MULTIUSER */
 extern bool privileged_wrt_inode_uidgid(struct user_namespace *ns, const struct inode *inode);
 extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);
+extern bool capable_wrt_inode_uidgid_nolog(const struct inode *inode, int cap);
 extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
+extern bool capable_nolog(int cap);
 extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
 
 /* audit system wants to get cap info from files as well */
 extern int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps);
 
+extern int is_privileged_binary(const struct dentry *dentry);
+
 #endif /* !_LINUX_CAPABILITY_H */
diff --git a/include/linux/cdev.h b/include/linux/cdev.h
index f8763615a5f2..7c05fd9dd830 100644
--- a/include/linux/cdev.h
+++ b/include/linux/cdev.h
@@ -16,7 +16,7 @@ struct cdev {
 	struct list_head list;
 	dev_t dev;
 	unsigned int count;
-};
+} __randomize_layout;
 
 void cdev_init(struct cdev *, const struct file_operations *);
 
diff --git a/include/linux/compiler-gcc.h b/include/linux/compiler-gcc.h
index 79b72610635d..dc13b5a92a29 100644
--- a/include/linux/compiler-gcc.h
+++ b/include/linux/compiler-gcc.h
@@ -194,6 +194,11 @@
 
 #if GCC_VERSION >= 40500
 
+#ifdef RANDSTRUCT_PLUGIN
+#define __randomize_layout __attribute__((randomize_layout))
+#define __no_randomize_layout __attribute__((no_randomize_layout))
+#endif
+
 #ifdef CONSTIFY_PLUGIN
 #define __no_const __attribute__((no_const))
 #define __do_const __attribute__((do_const))
diff --git a/include/linux/compiler.h b/include/linux/compiler.h
index 2e1fda8299dc..a7444a7b2ea9 100644
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -447,6 +447,14 @@ void __read_once_size_nocheck(const volatile void *p, void *res, int size)
 # define __latent_entropy
 #endif
 
+#ifndef __randomize_layout
+# define __randomize_layout
+#endif
+
+#ifndef __no_randomize_layout
+# define __no_randomize_layout
+#endif
+
 #ifndef __no_const
 # define __no_const
 #endif
diff --git a/include/linux/cred.h b/include/linux/cred.h
index f0e70a1bb3ac..0de3207d3efe 100644
--- a/include/linux/cred.h
+++ b/include/linux/cred.h
@@ -30,7 +30,7 @@ struct group_info {
 	atomic_t	usage;
 	int		ngroups;
 	kgid_t		gid[0];
-};
+} __randomize_layout;
 
 /**
  * get_group_info - Get a reference to a group info structure
@@ -144,7 +144,7 @@ struct cred {
 	struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */
 	struct group_info *group_info;	/* supplementary groups for euid/fsgid */
 	struct rcu_head	rcu;		/* RCU deletion hook */
-};
+} __randomize_layout;
 
 extern void __put_cred(struct cred *);
 extern void exit_creds(struct task_struct *);
@@ -202,6 +202,9 @@ static inline void validate_creds_for_do_exit(struct task_struct *tsk)
 static inline void validate_process_creds(void)
 {
 }
+static inline void validate_task_creds(struct task_struct *task)
+{
+}
 #endif
 
 static inline bool cap_ambient_invariant_ok(const struct cred *cred)
@@ -346,6 +349,7 @@ static inline void put_cred(const struct cred *_cred)
 
 #define task_uid(task)		(task_cred_xxx((task), uid))
 #define task_euid(task)		(task_cred_xxx((task), euid))
+#define task_securebits(task)	(task_cred_xxx((task), securebits))
 
 #define current_cred_xxx(xxx)			\
 ({						\
diff --git a/include/linux/dcache.h b/include/linux/dcache.h
index 52fff00af3dc..2b3dcac0b86b 100644
--- a/include/linux/dcache.h
+++ b/include/linux/dcache.h
@@ -102,6 +102,9 @@ struct dentry {
 		struct list_head d_lru;		/* LRU list */
 		wait_queue_head_t *d_wait;	/* in-lookup ones only */
 	};
+#ifdef CONFIG_GRKERNSEC_CHROOT_RENAME
+	atomic_t chroot_refcnt;		/* tracks use of directory in chroot */
+#endif
 	struct list_head d_child;	/* child of parent list */
 	struct list_head d_subdirs;	/* our children */
 	/*
@@ -112,7 +115,7 @@ struct dentry {
 		struct hlist_bl_node d_in_lookup_hash;	/* only for in-lookup ones */
 	 	struct rcu_head d_rcu;
 	} d_u;
-};
+} __randomize_layout;
 
 /*
  * dentry->d_lock spinlock nesting subclasses:
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 44d97a52ff50..473e4cd78de1 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -329,7 +329,7 @@ struct kiocb {
 	void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 	void			*private;
 	int			ki_flags;
-};
+} __randomize_layout;
 
 static inline bool is_sync_kiocb(struct kiocb *kiocb)
 {
@@ -446,7 +446,7 @@ struct address_space {
 	gfp_t			gfp_mask;	/* implicit gfp mask for allocations */
 	struct list_head	private_list;	/* ditto */
 	void			*private_data;	/* ditto */
-} __attribute__((aligned(sizeof(long))));
+} __attribute__((aligned(sizeof(long)))) __randomize_layout;
 	/*
 	 * On most architectures that alignment is already the case; but
 	 * must be enforced here for CRIS, to let the least significant bit
@@ -488,7 +488,7 @@ struct block_device {
 	int			bd_fsfreeze_count;
 	/* Mutex for freeze */
 	struct mutex		bd_fsfreeze_mutex;
-};
+} __randomize_layout;
 
 /*
  * Radix-tree tags, for tagging dirty and writeback pages within the pagecache
@@ -703,7 +703,7 @@ struct inode {
 #endif
 
 	void			*i_private; /* fs or device private pointer */
-};
+} __randomize_layout;
 
 static inline int inode_unhashed(struct inode *inode)
 {
@@ -913,7 +913,7 @@ struct file {
 	struct list_head	f_tfile_llink;
 #endif /* #ifdef CONFIG_EPOLL */
 	struct address_space	*f_mapping;
-} __attribute__((aligned(4)));	/* lest something weird decides that 2 is OK */
+} __attribute__((aligned(4))) __randomize_layout;	/* lest something weird decides that 2 is OK */
 
 struct file_handle {
 	__u32 handle_bytes;
@@ -1048,7 +1048,7 @@ struct file_lock {
 			int state;		/* state of grant or error if -ve */
 		} afs;
 	} fl_u;
-};
+} __randomize_layout;
 
 struct file_lock_context {
 	spinlock_t		flc_lock;
@@ -1447,7 +1447,7 @@ struct super_block {
 
 	spinlock_t		s_inode_wblist_lock;
 	struct list_head	s_inodes_wb;	/* writeback inodes */
-};
+} __randomize_layout;
 
 /* Helper functions so that in most cases filesystems will
  * not need to deal directly with kuid_t and kgid_t and can
@@ -1731,7 +1731,7 @@ struct file_operations {
 			u64);
 	ssize_t (*dedupe_file_range)(struct file *, u64, u64, struct file *,
 			u64);
-} __do_const;
+} __do_const __randomize_layout;
 typedef struct file_operations __no_const file_operations_no_const;
 
 struct inode_operations {
@@ -3210,4 +3210,14 @@ static inline bool dir_relax_shared(struct inode *inode)
 extern bool path_noexec(const struct path *path);
 extern void inode_nohighmem(struct inode *inode);
 
+static inline bool is_sidechannel_device(const struct inode *inode)
+{
+#ifdef CONFIG_GRKERNSEC_DEVICE_SIDECHANNEL
+	umode_t mode = inode->i_mode;
+	return ((S_ISCHR(mode) || S_ISBLK(mode)) && (mode & (S_IROTH | S_IWOTH)));
+#else
+	return false;
+#endif
+}
+
 #endif /* _LINUX_FS_H */
diff --git a/include/linux/fs_struct.h b/include/linux/fs_struct.h
index e0e1e5f6926f..fd236105cae6 100644
--- a/include/linux/fs_struct.h
+++ b/include/linux/fs_struct.h
@@ -12,7 +12,7 @@ struct fs_struct {
 	int umask;
 	int in_exec;
 	struct path root, pwd;
-};
+} __randomize_layout;
 
 extern struct kmem_cache *fs_cachep;
 
diff --git a/include/linux/fsnotify.h b/include/linux/fsnotify.h
index 31f1ad9f67e5..fd880400b463 100644
--- a/include/linux/fsnotify.h
+++ b/include/linux/fsnotify.h
@@ -180,6 +180,9 @@ static inline void fsnotify_access(struct file *file)
 	struct inode *inode = path->dentry->d_inode;
 	__u32 mask = FS_ACCESS;
 
+	if (is_sidechannel_device(inode))
+		return;
+
 	if (S_ISDIR(inode->i_mode))
 		mask |= FS_ISDIR;
 
@@ -198,6 +201,9 @@ static inline void fsnotify_modify(struct file *file)
 	struct inode *inode = path->dentry->d_inode;
 	__u32 mask = FS_MODIFY;
 
+	if (is_sidechannel_device(inode))
+		return;
+
 	if (S_ISDIR(inode->i_mode))
 		mask |= FS_ISDIR;
 
diff --git a/include/linux/gracl.h b/include/linux/gracl.h
new file mode 100644
index 000000000000..a3c4df76dc80
--- /dev/null
+++ b/include/linux/gracl.h
@@ -0,0 +1,342 @@
+#ifndef GR_ACL_H
+#define GR_ACL_H
+
+#include <linux/grdefs.h>
+#include <linux/resource.h>
+#include <linux/capability.h>
+#include <linux/dcache.h>
+#include <asm/resource.h>
+
+/* Major status information */
+
+#define GR_VERSION  "grsecurity 3.1"
+#define GRSECURITY_VERSION 0x3100
+
+enum {
+	GR_SHUTDOWN = 0,
+	GR_ENABLE = 1,
+	GR_SPROLE = 2,
+	GR_OLDRELOAD = 3,
+	GR_SEGVMOD = 4,
+	GR_STATUS = 5,
+	GR_UNSPROLE = 6,
+	GR_PASSSET = 7,
+	GR_SPROLEPAM = 8,
+	GR_RELOAD = 9,
+};
+
+/* Password setup definitions
+ * kernel/grhash.c */
+enum {
+	GR_PW_LEN = 128,
+	GR_SALT_LEN = 16,
+	GR_SHA_LEN = 32,
+};
+
+enum {
+	GR_SPROLE_LEN = 64,
+};
+
+enum {
+	GR_NO_GLOB = 0,
+	GR_REG_GLOB,
+	GR_CREATE_GLOB
+};
+
+#define GR_NLIMITS 32
+
+/* Begin Data Structures */
+
+struct sprole_pw {
+	unsigned char *rolename;
+	unsigned char salt[GR_SALT_LEN];
+	unsigned char sum[GR_SHA_LEN];	/* 256-bit SHA hash of the password */
+};
+
+struct name_entry {
+	__u32 key;
+	u64 inode;
+	dev_t device;
+	char *name;
+	__u16 len;
+	__u8 deleted;
+	struct name_entry *prev;
+	struct name_entry *next;
+};
+
+struct inodev_entry {
+	struct name_entry *nentry;
+	struct inodev_entry *prev;
+	struct inodev_entry *next;
+};
+
+struct acl_role_db {
+	struct acl_role_label **r_hash;
+	__u32 r_size;
+};
+
+struct inodev_db {
+	struct inodev_entry **i_hash;
+	__u32 i_size;
+};
+
+struct name_db {
+	struct name_entry **n_hash;
+	__u32 n_size;
+};
+
+struct crash_uid {
+	uid_t uid;
+	unsigned long expires;
+};
+
+struct gr_hash_struct {
+	void **table;
+	void **nametable;
+	void *first;
+	__u32 table_size;
+	__u32 used_size;
+	int type;
+};
+
+/* Userspace Grsecurity ACL data structures */
+
+struct acl_subject_label {
+	char *filename;
+	u64 inode;
+	dev_t device;
+	__u32 mode;
+	kernel_cap_t cap_mask;
+	kernel_cap_t cap_lower;
+	kernel_cap_t cap_invert_audit;
+
+	struct rlimit res[GR_NLIMITS];
+	__u32 resmask;
+
+	__u8 user_trans_type;
+	__u8 group_trans_type;
+	uid_t *user_transitions;
+	gid_t *group_transitions;
+	__u16 user_trans_num;
+	__u16 group_trans_num;
+
+	__u32 sock_families[2];
+	__u32 ip_proto[8];
+	__u32 ip_type;
+	struct acl_ip_label **ips;
+	__u32 ip_num;
+	__u32 inaddr_any_override;
+
+	__u32 crashes;
+	unsigned long expires;
+
+	struct acl_subject_label *parent_subject;
+	struct gr_hash_struct *hash;
+	struct acl_subject_label *prev;
+	struct acl_subject_label *next;
+
+	struct acl_object_label **obj_hash;
+	__u32 obj_hash_size;
+	__u16 pax_flags;
+};
+
+struct role_allowed_ip {
+	__u32 addr;
+	__u32 netmask;
+
+	struct role_allowed_ip *prev;
+	struct role_allowed_ip *next;
+};
+
+struct role_transition {
+	char *rolename;
+
+	struct role_transition *prev;
+	struct role_transition *next;
+};
+
+struct acl_role_label {
+	char *rolename;
+	uid_t uidgid;
+	__u16 roletype;
+
+	__u16 auth_attempts;
+	unsigned long expires;
+
+	struct acl_subject_label *root_label;
+	struct gr_hash_struct *hash;
+
+	struct acl_role_label *prev;
+	struct acl_role_label *next;
+
+	struct role_transition *transitions;
+	struct role_allowed_ip *allowed_ips;
+	uid_t *domain_children;
+	__u16 domain_child_num;
+
+	umode_t umask;
+
+	struct acl_subject_label **subj_hash;
+	__u32 subj_hash_size;
+};
+
+struct user_acl_role_db {
+	struct acl_role_label **r_table;
+	__u32 num_pointers;		/* Number of allocations to track */
+	__u32 num_roles;		/* Number of roles */
+	__u32 num_domain_children;	/* Number of domain children */
+	__u32 num_subjects;		/* Number of subjects */
+	__u32 num_objects;		/* Number of objects */
+};
+
+struct acl_object_label {
+	char *filename;
+	u64 inode;
+	dev_t device;
+	__u32 mode;
+
+	struct acl_subject_label *nested;
+	struct acl_object_label *globbed;
+
+	/* next two structures not used */
+
+	struct acl_object_label *prev;
+	struct acl_object_label *next;
+};
+
+struct acl_ip_label {
+	char *iface;
+	__u32 addr;
+	__u32 netmask;
+	__u16 low, high;
+	__u8 mode;
+	__u32 type;
+	__u32 proto[8];
+
+	/* next two structures not used */
+
+	struct acl_ip_label *prev;
+	struct acl_ip_label *next;
+};
+
+struct gr_arg {
+	struct user_acl_role_db role_db;
+	unsigned char pw[GR_PW_LEN];
+	unsigned char salt[GR_SALT_LEN];
+	unsigned char sum[GR_SHA_LEN];
+	unsigned char sp_role[GR_SPROLE_LEN];
+	struct sprole_pw *sprole_pws;
+	dev_t segv_device;
+	u64 segv_inode;
+	uid_t segv_uid;
+	__u16 num_sprole_pws;
+	__u16 mode;
+};
+
+struct gr_arg_wrapper {
+	struct gr_arg *arg;
+	__u32 version;
+	__u32 size;
+};
+
+struct subject_map {
+	struct acl_subject_label *user;
+	struct acl_subject_label *kernel;
+	struct subject_map *prev;
+	struct subject_map *next;
+};
+
+struct acl_subj_map_db {
+	struct subject_map **s_hash;
+	__u32 s_size;
+};
+
+struct gr_policy_state {
+	struct sprole_pw **acl_special_roles;
+	__u16 num_sprole_pws;
+	struct acl_role_label *kernel_role;
+	struct acl_role_label *role_list;
+	struct acl_role_label *default_role;
+	struct acl_role_db acl_role_set;
+	struct acl_subj_map_db subj_map_set;
+	struct name_db name_set;
+	struct inodev_db inodev_set;
+};
+
+struct gr_alloc_state {
+	unsigned long alloc_stack_next;
+	unsigned long alloc_stack_size;
+	void **alloc_stack;
+};
+
+struct gr_reload_state {
+	struct gr_policy_state oldpolicy;
+	struct gr_alloc_state oldalloc;
+	struct gr_policy_state newpolicy;
+	struct gr_alloc_state newalloc;
+	struct gr_policy_state *oldpolicy_ptr;
+	struct gr_alloc_state *oldalloc_ptr;
+	unsigned char oldmode;
+};
+
+/* End Data Structures Section */
+
+/* Hash functions generated by empirical testing by Brad Spengler
+   Makes good use of the low bits of the inode.  Generally 0-1 times
+   in loop for successful match.  0-3 for unsuccessful match.
+   Shift/add algorithm with modulus of table size and an XOR*/
+
+static __inline__ unsigned int
+gr_rhash(const uid_t uid, const __u16 type, const unsigned int sz)
+{
+	return ((((uid + type) << (16 + type)) ^ uid) % sz);
+}
+
+ static __inline__ unsigned int
+gr_shash(const struct acl_subject_label *userp, const unsigned int sz)
+{
+	return ((const unsigned long)userp % sz);
+}
+
+static __inline__ unsigned int
+gr_fhash(const u64 ino, const dev_t dev, const unsigned int sz)
+{
+	unsigned int rem;
+	div_u64_rem((ino + dev) ^ ((ino << 13) + (ino << 23) + (dev << 9)), sz, &rem);
+	return rem;
+}
+
+static __inline__ unsigned int
+gr_nhash(const char *name, const __u16 len, const unsigned int sz)
+{
+	return full_name_hash(NULL, (const unsigned char *)name, len) % sz;
+}
+
+#define FOR_EACH_SUBJECT_START(role,subj,iter) \
+	subj = NULL; \
+	iter = 0; \
+	while (iter < role->subj_hash_size) { \
+		if (subj == NULL) \
+			subj = role->subj_hash[iter]; \
+		if (subj == NULL) { \
+			iter++; \
+			continue; \
+		}
+
+#define FOR_EACH_SUBJECT_END(subj,iter) \
+		subj = subj->next; \
+		if (subj == NULL) \
+			iter++; \
+	}
+
+
+#define FOR_EACH_NESTED_SUBJECT_START(role,subj) \
+	subj = role->hash->first; \
+	while (subj != NULL) {
+
+#define FOR_EACH_NESTED_SUBJECT_END(subj) \
+		subj = subj->next; \
+	}
+
+#endif
+
diff --git a/include/linux/gracl_compat.h b/include/linux/gracl_compat.h
new file mode 100644
index 000000000000..af640920c025
--- /dev/null
+++ b/include/linux/gracl_compat.h
@@ -0,0 +1,156 @@
+#ifndef GR_ACL_COMPAT_H
+#define GR_ACL_COMPAT_H
+
+#include <linux/resource.h>
+#include <asm/resource.h>
+
+struct sprole_pw_compat {
+	compat_uptr_t rolename;
+	unsigned char salt[GR_SALT_LEN];
+	unsigned char sum[GR_SHA_LEN];
+};
+
+struct gr_hash_struct_compat {
+	compat_uptr_t table;
+	compat_uptr_t nametable;
+	compat_uptr_t first;
+	__u32 table_size;
+	__u32 used_size;
+	int type;
+};
+
+struct acl_subject_label_compat {
+	compat_uptr_t filename;
+	compat_u64 inode;
+	__u32 device;
+	__u32 mode;
+	kernel_cap_t cap_mask;
+	kernel_cap_t cap_lower;
+	kernel_cap_t cap_invert_audit;
+
+	struct compat_rlimit res[GR_NLIMITS];
+	__u32 resmask;
+
+	__u8 user_trans_type;
+	__u8 group_trans_type;
+	compat_uptr_t user_transitions;
+	compat_uptr_t group_transitions;
+	__u16 user_trans_num;
+	__u16 group_trans_num;
+
+	__u32 sock_families[2];
+	__u32 ip_proto[8];
+	__u32 ip_type;
+	compat_uptr_t ips;
+	__u32 ip_num;
+	__u32 inaddr_any_override;
+
+	__u32 crashes;
+	compat_ulong_t expires;
+
+	compat_uptr_t parent_subject;
+	compat_uptr_t hash;
+	compat_uptr_t prev;
+	compat_uptr_t next;
+
+	compat_uptr_t obj_hash;
+	__u32 obj_hash_size;
+	__u16 pax_flags;
+};
+
+struct role_allowed_ip_compat {
+	__u32 addr;
+	__u32 netmask;
+
+	compat_uptr_t prev;
+	compat_uptr_t next;
+};
+
+struct role_transition_compat {
+	compat_uptr_t rolename;
+
+	compat_uptr_t prev;
+	compat_uptr_t next;
+};
+
+struct acl_role_label_compat {
+	compat_uptr_t rolename;
+	uid_t uidgid;
+	__u16 roletype;
+
+	__u16 auth_attempts;
+	compat_ulong_t expires;
+
+	compat_uptr_t root_label;
+	compat_uptr_t hash;
+
+	compat_uptr_t prev;
+	compat_uptr_t next;
+
+	compat_uptr_t transitions;
+	compat_uptr_t allowed_ips;
+	compat_uptr_t domain_children;
+	__u16 domain_child_num;
+
+	umode_t umask;
+
+	compat_uptr_t subj_hash;
+	__u32 subj_hash_size;
+};
+
+struct user_acl_role_db_compat {
+	compat_uptr_t r_table;
+	__u32 num_pointers;
+	__u32 num_roles;
+	__u32 num_domain_children;
+	__u32 num_subjects;
+	__u32 num_objects;
+};
+
+struct acl_object_label_compat {
+	compat_uptr_t filename;
+	compat_u64 inode;
+	__u32 device;
+	__u32 mode;
+
+	compat_uptr_t nested;
+	compat_uptr_t globbed;
+
+	compat_uptr_t prev;
+	compat_uptr_t next;
+};
+
+struct acl_ip_label_compat {
+	compat_uptr_t iface;
+	__u32 addr;
+	__u32 netmask;
+	__u16 low, high;
+	__u8 mode;
+	__u32 type;
+	__u32 proto[8];
+
+	compat_uptr_t prev;
+	compat_uptr_t next;
+};
+
+struct gr_arg_compat {
+	struct user_acl_role_db_compat role_db;
+	unsigned char pw[GR_PW_LEN];
+	unsigned char salt[GR_SALT_LEN];
+	unsigned char sum[GR_SHA_LEN];
+	unsigned char sp_role[GR_SPROLE_LEN];
+	compat_uptr_t sprole_pws;
+	__u32 segv_device;
+	compat_u64 segv_inode;
+	uid_t segv_uid;
+	__u16 num_sprole_pws;
+	__u16 mode;
+};
+
+struct gr_arg_wrapper_compat {
+	compat_uptr_t arg;
+	__u32 version;
+	__u32 size;
+};
+
+#endif
diff --git a/include/linux/gralloc.h b/include/linux/gralloc.h
new file mode 100644
index 000000000000..323ecf28024c
--- /dev/null
+++ b/include/linux/gralloc.h
@@ -0,0 +1,9 @@
+#ifndef __GRALLOC_H
+#define __GRALLOC_H
+
+void acl_free_all(void);
+int acl_alloc_stack_init(unsigned long size);
+void *acl_alloc(unsigned long len);
+void *acl_alloc_num(unsigned long num, unsigned long len);
+
+#endif
diff --git a/include/linux/grdefs.h b/include/linux/grdefs.h
new file mode 100644
index 000000000000..be66033e666b
--- /dev/null
+++ b/include/linux/grdefs.h
@@ -0,0 +1,140 @@
+#ifndef GRDEFS_H
+#define GRDEFS_H
+
+/* Begin grsecurity status declarations */
+
+enum {
+	GR_READY = 0x01,
+	GR_STATUS_INIT = 0x00	// disabled state
+};
+
+/* Begin  ACL declarations */
+
+/* Role flags */
+
+enum {
+	GR_ROLE_USER = 0x0001,
+	GR_ROLE_GROUP = 0x0002,
+	GR_ROLE_DEFAULT = 0x0004,
+	GR_ROLE_SPECIAL = 0x0008,
+	GR_ROLE_AUTH = 0x0010,
+	GR_ROLE_NOPW = 0x0020,
+	GR_ROLE_GOD = 0x0040,
+	GR_ROLE_LEARN = 0x0080,
+	GR_ROLE_TPE = 0x0100,
+	GR_ROLE_DOMAIN = 0x0200,
+	GR_ROLE_PAM = 0x0400,
+	GR_ROLE_PERSIST = 0x0800
+};
+
+/* ACL Subject and Object mode flags */
+enum {
+	GR_DELETED = 0x80000000
+};
+
+/* ACL Object-only mode flags */
+enum {
+	GR_READ 	= 0x00000001,
+	GR_APPEND 	= 0x00000002,
+	GR_WRITE 	= 0x00000004,
+	GR_EXEC 	= 0x00000008,
+	GR_FIND 	= 0x00000010,
+	GR_INHERIT 	= 0x00000020,
+	GR_SETID 	= 0x00000040,
+	GR_CREATE 	= 0x00000080,
+	GR_DELETE 	= 0x00000100,
+	GR_LINK		= 0x00000200,
+	GR_AUDIT_READ 	= 0x00000400,
+	GR_AUDIT_APPEND = 0x00000800,
+	GR_AUDIT_WRITE 	= 0x00001000,
+	GR_AUDIT_EXEC 	= 0x00002000,
+	GR_AUDIT_FIND 	= 0x00004000,
+	GR_AUDIT_INHERIT= 0x00008000,
+	GR_AUDIT_SETID 	= 0x00010000,
+	GR_AUDIT_CREATE = 0x00020000,
+	GR_AUDIT_DELETE = 0x00040000,
+	GR_AUDIT_LINK	= 0x00080000,
+	GR_PTRACERD 	= 0x00100000,
+	GR_NOPTRACE	= 0x00200000,
+	GR_SUPPRESS 	= 0x00400000,
+	GR_NOLEARN 	= 0x00800000,
+	GR_INIT_TRANSFER= 0x01000000
+};
+
+#define GR_AUDITS (GR_AUDIT_READ | GR_AUDIT_WRITE | GR_AUDIT_APPEND | GR_AUDIT_EXEC | \
+		   GR_AUDIT_FIND | GR_AUDIT_INHERIT | GR_AUDIT_SETID | \
+		   GR_AUDIT_CREATE | GR_AUDIT_DELETE | GR_AUDIT_LINK)
+
+/* ACL subject-only mode flags */
+enum {
+	GR_KILL 	= 0x00000001,
+	GR_VIEW 	= 0x00000002,
+	GR_PROTECTED 	= 0x00000004,
+	GR_LEARN 	= 0x00000008,
+	GR_OVERRIDE 	= 0x00000010,
+	/* just a placeholder, this mode is only used in userspace */
+	GR_DUMMY 	= 0x00000020,
+	GR_PROTSHM	= 0x00000040,
+	GR_KILLPROC	= 0x00000080,
+	GR_KILLIPPROC	= 0x00000100,
+	/* just a placeholder, this mode is only used in userspace */
+	GR_NOTROJAN	= 0x00000200,
+	GR_PROTPROCFD	= 0x00000400,
+	GR_PROCACCT	= 0x00000800,
+	GR_RELAXPTRACE	= 0x00001000,
+	//GR_NESTED	= 0x00002000,
+	GR_INHERITLEARN	= 0x00004000,
+	GR_PROCFIND	= 0x00008000,
+	GR_POVERRIDE	= 0x00010000,
+	GR_KERNELAUTH	= 0x00020000,
+	GR_ATSECURE	= 0x00040000,
+	GR_SHMEXEC	= 0x00080000
+};
+
+enum {
+	GR_PAX_ENABLE_SEGMEXEC	= 0x0001,
+	GR_PAX_ENABLE_PAGEEXEC	= 0x0002,
+	GR_PAX_ENABLE_MPROTECT	= 0x0004,
+	GR_PAX_ENABLE_RANDMMAP	= 0x0008,
+	GR_PAX_ENABLE_EMUTRAMP	= 0x0010,
+	GR_PAX_DISABLE_SEGMEXEC	= 0x0100,
+	GR_PAX_DISABLE_PAGEEXEC	= 0x0200,
+	GR_PAX_DISABLE_MPROTECT	= 0x0400,
+	GR_PAX_DISABLE_RANDMMAP	= 0x0800,
+	GR_PAX_DISABLE_EMUTRAMP	= 0x1000,
+};
+
+enum {
+	GR_ID_USER	= 0x01,
+	GR_ID_GROUP	= 0x02,
+};
+
+enum {
+	GR_ID_ALLOW	= 0x01,
+	GR_ID_DENY	= 0x02,
+};
+
+#define GR_CRASH_RES	31
+#define GR_UIDTABLE_MAX 500
+
+/* begin resource learning section */
+enum {
+	GR_RLIM_CPU_BUMP = 60,
+	GR_RLIM_FSIZE_BUMP = 50000,
+	GR_RLIM_DATA_BUMP = 10000,
+	GR_RLIM_STACK_BUMP = 1000,
+	GR_RLIM_CORE_BUMP = 10000,
+	GR_RLIM_RSS_BUMP = 500000,
+	GR_RLIM_NPROC_BUMP = 1,
+	GR_RLIM_NOFILE_BUMP = 5,
+	GR_RLIM_MEMLOCK_BUMP = 50000,
+	GR_RLIM_AS_BUMP = 500000,
+	GR_RLIM_LOCKS_BUMP = 2,
+	GR_RLIM_SIGPENDING_BUMP = 5,
+	GR_RLIM_MSGQUEUE_BUMP = 10000,
+	GR_RLIM_NICE_BUMP = 1,
+	GR_RLIM_RTPRIO_BUMP = 1,
+	GR_RLIM_RTTIME_BUMP = 1000000
+};
+
+#endif
diff --git a/include/linux/grinternal.h b/include/linux/grinternal.h
new file mode 100644
index 000000000000..1dbf9c87108e
--- /dev/null
+++ b/include/linux/grinternal.h
@@ -0,0 +1,231 @@
+#ifndef __GRINTERNAL_H
+#define __GRINTERNAL_H
+
+#ifdef CONFIG_GRKERNSEC
+
+#include <linux/fs.h>
+#include <linux/mnt_namespace.h>
+#include <linux/nsproxy.h>
+#include <linux/gracl.h>
+#include <linux/grdefs.h>
+#include <linux/grmsg.h>
+
+void gr_add_learn_entry(const char *fmt, ...)
+	__attribute__ ((format (printf, 1, 2)));
+__u32 gr_search_file(const struct dentry *dentry, const __u32 mode,
+			    const struct vfsmount *mnt);
+__u32 gr_check_create(const struct dentry *new_dentry,
+			     const struct dentry *parent,
+			     const struct vfsmount *mnt, const __u32 mode);
+int gr_check_protected_task(const struct task_struct *task);
+__u32 to_gr_audit(const __u32 reqmode);
+int gr_set_acls(const int type);
+int gr_acl_is_enabled(void);
+char gr_roletype_to_char(void);
+
+void gr_handle_alertkill(struct task_struct *task);
+char *gr_to_filename(const struct dentry *dentry,
+			    const struct vfsmount *mnt);
+char *gr_to_filename1(const struct dentry *dentry,
+			    const struct vfsmount *mnt);
+char *gr_to_filename2(const struct dentry *dentry,
+			    const struct vfsmount *mnt);
+char *gr_to_filename3(const struct dentry *dentry,
+			    const struct vfsmount *mnt);
+
+extern int grsec_enable_ptrace_readexec;
+extern int grsec_enable_harden_ptrace;
+extern int grsec_enable_link;
+extern int grsec_enable_fifo;
+extern int grsec_enable_execve;
+extern int grsec_enable_shm;
+extern int grsec_enable_execlog;
+extern int grsec_enable_signal;
+extern int grsec_enable_audit_ptrace;
+extern int grsec_enable_forkfail;
+extern int grsec_enable_time;
+extern int grsec_enable_rofs;
+extern int grsec_deny_new_usb;
+extern int grsec_enable_chroot_shmat;
+extern int grsec_enable_chroot_mount;
+extern int grsec_enable_chroot_double;
+extern int grsec_enable_chroot_pivot;
+extern int grsec_enable_chroot_chdir;
+extern int grsec_enable_chroot_chmod;
+extern int grsec_enable_chroot_mknod;
+extern int grsec_enable_chroot_fchdir;
+extern int grsec_enable_chroot_nice;
+extern int grsec_enable_chroot_execlog;
+extern int grsec_enable_chroot_caps;
+extern int grsec_enable_chroot_rename;
+extern int grsec_enable_chroot_sysctl;
+extern int grsec_enable_chroot_unix;
+extern int grsec_enable_symlinkown;
+extern kgid_t grsec_symlinkown_gid;
+extern int grsec_enable_tpe;
+extern kgid_t grsec_tpe_gid;
+extern int grsec_enable_tpe_all;
+extern int grsec_enable_tpe_invert;
+extern int grsec_enable_socket_all;
+extern kgid_t grsec_socket_all_gid;
+extern int grsec_enable_socket_client;
+extern kgid_t grsec_socket_client_gid;
+extern int grsec_enable_socket_server;
+extern kgid_t grsec_socket_server_gid;
+extern kgid_t grsec_audit_gid;
+extern int grsec_enable_group;
+extern int grsec_enable_log_rwxmaps;
+extern int grsec_enable_mount;
+extern int grsec_enable_chdir;
+extern int grsec_resource_logging;
+extern int grsec_enable_blackhole;
+extern int grsec_lastack_retries;
+extern int grsec_enable_brute;
+extern int grsec_enable_harden_ipc;
+extern int grsec_enable_harden_tty;
+extern int grsec_lock;
+
+extern spinlock_t grsec_alert_lock;
+extern unsigned long grsec_alert_wtime;
+extern unsigned long grsec_alert_fyet;
+
+extern spinlock_t grsec_audit_lock;
+
+extern rwlock_t grsec_exec_file_lock;
+
+#define gr_task_fullpath(tsk) ((tsk)->exec_file ? \
+			gr_to_filename2((tsk)->exec_file->f_path.dentry, \
+			(tsk)->exec_file->f_path.mnt) : "/")
+
+#define gr_parent_task_fullpath(tsk) ((tsk)->real_parent->exec_file ? \
+			gr_to_filename3((tsk)->real_parent->exec_file->f_path.dentry, \
+			(tsk)->real_parent->exec_file->f_path.mnt) : "/")
+
+#define gr_task_fullpath0(tsk) ((tsk)->exec_file ? \
+			gr_to_filename((tsk)->exec_file->f_path.dentry, \
+			(tsk)->exec_file->f_path.mnt) : "/")
+
+#define gr_parent_task_fullpath0(tsk) ((tsk)->real_parent->exec_file ? \
+			gr_to_filename1((tsk)->real_parent->exec_file->f_path.dentry, \
+			(tsk)->real_parent->exec_file->f_path.mnt) : "/")
+
+#define proc_is_chrooted(tsk_a)  ((tsk_a)->gr_is_chrooted)
+
+#define have_same_root(tsk_a,tsk_b) ((tsk_a)->gr_chroot_dentry == (tsk_b)->gr_chroot_dentry)
+
+static inline bool gr_is_same_file(const struct file *file1, const struct file *file2)
+{
+	if (file1 && file2) {
+		const struct inode *inode1 = file1->f_path.dentry->d_inode;
+		const struct inode *inode2 = file2->f_path.dentry->d_inode;
+		if (inode1->i_ino == inode2->i_ino && inode1->i_sb->s_dev == inode2->i_sb->s_dev)
+			return true;
+	}
+
+	return false;
+}
+
+#define GR_CHROOT_CAPS {{ \
+	CAP_TO_MASK(CAP_LINUX_IMMUTABLE) | CAP_TO_MASK(CAP_NET_ADMIN) | \
+	CAP_TO_MASK(CAP_SYS_MODULE) | CAP_TO_MASK(CAP_SYS_RAWIO) | \
+	CAP_TO_MASK(CAP_SYS_PACCT) | CAP_TO_MASK(CAP_SYS_ADMIN) | \
+	CAP_TO_MASK(CAP_SYS_BOOT) | CAP_TO_MASK(CAP_SYS_TIME) | \
+	CAP_TO_MASK(CAP_NET_RAW) | CAP_TO_MASK(CAP_SYS_TTY_CONFIG) | \
+	CAP_TO_MASK(CAP_IPC_OWNER) | CAP_TO_MASK(CAP_SETFCAP), \
+	CAP_TO_MASK(CAP_SYSLOG) | CAP_TO_MASK(CAP_MAC_ADMIN) }}
+
+#define security_learn(normal_msg,args...) \
+({ \
+	read_lock(&grsec_exec_file_lock); \
+	gr_add_learn_entry(normal_msg "\n", ## args); \
+	read_unlock(&grsec_exec_file_lock); \
+})
+
+enum {
+	GR_DO_AUDIT,
+	GR_DONT_AUDIT,
+	/* used for non-audit messages that we shouldn't kill the task on */
+	GR_DONT_AUDIT_GOOD
+};
+
+enum {
+	GR_TTYSNIFF,
+	GR_RBAC,
+	GR_RBAC_STR,
+	GR_STR_RBAC,
+	GR_RBAC_MODE2,
+	GR_RBAC_MODE3,
+	GR_FILENAME,
+	GR_SYSCTL_HIDDEN,
+	GR_NOARGS,
+	GR_ONE_INT,
+	GR_ONE_INT_TWO_STR,
+	GR_ONE_STR,
+	GR_STR_INT,
+	GR_TWO_STR_INT,
+	GR_TWO_INT,
+	GR_TWO_U64,
+	GR_THREE_INT,
+	GR_FIVE_INT_TWO_STR,
+	GR_TWO_STR,
+	GR_THREE_STR,
+	GR_FOUR_STR,
+	GR_STR_FILENAME,
+	GR_FILENAME_STR,
+	GR_FILENAME_TWO_INT,
+	GR_FILENAME_TWO_INT_STR,
+	GR_TEXTREL,
+	GR_PTRACE,
+	GR_RESOURCE,
+	GR_CAP,
+	GR_SIG,
+	GR_SIG2,
+	GR_CRASH1,
+	GR_CRASH2,
+	GR_PSACCT,
+	GR_RWXMAP,
+	GR_RWXMAPVMA
+};
+
+#define gr_log_hidden_sysctl(audit, msg, str) gr_log_varargs(audit, msg, GR_SYSCTL_HIDDEN, str)
+#define gr_log_ttysniff(audit, msg, task) gr_log_varargs(audit, msg, GR_TTYSNIFF, task)
+#define gr_log_fs_rbac_generic(audit, msg, dentry, mnt) gr_log_varargs(audit, msg, GR_RBAC, dentry, mnt)
+#define gr_log_fs_rbac_str(audit, msg, dentry, mnt, str) gr_log_varargs(audit, msg, GR_RBAC_STR, dentry, mnt, str)
+#define gr_log_fs_str_rbac(audit, msg, str, dentry, mnt) gr_log_varargs(audit, msg, GR_STR_RBAC, str, dentry, mnt)
+#define gr_log_fs_rbac_mode2(audit, msg, dentry, mnt, str1, str2) gr_log_varargs(audit, msg, GR_RBAC_MODE2, dentry, mnt, str1, str2)
+#define gr_log_fs_rbac_mode3(audit, msg, dentry, mnt, str1, str2, str3) gr_log_varargs(audit, msg, GR_RBAC_MODE3, dentry, mnt, str1, str2, str3)
+#define gr_log_fs_generic(audit, msg, dentry, mnt) gr_log_varargs(audit, msg, GR_FILENAME, dentry, mnt)
+#define gr_log_noargs(audit, msg) gr_log_varargs(audit, msg, GR_NOARGS)
+#define gr_log_int(audit, msg, num) gr_log_varargs(audit, msg, GR_ONE_INT, num)
+#define gr_log_int_str2(audit, msg, num, str1, str2) gr_log_varargs(audit, msg, GR_ONE_INT_TWO_STR, num, str1, str2)
+#define gr_log_str(audit, msg, str) gr_log_varargs(audit, msg, GR_ONE_STR, str)
+#define gr_log_str_int(audit, msg, str, num) gr_log_varargs(audit, msg, GR_STR_INT, str, num)
+#define gr_log_int_int(audit, msg, num1, num2) gr_log_varargs(audit, msg, GR_TWO_INT, num1, num2)
+#define gr_log_two_u64(audit, msg, num1, num2) gr_log_varargs(audit, msg, GR_TWO_U64, num1, num2)
+#define gr_log_int3(audit, msg, num1, num2, num3) gr_log_varargs(audit, msg, GR_THREE_INT, num1, num2, num3)
+#define gr_log_int5_str2(audit, msg, num1, num2, str1, str2) gr_log_varargs(audit, msg, GR_FIVE_INT_TWO_STR, num1, num2, str1, str2)
+#define gr_log_str_str(audit, msg, str1, str2) gr_log_varargs(audit, msg, GR_TWO_STR, str1, str2)
+#define gr_log_str2_int(audit, msg, str1, str2, num) gr_log_varargs(audit, msg, GR_TWO_STR_INT, str1, str2, num)
+#define gr_log_str3(audit, msg, str1, str2, str3) gr_log_varargs(audit, msg, GR_THREE_STR, str1, str2, str3)
+#define gr_log_str4(audit, msg, str1, str2, str3, str4) gr_log_varargs(audit, msg, GR_FOUR_STR, str1, str2, str3, str4)
+#define gr_log_str_fs(audit, msg, str, dentry, mnt) gr_log_varargs(audit, msg, GR_STR_FILENAME, str, dentry, mnt)
+#define gr_log_fs_str(audit, msg, dentry, mnt, str) gr_log_varargs(audit, msg, GR_FILENAME_STR, dentry, mnt, str)
+#define gr_log_fs_int2(audit, msg, dentry, mnt, num1, num2) gr_log_varargs(audit, msg, GR_FILENAME_TWO_INT, dentry, mnt, num1, num2)
+#define gr_log_fs_int2_str(audit, msg, dentry, mnt, num1, num2, str) gr_log_varargs(audit, msg, GR_FILENAME_TWO_INT_STR, dentry, mnt, num1, num2, str)
+#define gr_log_textrel_ulong_ulong(audit, msg, str, file, ulong1, ulong2) gr_log_varargs(audit, msg, GR_TEXTREL, str, file, ulong1, ulong2)
+#define gr_log_ptrace(audit, msg, task) gr_log_varargs(audit, msg, GR_PTRACE, task)
+#define gr_log_res_ulong2_str(audit, msg, task, ulong1, str, ulong2) gr_log_varargs(audit, msg, GR_RESOURCE, task, ulong1, str, ulong2)
+#define gr_log_cap(audit, msg, task, str) gr_log_varargs(audit, msg, GR_CAP, task, str)
+#define gr_log_sig_addr(audit, msg, str, addr) gr_log_varargs(audit, msg, GR_SIG, str, addr)
+#define gr_log_sig_task(audit, msg, task, num) gr_log_varargs(audit, msg, GR_SIG2, task, num)
+#define gr_log_crash1(audit, msg, task, ulong) gr_log_varargs(audit, msg, GR_CRASH1, task, ulong)
+#define gr_log_crash2(audit, msg, task, ulong1) gr_log_varargs(audit, msg, GR_CRASH2, task, ulong1)
+#define gr_log_procacct(audit, msg, task, num1, num2, num3, num4, num5, num6, num7, num8, num9) gr_log_varargs(audit, msg, GR_PSACCT, task, num1, num2, num3, num4, num5, num6, num7, num8, num9)
+#define gr_log_rwxmap(audit, msg, str) gr_log_varargs(audit, msg, GR_RWXMAP, str)
+#define gr_log_rwxmap_vma(audit, msg, str) gr_log_varargs(audit, msg, GR_RWXMAPVMA, str)
+
+void gr_log_varargs(int audit, const char *msg, int argtypes, ...);
+
+#endif
+
+#endif
diff --git a/include/linux/grmsg.h b/include/linux/grmsg.h
new file mode 100644
index 000000000000..f1d36054b8e4
--- /dev/null
+++ b/include/linux/grmsg.h
@@ -0,0 +1,121 @@
+#define DEFAULTSECMSG "%.256s[%.16s:%d] uid/euid:%u/%u gid/egid:%u/%u, parent %.256s[%.16s:%d] uid/euid:%u/%u gid/egid:%u/%u"
+#define GR_ACL_PROCACCT_MSG "%.256s[%.16s:%d] IP:%pI4 TTY:%.64s uid/euid:%u/%u gid/egid:%u/%u run time:[%ud %uh %um %us] cpu time:[%ud %uh %um %us] %s with exit code %ld, parent %.256s[%.16s:%d] IP:%pI4 TTY:%.64s uid/euid:%u/%u gid/egid:%u/%u"
+#define GR_PTRACE_ACL_MSG "denied ptrace of %.950s(%.16s:%d) by "
+#define GR_STOPMOD_MSG "denied modification of module state by "
+#define GR_ROFS_BLOCKWRITE_MSG "denied write to block device %.950s by "
+#define GR_ROFS_MOUNT_MSG "denied writable mount of %.950s by "
+#define GR_IOPERM_MSG "denied use of ioperm() by "
+#define GR_IOPL_MSG "denied use of iopl() by "
+#define GR_SHMAT_ACL_MSG "denied attach of shared memory of UID %u, PID %d, ID %u by "
+#define GR_UNIX_CHROOT_MSG "denied connect() to abstract AF_UNIX socket outside of chroot by "
+#define GR_SHMAT_CHROOT_MSG "denied attach of shared memory outside of chroot by "
+#define GR_MEM_READWRITE_MSG "denied access of range %Lx -> %Lx in /dev/mem by "
+#define GR_SYMLINK_MSG "not following symlink %.950s owned by %d.%d by "
+#define GR_LEARN_AUDIT_MSG "%s\t%u\t%u\t%u\t%.4095s\t%.4095s\t%lu\t%lu\t%.4095s\t%lu\t%pI4"
+#define GR_ID_LEARN_MSG "%s\t%u\t%u\t%u\t%.4095s\t%.4095s\t%c\t%d\t%d\t%d\t%pI4"
+#define GR_HIDDEN_ACL_MSG "%s access to hidden file %.950s by "
+#define GR_OPEN_ACL_MSG "%s open of %.950s for%s%s by "
+#define GR_CREATE_ACL_MSG "%s create of %.950s for%s%s by "
+#define GR_FIFO_MSG "denied writing FIFO %.950s of %d.%d by "
+#define GR_MKNOD_CHROOT_MSG "denied mknod of %.950s from chroot by "
+#define GR_MKNOD_ACL_MSG "%s mknod of %.950s by "
+#define GR_UNIXCONNECT_ACL_MSG "%s connect() to the unix domain socket %.950s by "
+#define GR_TTYSNIFF_ACL_MSG "terminal being sniffed by IP:%pI4 %.480s[%.16s:%d], parent %.480s[%.16s:%d] against "
+#define GR_MKDIR_ACL_MSG "%s mkdir of %.950s by "
+#define GR_RMDIR_ACL_MSG "%s rmdir of %.950s by "
+#define GR_UNLINK_ACL_MSG "%s unlink of %.950s by "
+#define GR_SYMLINK_ACL_MSG "%s symlink from %.480s to %.480s by "
+#define GR_HARDLINK_MSG "denied hardlink of %.930s (owned by %d.%d) to %.30s for "
+#define GR_LINK_ACL_MSG "%s link of %.480s to %.480s by "
+#define GR_INHERIT_ACL_MSG "successful inherit of %.480s's ACL for %.480s by "
+#define GR_RENAME_ACL_MSG "%s rename of %.480s to %.480s by "
+#define GR_UNSAFESHARE_EXEC_ACL_MSG "denied exec with cloned fs of %.950s by "
+#define GR_PTRACE_EXEC_ACL_MSG "denied ptrace of %.950s by "
+#define GR_NNP_EXEC_ACL_MSG "denied exec of %.950s due to NNP by "
+#define GR_EXEC_ACL_MSG "%s execution of %.950s by "
+#define GR_EXEC_TPE_MSG "denied untrusted exec (due to %.70s) of %.950s by "
+#define GR_SEGVSTART_ACL_MSG "possible exploit bruteforcing on " DEFAULTSECMSG " banning uid %u from login for %lu seconds"
+#define GR_SEGVNOSUID_ACL_MSG "possible exploit bruteforcing on " DEFAULTSECMSG " banning execution for %lu seconds"
+#define GR_MOUNT_CHROOT_MSG "denied mount of %.256s as %.930s from chroot by "
+#define GR_PIVOT_CHROOT_MSG "denied pivot_root from chroot by "
+#define GR_TRUNCATE_ACL_MSG "%s truncate of %.950s by "
+#define GR_ATIME_ACL_MSG "%s access time change of %.950s by "
+#define GR_ACCESS_ACL_MSG "%s access of %.950s for%s%s%s by "
+#define GR_CHROOT_CHROOT_MSG "denied double chroot to %.950s by "
+#define GR_CHROOT_RENAME_MSG "denied bad rename of %.950s out of a chroot by "
+#define GR_CHMOD_CHROOT_MSG "denied chmod +s of %.950s by "
+#define GR_CHMOD_ACL_MSG "%s chmod of %.950s by "
+#define GR_CHROOT_FCHDIR_MSG "denied fchdir outside of chroot to %.950s by "
+#define GR_CHROOT_PATHAT_MSG "denied relative path access outside of chroot to %.950s by "
+#define GR_CHROOT_FHANDLE_MSG "denied use of file handles inside chroot by "
+#define GR_CHOWN_ACL_MSG "%s chown of %.950s by "
+#define GR_SETXATTR_ACL_MSG "%s setting extended attribute of %.950s by "
+#define GR_REMOVEXATTR_ACL_MSG "%s removing extended attribute of %.950s by "
+#define GR_WRITLIB_ACL_MSG "denied load of writable library %.950s by "
+#define GR_INITF_ACL_MSG "init_variables() failed %s by "
+#define GR_DISABLED_ACL_MSG "Error loading %s, trying to run kernel with acls disabled. To disable acls at startup use <kernel image name> gracl=off from your boot loader"
+#define GR_DEV_ACL_MSG "/dev/grsec: %d bytes sent %d required, being fed garbage by "
+#define GR_SHUTS_ACL_MSG "shutdown auth success for "
+#define GR_SHUTF_ACL_MSG "shutdown auth failure for "
+#define GR_SHUTI_ACL_MSG "ignoring shutdown for disabled RBAC system for "
+#define GR_SEGVMODS_ACL_MSG "segvmod auth success for "
+#define GR_SEGVMODF_ACL_MSG "segvmod auth failure for "
+#define GR_SEGVMODI_ACL_MSG "ignoring segvmod for disabled RBAC system for "
+#define GR_ENABLE_ACL_MSG "%s RBAC system loaded by "
+#define GR_ENABLEF_ACL_MSG "unable to load %s for "
+#define GR_RELOADI_ACL_MSG "ignoring reload request for disabled RBAC system"
+#define GR_RELOAD_ACL_MSG "%s RBAC system reloaded by "
+#define GR_RELOADF_ACL_MSG "failed reload of %s for "
+#define GR_SPROLEI_ACL_MSG "ignoring change to special role for disabled RBAC system for "
+#define GR_SPROLES_ACL_MSG "successful change to special role %s (id %d) by "
+#define GR_SPROLEL_ACL_MSG "special role %s (id %d) exited by "
+#define GR_SPROLEF_ACL_MSG "special role %s failure for "
+#define GR_UNSPROLEI_ACL_MSG "ignoring unauth of special role for disabled RBAC system for "
+#define GR_UNSPROLES_ACL_MSG "successful unauth of special role %s (id %d) by "
+#define GR_INVMODE_ACL_MSG "invalid mode %d by "
+#define GR_PRIORITY_CHROOT_MSG "denied priority change of process (%.16s:%d) by "
+#define GR_FAILFORK_MSG "failed fork with errno %s by "
+#define GR_NICE_CHROOT_MSG "denied priority change by "
+#define GR_UNISIGLOG_MSG "%.32s occurred at %p in "
+#define GR_DUALSIGLOG_MSG "signal %d sent to " DEFAULTSECMSG " by "
+#define GR_SIG_ACL_MSG "denied send of signal %d to protected task " DEFAULTSECMSG " by "
+#define GR_SYSCTL_MSG "denied modification of grsecurity sysctl value : %.32s by "
+#define GR_SYSCTL_ACL_MSG "%s sysctl of %.950s for%s%s by "
+#define GR_TIME_MSG "time set by "
+#define GR_DEFACL_MSG "fatal: unable to find subject for (%.16s:%d), loaded by "
+#define GR_MMAP_ACL_MSG "%s executable mmap of %.950s by "
+#define GR_MPROTECT_ACL_MSG "%s executable mprotect of %.950s by "
+#define GR_SOCK_MSG "denied socket(%.16s,%.16s,%.16s) by "
+#define GR_SOCK_NOINET_MSG "denied socket(%.16s,%.16s,%d) by "
+#define GR_BIND_MSG "denied bind() by "
+#define GR_CONNECT_MSG "denied connect() by "
+#define GR_BIND_ACL_MSG "denied bind() to %pI4 port %u sock type %.16s protocol %.16s by "
+#define GR_CONNECT_ACL_MSG "denied connect() to %pI4 port %u sock type %.16s protocol %.16s by "
+#define GR_IP_LEARN_MSG "%s\t%u\t%u\t%u\t%.4095s\t%.4095s\t%pI4\t%u\t%u\t%u\t%u\t%pI4"
+#define GR_EXEC_CHROOT_MSG "exec of %.980s within chroot by process "
+#define GR_CAP_ACL_MSG "use of %s denied for "
+#define GR_CAP_CHROOT_MSG "use of %s in chroot denied for "
+#define GR_CAP_ACL_MSG2 "use of %s permitted for "
+#define GR_USRCHANGE_ACL_MSG "change to uid %u denied for "
+#define GR_GRPCHANGE_ACL_MSG "change to gid %u denied for "
+#define GR_REMOUNT_AUDIT_MSG "remount of %.256s by "
+#define GR_UNMOUNT_AUDIT_MSG "unmount of %.256s by "
+#define GR_MOUNT_AUDIT_MSG "mount of %.256s to %.256s by "
+#define GR_CHDIR_AUDIT_MSG "chdir to %.980s by "
+#define GR_EXEC_AUDIT_MSG "exec of %.930s (%.128s) by "
+#define GR_RESOURCE_MSG "denied resource overstep by requesting %lu for %.16s against limit %lu for "
+#define GR_RWXMMAP_MSG "denied RWX mmap of %.950s by "
+#define GR_RWXMPROTECT_MSG "denied RWX mprotect of %.950s by "
+#define GR_TEXTREL_AUDIT_MSG "allowed %s text relocation transition in %.950s, VMA:0x%08lx 0x%08lx by "
+#define GR_PTGNUSTACK_MSG "denied marking stack executable as requested by PT_GNU_STACK marking in %.950s by "
+#define GR_VM86_MSG "denied use of vm86 by "
+#define GR_PTRACE_AUDIT_MSG "process %.950s(%.16s:%d) attached to via ptrace by "
+#define GR_PTRACE_READEXEC_MSG "denied ptrace of unreadable binary %.950s by "
+#define GR_INIT_TRANSFER_MSG "persistent special role transferred privilege to init by "
+#define GR_BADPROCPID_MSG "denied read of sensitive /proc/pid/%s entry via fd passed across exec by "
+#define GR_SYMLINKOWNER_MSG "denied following symlink %.950s since symlink owner %u does not match target owner %u, by "
+#define GR_BRUTE_DAEMON_MSG "bruteforce prevention initiated for the next 30 minutes or until service restarted, stalling each fork 30 seconds.  Please investigate the crash report for "
+#define GR_BRUTE_SUID_MSG "bruteforce prevention initiated due to crash of %.950s against uid %u, banning suid/sgid execs for %u minutes.  Please investigate the crash report for "
+#define GR_IPC_DENIED_MSG "denied %s of overly-permissive IPC object with creator uid %u by "
+#define GR_TIOCSTI_MSG "denied unprivileged use of TIOCSTI by "
+#define GR_MSRWRITE_MSG "denied write to CPU MSR by "
diff --git a/include/linux/grsecurity.h b/include/linux/grsecurity.h
new file mode 100644
index 000000000000..749b915012c6
--- /dev/null
+++ b/include/linux/grsecurity.h
@@ -0,0 +1,259 @@
+#ifndef GR_SECURITY_H
+#define GR_SECURITY_H
+#include <linux/fs.h>
+#include <linux/fs_struct.h>
+#include <linux/binfmts.h>
+#include <linux/tty.h>
+#include <linux/gracl.h>
+
+/* notify of brain-dead configs */
+#if defined(CONFIG_DEBUG_FS) && defined(CONFIG_GRKERNSEC_KMEM)
+#error "CONFIG_DEBUG_FS being enabled is a security risk when CONFIG_GRKERNSEC_KMEM is enabled"
+#endif
+#if defined(CONFIG_PROC_PAGE_MONITOR) && defined(CONFIG_GRKERNSEC)
+#error "CONFIG_PROC_PAGE_MONITOR is a security risk"
+#endif
+#if defined(CONFIG_GRKERNSEC_PROC_USER) && defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+#error "CONFIG_GRKERNSEC_PROC_USER and CONFIG_GRKERNSEC_PROC_USERGROUP cannot both be enabled."
+#endif
+#if defined(CONFIG_GRKERNSEC_PROC) && !defined(CONFIG_GRKERNSEC_PROC_USER) && !defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+#error "CONFIG_GRKERNSEC_PROC enabled, but neither CONFIG_GRKERNSEC_PROC_USER nor CONFIG_GRKERNSEC_PROC_USERGROUP enabled"
+#endif
+#if defined(CONFIG_PAX_NOEXEC) && !defined(CONFIG_PAX_PAGEEXEC) && !defined(CONFIG_PAX_SEGMEXEC) && !defined(CONFIG_PAX_KERNEXEC)
+#error "CONFIG_PAX_NOEXEC enabled, but PAGEEXEC, SEGMEXEC, and KERNEXEC are disabled."
+#endif
+#if defined(CONFIG_PAX_ASLR) && !defined(CONFIG_PAX_RANDKSTACK) && !defined(CONFIG_PAX_RANDUSTACK) && !defined(CONFIG_PAX_RANDMMAP)
+#error "CONFIG_PAX_ASLR enabled, but RANDKSTACK, RANDUSTACK, and RANDMMAP are disabled."
+#endif
+#if defined(CONFIG_PAX) && !defined(CONFIG_PAX_NOEXEC) && !defined(CONFIG_PAX_ASLR)
+#error "CONFIG_PAX enabled, but no PaX options are enabled."
+#endif
+
+int gr_handle_new_usb(void);
+
+void gr_handle_brute_attach(int dumpable);
+void gr_handle_brute_check(void);
+void gr_handle_kernel_exploit(void);
+
+char gr_roletype_to_char(void);
+
+int gr_proc_is_restricted(void);
+
+int gr_acl_enable_at_secure(void);
+
+int gr_check_user_change(kuid_t real, kuid_t effective, kuid_t fs);
+int gr_check_group_change(kgid_t real, kgid_t effective, kgid_t fs);
+
+int gr_learn_cap(const struct task_struct *task, const struct cred *cred, const int cap, bool log);
+
+void gr_del_task_from_ip_table(struct task_struct *p);
+
+int gr_pid_is_chrooted(struct task_struct *p);
+int gr_handle_chroot_fowner(struct pid *pid, enum pid_type type);
+int gr_handle_chroot_nice(void);
+int gr_handle_chroot_sysctl(const int op);
+int gr_handle_chroot_setpriority(struct task_struct *p,
+					const int niceval);
+int gr_chroot_fchdir(struct dentry *u_dentry, struct vfsmount *u_mnt);
+int gr_chroot_pathat(int dfd, struct dentry *u_dentry, struct vfsmount *u_mnt, unsigned flags);
+int gr_chroot_fhandle(void);
+int gr_handle_chroot_chroot(const struct dentry *dentry,
+				   const struct vfsmount *mnt);
+void gr_handle_chroot_chdir(const struct path *path);
+int gr_handle_chroot_chmod(const struct dentry *dentry,
+				  const struct vfsmount *mnt, const int mode);
+int gr_handle_chroot_mknod(const struct dentry *dentry,
+				  const struct vfsmount *mnt, const int mode);
+int gr_handle_chroot_mount(const struct dentry *dentry,
+				  const struct vfsmount *mnt,
+				  const char *dev_name);
+int gr_handle_chroot_pivot(void);
+int gr_handle_chroot_unix(const pid_t pid);
+
+int gr_handle_rawio(const struct inode *inode);
+
+void gr_handle_ioperm(void);
+void gr_handle_iopl(void);
+void gr_handle_msr_write(void);
+
+umode_t gr_acl_umask(void);
+
+int gr_tpe_allow(const struct file *file);
+
+void gr_set_chroot_entries(struct task_struct *task, const struct path *path);
+void gr_clear_chroot_entries(struct task_struct *task);
+
+void gr_log_forkfail(const int retval);
+void gr_log_timechange(void);
+void gr_log_signal(const int sig, const void *addr, const struct task_struct *t);
+void gr_log_chdir(const struct dentry *dentry,
+			 const struct vfsmount *mnt);
+void gr_log_chroot_exec(const struct dentry *dentry,
+			       const struct vfsmount *mnt);
+void gr_log_remount(const char *devname, const int retval);
+void gr_log_unmount(const char *devname, const int retval);
+void gr_log_mount(const char *from, struct path *to, const int retval);
+void gr_log_textrel(struct vm_area_struct *vma, bool is_textrel_rw);
+void gr_log_ptgnustack(struct file *file);
+void gr_log_rwxmmap(struct file *file);
+void gr_log_rwxmprotect(struct vm_area_struct *vma);
+
+int gr_handle_follow_link(const struct dentry *dentry,
+				 const struct vfsmount *mnt);
+int gr_handle_fifo(const struct dentry *dentry,
+			  const struct vfsmount *mnt,
+			  const struct dentry *dir, const int flag,
+			  const int acc_mode);
+int gr_handle_hardlink(const struct dentry *dentry,
+			      const struct vfsmount *mnt,
+			      const struct filename *to);
+
+int gr_is_capable(const int cap);
+int gr_is_capable_nolog(const int cap);
+int gr_task_is_capable(const struct task_struct *task, const struct cred *cred, const int cap);
+int gr_task_is_capable_nolog(const struct task_struct *task, const struct cred *cred, const int cap);
+
+void gr_copy_label(struct task_struct *tsk);
+void gr_handle_crash(struct task_struct *task, const int sig);
+int gr_handle_signal(const struct task_struct *p, const int sig);
+int gr_check_crash_uid(const kuid_t uid);
+int gr_check_protected_task(const struct task_struct *task);
+int gr_check_protected_task_fowner(struct pid *pid, enum pid_type type);
+int gr_acl_handle_mmap(const struct file *file,
+			      const unsigned long prot);
+int gr_acl_handle_mprotect(const struct file *file,
+				  const unsigned long prot);
+int gr_check_hidden_task(const struct task_struct *tsk);
+__u32 gr_acl_handle_truncate(const struct dentry *dentry,
+				    const struct vfsmount *mnt);
+__u32 gr_acl_handle_utime(const struct dentry *dentry,
+				 const struct vfsmount *mnt);
+__u32 gr_acl_handle_access(const struct dentry *dentry,
+				  const struct vfsmount *mnt, const int fmode);
+__u32 gr_acl_handle_chmod(const struct dentry *dentry,
+				 const struct vfsmount *mnt, umode_t *mode);
+__u32 gr_acl_handle_chown(const struct dentry *dentry,
+				 const struct vfsmount *mnt);
+__u32 gr_acl_handle_setxattr(const struct dentry *dentry,
+				 const struct vfsmount *mnt);
+__u32 gr_acl_handle_removexattr(const struct dentry *dentry,
+				 const struct vfsmount *mnt);
+int gr_handle_ptrace(struct task_struct *task, const long request);
+int gr_handle_proc_ptrace(struct task_struct *task);
+__u32 gr_acl_handle_execve(const struct dentry *dentry,
+				  const struct vfsmount *mnt);
+int gr_check_crash_exec(const struct file *filp);
+int gr_acl_is_enabled(void);
+void gr_set_role_label(struct task_struct *task, const kuid_t uid,
+			      const kgid_t gid);
+int gr_set_proc_label(const struct dentry *dentry,
+			const struct vfsmount *mnt,
+			const int unsafe_flags);
+__u32 gr_acl_handle_hidden_file(const struct dentry *dentry,
+				const struct vfsmount *mnt);
+__u32 gr_acl_handle_open(const struct dentry *dentry,
+				const struct vfsmount *mnt, int acc_mode);
+__u32 gr_acl_handle_creat(const struct dentry *dentry,
+				 const struct dentry *p_dentry,
+				 const struct vfsmount *p_mnt,
+				 int open_flags, int acc_mode, const int imode);
+void gr_handle_create(const struct dentry *dentry,
+			     const struct vfsmount *mnt);
+void gr_handle_proc_create(const struct dentry *dentry,
+			   const struct inode *inode);
+__u32 gr_acl_handle_mknod(const struct dentry *new_dentry,
+				 const struct dentry *parent_dentry,
+				 const struct vfsmount *parent_mnt,
+				 const int mode);
+__u32 gr_acl_handle_mkdir(const struct dentry *new_dentry,
+				 const struct dentry *parent_dentry,
+				 const struct vfsmount *parent_mnt);
+__u32 gr_acl_handle_rmdir(const struct dentry *dentry,
+				 const struct vfsmount *mnt);
+void gr_handle_delete(const u64 ino, const dev_t dev);
+__u32 gr_acl_handle_unlink(const struct dentry *dentry,
+				  const struct vfsmount *mnt);
+__u32 gr_acl_handle_symlink(const struct dentry *new_dentry,
+				   const struct dentry *parent_dentry,
+				   const struct vfsmount *parent_mnt,
+				   const struct filename *from);
+__u32 gr_acl_handle_link(const struct dentry *new_dentry,
+				const struct dentry *parent_dentry,
+				const struct vfsmount *parent_mnt,
+				const struct dentry *old_dentry,
+				const struct vfsmount *old_mnt, const struct filename *to);
+int gr_handle_symlink_owner(const struct path *link, const struct inode *target);
+int gr_acl_handle_rename(struct dentry *new_dentry,
+				struct dentry *parent_dentry,
+				const struct vfsmount *parent_mnt,
+				struct dentry *old_dentry,
+				struct inode *old_parent_inode,
+				struct vfsmount *old_mnt, const struct filename *newname, unsigned int flags);
+void gr_handle_rename(struct inode *old_dir, struct inode *new_dir,
+				struct dentry *old_dentry,
+				struct dentry *new_dentry,
+				struct vfsmount *mnt, const __u8 replace, unsigned int flags);
+__u32 gr_check_link(const struct dentry *new_dentry,
+			   const struct dentry *parent_dentry,
+			   const struct vfsmount *parent_mnt,
+			   const struct dentry *old_dentry,
+			   const struct vfsmount *old_mnt);
+int gr_acl_handle_filldir(const struct file *file, const char *name,
+				 const unsigned int namelen, const u64 ino);
+
+__u32 gr_acl_handle_unix(const struct dentry *dentry,
+				const struct vfsmount *mnt);
+void gr_acl_handle_exit(void);
+void gr_acl_handle_psacct(struct task_struct *task, const long code);
+int gr_acl_handle_procpidmem(const struct task_struct *task);
+int gr_handle_rofs_mount(struct dentry *dentry, struct vfsmount *mnt, int mnt_flags);
+int gr_handle_rofs_blockwrite(struct dentry *dentry, struct vfsmount *mnt, int acc_mode);
+void gr_audit_ptrace(struct task_struct *task);
+dev_t gr_get_dev_from_dentry(struct dentry *dentry);
+u64 gr_get_ino_from_dentry(struct dentry *dentry);
+void gr_put_exec_file(struct task_struct *task);
+
+int gr_get_symlinkown_enabled(void);
+
+int gr_ptrace_readexec(struct file *file, int unsafe_flags);
+
+int gr_handle_tiocsti(struct tty_struct *tty);
+
+void gr_inc_chroot_refcnts(struct dentry *dentry, struct vfsmount *mnt);
+void gr_dec_chroot_refcnts(struct dentry *dentry, struct vfsmount *mnt);
+int gr_bad_chroot_rename(struct dentry *olddentry, struct vfsmount *oldmnt,
+			 struct dentry *newdentry, struct vfsmount *newmnt);
+
+#ifdef CONFIG_GRKERNSEC_RESLOG
+extern void gr_log_resource(const struct task_struct *task, const int res,
+				   const unsigned long wanted, const int gt);
+#else
+static inline void gr_log_resource(const struct task_struct *task, const int res,
+				   const unsigned long wanted, const int gt)
+{
+}
+#endif
+
+#ifdef CONFIG_GRKERNSEC
+void task_grsec_rbac(struct seq_file *m, struct task_struct *p);
+void gr_handle_vm86(void);
+void gr_handle_mem_readwrite(u64 from, u64 to);
+
+void gr_log_badprocpid(const char *entry);
+
+extern int grsec_enable_dmesg;
+extern int grsec_disable_privio;
+
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+extern kgid_t grsec_proc_gid;
+#endif
+
+#ifdef CONFIG_GRKERNSEC_CHROOT_FINDTASK
+extern int grsec_enable_chroot_findtask;
+#endif
+#ifdef CONFIG_GRKERNSEC_SETXID
+extern int grsec_enable_setxid;
+#endif
+#endif
+
+#endif
diff --git a/include/linux/grsock.h b/include/linux/grsock.h
new file mode 100644
index 000000000000..e7ffaafc548e
--- /dev/null
+++ b/include/linux/grsock.h
@@ -0,0 +1,19 @@
+#ifndef __GRSOCK_H
+#define __GRSOCK_H
+
+extern void gr_attach_curr_ip(const struct sock *sk);
+extern int gr_handle_sock_all(const int family, const int type,
+			      const int protocol);
+extern int gr_handle_sock_server(const struct sockaddr *sck);
+extern int gr_handle_sock_server_other(const struct sock *sck);
+extern int gr_handle_sock_client(const struct sockaddr *sck);
+extern int gr_search_connect(struct socket * sock,
+			     struct sockaddr_in * addr);
+extern int gr_search_bind(struct socket * sock,
+			  struct sockaddr_in * addr);
+extern int gr_search_listen(struct socket * sock);
+extern int gr_search_accept(struct socket * sock);
+extern int gr_search_socket(const int domain, const int type,
+			    const int protocol);
+
+#endif
diff --git a/include/linux/ipc.h b/include/linux/ipc.h
index 882a9c3d45fd..12d5bdf5bd89 100644
--- a/include/linux/ipc.h
+++ b/include/linux/ipc.h
@@ -21,6 +21,6 @@ struct kern_ipc_perm
 	umode_t		mode; 
 	unsigned long	seq __intentional_overflow(-1);
 	void		*security;
-};
+} __randomize_layout;
 
 #endif /* _LINUX_IPC_H */
diff --git a/include/linux/ipc_namespace.h b/include/linux/ipc_namespace.h
index 848e5796400e..65327ee0936b 100644
--- a/include/linux/ipc_namespace.h
+++ b/include/linux/ipc_namespace.h
@@ -61,7 +61,7 @@ struct ipc_namespace {
 	struct ucounts *ucounts;
 
 	struct ns_common ns;
-};
+} __randomize_layout;
 
 extern struct ipc_namespace init_ipc_ns;
 extern spinlock_t mq_lock;
diff --git a/include/linux/kallsyms.h b/include/linux/kallsyms.h
index 47a057cd4425..d2c774623a11 100644
--- a/include/linux/kallsyms.h
+++ b/include/linux/kallsyms.h
@@ -15,7 +15,8 @@
 
 struct module;
 
-#ifdef CONFIG_KALLSYMS
+#if !defined(__INCLUDED_BY_HIDESYM) || !defined(CONFIG_KALLSYMS)
+#if defined(CONFIG_KALLSYMS) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 /* Lookup the address for a symbol. Returns 0 if not found. */
 unsigned long kallsyms_lookup_name(const char *name);
 
@@ -106,6 +107,21 @@ static inline int lookup_symbol_attrs(unsigned long addr, unsigned long *size, u
 /* Stupid that this does nothing, but I didn't create this mess. */
 #define __print_symbol(fmt, addr, args...)
 #endif /*CONFIG_KALLSYMS*/
+#else /* when included by kallsyms.c, vsnprintf.c, kprobes.c, or
+	arch/x86/kernel/dumpstack.c, with HIDESYM enabled */
+extern unsigned long kallsyms_lookup_name(const char *name);
+extern __printf(1, 3) void __print_symbol(const char *fmt, unsigned long address, ...);
+extern int sprint_backtrace(char *buffer, unsigned long address);
+extern int sprint_symbol(char *buffer, unsigned long address);
+extern int sprint_symbol_no_offset(char *buffer, unsigned long address);
+const char *kallsyms_lookup(unsigned long addr,
+			    unsigned long *symbolsize,
+			    unsigned long *offset,
+			    char **modname, char *namebuf);
+extern int kallsyms_lookup_size_offset(unsigned long addr,
+				  unsigned long *symbolsize,
+				  unsigned long *offset);
+#endif
 
 #define print_symbol(fmt, addr) \
 	__print_symbol(fmt, addr, "")
diff --git a/include/linux/key-type.h b/include/linux/key-type.h
index 0c5f427c51e8..d1d24c37f4b5 100644
--- a/include/linux/key-type.h
+++ b/include/linux/key-type.h
@@ -45,7 +45,7 @@ struct key_preparsed_payload {
 	size_t		datalen;	/* Raw datalen */
 	size_t		quotalen;	/* Quota length for proposed payload */
 	time_t		expiry;		/* Expiry time of key */
-};
+} __randomize_layout;
 
 typedef int (*request_key_actor_t)(struct key_construction *key,
 				   const char *op, void *aux);
@@ -150,7 +150,7 @@ struct key_type {
 	/* internal fields */
 	struct list_head	link;		/* link in types list */
 	struct lock_class_key	lock_class;	/* key->sem lock class */
-} __do_const;
+} __do_const __randomize_layout;
 
 extern struct key_type key_type_keyring;
 
diff --git a/include/linux/kmod.h b/include/linux/kmod.h
index fcfd2bf14d3f..e4f5edba0940 100644
--- a/include/linux/kmod.h
+++ b/include/linux/kmod.h
@@ -34,6 +34,8 @@ extern char modprobe_path[]; /* for sysctl */
  * usually useless though. */
 extern __printf(2, 3)
 int __request_module(bool wait, const char *name, ...);
+extern __printf(3, 4)
+int ___request_module(bool wait, char *param_name, const char *name, ...);
 #define request_module(mod...) __request_module(true, mod)
 #define request_module_nowait(mod...) __request_module(false, mod)
 #define try_then_request_module(x, mod...) \
@@ -57,6 +59,9 @@ struct subprocess_info {
 	struct work_struct work;
 	struct completion *complete;
 	char *path;
+#ifdef CONFIG_GRKERNSEC
+	char *origpath;
+#endif
 	char **argv;
 	char **envp;
 	int wait;
@@ -64,7 +69,7 @@ struct subprocess_info {
 	int (*init)(struct subprocess_info *info, struct cred *new);
 	void (*cleanup)(struct subprocess_info *info);
 	void *data;
-};
+} __randomize_layout;
 
 extern int
 call_usermodehelper(char *path, char **argv, char **envp, int wait);
diff --git a/include/linux/kobject.h b/include/linux/kobject.h
index fef2d4270471..9d45d56c548b 100644
--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -178,7 +178,7 @@ struct kset {
 	spinlock_t list_lock;
 	struct kobject kobj;
 	const struct kset_uevent_ops *uevent_ops;
-};
+} __randomize_layout;
 
 extern void kset_init(struct kset *kset);
 extern int __must_check kset_register(struct kset *kset);
diff --git a/include/linux/lsm_hooks.h b/include/linux/lsm_hooks.h
index 558adfa5c8a8..91278953023c 100644
--- a/include/linux/lsm_hooks.h
+++ b/include/linux/lsm_hooks.h
@@ -1866,7 +1866,7 @@ struct security_hook_heads {
 	struct list_head audit_rule_match;
 	struct list_head audit_rule_free;
 #endif /* CONFIG_AUDIT */
-};
+} __randomize_layout;
 
 /*
  * Security module hook list structure.
@@ -1876,7 +1876,7 @@ struct security_hook_list {
 	struct list_head		list;
 	struct list_head		*head;
 	union security_list_options	hook;
-};
+} __randomize_layout;
 
 /*
  * Initializing a security_hook_list structure takes
diff --git a/include/linux/mm.h b/include/linux/mm.h
index eb958ef2730d..8f2773e6ba59 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1994,12 +1994,23 @@ extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 	bool *need_rmap_locks);
 extern void exit_mmap(struct mm_struct *);
 
+#if defined(CONFIG_GRKERNSEC) && (defined(CONFIG_GRKERNSEC_RESLOG) || !defined(CONFIG_GRKERNSEC_NO_RBAC))
+extern void gr_learn_resource(const struct task_struct *task, const int res,
+			      const unsigned long wanted, const int gt);
+#else
+static inline void gr_learn_resource(const struct task_struct *task, const int res,
+				     const unsigned long wanted, const int gt)
+{
+}
+#endif
+
 static inline int check_data_rlimit(unsigned long rlim,
 				    unsigned long new,
 				    unsigned long start,
 				    unsigned long end_data,
 				    unsigned long start_data)
 {
+	gr_learn_resource(current, RLIMIT_DATA, (new - start) + (end_data - start_data), 1);
 	if (rlim < RLIM_INFINITY) {
 		if (((new - start) + (end_data - start_data)) > rlim)
 			return -ENOSPC;
@@ -2074,6 +2085,7 @@ struct vm_unmapped_area_info {
 	unsigned long high_limit;
 	unsigned long align_mask;
 	unsigned long align_offset;
+	unsigned long threadstack_offset;
 };
 
 extern unsigned long unmapped_area(const struct vm_unmapped_area_info *info);
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index 8c3054748806..ceb5da6c2a50 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -360,7 +360,7 @@ struct vm_area_struct {
 	struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
 
 	struct vm_area_struct *vm_mirror;/* PaX: mirror vma or NULL */
-};
+} __randomize_layout;
 
 struct core_thread {
 	struct task_struct *task;
@@ -537,7 +537,7 @@ struct mm_struct {
 	unsigned long delta_stack;		/* randomized offset */
 #endif
 
-};
+} __randomize_layout;
 
 static inline void mm_init_cpumask(struct mm_struct *mm)
 {
diff --git a/include/linux/module.h b/include/linux/module.h
index 6487f2ca5ae1..18808a587ecd 100644
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@ -48,7 +48,7 @@ struct module_kobject {
 	struct kobject *drivers_dir;
 	struct module_param_attrs *mp;
 	struct completion *kobj_completion;
-};
+} __randomize_layout;
 
 struct module_attribute {
 	struct attribute attr;
@@ -484,7 +484,8 @@ struct module {
 	ctor_fn_t *ctors;
 	unsigned int num_ctors;
 #endif
-} ____cacheline_aligned;
+} ____cacheline_aligned __randomize_layout;
+
 #ifndef MODULE_ARCH_INIT
 #define MODULE_ARCH_INIT {}
 #endif
diff --git a/include/linux/mount.h b/include/linux/mount.h
index e0f3a82eee6d..377fcf14bd5a 100644
--- a/include/linux/mount.h
+++ b/include/linux/mount.h
@@ -67,7 +67,7 @@ struct vfsmount {
 	struct dentry *mnt_root;	/* root of the mounted tree */
 	struct super_block *mnt_sb;	/* pointer to superblock */
 	int mnt_flags;
-};
+} __randomize_layout;
 
 struct file; /* forward dec */
 struct path;
diff --git a/include/linux/msg.h b/include/linux/msg.h
index f3f302f9c197..a001305f5a79 100644
--- a/include/linux/msg.h
+++ b/include/linux/msg.h
@@ -29,7 +29,7 @@ struct msg_queue {
 	struct list_head q_messages;
 	struct list_head q_receivers;
 	struct list_head q_senders;
-};
+} __randomize_layout;
 
 /* Helper routines for sys_msgsnd and sys_msgrcv */
 extern long do_msgsnd(int msqid, long mtype, void __user *mtext,
diff --git a/include/linux/netfilter/xt_gradm.h b/include/linux/netfilter/xt_gradm.h
new file mode 100644
index 000000000000..33f4af893576
--- /dev/null
+++ b/include/linux/netfilter/xt_gradm.h
@@ -0,0 +1,9 @@
+#ifndef _LINUX_NETFILTER_XT_GRADM_H
+#define _LINUX_NETFILTER_XT_GRADM_H 1
+
+struct xt_gradm_mtinfo {
+	__u16 flags;
+	__u16 invflags;
+};
+
+#endif
diff --git a/include/linux/path.h b/include/linux/path.h
index d1372186f431..be0c176b20f7 100644
--- a/include/linux/path.h
+++ b/include/linux/path.h
@@ -1,13 +1,15 @@
 #ifndef _LINUX_PATH_H
 #define _LINUX_PATH_H
 
+#include <linux/compiler.h>
+
 struct dentry;
 struct vfsmount;
 
 struct path {
 	struct vfsmount *mnt;
 	struct dentry *dentry;
-};
+} __randomize_layout;
 
 extern void path_get(const struct path *);
 extern void path_put(const struct path *);
diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index 6dfb6c6ecc5f..fd324404c2b8 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -1151,7 +1151,7 @@ static inline int perf_callchain_store(struct perf_callchain_entry_ctx *ctx, u64
 	}
 }
 
-extern int sysctl_perf_event_paranoid;
+extern int sysctl_perf_event_legitimately_concerned;
 extern int sysctl_perf_event_mlock;
 extern int sysctl_perf_event_sample_rate;
 extern int sysctl_perf_cpu_time_max_percent;
@@ -1168,19 +1168,24 @@ extern int perf_cpu_time_max_percent_handler(struct ctl_table *table, int write,
 int perf_event_max_stack_handler(struct ctl_table *table, int write,
 				 void __user *buffer, size_t *lenp, loff_t *ppos);
 
+static inline bool perf_paranoid_any(void)
+{
+	return sysctl_perf_event_legitimately_concerned > 2;
+}
+
 static inline bool perf_paranoid_tracepoint_raw(void)
 {
-	return sysctl_perf_event_paranoid > -1;
+	return sysctl_perf_event_legitimately_concerned > -1;
 }
 
 static inline bool perf_paranoid_cpu(void)
 {
-	return sysctl_perf_event_paranoid > 0;
+	return sysctl_perf_event_legitimately_concerned > 0;
 }
 
 static inline bool perf_paranoid_kernel(void)
 {
-	return sysctl_perf_event_paranoid > 1;
+	return sysctl_perf_event_legitimately_concerned > 1;
 }
 
 extern void perf_event_init(void);
diff --git a/include/linux/pid_namespace.h b/include/linux/pid_namespace.h
index 34cce96741bc..c925afb66793 100644
--- a/include/linux/pid_namespace.h
+++ b/include/linux/pid_namespace.h
@@ -46,7 +46,7 @@ struct pid_namespace {
 	int hide_pid;
 	int reboot;	/* group exit code if this pidns was rebooted */
 	struct ns_common ns;
-};
+} __randomize_layout;
 
 extern struct pid_namespace init_pid_ns;
 
diff --git a/include/linux/printk.h b/include/linux/printk.h
index f83bc92473f4..a29982a62f06 100644
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -145,6 +145,8 @@ static inline void printk_nmi_flush(void) { }
 static inline void printk_nmi_flush_on_panic(void) { }
 #endif /* PRINTK_NMI */
 
+extern int kptr_restrict;
+
 #ifdef CONFIG_PRINTK
 asmlinkage __printf(5, 0)
 int vprintk_emit(int facility, int level,
@@ -179,7 +181,6 @@ extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
 
 extern int printk_delay_msec;
 extern int dmesg_restrict;
-extern int kptr_restrict;
 
 extern int
 devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void __user *buf,
diff --git a/include/linux/proc_fs.h b/include/linux/proc_fs.h
index b97bf2ef996e..f14c92d4caf0 100644
--- a/include/linux/proc_fs.h
+++ b/include/linux/proc_fs.h
@@ -17,8 +17,11 @@ extern void proc_flush_task(struct task_struct *);
 extern struct proc_dir_entry *proc_symlink(const char *,
 		struct proc_dir_entry *, const char *);
 extern struct proc_dir_entry *proc_mkdir(const char *, struct proc_dir_entry *);
+extern struct proc_dir_entry *proc_mkdir_restrict(const char *, struct proc_dir_entry *);
 extern struct proc_dir_entry *proc_mkdir_data(const char *, umode_t,
 					      struct proc_dir_entry *, void *);
+extern struct proc_dir_entry *proc_mkdir_data_restrict(const char *, umode_t,
+					      struct proc_dir_entry *, void *);
 extern struct proc_dir_entry *proc_mkdir_mode(const char *, umode_t,
 					      struct proc_dir_entry *);
  
@@ -34,6 +37,19 @@ static inline struct proc_dir_entry *proc_create(
 	return proc_create_data(name, mode, parent, proc_fops, NULL);
 }
 
+static inline struct proc_dir_entry *proc_create_grsec(const char *name, umode_t mode,
+	struct proc_dir_entry *parent, const struct file_operations *proc_fops)
+{
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+	return proc_create_data(name, S_IRUSR, parent, proc_fops, NULL);
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	return proc_create_data(name, S_IRUSR | S_IRGRP, parent, proc_fops, NULL);
+#else
+	return proc_create_data(name, mode, parent, proc_fops, NULL);
+#endif
+}
+
+
 extern void proc_set_size(struct proc_dir_entry *, loff_t);
 extern void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
 extern void *PDE_DATA(const struct inode *);
@@ -56,8 +72,12 @@ static inline struct proc_dir_entry *proc_symlink(const char *name,
 		struct proc_dir_entry *parent,const char *dest) { return NULL;}
 static inline struct proc_dir_entry *proc_mkdir(const char *name,
 	struct proc_dir_entry *parent) {return NULL;}
+static inline struct proc_dir_entry *proc_mkdir_restrict(const char *name,
+	struct proc_dir_entry *parent) { return NULL; }
 static inline struct proc_dir_entry *proc_mkdir_data(const char *name,
 	umode_t mode, struct proc_dir_entry *parent, void *data) { return NULL; }
+static inline  struct proc_dir_entry *proc_mkdir_data_restrict(const char *name,
+	umode_t mode, struct proc_dir_entry *parent, void *data) { return NULL; }
 static inline struct proc_dir_entry *proc_mkdir_mode(const char *name,
 	umode_t mode, struct proc_dir_entry *parent) { return NULL; }
 #define proc_create(name, mode, parent, proc_fops) ({NULL;})
@@ -79,7 +99,7 @@ struct net;
 static inline struct proc_dir_entry *proc_net_mkdir(
 	struct net *net, const char *name, struct proc_dir_entry *parent)
 {
-	return proc_mkdir_data(name, 0, parent, net);
+	return proc_mkdir_data_restrict(name, 0, parent, net);
 }
 
 #endif /* _LINUX_PROC_FS_H */
diff --git a/include/linux/proc_ns.h b/include/linux/proc_ns.h
index 7ec9d951e165..00d516204572 100644
--- a/include/linux/proc_ns.h
+++ b/include/linux/proc_ns.h
@@ -20,7 +20,7 @@ struct proc_ns_operations {
 	int (*install)(struct nsproxy *nsproxy, struct ns_common *ns);
 	struct user_namespace *(*owner)(struct ns_common *ns);
 	struct ns_common *(*get_parent)(struct ns_common *ns);
-} __do_const;
+} __do_const __randomize_layout;
 
 extern const struct proc_ns_operations netns_operations;
 extern const struct proc_ns_operations utsns_operations;
diff --git a/include/linux/rbtree_augmented.h b/include/linux/rbtree_augmented.h
index d076183e49be..9702b6e183bc 100644
--- a/include/linux/rbtree_augmented.h
+++ b/include/linux/rbtree_augmented.h
@@ -90,7 +90,9 @@ rbname ## _rotate(struct rb_node *rb_old, struct rb_node *rb_new)	\
 	old->rbaugmented = rbcompute(old);				\
 }									\
 rbstatic const struct rb_augment_callbacks rbname = {			\
-	rbname ## _propagate, rbname ## _copy, rbname ## _rotate	\
+	.propagate = rbname ## _propagate,				\
+	.copy = rbname ## _copy,					\
+	.rotate = rbname ## _rotate					\
 };
 
 
diff --git a/include/linux/scatterlist.h b/include/linux/scatterlist.h
index cb3c8fe6acd7..a001ef9073ae 100644
--- a/include/linux/scatterlist.h
+++ b/include/linux/scatterlist.h
@@ -1,6 +1,7 @@
 #ifndef _LINUX_SCATTERLIST_H
 #define _LINUX_SCATTERLIST_H
 
+#include <linux/sched.h>
 #include <linux/string.h>
 #include <linux/types.h>
 #include <linux/bug.h>
@@ -136,10 +137,12 @@ static inline struct page *sg_page(struct scatterlist *sg)
 static inline void sg_set_buf(struct scatterlist *sg, const void *buf,
 			      unsigned int buflen)
 {
+	const void *realbuf = gr_convert_stack_address_to_lowmem(buf);
+
 #ifdef CONFIG_DEBUG_SG
-	BUG_ON(!virt_addr_valid(buf));
+	BUG_ON(!virt_addr_valid(realbuf));
 #endif
-	sg_set_page(sg, virt_to_page(buf), buflen, offset_in_page(buf));
+	sg_set_page(sg, virt_to_page(realbuf), buflen, offset_in_page(realbuf));
 }
 
 /*
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 4375a7b09262..2b11430f1dfe 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -455,7 +455,18 @@ struct nsproxy;
 struct user_namespace;
 
 #ifdef CONFIG_MMU
-extern bool check_heap_stack_gap(const struct vm_area_struct *vma, unsigned long addr, unsigned long len);
+
+#ifdef CONFIG_GRKERNSEC_RAND_THREADSTACK
+extern unsigned long gr_rand_threadstack_offset(const struct mm_struct *mm, const struct file *filp, unsigned long flags);
+#else
+static inline unsigned long gr_rand_threadstack_offset(const struct mm_struct *mm, const struct file *filp, unsigned long flags)
+{
+	return 0;
+}
+#endif
+
+extern bool check_heap_stack_gap(const struct vm_area_struct *vma, unsigned long addr, unsigned long len, unsigned long offset);
+
 extern void arch_pick_mmap_layout(struct mm_struct *mm);
 extern unsigned long
 arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
@@ -795,6 +806,17 @@ struct signal_struct {
 #ifdef CONFIG_TASKSTATS
 	struct taskstats *stats;
 #endif
+
+#ifdef CONFIG_GRKERNSEC
+	u32 curr_ip;
+	u32 saved_ip;
+	u32 gr_saddr;
+	u32 gr_daddr;
+	u16 gr_sport;
+	u16 gr_dport;
+	u8 used_accept:1;
+#endif
+
 #ifdef CONFIG_AUDIT
 	unsigned audit_tty;
 	struct tty_audit_buf *tty_audit_buf;
@@ -814,7 +836,7 @@ struct signal_struct {
 	struct mutex cred_guard_mutex;	/* guard against foreign influences on
 					 * credential calculations
 					 * (notably. ptrace) */
-};
+} __randomize_layout;
 
 /*
  * Bits in flags field of signal_struct.
@@ -869,6 +891,14 @@ struct user_struct {
 	struct key *session_keyring;	/* UID's default session keyring */
 #endif
 
+#ifdef CONFIG_GRKERNSEC_KERN_LOCKOUT
+	unsigned char kernel_banned;
+#endif
+#ifdef CONFIG_GRKERNSEC_BRUTE
+	unsigned char sugid_banned;
+	unsigned long sugid_ban_expires;
+#endif
+
 	/* Hash table maintenance information */
 	struct hlist_node uidhash_node;
 	kuid_t uid;
@@ -876,7 +906,7 @@ struct user_struct {
 #if defined(CONFIG_PERF_EVENTS) || defined(CONFIG_BPF_SYSCALL)
 	atomic_long_t locked_vm;
 #endif
-};
+} __randomize_layout;
 
 extern int uids_sysfs_init(void);
 
@@ -1484,6 +1514,9 @@ struct task_struct {
 #endif
 	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */
 	void *stack;
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	void *lowmem_stack;
+#endif
 	atomic_t usage;
 	unsigned int flags;	/* per process flags, defined below */
 	unsigned int ptrace;
@@ -1616,6 +1649,8 @@ struct task_struct {
 	struct list_head sibling;	/* linkage in my parent's children list */
 	struct task_struct *group_leader;	/* threadgroup leader */
 
+	const struct cred __rcu *ptracer_cred; /* Tracer's credentials at attach */
+
 	/*
 	 * ptraced is the list of tasks this task is using ptrace on.
 	 * This includes both natural children and PTRACE_ATTACH targets.
@@ -1661,12 +1696,6 @@ struct task_struct {
 	struct task_cputime cputime_expires;
 	struct list_head cpu_timers[3];
 
-/* process credentials */
-	const struct cred __rcu *ptracer_cred; /* Tracer's credentials at attach */
-	const struct cred __rcu *real_cred; /* objective and real subjective task
-					 * credentials (COW) */
-	const struct cred __rcu *cred;	/* effective (overridable) subjective task
-					 * credentials (COW) */
 	char comm[TASK_COMM_LEN]; /* executable name excluding path
 				     - access with [gs]et_task_comm (which lock
 				       it with task_lock())
@@ -1682,6 +1711,8 @@ struct task_struct {
 /* hung task detection */
 	unsigned long last_switch_count;
 #endif
+/* CPU-specific state of this task */
+	struct thread_struct thread;
 /* filesystem information */
 	struct fs_struct *fs;
 /* open file information */
@@ -1763,6 +1794,10 @@ struct task_struct {
 	unsigned int in_ubsan;
 #endif
 
+/* process credentials */
+	const struct cred __rcu *real_cred; /* objective and real subjective task
+					 * credentials (COW) */
+
 /* journalling filesystem info */
 	void *journal_info;
 
@@ -1801,6 +1836,10 @@ struct task_struct {
 	/* cg_list protected by css_set_lock and tsk->alloc_lock */
 	struct list_head cg_list;
 #endif
+
+	const struct cred __rcu *cred;	/* effective (overridable) subjective task
+					 * credentials (COW) */
+
 #ifdef CONFIG_FUTEX
 	struct robust_list_head __user *robust_list;
 #ifdef CONFIG_COMPAT
@@ -1964,16 +2003,37 @@ struct task_struct {
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 	/* A live task holds one reference. */
 	atomic_t stack_refcount;
+
+/* thread_info moved to task_struct */
+#ifdef CONFIG_X86
+	struct thread_info tinfo;
 #endif
-/* CPU-specific state of this task */
-	struct thread_struct thread;
-/*
- * WARNING: on x86, 'thread_struct' contains a variable-sized
- * structure.  It *MUST* be at the end of 'task_struct'.
- *
- * Do not put anything below here!
- */
-};
+#endif
+
+#ifdef CONFIG_GRKERNSEC
+	/* grsecurity */
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	u64 exec_id;
+#endif
+#ifdef CONFIG_GRKERNSEC_SETXID
+	const struct cred *delayed_cred;
+#endif
+	struct dentry *gr_chroot_dentry;
+	struct acl_subject_label *acl;
+	struct acl_subject_label *tmpacl;
+	struct acl_role_label *role;
+	struct file *exec_file;
+	unsigned long brute_expires;
+	u16 acl_role_id;
+	u8 inherited;
+	/* is this the task that authenticated to the special role */
+	u8 acl_sp_role;
+	u8 is_writable;
+	u8 brute;
+	u8 gr_is_chrooted;
+#endif
+
+} __randomize_layout;
 
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 #ifndef current_thread_info
@@ -2162,7 +2222,7 @@ struct pid_namespace;
 pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type,
 			struct pid_namespace *ns);
 
-static inline pid_t task_pid_nr(struct task_struct *tsk)
+static inline pid_t task_pid_nr(const struct task_struct *tsk)
 {
 	return tsk->pid;
 }
@@ -2529,6 +2589,50 @@ extern u64 sched_clock_cpu(int cpu);
 
 extern void sched_clock_init(void);
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+static inline void populate_stack(void *stack, unsigned int size)
+{
+	int c;
+	int *ptr = stack;
+	int *end = stack + size;
+
+	while (ptr < end) {
+		c = *(volatile int *)ptr;
+		(void)c;
+		ptr += PAGE_SIZE/sizeof(int);
+	}
+}
+#else
+static inline void populate_stack(void *stack, unsigned int size)
+{
+}
+#endif
+
+const void *gr_convert_stack_address_to_lowmem(const void *buf);
+
+#ifdef CONFIG_GRKERNSEC
+static inline bool current_is_ptracer(struct task_struct *task, u64 *exec_id)
+{
+	bool ret = false;
+        if (!task->ptrace)
+		return ret;
+
+	rcu_read_lock();
+	read_lock(&tasklist_lock);
+	if (task->parent && task->parent == current) {
+		ret = true;
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+		if (exec_id)
+			*exec_id = task->parent->exec_id;
+#endif
+	}
+	read_unlock(&tasklist_lock);
+	rcu_read_unlock();
+
+	return ret;
+}
+#endif
+
 #ifndef CONFIG_HAVE_UNSTABLE_SCHED_CLOCK
 static inline void sched_clock_tick(void)
 {
@@ -2721,6 +2825,7 @@ extern struct pid_namespace init_pid_ns;
  */
 
 extern struct task_struct *find_task_by_vpid(pid_t nr);
+extern struct task_struct *find_task_by_vpid_unrestricted(pid_t nr);
 extern struct task_struct *find_task_by_pid_ns(pid_t nr,
 		struct pid_namespace *ns);
 
@@ -3274,6 +3379,17 @@ static inline int object_starts_on_stack(const void *obj)
 	return (obj >= stack) && (obj < (stack + THREAD_SIZE));
 }
 
+#if defined(CONFIG_GRKERNSEC_KSTACKOVERFLOW) && defined(CONFIG_X86_64)
+static inline int object_starts_on_irq_stack(const void *obj)
+{
+	const void *stack = this_cpu_read(irq_stack_ptr);
+
+	return (obj >= stack) && (obj < (stack + IRQ_STACK_SIZE));
+}
+#else
+static inline int object_starts_on_irq_stack(const void *obj) { return 0; }
+#endif
+
 extern void thread_stack_cache_init(void);
 
 #ifdef CONFIG_DEBUG_STACK_USAGE
diff --git a/include/linux/security.h b/include/linux/security.h
index c2125e9093e8..365bf43bc9fc 100644
--- a/include/linux/security.h
+++ b/include/linux/security.h
@@ -30,6 +30,7 @@
 #include <linux/string.h>
 #include <linux/mm.h>
 #include <linux/fs.h>
+#include <linux/grsecurity.h>
 
 struct linux_binprm;
 struct cred;
diff --git a/include/linux/sem.h b/include/linux/sem.h
index d0efd6e6c20a..c68948cac604 100644
--- a/include/linux/sem.h
+++ b/include/linux/sem.h
@@ -22,7 +22,7 @@ struct sem_array {
 	int			sem_nsems;	/* no. of semaphores in array */
 	int			complex_count;	/* pending complex operations */
 	bool			complex_mode;	/* no parallel simple ops */
-};
+} __randomize_layout;
 
 #ifdef CONFIG_SYSVIPC
 
diff --git a/include/linux/seq_file.h b/include/linux/seq_file.h
index bc96f42ed3d4..44b0ad9516c5 100644
--- a/include/linux/seq_file.h
+++ b/include/linux/seq_file.h
@@ -25,6 +25,9 @@ struct seq_file {
 	const struct seq_operations *op;
 	int poll_event;
 	const struct file *file;
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	u64 exec_id;
+#endif
 	void *private;
 };
 
@@ -107,6 +110,7 @@ void seq_pad(struct seq_file *m, char c);
 
 char *mangle_path(char *s, const char *p, const char *esc);
 int seq_open(struct file *, const struct seq_operations *);
+int seq_open_restrict(struct file *, const struct seq_operations *);
 ssize_t seq_read(struct file *, char __user *, size_t, loff_t *);
 loff_t seq_lseek(struct file *, loff_t, int);
 int seq_release(struct inode *, struct file *);
@@ -134,6 +138,7 @@ int seq_path_root(struct seq_file *m, const struct path *path,
 		  const struct path *root, const char *esc);
 
 int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
+int single_open_restrict(struct file *, int (*)(struct seq_file *, void *), void *);
 int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
 int single_release(struct inode *, struct file *);
 void *__seq_open_private(struct file *, const struct seq_operations *, int);
diff --git a/include/linux/shm.h b/include/linux/shm.h
index 04e881829625..af8580566e52 100644
--- a/include/linux/shm.h
+++ b/include/linux/shm.h
@@ -22,7 +22,11 @@ struct shmid_kernel /* private to the kernel */
 	/* The task created the shm object.  NULL if the task is dead. */
 	struct task_struct	*shm_creator;
 	struct list_head	shm_clist;	/* list by creator */
-};
+#ifdef CONFIG_GRKERNSEC
+	u64			shm_createtime;
+	pid_t			shm_lapid;
+#endif
+} __randomize_layout;
 
 /* shm_mode upper byte flags */
 #define	SHM_DEST	01000	/* segment will be destroyed on last detach */
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 4f4cb679e4ce..66eb624a9929 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -3575,6 +3575,9 @@ static inline void nf_reset(struct sk_buff *skb)
 	nf_bridge_put(skb->nf_bridge);
 	skb->nf_bridge = NULL;
 #endif
+#if IS_ENABLED(CONFIG_NETFILTER_XT_TARGET_TRACE)
+	skb->nf_trace = 0;
+#endif
 }
 
 static inline void nf_reset_trace(struct sk_buff *skb)
diff --git a/include/linux/slab.h b/include/linux/slab.h
index beb57a34c393..9da238a10c52 100644
--- a/include/linux/slab.h
+++ b/include/linux/slab.h
@@ -22,6 +22,13 @@
  * The ones marked DEBUG are only valid if CONFIG_DEBUG_SLAB is set.
  */
 #define SLAB_CONSISTENCY_CHECKS	0x00000100UL	/* DEBUG: Perform (expensive) checks on alloc/free */
+
+#ifdef CONFIG_PAX_USERCOPY
+#define SLAB_USERCOPY		0x00000200UL	/* PaX: Allow copying objs to/from userland */
+#else
+#define SLAB_USERCOPY		0x00000000UL
+#endif
+
 #define SLAB_RED_ZONE		0x00000400UL	/* DEBUG: Red zone objs in a cache */
 #define SLAB_POISON		0x00000800UL	/* DEBUG: Poison objects */
 
@@ -582,13 +589,6 @@ struct memcg_cache_params {
 
 int memcg_update_all_caches(int num_memcgs);
 
-extern void kmalloc_array_error(void)
-#if defined(CONFIG_GCOV_KERNEL) && defined(PAX_SIZE_OVERFLOW)
-__compiletime_warning("kmalloc_array called with swapped arguments?");
-#else
-__compiletime_error("kmalloc_array called with swapped arguments?");
-#endif
-
 /**
  * kmalloc_array - allocate memory for an array.
  * @n: number of elements.
@@ -597,8 +597,6 @@ __compiletime_error("kmalloc_array called with swapped arguments?");
  */
 static inline void *kmalloc_array(size_t n, size_t size, gfp_t flags)
 {
-	if (__builtin_constant_p(n) && !__builtin_constant_p(size))
-		kmalloc_array_error();
 	if (size != 0 && n > SIZE_MAX / size)
 		return NULL;
 	if (__builtin_constant_p(n) && __builtin_constant_p(size))
diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index bc9731667bdb..807838b419cc 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -41,12 +41,18 @@ typedef int proc_handler (struct ctl_table *ctl, int write,
 
 extern int proc_dostring(struct ctl_table *, int,
 			 void __user *, size_t *, loff_t *);
+extern int proc_dostring_modpriv(struct ctl_table *, int,
+			 void __user *, size_t *, loff_t *);
 extern int proc_dointvec(struct ctl_table *, int,
 			 void __user *, size_t *, loff_t *);
+extern int proc_dointvec_secure(struct ctl_table *, int,
+                     		void __user *, size_t *, loff_t *);
 extern int proc_douintvec(struct ctl_table *, int,
 			 void __user *, size_t *, loff_t *);
 extern int proc_dointvec_minmax(struct ctl_table *, int,
 				void __user *, size_t *, loff_t *);
+extern int proc_dointvec_minmax_secure(struct ctl_table *, int,
+				       void __user *, size_t *, loff_t *);
 extern int proc_dointvec_jiffies(struct ctl_table *, int,
 				 void __user *, size_t *, loff_t *);
 extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int,
@@ -117,7 +123,7 @@ struct ctl_table
 	struct ctl_table_poll *poll;
 	void *extra1;
 	void *extra2;
-} __do_const;
+} __do_const __randomize_layout;
 typedef struct ctl_table __no_const ctl_table_no_const;
 
 struct ctl_node {
diff --git a/include/linux/timer.h b/include/linux/timer.h
index 51d601f192d4..6769812d0a43 100644
--- a/include/linux/timer.h
+++ b/include/linux/timer.h
@@ -28,7 +28,7 @@ struct timer_list {
 #ifdef CONFIG_LOCKDEP
 	struct lockdep_map	lockdep_map;
 #endif
-};
+} __randomize_layout;
 
 #ifdef CONFIG_LOCKDEP
 /*
diff --git a/include/linux/tty.h b/include/linux/tty.h
index d520a07118a5..610732a17fff 100644
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@ -326,7 +326,7 @@ struct tty_struct {
 	/* If the tty has a pending do_SAK, queue it here - akpm */
 	struct work_struct SAK_work;
 	struct tty_port *port;
-};
+} __randomize_layout;
 
 /* Each of a tty's open files has private_data pointing to tty_file_private */
 struct tty_file_private {
diff --git a/include/linux/tty_driver.h b/include/linux/tty_driver.h
index f9d5a4035fae..76dc1fa826e4 100644
--- a/include/linux/tty_driver.h
+++ b/include/linux/tty_driver.h
@@ -291,7 +291,7 @@ struct tty_operations {
 	void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
 #endif
 	const struct file_operations *proc_fops;
-} __do_const;
+} __do_const __randomize_layout;
 
 struct tty_driver {
 	int	magic;		/* magic number for this structure */
@@ -325,7 +325,7 @@ struct tty_driver {
 
 	const struct tty_operations *ops;
 	struct list_head tty_drivers;
-};
+} __randomize_layout;
 
 extern struct list_head tty_drivers;
 
diff --git a/include/linux/uidgid.h b/include/linux/uidgid.h
index 25e9d9216340..1b34fffb9c7d 100644
--- a/include/linux/uidgid.h
+++ b/include/linux/uidgid.h
@@ -187,4 +187,10 @@ static inline bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
 
 #endif /* CONFIG_USER_NS */
 
+#define GR_GLOBAL_UID(x) from_kuid_munged(&init_user_ns, (x))
+#define GR_GLOBAL_GID(x) from_kgid_munged(&init_user_ns, (x))
+#define gr_is_global_root(x) uid_eq((x), GLOBAL_ROOT_UID)
+#define gr_is_global_nonroot(x) (!uid_eq((x), GLOBAL_ROOT_UID))
+#define gr_is_global_nonroot_gid(x) (!gid_eq((x), GLOBAL_ROOT_GID))
+
 #endif /* _LINUX_UIDGID_H */
diff --git a/include/linux/usb.h b/include/linux/usb.h
index 94c966fa11db..eac1b5280b4a 100644
--- a/include/linux/usb.h
+++ b/include/linux/usb.h
@@ -1700,7 +1700,7 @@ extern int usb_string(struct usb_device *dev, int index,
 	char *buf, size_t size);
 
 /* wrappers that also update important state inside usbcore */
-extern int usb_clear_halt(struct usb_device *dev, int pipe);
+extern int usb_clear_halt(struct usb_device *dev, unsigned int pipe);
 extern int usb_reset_configuration(struct usb_device *dev);
 extern int usb_set_interface(struct usb_device *dev, int ifnum, int alternate);
 extern void usb_reset_endpoint(struct usb_device *dev, unsigned int epaddr);
@@ -1845,7 +1845,7 @@ usb_pipe_endpoint(struct usb_device *dev, unsigned int pipe)
 /*-------------------------------------------------------------------------*/
 
 static inline __u16
-usb_maxpacket(struct usb_device *udev, int pipe, int is_out)
+usb_maxpacket(struct usb_device *udev, unsigned int pipe, int is_out)
 {
 	struct usb_host_endpoint	*ep;
 	unsigned			epnum = usb_pipeendpoint(pipe);
diff --git a/include/linux/user_namespace.h b/include/linux/user_namespace.h
index dc797739f164..5d396eaaaed6 100644
--- a/include/linux/user_namespace.h
+++ b/include/linux/user_namespace.h
@@ -59,7 +59,7 @@ struct user_namespace {
 #endif
 	struct ucounts		*ucounts;
 	int ucount_max[UCOUNT_COUNTS];
-};
+} __randomize_layout;
 
 struct ucounts {
 	struct hlist_node node;
diff --git a/include/linux/utsname.h b/include/linux/utsname.h
index 60f0bb83b313..da826ed059cf 100644
--- a/include/linux/utsname.h
+++ b/include/linux/utsname.h
@@ -26,7 +26,7 @@ struct uts_namespace {
 	struct user_namespace *user_ns;
 	struct ucounts *ucounts;
 	struct ns_common ns;
-};
+} __randomize_layout;
 extern struct uts_namespace init_uts_ns;
 
 #ifdef CONFIG_UTS_NS
diff --git a/include/linux/vermagic.h b/include/linux/vermagic.h
index a0e9cbdcb3d6..4efc177ca510 100644
--- a/include/linux/vermagic.h
+++ b/include/linux/vermagic.h
@@ -43,10 +43,24 @@
 #define MODULE_STACKLEAK_PLUGIN ""
 #endif
 
+#ifdef RANDSTRUCT_PLUGIN
+#include <generated/randomize_layout_hash.h>
+#define MODULE_RANDSTRUCT_PLUGIN "RANDSTRUCT_PLUGIN_" RANDSTRUCT_HASHED_SEED
+#else
+#define MODULE_RANDSTRUCT_PLUGIN
+#endif
+
+#ifdef CONFIG_GRKERNSEC
+#define MODULE_GRSEC "GRSEC "
+#else
+#define MODULE_GRSEC ""
+#endif
+
 #define VERMAGIC_STRING 						\
 	UTS_RELEASE " "							\
 	MODULE_VERMAGIC_SMP MODULE_VERMAGIC_PREEMPT 			\
 	MODULE_VERMAGIC_MODULE_UNLOAD MODULE_VERMAGIC_MODVERSIONS	\
 	MODULE_ARCH_VERMAGIC						\
-	MODULE_PAX_REFCOUNT MODULE_CONSTIFY_PLUGIN MODULE_STACKLEAK_PLUGIN
+	MODULE_PAX_REFCOUNT MODULE_CONSTIFY_PLUGIN MODULE_STACKLEAK_PLUGIN \
+	MODULE_GRSEC MODULE_RANDSTRUCT_PLUGIN
 
diff --git a/include/linux/vmalloc.h b/include/linux/vmalloc.h
index 6144dce18686..56059bf07f6d 100644
--- a/include/linux/vmalloc.h
+++ b/include/linux/vmalloc.h
@@ -24,6 +24,9 @@ struct notifier_block;		/* in notifier.h */
 #define VM_KERNEXEC		0x00000100	/* allocate from executable kernel memory range */
 #endif
 
+#define VM_USERCOPY		0x00000200	/* allocation intended for copies to userland */
+
+
 /* bits [20..32] reserved for arch specific ioremap internals */
 
 /*
@@ -73,6 +76,7 @@ static inline void vmalloc_init(void)
 #endif
 
 extern void *vmalloc(unsigned long size);
+extern void *vmalloc_usercopy(unsigned long size);
 extern void *vzalloc(unsigned long size);
 extern void *vmalloc_user(unsigned long size);
 extern void *vmalloc_node(unsigned long size, int node);
@@ -92,6 +96,10 @@ extern void *vmap(struct page **pages, unsigned int count,
 			unsigned long flags, pgprot_t prot);
 extern void vunmap(const void *addr);
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+extern void unmap_process_stacks(struct task_struct *task);
+#endif
+
 extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
 				       unsigned long uaddr, void *kaddr,
 				       unsigned long size);
diff --git a/include/net/af_unix.h b/include/net/af_unix.h
index fd60eccb59a6..64e2a1e24a2c 100644
--- a/include/net/af_unix.h
+++ b/include/net/af_unix.h
@@ -36,7 +36,7 @@ struct unix_skb_parms {
 	u32			secid;		/* Security ID		*/
 #endif
 	u32			consumed;
-};
+} __randomize_layout;
 
 #define UNIXCB(skb) 	(*(struct unix_skb_parms *)&((skb)->cb))
 
diff --git a/include/net/ip.h b/include/net/ip.h
index d3a107850a41..73cb3cddba4b 100644
--- a/include/net/ip.h
+++ b/include/net/ip.h
@@ -354,7 +354,7 @@ static inline unsigned int ip_skb_dst_mtu(struct sock *sk,
 	return min(skb_dst(skb)->dev->mtu, IP_MAX_MTU);
 }
 
-u32 ip_idents_reserve(u32 hash, int segs);
+u32 ip_idents_reserve(u32 hash, int segs) __intentional_overflow(-1);
 void __ip_select_ident(struct net *net, struct iphdr *iph, int segs);
 
 static inline void ip_select_ident_segs(struct net *net, struct sk_buff *skb,
diff --git a/include/net/neighbour.h b/include/net/neighbour.h
index 93fe3fa4f9a9..48fe40e3840e 100644
--- a/include/net/neighbour.h
+++ b/include/net/neighbour.h
@@ -217,7 +217,7 @@ struct neigh_table {
 	struct neigh_statistics	__percpu *stats;
 	struct neigh_hash_table __rcu *nht;
 	struct pneigh_entry	**phash_buckets;
-};
+} __randomize_layout;
 
 enum {
 	NEIGH_ARP_TABLE = 0,
diff --git a/include/net/net_namespace.h b/include/net/net_namespace.h
index d4d66db497f8..e69bc18c005a 100644
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -143,7 +143,7 @@ struct net {
 #endif
 	struct sock		*diag_nlsk;
 	atomic_unchecked_t	fnhe_genid;
-};
+} __randomize_layout;
 
 #include <linux/seq_file_net.h>
 
diff --git a/include/net/sock.h b/include/net/sock.h
index 1eb47e445a0b..db680f58df39 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1072,7 +1072,7 @@ struct proto {
 	atomic_t		socks;
 #endif
 	int			(*diag_destroy)(struct sock *sk, int err);
-};
+} __randomize_layout;
 
 int proto_register(struct proto *prot, int alloc_slab);
 void proto_unregister(struct proto *prot);
diff --git a/include/trace/events/fs.h b/include/trace/events/fs.h
new file mode 100644
index 000000000000..fb634b74adf3
--- /dev/null
+++ b/include/trace/events/fs.h
@@ -0,0 +1,53 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM fs
+
+#if !defined(_TRACE_FS_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_FS_H
+
+#include <linux/fs.h>
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(do_sys_open,
+
+	TP_PROTO(const char *filename, int flags, int mode),
+
+	TP_ARGS(filename, flags, mode),
+
+	TP_STRUCT__entry(
+		__string(	filename, filename		)
+		__field(	int, flags			)
+		__field(	int, mode			)
+	),
+
+	TP_fast_assign(
+		__assign_str(filename, filename);
+		__entry->flags = flags;
+		__entry->mode = mode;
+	),
+
+	TP_printk("\"%s\" %x %o",
+		  __get_str(filename), __entry->flags, __entry->mode)
+);
+
+TRACE_EVENT(open_exec,
+
+	TP_PROTO(const char *filename),
+
+	TP_ARGS(filename),
+
+	TP_STRUCT__entry(
+		__string(	filename, filename		)
+	),
+
+	TP_fast_assign(
+		__assign_str(filename, filename);
+	),
+
+	TP_printk("\"%s\"",
+		  __get_str(filename))
+);
+
+#endif /* _TRACE_FS_H */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
diff --git a/init/Kconfig b/init/Kconfig
index 68e49e1f16c0..0e6a185d8604 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -301,7 +301,8 @@ config FHANDLE
 
 config USELIB
 	bool "uselib syscall"
-	def_bool ALPHA || M68K || SPARC || X86_32 || IA32_EMULATION
+	default n
+	depends on !GRKERNSEC
 	help
 	  This option enables the uselib syscall, a system call used in the
 	  dynamic linker from libc5 and earlier.  glibc does not use this
@@ -645,6 +646,7 @@ config RCU_FAST_NO_HZ
 config TREE_RCU_TRACE
 	def_bool RCU_TRACE && ( TREE_RCU || PREEMPT_RCU )
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	help
 	  This option provides tracing for the TREE_RCU and
 	  PREEMPT_RCU implementations, permitting Makefile to
@@ -1171,6 +1173,7 @@ endif # CGROUPS
 config CHECKPOINT_RESTORE
 	bool "Checkpoint/restore support" if EXPERT
 	select PROC_CHILDREN
+	depends on !GRKERNSEC
 	default n
 	help
 	  Enables additional kernel features in a sake of checkpoint/restore.
@@ -1644,7 +1647,7 @@ config ADVISE_SYSCALLS
 config USERFAULTFD
 	bool "Enable userfaultfd() system call"
 	select ANON_INODES
-	depends on MMU
+	depends on MMU && !GRKERNSEC
 	help
 	  Enable the userfaultfd() system call that allows to intercept and
 	  handle page faults in userland.
diff --git a/init/main.c b/init/main.c
index 320d4ffdc429..5a222fc692e4 100644
--- a/init/main.c
+++ b/init/main.c
@@ -11,6 +11,10 @@
 
 #define DEBUG		/* Enable initcall_debug */
 
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+#define __INCLUDED_BY_HIDESYM 1
+#endif
+
 #include <linux/types.h>
 #include <linux/module.h>
 #include <linux/proc_fs.h>
@@ -94,6 +98,8 @@ extern void init_IRQ(void);
 extern void fork_init(void);
 extern void radix_tree_init(void);
 
+extern void grsecurity_init(void);
+
 /*
  * Debug helper: via this flag we know that we are in 'early bootup code'
  * where only the boot processor is running with IRQ disabled.  This means
@@ -155,6 +161,26 @@ static int __init set_reset_devices(char *str)
 
 __setup("reset_devices", set_reset_devices);
 
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+kgid_t grsec_proc_gid = KGIDT_INIT(CONFIG_GRKERNSEC_PROC_GID);
+static int __init setup_grsec_proc_gid(char *str)
+{
+	grsec_proc_gid = KGIDT_INIT(simple_strtol(str, NULL, 0));
+	return 1;
+}
+__setup("grsec_proc_gid=", setup_grsec_proc_gid);
+#endif
+#ifdef CONFIG_GRKERNSEC_SYSFS_RESTRICT
+int grsec_enable_sysfs_restrict = 1;
+static int __init setup_grsec_sysfs_restrict(char *str)
+{
+	if (!simple_strtol(str, NULL, 0))
+		grsec_enable_sysfs_restrict = 0;
+	return 1;
+}
+__setup("grsec_sysfs_restrict", setup_grsec_sysfs_restrict);
+#endif
+
 #ifdef CONFIG_PAX_SOFTMODE
 int pax_softmode;
 
@@ -931,6 +957,10 @@ static int try_to_run_init_process(const char *init_filename)
 	return ret;
 }
 
+#ifdef CONFIG_GRKERNSEC_CHROOT_INITRD
+extern int gr_init_ran;
+#endif
+
 static noinline void __init kernel_init_freeable(void);
 
 #ifdef CONFIG_DEBUG_RODATA
@@ -979,6 +1009,11 @@ static int __ref kernel_init(void *unused)
 		       ramdisk_execute_command, ret);
 	}
 
+#ifdef CONFIG_GRKERNSEC_CHROOT_INITRD
+	/* if no initrd was used, be extra sure we enforce chroot restrictions */
+	gr_init_ran = 1;
+#endif
+
 	/*
 	 * We try each of these until one succeeds.
 	 *
@@ -1054,6 +1089,8 @@ static noinline void __init kernel_init_freeable(void)
 		prepare_namespace();
 	}
 
+	grsecurity_init();
+
 	/*
 	 * Ok, we have completed the initial bootup, and
 	 * we're essentially up and running. Get rid of the
diff --git a/ipc/mqueue.c b/ipc/mqueue.c
index 8cbd6e6894d5..38293ad574bd 100644
--- a/ipc/mqueue.c
+++ b/ipc/mqueue.c
@@ -274,6 +274,7 @@ static struct inode *mqueue_get_inode(struct super_block *sb,
 		mq_bytes = mq_treesize + (info->attr.mq_maxmsg *
 					  info->attr.mq_msgsize);
 
+		gr_learn_resource(current, RLIMIT_MSGQUEUE, u->mq_bytes + mq_bytes, 1);
 		spin_lock(&mq_lock);
 		if (u->mq_bytes + mq_bytes < u->mq_bytes ||
 		    u->mq_bytes + mq_bytes > rlimit(RLIMIT_MSGQUEUE)) {
diff --git a/ipc/msg.c b/ipc/msg.c
index e12307d0c920..de96eac5f2bb 100644
--- a/ipc/msg.c
+++ b/ipc/msg.c
@@ -1031,7 +1031,8 @@ void msg_exit_ns(struct ipc_namespace *ns)
 static int sysvipc_msg_proc_show(struct seq_file *s, void *it)
 {
 	struct user_namespace *user_ns = seq_user_ns(s);
-	struct msg_queue *msq = it;
+	struct kern_ipc_perm *perm = it;
+	struct msg_queue *msq = container_of(perm, struct msg_queue, q_perm);
 
 	seq_printf(s,
 		   "%10d %10d  %4o  %10lu %10lu %5u %5u %5u %5u %5u %5u %10lu %10lu %10lu\n",
diff --git a/ipc/msgutil.c b/ipc/msgutil.c
index bf74eaa5c39f..dc6dbf710096 100644
--- a/ipc/msgutil.c
+++ b/ipc/msgutil.c
@@ -53,7 +53,7 @@ static struct msg_msg *alloc_msg(size_t len)
 	size_t alen;
 
 	alen = min(len, DATALEN_MSG);
-	msg = kmalloc(sizeof(*msg) + alen, GFP_KERNEL_ACCOUNT);
+	msg = kmalloc(sizeof(*msg) + alen, GFP_KERNEL_ACCOUNT|GFP_USERCOPY);
 	if (msg == NULL)
 		return NULL;
 
@@ -65,7 +65,7 @@ static struct msg_msg *alloc_msg(size_t len)
 	while (len > 0) {
 		struct msg_msgseg *seg;
 		alen = min(len, DATALEN_SEG);
-		seg = kmalloc(sizeof(*seg) + alen, GFP_KERNEL_ACCOUNT);
+		seg = kmalloc(sizeof(*seg) + alen, GFP_KERNEL_ACCOUNT|GFP_USERCOPY);
 		if (seg == NULL)
 			goto out_err;
 		*pseg = seg;
diff --git a/ipc/sem.c b/ipc/sem.c
index d7038b35e0e9..136c0ae33d5d 100644
--- a/ipc/sem.c
+++ b/ipc/sem.c
@@ -2206,7 +2206,8 @@ void exit_sem(struct task_struct *tsk)
 static int sysvipc_sem_proc_show(struct seq_file *s, void *it)
 {
 	struct user_namespace *user_ns = seq_user_ns(s);
-	struct sem_array *sma = it;
+	struct kern_ipc_perm *perm = it;
+	struct sem_array *sma = container_of(perm, struct sem_array, sem_perm);
 	time_t sem_otime;
 
 	/*
diff --git a/ipc/shm.c b/ipc/shm.c
index 9ef098c7e4e7..a0da911603ba 100644
--- a/ipc/shm.c
+++ b/ipc/shm.c
@@ -72,6 +72,14 @@ static void shm_destroy(struct ipc_namespace *ns, struct shmid_kernel *shp);
 static int sysvipc_shm_proc_show(struct seq_file *s, void *it);
 #endif
 
+#ifdef CONFIG_GRKERNSEC
+extern int gr_handle_shmat(const pid_t shm_cprid, const pid_t shm_lapid,
+			   const u64 shm_createtime, const kuid_t cuid,
+			   const int shmid);
+extern int gr_chroot_shmat(const pid_t shm_cprid, const pid_t shm_lapid,
+			   const u64 shm_createtime);
+#endif
+
 void shm_init_ns(struct ipc_namespace *ns)
 {
 	ns->shm_ctlmax = BITS_PER_LONG == 32 ? SHMMAX : LONG_MAX;
@@ -590,6 +598,9 @@ static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
 	shp->shm_lprid = 0;
 	shp->shm_atim = shp->shm_dtim = 0;
 	shp->shm_ctim = get_seconds();
+#ifdef CONFIG_GRKERNSEC
+	shp->shm_createtime = ktime_get_ns();
+#endif
 	shp->shm_segsz = size;
 	shp->shm_nattch = 0;
 	shp->shm_file = file;
@@ -1168,6 +1179,15 @@ long do_shmat(int shmid, char __user *shmaddr, int shmflg,
 	if (err)
 		goto out_unlock;
 
+#ifdef CONFIG_GRKERNSEC
+	if (!gr_handle_shmat(shp->shm_cprid, shp->shm_lapid, shp->shm_createtime,
+			     shp->shm_perm.cuid, shmid) ||
+	    !gr_chroot_shmat(shp->shm_cprid, shp->shm_lapid, shp->shm_createtime)) {
+		err = -EACCES;
+		goto out_unlock;
+	}
+#endif
+
 	ipc_lock_object(&shp->shm_perm);
 
 	/* check if shm_destroy() is tearing down shp */
@@ -1180,6 +1200,9 @@ long do_shmat(int shmid, char __user *shmaddr, int shmflg,
 	path = shp->shm_file->f_path;
 	path_get(&path);
 	shp->shm_nattch++;
+#ifdef CONFIG_GRKERNSEC
+	shp->shm_lapid = current->pid;
+#endif
 	size = i_size_read(d_inode(path.dentry));
 	ipc_unlock_object(&shp->shm_perm);
 	rcu_read_unlock();
@@ -1383,7 +1406,8 @@ SYSCALL_DEFINE1(shmdt, char __user *, shmaddr)
 static int sysvipc_shm_proc_show(struct seq_file *s, void *it)
 {
 	struct user_namespace *user_ns = seq_user_ns(s);
-	struct shmid_kernel *shp = it;
+	struct kern_ipc_perm *perm = it;
+	struct shmid_kernel *shp = container_of(perm, struct shmid_kernel, shm_perm);
 	unsigned long rss = 0, swp = 0;
 
 	shm_add_rss_swap(shp, &rss, &swp);
diff --git a/ipc/util.c b/ipc/util.c
index 798cad18dd87..d6ffc17c6fa4 100644
--- a/ipc/util.c
+++ b/ipc/util.c
@@ -71,6 +71,8 @@ struct ipc_proc_iface {
 	int (*show)(struct seq_file *, void *);
 };
 
+extern int gr_ipc_permitted(struct ipc_namespace *ns, struct kern_ipc_perm *ipcp, int requested_mode, int granted_mode);
+
 /**
  * ipc_init - initialise ipc subsystem
  *
@@ -489,6 +491,10 @@ int ipcperms(struct ipc_namespace *ns, struct kern_ipc_perm *ipcp, short flag)
 		granted_mode >>= 6;
 	else if (in_group_p(ipcp->cgid) || in_group_p(ipcp->gid))
 		granted_mode >>= 3;
+
+	if (!gr_ipc_permitted(ns, ipcp, requested_mode, granted_mode))
+		return -1;
+
 	/* is there some bit set in requested_mode but not in granted_mode? */
 	if ((requested_mode & ~granted_mode & 0007) &&
 	    !ns_capable(ns->user_ns, CAP_IPC_OWNER))
diff --git a/kernel/bpf/syscall.c b/kernel/bpf/syscall.c
index 237f3d6a7ddc..ea9aac0ae736 100644
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@ -829,8 +829,16 @@ SYSCALL_DEFINE3(bpf, int, cmd, union bpf_attr __user *, uattr, unsigned int, siz
 	union bpf_attr attr = {};
 	int err;
 
-	if (!capable(CAP_SYS_ADMIN) && sysctl_unprivileged_bpf_disabled)
+	/* the syscall is limited to root temporarily. This restriction will be
+	 * lifted by upstream when a half-assed security audit is clean. Note
+	 * that eBPF+tracing must have this restriction, since it may pass
+	 * kernel data to user space
+	 */
+	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+#ifdef CONFIG_GRKERNSEC
+	return -EPERM;
+#endif
 
 	if (!access_ok(VERIFY_READ, uattr, 1))
 		return -EFAULT;
diff --git a/kernel/capability.c b/kernel/capability.c
index 1f2ffc94cf37..a5bf6f538dea 100644
--- a/kernel/capability.c
+++ b/kernel/capability.c
@@ -301,10 +301,11 @@ bool has_ns_capability(struct task_struct *t,
 	int ret;
 
 	rcu_read_lock();
-	ret = security_capable(__task_cred(t), ns, cap);
+	ret = security_capable(__task_cred(t), ns, cap) == 0 &&
+		gr_task_is_capable(t, __task_cred(t), cap);
 	rcu_read_unlock();
 
-	return (ret == 0);
+	return ret;
 }
 
 /**
@@ -341,10 +342,10 @@ bool has_ns_capability_noaudit(struct task_struct *t,
 	int ret;
 
 	rcu_read_lock();
-	ret = security_capable_noaudit(__task_cred(t), ns, cap);
+	ret = security_capable_noaudit(__task_cred(t), ns, cap) == 0 && gr_task_is_capable_nolog(t, __task_cred(t), cap);
 	rcu_read_unlock();
 
-	return (ret == 0);
+	return ret;
 }
 
 /**
@@ -373,9 +374,9 @@ static bool ns_capable_common(struct user_namespace *ns, int cap, bool audit)
 		BUG();
 	}
 
-	capable = audit ? security_capable(current_cred(), ns, cap) :
-			  security_capable_noaudit(current_cred(), ns, cap);
-	if (capable == 0) {
+	capable = audit ? (security_capable(current_cred(), ns, cap) == 0 && gr_is_capable(cap)) :
+			  (security_capable_noaudit(current_cred(), ns, cap) == 0 && gr_is_capable_nolog(cap)) ;
+	if (capable) {
 		current->flags |= PF_SUPERPRIV;
 		return true;
 	}
@@ -432,6 +433,13 @@ bool capable(int cap)
 	return ns_capable(&init_user_ns, cap);
 }
 EXPORT_SYMBOL(capable);
+
+bool capable_nolog(int cap)
+{
+	return ns_capable_noaudit(&init_user_ns, cap);
+}
+EXPORT_SYMBOL(capable_nolog);
+
 #endif /* CONFIG_MULTIUSER */
 
 /**
@@ -489,6 +497,14 @@ bool capable_wrt_inode_uidgid(const struct inode *inode, int cap)
 }
 EXPORT_SYMBOL(capable_wrt_inode_uidgid);
 
+bool capable_wrt_inode_uidgid_nolog(const struct inode *inode, int cap)
+{
+	struct user_namespace *ns = current_user_ns();
+
+	return ns_capable_noaudit(ns, cap) && privileged_wrt_inode_uidgid(ns, inode);
+}
+EXPORT_SYMBOL(capable_wrt_inode_uidgid_nolog);
+
 /**
  * ptracer_capable - Determine if the ptracer holds CAP_SYS_PTRACE in the namespace
  * @tsk: The task that may be ptraced
diff --git a/kernel/cgroup.c b/kernel/cgroup.c
index 33d3ab5f1508..5c0c12d75030 100644
--- a/kernel/cgroup.c
+++ b/kernel/cgroup.c
@@ -6100,6 +6100,9 @@ static void cgroup_release_agent(struct work_struct *work)
 	if (!pathbuf || !agentbuf)
 		goto out;
 
+	if (agentbuf[0] == '\0')
+		goto out;
+
 	spin_lock_irq(&css_set_lock);
 	ret = cgroup_path_ns_locked(cgrp, pathbuf, PATH_MAX, &init_cgroup_ns);
 	spin_unlock_irq(&css_set_lock);
@@ -6580,7 +6583,7 @@ static int cgroup_css_links_read(struct seq_file *seq, void *v)
 		struct task_struct *task;
 		int count = 0;
 
-		seq_printf(seq, "css_set %p\n", cset);
+		seq_printf(seq, "css_set %pK\n", cset);
 
 		list_for_each_entry(task, &cset->tasks, cg_list) {
 			if (count++ > MAX_TASKS_SHOWN_PER_CSS)
diff --git a/kernel/compat.c b/kernel/compat.c
index 4e6619a3680f..762ec00709f0 100644
--- a/kernel/compat.c
+++ b/kernel/compat.c
@@ -13,6 +13,7 @@
 
 #include <linux/linkage.h>
 #include <linux/compat.h>
+#include <linux/module.h>
 #include <linux/errno.h>
 #include <linux/time.h>
 #include <linux/signal.h>
diff --git a/kernel/configs.c b/kernel/configs.c
index c18b1f1ae515..b9a0132215df 100644
--- a/kernel/configs.c
+++ b/kernel/configs.c
@@ -74,8 +74,19 @@ static int __init ikconfig_init(void)
 	struct proc_dir_entry *entry;
 
 	/* create the current config file */
+#if defined(CONFIG_GRKERNSEC_PROC_ADD) || defined(CONFIG_GRKERNSEC_HIDESYM)
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_HIDESYM)
+	entry = proc_create("config.gz", S_IFREG | S_IRUSR, NULL,
+			    &ikconfig_file_ops);
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	entry = proc_create("config.gz", S_IFREG | S_IRUSR | S_IRGRP, NULL,
+			    &ikconfig_file_ops);
+#endif
+#else
 	entry = proc_create("config.gz", S_IFREG | S_IRUGO, NULL,
 			    &ikconfig_file_ops);
+#endif
+
 	if (!entry)
 		return -ENOMEM;
 
diff --git a/kernel/cred.c b/kernel/cred.c
index 5f264fb5737d..8fc856b49551 100644
--- a/kernel/cred.c
+++ b/kernel/cred.c
@@ -172,6 +172,15 @@ void exit_creds(struct task_struct *tsk)
 	validate_creds(cred);
 	alter_cred_subscribers(cred, -1);
 	put_cred(cred);
+
+#ifdef CONFIG_GRKERNSEC_SETXID
+	cred = (struct cred *) tsk->delayed_cred;
+	if (cred != NULL) {
+		tsk->delayed_cred = NULL;
+		validate_creds(cred);
+		put_cred(cred);
+	}
+#endif
 }
 
 /**
@@ -419,7 +428,7 @@ static bool cred_cap_issubset(const struct cred *set, const struct cred *subset)
  * Always returns 0 thus allowing this function to be tail-called at the end
  * of, say, sys_setgid().
  */
-int commit_creds(struct cred *new)
+static int __commit_creds(struct cred *new)
 {
 	struct task_struct *task = current;
 	const struct cred *old = task->real_cred;
@@ -438,6 +447,8 @@ int commit_creds(struct cred *new)
 
 	get_cred(new); /* we will require a ref for the subj creds too */
 
+	gr_set_role_label(task, new->uid, new->gid);
+
 	/* dumpability changes */
 	if (!uid_eq(old->euid, new->euid) ||
 	    !gid_eq(old->egid, new->egid) ||
@@ -487,6 +498,105 @@ int commit_creds(struct cred *new)
 	put_cred(old);
 	return 0;
 }
+#ifdef CONFIG_GRKERNSEC_SETXID
+extern int set_user(struct cred *new);
+
+void gr_delayed_cred_worker(void)
+{
+	const struct cred *new = current->delayed_cred;
+	struct cred *ncred;
+
+	current->delayed_cred = NULL;
+
+	if (!uid_eq(current_uid(), GLOBAL_ROOT_UID) && new != NULL) {
+		// from doing get_cred on it when queueing this
+		put_cred(new);
+		return;
+	} else if (new == NULL)
+		return;
+
+	ncred = prepare_creds();
+	if (!ncred)
+		goto die;
+	// uids
+	ncred->uid = new->uid;
+	ncred->euid = new->euid;
+	ncred->suid = new->suid;
+	ncred->fsuid = new->fsuid;
+	// gids
+	ncred->gid = new->gid;
+	ncred->egid = new->egid;
+	ncred->sgid = new->sgid;
+	ncred->fsgid = new->fsgid;
+	// groups
+	set_groups(ncred, new->group_info);
+	// caps
+	ncred->securebits = new->securebits;
+	ncred->cap_inheritable = new->cap_inheritable;
+	ncred->cap_permitted = new->cap_permitted;
+	ncred->cap_effective = new->cap_effective;
+	ncred->cap_bset = new->cap_bset;
+
+	if (set_user(ncred)) {
+		abort_creds(ncred);
+		goto die;
+	}
+
+	// from doing get_cred on it when queueing this
+	put_cred(new);
+
+	__commit_creds(ncred);
+	return;
+die:
+	// from doing get_cred on it when queueing this
+	put_cred(new);
+	do_group_exit(SIGKILL);
+}
+#endif
+
+int commit_creds(struct cred *new)
+{
+#ifdef CONFIG_GRKERNSEC_SETXID
+	int ret;
+	int schedule_it = 0;
+	struct task_struct *t;
+	unsigned oldsecurebits = current_cred()->securebits;
+
+	/* we won't get called with tasklist_lock held for writing
+	   and interrupts disabled as the cred struct in that case is
+	   init_cred
+	*/
+	if (grsec_enable_setxid && !current_is_single_threaded() &&
+	    uid_eq(current_uid(), GLOBAL_ROOT_UID) &&
+	    !uid_eq(new->uid, GLOBAL_ROOT_UID)) {
+		schedule_it = 1;
+	}
+	ret = __commit_creds(new);
+	if (schedule_it) {
+		rcu_read_lock();
+		read_lock(&tasklist_lock);
+		for (t = next_thread(current); t != current;
+		     t = next_thread(t)) {
+			/* we'll check if the thread has uid 0 in
+			 * the delayed worker routine
+			 */
+			if (task_securebits(t) == oldsecurebits &&
+			    t->delayed_cred == NULL) {
+				t->delayed_cred = get_cred(new);
+				set_tsk_thread_flag(t, TIF_GRSEC_SETXID);
+				set_tsk_need_resched(t);
+			}
+		}
+		read_unlock(&tasklist_lock);
+		rcu_read_unlock();
+	}
+
+	return ret;
+#else
+	return __commit_creds(new);
+#endif
+}
+
 EXPORT_SYMBOL(commit_creds);
 
 /**
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 03e65af6c8fd..26e027195a76 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -389,8 +389,15 @@ static struct srcu_struct pmus_srcu;
  *   0 - disallow raw tracepoint access for unpriv
  *   1 - disallow cpu events for unpriv
  *   2 - disallow kernel profiling for unpriv
+ *   3 - disallow all unpriv perf event use
  */
-int sysctl_perf_event_paranoid __read_mostly = 2;
+#ifdef CONFIG_GRKERNSEC_PERF_HARDEN
+int sysctl_perf_event_legitimately_concerned __read_only = 3;
+#elif defined(CONFIG_GRKERNSEC_HIDESYM)
+int sysctl_perf_event_legitimately_concerned __read_only = 2;
+#else
+int sysctl_perf_event_legitimately_concerned __read_only = 2;
+#endif
 
 /* Minimum for 512 kiB + 1 user control page */
 int sysctl_perf_event_mlock __read_mostly = 512 + (PAGE_SIZE / 1024); /* 'free' kiB per user */
@@ -9592,6 +9599,11 @@ SYSCALL_DEFINE5(perf_event_open,
 	if (flags & ~PERF_FLAG_ALL)
 		return -EINVAL;
 
+#ifdef CONFIG_GRKERNSEC_PERF_HARDEN
+	if (perf_paranoid_any() && !capable(CAP_SYS_ADMIN))
+		return -EACCES;
+#endif
+
 	err = perf_copy_attr(attr_uptr, &attr);
 	if (err)
 		return err;
diff --git a/kernel/exit.c b/kernel/exit.c
index 3b16cb15930d..28d8eb4bff11 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -170,6 +170,10 @@ void release_task(struct task_struct *p)
 	struct task_struct *leader;
 	int zap_leader;
 repeat:
+#ifdef CONFIG_NET
+	gr_del_task_from_ip_table(p);
+#endif
+
 	/* don't need to get the RCU readlock here - the process is dead and
 	 * can't be modifying its own credentials. But shut RCU-lockdep up */
 	rcu_read_lock();
@@ -813,6 +817,9 @@ void __noreturn do_exit(long code)
 	tsk->exit_code = code;
 	taskstats_exit(tsk, group_dead);
 
+	gr_acl_handle_psacct(tsk, code);
+	gr_acl_handle_exit();
+
 	exit_mm(tsk);
 
 	if (group_dead)
diff --git a/kernel/fork.c b/kernel/fork.c
index 1405e1ddd793..37d2e1dba97f 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -259,6 +259,61 @@ void thread_stack_cache_init(void)
 # endif
 #endif
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+static inline unsigned long *gr_alloc_thread_stack_node(struct task_struct *tsk,
+						  int node, void **lowmem_stack)
+{
+	struct page *pages[THREAD_SIZE / PAGE_SIZE];
+	void *ret = NULL;
+	unsigned int i;
+
+	*lowmem_stack = alloc_thread_stack_node(tsk, node);
+	if (*lowmem_stack == NULL)
+		goto out;
+
+	for (i = 0; i < THREAD_SIZE / PAGE_SIZE; i++)
+		pages[i] = virt_to_page(*lowmem_stack + (i * PAGE_SIZE));
+
+	/* use VM_IOREMAP to gain THREAD_SIZE alignment */
+	ret = vmap(pages, THREAD_SIZE / PAGE_SIZE, VM_IOREMAP, PAGE_KERNEL);
+	if (ret == NULL) {
+		free_thread_stack(*lowmem_stack);
+		*lowmem_stack = NULL;
+	} else
+		populate_stack(ret, THREAD_SIZE);
+
+out:
+	return ret;
+}
+
+static inline void gr_free_thread_stack(struct task_struct *tsk)
+{
+	unmap_process_stacks(tsk);
+}
+#else
+static inline unsigned long *gr_alloc_thread_stack_node(struct task_struct *tsk,
+						  int node, void **lowmem_stack)
+{
+	return alloc_thread_stack_node(tsk, node);
+}
+static inline void gr_free_thread_stack(struct task_struct *tsk)
+{
+	free_thread_stack(tsk);
+}
+#endif
+
+const void *gr_convert_stack_address_to_lowmem(const void *buf)
+{
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	if (object_starts_on_stack(buf))
+		return buf - current->stack + current->lowmem_stack;
+	else if (object_starts_on_irq_stack(buf))
+		return buf - (const void *)__this_cpu_read(irq_stack_ptr) + (const void *)__this_cpu_read(irq_stack_ptr_lowmem);
+#endif
+	return buf;
+}
+EXPORT_SYMBOL_GPL(gr_convert_stack_address_to_lowmem);
+
 /* SLAB cache for signal_struct structures (tsk->signal) */
 static struct kmem_cache *signal_cachep;
 
@@ -279,7 +334,6 @@ static struct kmem_cache *mm_cachep;
 
 static void account_kernel_stack(struct task_struct *tsk, int account)
 {
-	void *stack = task_stack_page(tsk);
 	struct vm_struct *vm = task_stack_vm_area(tsk);
 
 	BUILD_BUG_ON(IS_ENABLED(CONFIG_VMAP_STACK) && PAGE_SIZE % 1024 != 0);
@@ -303,8 +357,12 @@ static void account_kernel_stack(struct task_struct *tsk, int account)
 		 * All stack pages are in the same zone and belong to the
 		 * same memcg.
 		 */
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+		struct page *first_page = virt_to_page(tsk->lowmem_stack);
+#else
+		void *stack = task_stack_page(tsk);
 		struct page *first_page = virt_to_page(stack);
-
+#endif
 		mod_zone_page_state(page_zone(first_page), NR_KERNEL_STACK_KB,
 				    THREAD_SIZE / 1024 * account);
 
@@ -320,7 +378,7 @@ static void release_task_stack(struct task_struct *tsk)
 
 	account_kernel_stack(tsk, -1);
 	arch_release_thread_stack(tsk->stack);
-	free_thread_stack(tsk);
+	gr_free_thread_stack(tsk);
 	tsk->stack = NULL;
 #ifdef CONFIG_VMAP_STACK
 	tsk->stack_vm_area = NULL;
@@ -478,6 +536,7 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 	struct task_struct *tsk;
 	unsigned long *stack;
 	struct vm_struct *stack_vm_area;
+	void *lowmem_stack;
 	int err;
 
 	if (node == NUMA_NO_NODE)
@@ -486,7 +545,7 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 	if (!tsk)
 		return NULL;
 
-	stack = alloc_thread_stack_node(tsk, node);
+	stack = gr_alloc_thread_stack_node(tsk, node, &lowmem_stack);
 	if (!stack)
 		goto free_tsk;
 
@@ -500,6 +559,9 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 	 * functions again.
 	 */
 	tsk->stack = stack;
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	tsk->lowmem_stack = lowmem_stack;
+#endif
 #ifdef CONFIG_VMAP_STACK
 	tsk->stack_vm_area = stack_vm_area;
 #endif
@@ -548,7 +610,7 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 	return tsk;
 
 free_stack:
-	free_thread_stack(tsk);
+	gr_free_thread_stack(tsk);
 free_tsk:
 	free_task_struct(tsk);
 	return NULL;
@@ -1066,8 +1128,8 @@ struct mm_struct *mm_access(struct task_struct *task, unsigned int mode)
 		return ERR_PTR(err);
 
 	mm = get_task_mm(task);
-	if (mm && mm != current->mm &&
-			!ptrace_may_access(task, mode)) {
+	if (mm && ((mm != current->mm && !ptrace_may_access(task, mode)) ||
+		  ((mode & PTRACE_MODE_ATTACH) && (gr_handle_proc_ptrace(task) || gr_acl_handle_procpidmem(task))))) {
 		mmput(mm);
 		mm = ERR_PTR(-EACCES);
 	}
@@ -1273,6 +1335,13 @@ static int copy_fs(unsigned long clone_flags, struct task_struct *tsk)
 	tsk->fs = copy_fs_struct(fs);
 	if (!tsk->fs)
 		return -ENOMEM;
+	/* Carry through gr_chroot_dentry and is_chrooted instead
+	   of recomputing it here.  Already copied when the task struct
+	   is duplicated.  This allows pivot_root to not be treated as
+	   a chroot
+	*/
+	//gr_set_chroot_entries(tsk, &tsk->fs->root);
+
 	return 0;
 }
 
@@ -1578,6 +1647,9 @@ static __latent_entropy struct task_struct *copy_process(
 	DEBUG_LOCKS_WARN_ON(!p->softirqs_enabled);
 #endif
 	retval = -EAGAIN;
+
+	gr_learn_resource(p, RLIMIT_NPROC, atomic_read(&p->real_cred->user->processes), 0);
+
 	if (atomic_read(&p->real_cred->user->processes) >=
 			task_rlimit(p, RLIMIT_NPROC)) {
 		if (p->real_cred->user != INIT_USER &&
@@ -1836,6 +1908,16 @@ static __latent_entropy struct task_struct *copy_process(
 		goto bad_fork_cancel_cgroup;
 	}
 
+	/* synchronizes with gr_set_acls()
+	   we need to call this past the point of no return for fork()
+	*/
+	gr_copy_label(p);
+
+#ifdef CONFIG_GRKERNSEC_SETXID
+	if (p->delayed_cred)
+		get_cred(p->delayed_cred);
+#endif
+
 	if (likely(p->pid)) {
 		ptrace_init_task(p, (clone_flags & CLONE_PTRACE) || trace);
 
@@ -1929,6 +2011,8 @@ static __latent_entropy struct task_struct *copy_process(
 	put_task_stack(p);
 	free_task(p);
 fork_out:
+	gr_log_forkfail(retval);
+
 	return ERR_PTR(retval);
 }
 
@@ -2009,6 +2093,8 @@ long _do_fork(unsigned long clone_flags,
 		if (clone_flags & CLONE_PARENT_SETTID)
 			put_user(nr, parent_tidptr);
 
+		gr_handle_brute_check();
+
 		if (clone_flags & CLONE_VFORK) {
 			p->vfork_done = &vfork;
 			init_completion(&vfork);
@@ -2307,6 +2393,7 @@ SYSCALL_DEFINE1(unshare, unsigned long, unshare_flags)
 			fs = current->fs;
 			spin_lock(&fs->lock);
 			current->fs = new_fs;
+			gr_set_chroot_entries(current, &current->fs->root);
 			if (atomic_dec_return(&fs->users))
 				new_fs = NULL;
 			else
diff --git a/kernel/futex.c b/kernel/futex.c
index 3bf7594297b1..2f72a221d842 100644
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@ -210,7 +210,7 @@ struct futex_pi_state {
 	atomic_t refcount;
 
 	union futex_key key;
-};
+} __randomize_layout;
 
 /**
  * struct futex_q - The hashed futex queue entry, one per waiting task
@@ -244,7 +244,7 @@ struct futex_q {
 	struct rt_mutex_waiter *rt_waiter;
 	union futex_key *requeue_pi_key;
 	u32 bitset;
-};
+} __randomize_layout;
 
 static const struct futex_q futex_q_init = {
 	/* list gets initialized in queue_me()*/
diff --git a/kernel/kallsyms.c b/kernel/kallsyms.c
index 7a90ae3724ef..316983eb622a 100644
--- a/kernel/kallsyms.c
+++ b/kernel/kallsyms.c
@@ -11,6 +11,9 @@
  *      Changed the compression method from stem compression to "table lookup"
  *      compression (see scripts/kallsyms.c for a more complete description)
  */
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+#define __INCLUDED_BY_HIDESYM 1
+#endif
 #include <linux/kallsyms.h>
 #include <linux/module.h>
 #include <linux/init.h>
@@ -589,6 +592,11 @@ static int s_show(struct seq_file *m, void *p)
 {
 	struct kallsym_iter *iter = m->private;
 
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	if (!uid_eq(current_uid(), GLOBAL_ROOT_UID))
+		return 0;
+#endif
+
 	/* Some debugging symbols have no name.  Ignore them. */
 	if (!iter->name[0])
 		return 0;
@@ -602,6 +610,7 @@ static int s_show(struct seq_file *m, void *p)
 		 */
 		type = iter->exported ? toupper(iter->type) :
 					tolower(iter->type);
+
 		seq_printf(m, "%pK %c %s\t[%s]\n", (void *)iter->value,
 			   type, iter->name, iter->module_name);
 	} else
diff --git a/kernel/kcmp.c b/kernel/kcmp.c
index 3a47fa998fe0..bcb17e3f080c 100644
--- a/kernel/kcmp.c
+++ b/kernel/kcmp.c
@@ -100,6 +100,10 @@ SYSCALL_DEFINE5(kcmp, pid_t, pid1, pid_t, pid2, int, type,
 	struct task_struct *task1, *task2;
 	int ret;
 
+#ifdef CONFIG_GRKERNSEC
+	return -ENOSYS;
+#endif
+
 	rcu_read_lock();
 
 	/*
diff --git a/kernel/kexec_core.c b/kernel/kexec_core.c
index 561675589511..0affaae51c0d 100644
--- a/kernel/kexec_core.c
+++ b/kernel/kexec_core.c
@@ -871,7 +871,7 @@ int kimage_load_segment(struct kimage *image,
 
 struct kimage *kexec_image;
 struct kimage *kexec_crash_image;
-int kexec_load_disabled;
+int kexec_load_disabled __read_only;
 
 /*
  * No panic_cpu check version of crash_kexec().  This function is called
diff --git a/kernel/kmod.c b/kernel/kmod.c
index cb0a2ef46db6..2d2899cf738a 100644
--- a/kernel/kmod.c
+++ b/kernel/kmod.c
@@ -66,7 +66,7 @@ static void free_modprobe_argv(struct subprocess_info *info)
 	kfree(info->argv);
 }
 
-static int call_modprobe(char *module_name, int wait)
+static int call_modprobe(char *module_name, char *module_param, int wait)
 {
 	struct subprocess_info *info;
 	static char *envp[] = {
@@ -76,7 +76,7 @@ static int call_modprobe(char *module_name, int wait)
 		NULL
 	};
 
-	char **argv = kmalloc(sizeof(char *[5]), GFP_KERNEL);
+	char **argv = kmalloc(sizeof(char *[6]), GFP_KERNEL);
 	if (!argv)
 		goto out;
 
@@ -88,7 +88,8 @@ static int call_modprobe(char *module_name, int wait)
 	argv[1] = "-q";
 	argv[2] = "--";
 	argv[3] = module_name;	/* check free_modprobe_argv() */
-	argv[4] = NULL;
+	argv[4] = module_param;
+	argv[5] = NULL;
 
 	info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,
 					 NULL, free_modprobe_argv, NULL);
@@ -121,9 +122,8 @@ static int call_modprobe(char *module_name, int wait)
  * If module auto-loading support is disabled then this function
  * becomes a no-operation.
  */
-int __request_module(bool wait, const char *fmt, ...)
+static int ____request_module(bool wait, char *module_param, const char *fmt, va_list ap)
 {
-	va_list args;
 	char module_name[MODULE_NAME_LEN];
 	unsigned int max_modprobes;
 	int ret;
@@ -142,9 +142,7 @@ int __request_module(bool wait, const char *fmt, ...)
 	if (!modprobe_path[0])
 		return 0;
 
-	va_start(args, fmt);
-	ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);
-	va_end(args);
+	ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, ap);
 	if (ret >= MODULE_NAME_LEN)
 		return -ENAMETOOLONG;
 
@@ -152,6 +150,20 @@ int __request_module(bool wait, const char *fmt, ...)
 	if (ret)
 		return ret;
 
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+	if (uid_eq(current_uid(), GLOBAL_ROOT_UID)) {
+		/* hack to workaround consolekit/udisks stupidity */
+		read_lock(&tasklist_lock);
+		if (!strcmp(current->comm, "mount") &&
+		    current->real_parent && !strncmp(current->real_parent->comm, "udisk", 5)) {
+			read_unlock(&tasklist_lock);
+			printk(KERN_ALERT "grsec: denied attempt to auto-load fs module %.64s by udisks\n", module_name);
+			return -EPERM;
+		}
+		read_unlock(&tasklist_lock);
+	}
+#endif
+
 	/* If modprobe needs a service that is in a module, we get a recursive
 	 * loop.  Limit the number of running kmod threads to max_threads/2 or
 	 * MAX_KMOD_CONCURRENT, whichever is the smaller.  A cleaner method
@@ -180,16 +192,61 @@ int __request_module(bool wait, const char *fmt, ...)
 
 	trace_module_request(module_name, wait, _RET_IP_);
 
-	ret = call_modprobe(module_name, wait ? UMH_WAIT_PROC : UMH_WAIT_EXEC);
+	ret = call_modprobe(module_name, module_param, wait ? UMH_WAIT_PROC : UMH_WAIT_EXEC);
 
 	atomic_dec(&kmod_concurrent);
 	return ret;
 }
+
+int ___request_module(bool wait, char *module_param, const char *fmt, ...)
+{
+	va_list args;
+	int ret;
+
+	va_start(args, fmt);
+	ret = ____request_module(wait, module_param, fmt, args);
+	va_end(args);
+
+	return ret;
+}
+
+int __request_module(bool wait, const char *fmt, ...)
+{
+	va_list args;
+	int ret;
+
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+	if (!uid_eq(current_uid(), GLOBAL_ROOT_UID)) {
+		char module_param[MODULE_NAME_LEN];
+
+		memset(module_param, 0, sizeof(module_param));
+
+		snprintf(module_param, sizeof(module_param) - 1, "grsec_modharden_normal%u_", GR_GLOBAL_UID(current_uid()));
+
+		va_start(args, fmt);
+		ret = ____request_module(wait, module_param, fmt, args);
+		va_end(args);
+
+		return ret;
+	}
+#endif
+
+	va_start(args, fmt);
+	ret = ____request_module(wait, NULL, fmt, args);
+	va_end(args);
+
+	return ret;
+}
+
 EXPORT_SYMBOL(__request_module);
 #endif /* CONFIG_MODULES */
 
 static void call_usermodehelper_freeinfo(struct subprocess_info *info)
 {
+#ifdef CONFIG_GRKERNSEC
+	kfree(info->path);
+	info->path = info->origpath;
+#endif
 	if (info->cleanup)
 		(*info->cleanup)(info);
 	kfree(info);
@@ -228,6 +285,22 @@ static int call_usermodehelper_exec_async(void *data)
 	 */
 	set_user_nice(current, 0);
 
+#ifdef CONFIG_GRKERNSEC
+	/* this is race-free as far as userland is concerned as we copied
+	   out the path to be used prior to this point and are now operating
+	   on that copy
+	*/
+	if ((strncmp(sub_info->path, "/sbin/", 6) && strncmp(sub_info->path, "/usr/lib/", 9) &&
+	     strncmp(sub_info->path, "/lib/", 5) && strncmp(sub_info->path, "/lib64/", 7) &&
+	     strncmp(sub_info->path, "/usr/libexec/", 13) && strncmp(sub_info->path, "/usr/bin/", 9) &&
+	     strncmp(sub_info->path, "/usr/sbin/", 10) && strcmp(sub_info->path, "/bin/false") && 
+	     strcmp(sub_info->path, "/usr/share/apport/apport")) || strstr(sub_info->path, "..")) {
+		printk(KERN_ALERT "grsec: denied exec of usermode helper binary %.950s located outside of permitted system paths\n", sub_info->path);
+		retval = -EPERM;
+		goto out;
+	}
+#endif
+
 	retval = -ENOMEM;
 	new = prepare_kernel_cred(current);
 	if (!new)
@@ -528,7 +601,12 @@ struct subprocess_info *call_usermodehelper_setup(char *path, char **argv,
 		goto out;
 
 	INIT_WORK(&sub_info->work, call_usermodehelper_exec_work);
+#ifdef CONFIG_GRKERNSEC
+	sub_info->origpath = path;
+	sub_info->path = kstrdup(path, gfp_mask);
+#else
 	sub_info->path = path;
+#endif
 	sub_info->argv = argv;
 	sub_info->envp = envp;
 
diff --git a/kernel/kprobes.c b/kernel/kprobes.c
index 1721314eb43f..9c0f54d58675 100644
--- a/kernel/kprobes.c
+++ b/kernel/kprobes.c
@@ -31,6 +31,9 @@
  *		<jkenisto@us.ibm.com> and Prasanna S Panchamukhi
  *		<prasanna@in.ibm.com> added function-return probes.
  */
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+#define __INCLUDED_BY_HIDESYM 1
+#endif
 #include <linux/kprobes.h>
 #include <linux/hash.h>
 #include <linux/init.h>
@@ -2198,11 +2201,11 @@ static void report_probe(struct seq_file *pi, struct kprobe *p,
 		kprobe_type = "k";
 
 	if (sym)
-		seq_printf(pi, "%p  %s  %s+0x%x  %s ",
+		seq_printf(pi, "%pK  %s  %s+0x%x  %s ",
 			p->addr, kprobe_type, sym, offset,
 			(modname ? modname : " "));
 	else
-		seq_printf(pi, "%p  %s  %p ",
+		seq_printf(pi, "%pK  %s  %pK ",
 			p->addr, kprobe_type, p->addr);
 
 	if (!pp)
@@ -2291,7 +2294,7 @@ static int kprobe_blacklist_seq_show(struct seq_file *m, void *v)
 	struct kprobe_blacklist_entry *ent =
 		list_entry(v, struct kprobe_blacklist_entry, list);
 
-	seq_printf(m, "0x%p-0x%p\t%ps\n", (void *)ent->start_addr,
+	seq_printf(m, "0x%pK-0x%pK\t%ps\n", (void *)ent->start_addr,
 		   (void *)ent->end_addr, (void *)ent->start_addr);
 	return 0;
 }
diff --git a/kernel/ksysfs.c b/kernel/ksysfs.c
index 16e831c21808..a35180642fdf 100644
--- a/kernel/ksysfs.c
+++ b/kernel/ksysfs.c
@@ -50,6 +50,8 @@ static ssize_t uevent_helper_store(struct kobject *kobj,
 {
 	if (count+1 > UEVENT_HELPER_PATH_LEN)
 		return -ENOENT;
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
 	memcpy(uevent_helper, buf, count);
 	uevent_helper[count] = '\0';
 	if (count && uevent_helper[count-1] == '\n')
diff --git a/kernel/locking/lockdep_proc.c b/kernel/locking/lockdep_proc.c
index a0f61effad25..b6aef3cb648d 100644
--- a/kernel/locking/lockdep_proc.c
+++ b/kernel/locking/lockdep_proc.c
@@ -65,7 +65,7 @@ static int l_show(struct seq_file *m, void *v)
 		return 0;
 	}
 
-	seq_printf(m, "%p", class->key);
+	seq_printf(m, "%pK", class->key);
 #ifdef CONFIG_DEBUG_LOCKDEP
 	seq_printf(m, " OPS:%8ld", class->ops);
 #endif
@@ -83,7 +83,7 @@ static int l_show(struct seq_file *m, void *v)
 
 	list_for_each_entry(entry, &class->locks_after, entry) {
 		if (entry->distance == 1) {
-			seq_printf(m, " -> [%p] ", entry->class->key);
+			seq_printf(m, " -> [%pK] ", entry->class->key);
 			print_name(m, entry->class);
 			seq_puts(m, "\n");
 		}
@@ -154,7 +154,7 @@ static int lc_show(struct seq_file *m, void *v)
 		if (!class->key)
 			continue;
 
-		seq_printf(m, "[%p] ", class->key);
+		seq_printf(m, "[%pK] ", class->key);
 		print_name(m, class);
 		seq_puts(m, "\n");
 	}
@@ -510,7 +510,7 @@ static void seq_stats(struct seq_file *m, struct lock_stat_data *data)
 		if (!i)
 			seq_line(m, '-', 40-namelen, namelen);
 
-		snprintf(ip, sizeof(ip), "[<%p>]",
+		snprintf(ip, sizeof(ip), "[<%pK>]",
 				(void *)class->contention_point[i]);
 		seq_printf(m, "%40s %14lu %29s %pS\n",
 			   name, stats->contention_point[i],
@@ -525,7 +525,7 @@ static void seq_stats(struct seq_file *m, struct lock_stat_data *data)
 		if (!i)
 			seq_line(m, '-', 40-namelen, namelen);
 
-		snprintf(ip, sizeof(ip), "[<%p>]",
+		snprintf(ip, sizeof(ip), "[<%pK>]",
 				(void *)class->contending_point[i]);
 		seq_printf(m, "%40s %14lu %29s %pS\n",
 			   name, stats->contending_point[i],
diff --git a/kernel/module.c b/kernel/module.c
index c64dee1d2428..f9d983bcb62e 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -61,6 +61,7 @@
 #include <linux/pfn.h>
 #include <linux/bsearch.h>
 #include <linux/dynamic_debug.h>
+#include <linux/grsecurity.h>
 #include <uapi/linux/module.h>
 #include "module-internal.h"
 
@@ -320,7 +321,7 @@ module_param(sig_enforce, bool_enable_only, 0644);
 #endif /* !CONFIG_MODULE_SIG_FORCE */
 
 /* Block module loading/unloading? */
-int modules_disabled = 0;
+int modules_disabled __read_only = 0;
 core_param(nomodule, modules_disabled, bint, 0);
 
 /* Waiting for a module to finish initializing? */
@@ -1345,13 +1346,29 @@ static int check_version(Elf_Shdr *sechdrs,
 		goto bad_version;
 	}
 
-	/* Broken toolchain. Warn once, then let it go.. */
+#ifdef CONFIG_GRKERNSEC_RANDSTRUCT
+	/*
+	 * avoid potentially printing jibberish on attempted load
+	 * of a module randomized with a different seed
+	 */
+	pr_warn_once("no symbol version for %s\n", symname);
+#else
 	pr_warn_once("%s: no symbol version for %s\n", mod->name, symname);
+#endif
 	return 1;
 
 bad_version:
+#ifdef CONFIG_GRKERNSEC_RANDSTRUCT
+	/*
+	 * avoid potentially printing jibberish on attempted load
+	 * of a module randomized with a different seed
+	 */
+	pr_warn("attempted module disagrees about version of symbol %s\n",
+	       symname);
+#else
 	pr_warn("%s: disagrees about version of symbol %s\n",
 	       mod->name, symname);
+#endif
 	return 0;
 }
 
@@ -1479,7 +1496,7 @@ resolve_symbol_wait(struct module *mod,
  */
 #ifdef CONFIG_SYSFS
 
-#ifdef CONFIG_KALLSYMS
+#if defined(CONFIG_KALLSYMS) && !defined(CONFIG_GRKERNSEC_HIDESYM)
 static inline bool sect_empty(const Elf_Shdr *sect)
 {
 	return !(sect->sh_flags & SHF_ALLOC) || sect->sh_size == 0;
@@ -2260,9 +2277,31 @@ static int simplify_symbols(struct module *mod, const struct load_info *info)
 	int ret = 0;
 	const struct kernel_symbol *ksym;
 
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+	int is_fs_load = 0;
+	int register_filesystem_found = 0;
+	char *p;
+
+	p = strstr(mod->args, "grsec_modharden_fs");
+	if (p) {
+		char *endptr = p + sizeof("grsec_modharden_fs") - 1;
+		/* copy \0 as well */
+		memmove(p, endptr, strlen(mod->args) - (unsigned int)(endptr - mod->args) + 1);
+		is_fs_load = 1;
+	}
+#endif
+
 	for (i = 1; i < symsec->sh_size / sizeof(Elf_Sym); i++) {
 		const char *name = info->strtab + sym[i].st_name;
 
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+		/* it's a real shame this will never get ripped and copied
+		   upstream! ;(
+		*/
+		if (is_fs_load && !strcmp(name, "register_filesystem"))
+			register_filesystem_found = 1;
+#endif
+
 		switch (sym[i].st_shndx) {
 		case SHN_COMMON:
 			/* Ignore common symbols */
@@ -2319,6 +2358,13 @@ static int simplify_symbols(struct module *mod, const struct load_info *info)
 		}
 	}
 
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+	if (is_fs_load && !register_filesystem_found) {
+		printk(KERN_ALERT "grsec: Denied attempt to load non-fs module %.64s through mount\n", mod->name);
+		ret = -EPERM;
+	}
+#endif
+
 	return ret;
 }
 
@@ -2962,7 +3008,15 @@ static struct module *setup_load_info(struct load_info *info, int flags)
 	mod = (void *)info->sechdrs[info->index.mod].sh_addr;
 
 	if (info->index.sym == 0) {
+#ifdef CONFIG_GRKERNSEC_RANDSTRUCT
+		/*
+		 * avoid potentially printing jibberish on attempted load
+		 * of a module randomized with a different seed
+		 */
+		pr_warn("module has no symbols (stripped?)\n");
+#else
 		pr_warn("%s: module has no symbols (stripped?)\n", mod->name);
+#endif
 		return ERR_PTR(-ENOEXEC);
 	}
 
@@ -3743,9 +3797,38 @@ static int load_module(struct load_info *info, const char __user *uargs,
 	if (err)
 		goto free_unload;
 
+	/* Now copy in args */
+	mod->args = strndup_user(uargs, ~0UL >> 1);
+	if (IS_ERR(mod->args)) {
+		err = PTR_ERR(mod->args);
+		goto free_unload;
+	}
+
 	/* Set up MODINFO_ATTR fields */
 	setup_modinfo(mod, info);
 
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+	{
+		char *p, *p2;
+
+		if (strstr(mod->args, "grsec_modharden_netdev")) {
+			printk(KERN_ALERT "grsec: denied auto-loading kernel module for a network device with CAP_SYS_MODULE (deprecated).  Use CAP_NET_ADMIN and alias netdev-%.64s instead.", mod->name);
+			err = -EPERM;
+			goto free_modinfo;
+		} else if ((p = strstr(mod->args, "grsec_modharden_normal"))) {
+			p += sizeof("grsec_modharden_normal") - 1;
+			p2 = strstr(p, "_");
+			if (p2) {
+				*p2 = '\0';
+				printk(KERN_ALERT "grsec: denied kernel module auto-load of %.64s by uid %.9s\n", mod->name, p);
+				*p2 = '_';
+			}
+			err = -EPERM;
+			goto free_modinfo;
+		}
+	}
+#endif
+
 	/* Fix up syms, so that st_value is a pointer to location. */
 	err = simplify_symbols(mod, info);
 	if (err < 0)
@@ -3761,13 +3844,6 @@ static int load_module(struct load_info *info, const char __user *uargs,
 
 	flush_module_icache(mod);
 
-	/* Now copy in args */
-	mod->args = strndup_user(uargs, ~0UL >> 1);
-	if (IS_ERR(mod->args)) {
-		err = PTR_ERR(mod->args);
-		goto free_arch_cleanup;
-	}
-
 	dynamic_debug_setup(info->debug, info->num_debug);
 
 	/* Ftrace init must be called in the MODULE_STATE_UNFORMED state */
@@ -3832,11 +3908,10 @@ static int load_module(struct load_info *info, const char __user *uargs,
  ddebug_cleanup:
 	dynamic_debug_remove(info->debug);
 	synchronize_sched();
-	kfree(mod->args);
- free_arch_cleanup:
 	module_arch_cleanup(mod);
  free_modinfo:
 	free_modinfo(mod);
+	kfree(mod->args);
  free_unload:
 	module_unload_free(mod);
  unlink_mod:
@@ -4252,7 +4327,17 @@ static const struct file_operations proc_modules_operations = {
 
 static int __init proc_modules_init(void)
 {
+#ifndef CONFIG_GRKERNSEC_HIDESYM
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+	proc_create("modules", S_IRUSR, NULL, &proc_modules_operations);
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	proc_create("modules", S_IRUSR | S_IRGRP, NULL, &proc_modules_operations);
+#else
 	proc_create("modules", 0, NULL, &proc_modules_operations);
+#endif
+#else
+	proc_create("modules", S_IRUSR, NULL, &proc_modules_operations);
+#endif
 	return 0;
 }
 module_init(proc_modules_init);
diff --git a/kernel/panic.c b/kernel/panic.c
index aca749790ad8..fb9cd2af7717 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -521,11 +521,11 @@ void __warn(const char *file, int line, void *caller, unsigned taint,
 	pr_warn("------------[ cut here ]------------\n");
 
 	if (file)
-		pr_warn("WARNING: CPU: %d PID: %d at %s:%d %pS\n",
+		pr_warn("WARNING: CPU: %d PID: %d at %s:%d %pA\n",
 			raw_smp_processor_id(), current->pid, file, line,
 			caller);
 	else
-		pr_warn("WARNING: CPU: %d PID: %d at %pS\n",
+		pr_warn("WARNING: CPU: %d PID: %d at %pA\n",
 			raw_smp_processor_id(), current->pid, caller);
 
 	if (args)
@@ -596,7 +596,7 @@ EXPORT_SYMBOL(warn_slowpath_null);
 __visible void __stack_chk_fail(void)
 {
 	dump_stack();
-	panic("stack-protector: Kernel stack is corrupted in: %pS\n",
+	panic("stack-protector: Kernel stack is corrupted in: %pA\n",
 		__builtin_return_address(0));
 }
 EXPORT_SYMBOL(__stack_chk_fail);
diff --git a/kernel/pid.c b/kernel/pid.c
index 652e9dbb7f7b..e950a59b2b2c 100644
--- a/kernel/pid.c
+++ b/kernel/pid.c
@@ -33,6 +33,7 @@
 #include <linux/rculist.h>
 #include <linux/bootmem.h>
 #include <linux/hash.h>
+#include <linux/security.h>
 #include <linux/pid_namespace.h>
 #include <linux/init_task.h>
 #include <linux/syscalls.h>
@@ -451,9 +452,17 @@ EXPORT_SYMBOL(pid_task);
  */
 struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns)
 {
+	struct task_struct *task;
+
 	RCU_LOCKDEP_WARN(!rcu_read_lock_held(),
 			 "find_task_by_pid_ns() needs rcu_read_lock() protection");
-	return pid_task(find_pid_ns(nr, ns), PIDTYPE_PID);
+
+	task = pid_task(find_pid_ns(nr, ns), PIDTYPE_PID);
+
+	if (gr_pid_is_chrooted(task))
+		return NULL;
+
+	return task;
 }
 
 struct task_struct *find_task_by_vpid(pid_t vnr)
@@ -461,6 +470,13 @@ struct task_struct *find_task_by_vpid(pid_t vnr)
 	return find_task_by_pid_ns(vnr, task_active_pid_ns(current));
 }
 
+struct task_struct *find_task_by_vpid_unrestricted(pid_t vnr)
+{
+	RCU_LOCKDEP_WARN(!rcu_read_lock_held(),
+			 "find_task_by_pid_ns() needs rcu_read_lock() protection");
+	return pid_task(find_pid_ns(vnr, task_active_pid_ns(current)), PIDTYPE_PID);
+}
+
 struct pid *get_task_pid(struct task_struct *task, enum pid_type type)
 {
 	struct pid *pid;
diff --git a/kernel/power/Kconfig b/kernel/power/Kconfig
index e8517b63eb37..00d81dcdff92 100644
--- a/kernel/power/Kconfig
+++ b/kernel/power/Kconfig
@@ -34,6 +34,7 @@ config HIBERNATE_CALLBACKS
 config HIBERNATION
 	bool "Hibernation (aka 'suspend to disk')"
 	depends on SWAP && ARCH_HIBERNATION_POSSIBLE
+	depends on !GRKERNSEC_KMEM
 	select HIBERNATE_CALLBACKS
 	select LZO_COMPRESS
 	select LZO_DECOMPRESS
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 9c5b231684d0..aaa4a5cfc2c5 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -588,7 +588,7 @@ static int log_store(int facility, int level,
 	return msg->text_len;
 }
 
-int dmesg_restrict = IS_ENABLED(CONFIG_SECURITY_DMESG_RESTRICT);
+int dmesg_restrict __read_only = IS_ENABLED(CONFIG_SECURITY_DMESG_RESTRICT);
 
 static int syslog_action_restricted(int type)
 {
@@ -611,6 +611,11 @@ int check_syslog_permissions(int type, int source)
 	if (source == SYSLOG_FROM_PROC && type != SYSLOG_ACTION_OPEN)
 		goto ok;
 
+#ifdef CONFIG_GRKERNSEC_DMESG
+	if (grsec_enable_dmesg && !capable(CAP_SYSLOG) && !capable_nolog(CAP_SYS_ADMIN))
+		return -EPERM;
+#endif
+
 	if (syslog_action_restricted(type)) {
 		if (capable(CAP_SYSLOG))
 			goto ok;
diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index 517e3f12c6a2..a072a59bc388 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -250,7 +250,35 @@ static int ptrace_check_attach(struct task_struct *child, bool ignore_state)
 	return ret;
 }
 
-static int ptrace_has_cap(struct user_namespace *ns, unsigned int mode)
+static bool ptrace_has_cap(const struct cred *tcred, unsigned int mode)
+{
+	struct user_namespace *tns = tcred->user_ns;
+	struct user_namespace *curns = current_cred()->user_ns;
+
+	/* When a root-owned process enters a user namespace created by a
+	 * malicious user, the user shouldn't be able to execute code under
+	 * uid 0 by attaching to the root-owned process via ptrace.
+	 * Therefore, similar to the capable_wrt_inode_uidgid() check,
+	 * verify that all the uids and gids of the target process are
+	 * mapped into the current namespace.
+	 * No fsuid/fsgid check because __ptrace_may_access doesn't do it
+	 * either.
+	 */
+	if (!kuid_has_mapping(curns, tcred->euid) ||
+			!kuid_has_mapping(curns, tcred->suid) ||
+			!kuid_has_mapping(curns, tcred->uid)  ||
+			!kgid_has_mapping(curns, tcred->egid) ||
+			!kgid_has_mapping(curns, tcred->sgid) ||
+			!kgid_has_mapping(curns, tcred->gid))
+		return false;
+
+	if (mode & PTRACE_MODE_NOAUDIT)
+		return has_ns_capability_noaudit(current, tns, CAP_SYS_PTRACE);
+	else
+		return has_ns_capability(current, tns, CAP_SYS_PTRACE);
+}
+
+static bool ptrace_userns_has_cap(struct user_namespace *ns, unsigned int mode)
 {
 	if (mode & PTRACE_MODE_NOAUDIT)
 		return has_ns_capability_noaudit(current, ns, CAP_SYS_PTRACE);
@@ -265,6 +293,7 @@ static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
 	struct mm_struct *mm;
 	kuid_t caller_uid;
 	kgid_t caller_gid;
+	int dumpable = 0;
 
 	if (!(mode & PTRACE_MODE_FSCREDS) == !(mode & PTRACE_MODE_REALCREDS)) {
 		WARN(1, "denying ptrace access check without PTRACE_MODE_*CREDS\n");
@@ -307,16 +336,27 @@ static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
 	    gid_eq(caller_gid, tcred->sgid) &&
 	    gid_eq(caller_gid, tcred->gid))
 		goto ok;
-	if (ptrace_has_cap(tcred->user_ns, mode))
+	if (ptrace_has_cap(tcred, mode))
 		goto ok;
 	rcu_read_unlock();
 	return -EPERM;
 ok:
 	rcu_read_unlock();
+	smp_rmb();
 	mm = task->mm;
+	if (mm)
+		dumpable = get_dumpable(mm);
+	rcu_read_lock();
+	if (dumpable != SUID_DUMP_USER &&
+	    !ptrace_has_cap(__task_cred(task), mode)) {
+		rcu_read_unlock();
+		return -EPERM;
+	}
+	rcu_read_unlock();
+
 	if (mm &&
-	    ((get_dumpable(mm) != SUID_DUMP_USER) &&
-	     !ptrace_has_cap(mm->user_ns, mode)))
+	    (dumpable != SUID_DUMP_USER) &&
+	     !ptrace_userns_has_cap(mm->user_ns, mode))
 	    return -EPERM;
 
 	return security_ptrace_access_check(task, mode);
@@ -1130,14 +1170,21 @@ SYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr,
 		goto out;
 	}
 
+	if (gr_handle_ptrace(child, request)) {
+		ret = -EPERM;
+		goto out_put_task_struct;
+	}
+
 	if (request == PTRACE_ATTACH || request == PTRACE_SEIZE) {
 		ret = ptrace_attach(child, request, addr, data);
 		/*
 		 * Some architectures need to do book-keeping after
 		 * a ptrace attach.
 		 */
-		if (!ret)
+		if (!ret) {
 			arch_ptrace_attach(child);
+			gr_audit_ptrace(child);
+		}
 		goto out_put_task_struct;
 	}
 
@@ -1277,14 +1324,21 @@ COMPAT_SYSCALL_DEFINE4(ptrace, compat_long_t, request, compat_long_t, pid,
 		goto out;
 	}
 
+	if (gr_handle_ptrace(child, request)) {
+		ret = -EPERM;
+		goto out_put_task_struct;
+	}
+
 	if (request == PTRACE_ATTACH || request == PTRACE_SEIZE) {
 		ret = ptrace_attach(child, request, addr, data);
 		/*
 		 * Some architectures need to do book-keeping after
 		 * a ptrace attach.
 		 */
-		if (!ret)
+		if (!ret) {
 			arch_ptrace_attach(child);
+			gr_audit_ptrace(child);
+		}
 		goto out_put_task_struct;
 	}
 
diff --git a/kernel/resource.c b/kernel/resource.c
index 3650775cc435..b8b0a33385e9 100644
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@ -171,8 +171,18 @@ static const struct file_operations proc_iomem_operations = {
 
 static int __init ioresources_init(void)
 {
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+#ifdef CONFIG_GRKERNSEC_PROC_USER
+	proc_create("ioports", S_IRUSR, NULL, &proc_ioports_operations);
+	proc_create("iomem", S_IRUSR, NULL, &proc_iomem_operations);
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+	proc_create("ioports", S_IRUSR | S_IRGRP, NULL, &proc_ioports_operations);
+	proc_create("iomem", S_IRUSR | S_IRGRP, NULL, &proc_iomem_operations);
+#endif
+#else
 	proc_create("ioports", 0, NULL, &proc_ioports_operations);
 	proc_create("iomem", 0, NULL, &proc_iomem_operations);
+#endif
 	return 0;
 }
 __initcall(ioresources_init);
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index bdf3d16aebad..f95f804a834f 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3795,6 +3795,8 @@ int can_nice(const struct task_struct *p, const int nice)
 	/* convert nice value [19,-20] to rlimit style value [1,40] */
 	int nice_rlim = nice_to_rlimit(nice);
 
+	gr_learn_resource(p, RLIMIT_NICE, nice_rlim, 1);
+
 	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
 		capable(CAP_SYS_NICE));
 }
@@ -3821,7 +3823,8 @@ SYSCALL_DEFINE1(nice, int, increment)
 	nice = task_nice(current) + increment;
 
 	nice = clamp_val(nice, MIN_NICE, MAX_NICE);
-	if (increment < 0 && !can_nice(current, nice))
+	if (increment < 0 && (!can_nice(current, nice) ||
+			      gr_handle_chroot_nice()))
 		return -EPERM;
 
 	retval = security_task_setnice(current, nice);
@@ -4131,6 +4134,7 @@ static int __sched_setscheduler(struct task_struct *p,
 			if (policy != p->policy && !rlim_rtprio)
 				return -EPERM;
 
+			gr_learn_resource(p, RLIMIT_RTPRIO, attr->sched_priority, 1);
 			/* can't increase priority */
 			if (attr->sched_priority > p->rt_priority &&
 			    attr->sched_priority > rlim_rtprio)
@@ -7591,6 +7595,30 @@ void __init sched_init(void)
 	for_each_possible_cpu(i) {
 		struct rq *rq;
 
+#if defined(CONFIG_GRKERNSEC_KSTACKOVERFLOW) && defined(CONFIG_X86_64)
+		struct page *newstack_page = alloc_pages_node(cpu_to_node(i), GFP_KERNEL|__GFP_NOTRACK|__GFP_ZERO, IRQ_STACK_ORDER);
+		void *newstack_lowmem = NULL;
+		void *newstack;
+		struct page *pages[IRQ_STACK_SIZE / PAGE_SIZE];
+		unsigned int x;
+
+		if (newstack_page)
+			newstack_lowmem = page_address(newstack_page);
+
+		if (newstack_lowmem == NULL)
+			panic("grsec: Unable to allocate irq stack");
+
+		for (x = 0; x < IRQ_STACK_SIZE / PAGE_SIZE; x++)
+			pages[x] = virt_to_page(newstack_lowmem + (x * PAGE_SIZE));
+
+		newstack = vmap(pages, IRQ_STACK_SIZE / PAGE_SIZE, VM_IOREMAP, PAGE_KERNEL);
+		if (newstack == NULL)
+			panic("grsec: Unable to vmap irq stack");
+		populate_stack(newstack, IRQ_STACK_SIZE);
+		per_cpu(irq_stack_ptr_lowmem, i) = newstack_lowmem + IRQ_STACK_SIZE - 64;
+		per_cpu(irq_stack_ptr, i) = newstack + IRQ_STACK_SIZE - 64;
+#endif
+
 		rq = cpu_rq(i);
 		raw_spin_lock_init(&rq->lock);
 		rq->nr_running = 0;
@@ -7712,7 +7740,7 @@ void __might_sleep(const char *file, int line, int preempt_offset)
 	 */
 	WARN_ONCE(current->state != TASK_RUNNING && current->task_state_change,
 			"do not call blocking ops when !TASK_RUNNING; "
-			"state=%lx set at [<%p>] %pS\n",
+			"state=%lx set at [<%p>] %pA\n",
 			current->state,
 			(void *)current->task_state_change,
 			(void *)current->task_state_change);
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index 9bfa2744d4f0..4e6c67e5859d 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -813,7 +813,11 @@ static int __init init_sched_debug_procfs(void)
 {
 	struct proc_dir_entry *pe;
 
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+	pe = proc_create("sched_debug", 0400, NULL, &sched_debug_fops);
+#else
 	pe = proc_create("sched_debug", 0444, NULL, &sched_debug_fops);
+#endif
 	if (!pe)
 		return -ENOMEM;
 	return 0;
diff --git a/kernel/signal.c b/kernel/signal.c
index 1a0b903029ba..3a995207359b 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -372,6 +372,9 @@ __sigqueue_alloc(int sig, struct task_struct *t, gfp_t flags, int override_rlimi
 	atomic_inc(&user->sigpending);
 	rcu_read_unlock();
 
+	if (!override_rlimit)
+		gr_learn_resource(t, RLIMIT_SIGPENDING, atomic_read(&user->sigpending), 1);
+
 	if (override_rlimit ||
 	    atomic_read(&user->sigpending) <=
 			task_rlimit(t, RLIMIT_SIGPENDING)) {
@@ -743,6 +746,13 @@ static int check_kill_permission(int sig, struct siginfo *info,
 		}
 	}
 
+	/* allow glibc communication via tgkill to other threads in our
+	   thread group */
+	if ((info == SEND_SIG_NOINFO || info->si_code != SI_TKILL ||
+	     sig != (SIGRTMIN+1) || task_tgid_vnr(t) != info->si_pid)
+	    && gr_handle_signal(t, sig))
+		return -EPERM;
+
 	return security_task_kill(t, info, sig, 0);
 }
 
@@ -1126,7 +1136,7 @@ __group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)
 	return send_signal(sig, info, p, 1);
 }
 
-static int
+int
 specific_send_sig_info(int sig, struct siginfo *info, struct task_struct *t)
 {
 	return send_signal(sig, info, t, 0);
@@ -1163,6 +1173,7 @@ force_sig_info(int sig, struct siginfo *info, struct task_struct *t)
 	unsigned long int flags;
 	int ret, blocked, ignored;
 	struct k_sigaction *action;
+	int is_unhandled = 0;
 
 	spin_lock_irqsave(&t->sighand->siglock, flags);
 	action = &t->sighand->action[sig-1];
@@ -1177,9 +1188,18 @@ force_sig_info(int sig, struct siginfo *info, struct task_struct *t)
 	}
 	if (action->sa.sa_handler == SIG_DFL)
 		t->signal->flags &= ~SIGNAL_UNKILLABLE;
+	if (action->sa.sa_handler == SIG_IGN || action->sa.sa_handler == SIG_DFL)
+		is_unhandled = 1;
 	ret = specific_send_sig_info(sig, info, t);
 	spin_unlock_irqrestore(&t->sighand->siglock, flags);
 
+	/* only deal with unhandled signals, java etc trigger SIGSEGV during
+	   normal operation */
+	if (is_unhandled) {
+		gr_log_signal(sig, !is_si_special(info) ? info->si_addr : NULL, t);
+		gr_handle_crash(t, sig);
+	}
+
 	return ret;
 }
 
@@ -1260,8 +1280,11 @@ int group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)
 	ret = check_kill_permission(sig, info, p);
 	rcu_read_unlock();
 
-	if (!ret && sig)
+	if (!ret && sig) {
 		ret = do_send_sig_info(sig, info, p, true);
+		if (!ret)
+			gr_log_signal(sig, !is_si_special(info) ? info->si_addr : NULL, p);
+	}
 
 	return ret;
 }
@@ -2868,7 +2891,15 @@ do_send_specific(pid_t tgid, pid_t pid, int sig, struct siginfo *info)
 	int error = -ESRCH;
 
 	rcu_read_lock();
-	p = find_task_by_vpid(pid);
+#ifdef CONFIG_GRKERNSEC_CHROOT_FINDTASK
+	/* allow glibc communication via tgkill to other threads in our
+	   thread group */
+	if (grsec_enable_chroot_findtask && info->si_code == SI_TKILL &&
+	    sig == (SIGRTMIN+1) && tgid == info->si_pid)	    
+		p = find_task_by_vpid_unrestricted(pid);
+	else
+#endif
+		p = find_task_by_vpid(pid);
 	if (p && (tgid <= 0 || task_tgid_vnr(p) == tgid)) {
 		error = check_kill_permission(sig, info, p);
 		/*
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 6c4f1ef3d9b3..ab73a78b370d 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -284,7 +284,7 @@ asmlinkage __visible void __softirq_entry __do_softirq(void)
 		h->action();
 		trace_softirq_exit(vec_nr);
 		if (unlikely(prev_count != preempt_count())) {
-			pr_err("huh, entered softirq %u %s %pS with preempt_count %08x, exited with %08x?\n",
+			pr_err("huh, entered softirq %u %s %pA with preempt_count %08x, exited with %08x?\n",
 			       vec_nr, softirq_to_name[vec_nr], h->action,
 			       prev_count, preempt_count());
 			preempt_count_set(prev_count);
diff --git a/kernel/sys.c b/kernel/sys.c
index 523659fa7ea6..441bef36ed11 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -160,6 +160,12 @@ static int set_one_prio(struct task_struct *p, int niceval, int error)
 		error = -EACCES;
 		goto out;
 	}
+
+	if (gr_handle_chroot_setpriority(p, niceval)) {
+		error = -EACCES;
+		goto out;
+	}
+
 	no_nice = security_task_setnice(p, niceval);
 	if (no_nice) {
 		error = no_nice;
@@ -366,6 +372,20 @@ SYSCALL_DEFINE2(setregid, gid_t, rgid, gid_t, egid)
 			goto error;
 	}
 
+	if (gr_check_group_change(new->gid, new->egid, INVALID_GID))
+		goto error;
+
+	if (!gid_eq(new->gid, old->gid)) {
+		/* make sure we generate a learn log for what will
+		   end up being a role transition after a full-learning
+		   policy is generated
+		   CAP_SETGID is required to perform a transition
+		   we may not log a CAP_SETGID check above, e.g.
+		   in the case where new rgid = old egid
+		*/
+		gr_learn_cap(current, new, CAP_SETGID, true);
+	}
+
 	if (rgid != (gid_t) -1 ||
 	    (egid != (gid_t) -1 && !gid_eq(kegid, old->gid)))
 		new->sgid = new->egid;
@@ -401,6 +421,10 @@ SYSCALL_DEFINE1(setgid, gid_t, gid)
 	old = current_cred();
 
 	retval = -EPERM;
+
+	if (gr_check_group_change(kgid, kgid, kgid))
+		goto error;
+
 	if (ns_capable(old->user_ns, CAP_SETGID))
 		new->gid = new->egid = new->sgid = new->fsgid = kgid;
 	else if (gid_eq(kgid, old->gid) || gid_eq(kgid, old->sgid))
@@ -418,7 +442,7 @@ SYSCALL_DEFINE1(setgid, gid_t, gid)
 /*
  * change the user struct in a credentials set to match the new UID
  */
-static int set_user(struct cred *new)
+int set_user(struct cred *new)
 {
 	struct user_struct *new_user;
 
@@ -498,7 +522,18 @@ SYSCALL_DEFINE2(setreuid, uid_t, ruid, uid_t, euid)
 			goto error;
 	}
 
+	if (gr_check_user_change(new->uid, new->euid, INVALID_UID))
+		goto error;
+
 	if (!uid_eq(new->uid, old->uid)) {
+		/* make sure we generate a learn log for what will
+		   end up being a role transition after a full-learning
+		   policy is generated
+		   CAP_SETUID is required to perform a transition
+		   we may not log a CAP_SETUID check above, e.g.
+		   in the case where new ruid = old euid
+		*/
+		gr_learn_cap(current, new, CAP_SETUID, true);
 		retval = set_user(new);
 		if (retval < 0)
 			goto error;
@@ -548,6 +583,12 @@ SYSCALL_DEFINE1(setuid, uid_t, uid)
 	old = current_cred();
 
 	retval = -EPERM;
+
+	if (gr_check_crash_uid(kuid))
+		goto error;
+	if (gr_check_user_change(kuid, kuid, kuid))
+		goto error;
+
 	if (ns_capable(old->user_ns, CAP_SETUID)) {
 		new->suid = new->uid = kuid;
 		if (!uid_eq(kuid, old->uid)) {
@@ -617,6 +658,9 @@ SYSCALL_DEFINE3(setresuid, uid_t, ruid, uid_t, euid, uid_t, suid)
 			goto error;
 	}
 
+	if (gr_check_user_change(kruid, keuid, INVALID_UID))
+		goto error;
+
 	if (ruid != (uid_t) -1) {
 		new->uid = kruid;
 		if (!uid_eq(kruid, old->uid)) {
@@ -701,6 +745,9 @@ SYSCALL_DEFINE3(setresgid, gid_t, rgid, gid_t, egid, gid_t, sgid)
 			goto error;
 	}
 
+	if (gr_check_group_change(krgid, kegid, INVALID_GID))
+		goto error;
+
 	if (rgid != (gid_t) -1)
 		new->gid = krgid;
 	if (egid != (gid_t) -1)
@@ -765,12 +812,16 @@ SYSCALL_DEFINE1(setfsuid, uid_t, uid)
 	    uid_eq(kuid, old->suid) || uid_eq(kuid, old->fsuid) ||
 	    ns_capable(old->user_ns, CAP_SETUID)) {
 		if (!uid_eq(kuid, old->fsuid)) {
+			if (gr_check_user_change(INVALID_UID, INVALID_UID, kuid))
+				goto error;
+
 			new->fsuid = kuid;
 			if (security_task_fix_setuid(new, old, LSM_SETID_FS) == 0)
 				goto change_okay;
 		}
 	}
 
+error:
 	abort_creds(new);
 	return old_fsuid;
 
@@ -803,12 +854,16 @@ SYSCALL_DEFINE1(setfsgid, gid_t, gid)
 	if (gid_eq(kgid, old->gid)  || gid_eq(kgid, old->egid)  ||
 	    gid_eq(kgid, old->sgid) || gid_eq(kgid, old->fsgid) ||
 	    ns_capable(old->user_ns, CAP_SETGID)) {
+		if (gr_check_group_change(INVALID_GID, INVALID_GID, kgid))
+			goto error;
+
 		if (!gid_eq(kgid, old->fsgid)) {
 			new->fsgid = kgid;
 			goto change_okay;
 		}
 	}
 
+error:
 	abort_creds(new);
 	return old_fsgid;
 
@@ -1400,6 +1455,13 @@ int do_prlimit(struct task_struct *tsk, unsigned int resource,
 			 */
 			new_rlim->rlim_cur = 1;
 		}
+		/* Handle the case where a fork and setuid occur and then RLIMIT_NPROC
+		   is changed to a lower value.  Since tasks can be created by the same
+		   user in between this limit change and an execve by this task, force
+		   a recheck only for this task by setting PF_NPROC_EXCEEDED
+		*/
+		if (resource == RLIMIT_NPROC && tsk->real_cred->user != INIT_USER)
+			tsk->flags |= PF_NPROC_EXCEEDED;
 	}
 	if (!retval) {
 		if (old_rlim)
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 3f2c24b3df0e..a6aef259f883 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -96,7 +96,6 @@
 #endif
 
 #if defined(CONFIG_SYSCTL)
-
 /* External variables not in a header file. */
 extern int suid_dumpable;
 #ifdef CONFIG_COREDUMP
@@ -112,23 +111,25 @@ extern unsigned int sysctl_nr_open_min, sysctl_nr_open_max;
 #ifndef CONFIG_MMU
 extern int sysctl_nr_trim_pages;
 #endif
+extern int sysctl_modify_ldt;
 
 /* Constants used for minimum and  maximum */
 #ifdef CONFIG_LOCKUP_DETECTOR
-static int sixty = 60;
+static int sixty __read_only = 60;
 #endif
 
-static int __maybe_unused neg_one = -1;
+static int __maybe_unused neg_one __read_only = -1;
 
-static int zero;
-static int __maybe_unused one = 1;
-static int __maybe_unused two = 2;
-static int __maybe_unused four = 4;
-static unsigned long one_ul = 1;
-static int one_hundred = 100;
-static int one_thousand = 1000;
+static int zero __read_only = 0;
+static int __maybe_unused one __read_only = 1;
+static int __maybe_unused two __read_only = 2;
+static int __maybe_unused three __read_only = 3;
+static int __maybe_unused four __read_only = 4;
+static unsigned long one_ul __read_only = 1;
+static int one_hundred __read_only = 100;
+static int one_thousand __read_only = 1000;
 #ifdef CONFIG_PRINTK
-static int ten_thousand = 10000;
+static int ten_thousand __read_only = 10000;
 #endif
 #ifdef CONFIG_PERF_EVENTS
 static int six_hundred_forty_kb = 640 * 1024;
@@ -185,10 +186,8 @@ static int proc_taint(struct ctl_table *table, int write,
 			       void __user *buffer, size_t *lenp, loff_t *ppos);
 #endif
 
-#ifdef CONFIG_PRINTK
-static int proc_dointvec_minmax_sysadmin(struct ctl_table *table, int write,
+static int proc_dointvec_minmax_secure_sysadmin(struct ctl_table *table, int write,
 				void __user *buffer, size_t *lenp, loff_t *ppos);
-#endif
 
 static int proc_dointvec_minmax_coredump(struct ctl_table *table, int write,
 		void __user *buffer, size_t *lenp, loff_t *ppos);
@@ -219,6 +218,8 @@ static int sysrq_sysctl_handler(struct ctl_table *table, int write,
 
 #endif
 
+extern struct ctl_table grsecurity_table[];
+
 static struct ctl_table kern_table[];
 static struct ctl_table vm_table[];
 static struct ctl_table fs_table[];
@@ -295,6 +296,13 @@ static int max_extfrag_threshold = 1000;
 #endif
 
 static struct ctl_table kern_table[] = {
+#if defined(CONFIG_GRKERNSEC_SYSCTL) || defined(CONFIG_GRKERNSEC_ROFS)
+	{
+		.procname	= "grsecurity",
+		.mode		= 0500,
+		.child		= grsecurity_table,
+	},
+#endif
 
 #ifdef CONFIG_PAX_SOFTMODE
 	{
@@ -667,7 +675,7 @@ static struct ctl_table kern_table[] = {
 		.maxlen		= sizeof(int),
 		.mode		= 0644,
 		/* only handle a transition from default "0" to "1" */
-		.proc_handler	= proc_dointvec_minmax,
+		.proc_handler	= proc_dointvec_minmax_secure,
 		.extra1		= &one,
 		.extra2		= &one,
 	},
@@ -678,7 +686,7 @@ static struct ctl_table kern_table[] = {
 		.data		= &modprobe_path,
 		.maxlen		= KMOD_PATH_LEN,
 		.mode		= 0644,
-		.proc_handler	= proc_dostring,
+		.proc_handler	= proc_dostring_modpriv,
 	},
 	{
 		.procname	= "modules_disabled",
@@ -686,7 +694,7 @@ static struct ctl_table kern_table[] = {
 		.maxlen		= sizeof(int),
 		.mode		= 0644,
 		/* only handle a transition from default "0" to "1" */
-		.proc_handler	= proc_dointvec_minmax,
+		.proc_handler	= proc_dointvec_minmax_secure,
 		.extra1		= &one,
 		.extra2		= &one,
 	},
@@ -848,20 +856,24 @@ static struct ctl_table kern_table[] = {
 		.data		= &dmesg_restrict,
 		.maxlen		= sizeof(int),
 		.mode		= 0644,
-		.proc_handler	= proc_dointvec_minmax_sysadmin,
+		.proc_handler	= proc_dointvec_minmax_secure_sysadmin,
 		.extra1		= &zero,
 		.extra2		= &one,
 	},
+#endif
 	{
 		.procname	= "kptr_restrict",
 		.data		= &kptr_restrict,
 		.maxlen		= sizeof(int),
 		.mode		= 0644,
-		.proc_handler	= proc_dointvec_minmax_sysadmin,
+		.proc_handler	= proc_dointvec_minmax_secure_sysadmin,
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+		.extra1		= &one,
+#else
 		.extra1		= &zero,
+#endif
 		.extra2		= &two,
 	},
-#endif
 	{
 		.procname	= "ngroups_max",
 		.data		= &ngroups_max,
@@ -1026,6 +1038,17 @@ static struct ctl_table kern_table[] = {
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec,
 	},
+#ifdef CONFIG_MODIFY_LDT_SYSCALL
+	{
+		.procname	= "modify_ldt",
+		.data		= &sysctl_modify_ldt,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_minmax_secure_sysadmin,
+		.extra1		= &zero,
+		.extra2		= &one,
+	},
+#endif
 #endif
 #if defined(CONFIG_MMU)
 	{
@@ -1139,10 +1162,17 @@ static struct ctl_table kern_table[] = {
 	 */
 	{
 		.procname	= "perf_event_paranoid",
-		.data		= &sysctl_perf_event_paranoid,
-		.maxlen		= sizeof(sysctl_perf_event_paranoid),
+		.data		= &sysctl_perf_event_legitimately_concerned,
+		.maxlen		= sizeof(sysctl_perf_event_legitimately_concerned),
 		.mode		= 0644,
-		.proc_handler	= proc_dointvec,
+		/* go ahead, be a hero */
+		.proc_handler	= proc_dointvec_minmax_secure_sysadmin,
+		.extra1		= &neg_one,
+#ifdef CONFIG_GRKERNSEC_PERF_HARDEN
+		.extra2		= &three,
+#else
+		.extra2		= &two,
+#endif
 	},
 	{
 		.procname	= "perf_event_mlock_kb",
@@ -2017,6 +2047,16 @@ int proc_dostring(struct ctl_table *table, int write,
 			       (char __user *)buffer, lenp, ppos);
 }
 
+int proc_dostring_modpriv(struct ctl_table *table, int write,
+		  void __user *buffer, size_t *lenp, loff_t *ppos)
+{
+	if (write && !capable(CAP_SYS_MODULE))
+		return -EPERM;
+
+	return _proc_do_string(table->data, table->maxlen, write,
+			       buffer, lenp, ppos);
+}
+
 static size_t proc_skip_spaces(char **buf)
 {
 	size_t ret;
@@ -2328,6 +2368,44 @@ int proc_douintvec(struct ctl_table *table, int write,
 				do_proc_douintvec_conv, NULL);
 }
 
+static int do_proc_dointvec_conv_secure(bool *negp, unsigned long *lvalp,
+				 int *valp,
+				 int write, void *data)
+{
+	if (write) {
+		if (*negp) {
+			if (*lvalp > (unsigned long) INT_MAX + 1)
+				return -EINVAL;
+			pax_open_kernel();
+			*valp = -*lvalp;
+			pax_close_kernel();
+		} else {
+			if (*lvalp > (unsigned long) INT_MAX)
+				return -EINVAL;
+			pax_open_kernel();
+			*valp = *lvalp;
+			pax_close_kernel();
+		}
+	} else {
+		int val = *valp;
+		if (val < 0) {
+			*negp = true;
+			*lvalp = -(unsigned long)val;
+		} else {
+			*negp = false;
+			*lvalp = (unsigned long)val;
+		}
+	}
+	return 0;
+}
+
+int proc_dointvec_secure(struct ctl_table *table, int write,
+		     void __user *buffer, size_t *lenp, loff_t *ppos)
+{
+    return do_proc_dointvec(table,write,buffer,lenp,ppos,
+		    	    do_proc_dointvec_conv_secure,NULL);
+}
+
 /*
  * Taint values can only be increased
  * This means we can safely use a temporary.
@@ -2363,16 +2441,14 @@ static int proc_taint(struct ctl_table *table, int write,
 	return err;
 }
 
-#ifdef CONFIG_PRINTK
-static int proc_dointvec_minmax_sysadmin(struct ctl_table *table, int write,
+static int proc_dointvec_minmax_secure_sysadmin(struct ctl_table *table, int write,
 				void __user *buffer, size_t *lenp, loff_t *ppos)
 {
 	if (write && !capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
-	return proc_dointvec_minmax(table, write, buffer, lenp, ppos);
+	return proc_dointvec_minmax_secure(table, write, buffer, lenp, ppos);
 }
-#endif
 
 struct do_proc_dointvec_minmax_conv_param {
 	int *min;
@@ -2403,6 +2479,32 @@ static int do_proc_dointvec_minmax_conv(bool *negp, unsigned long *lvalp,
 	return 0;
 }
 
+static int do_proc_dointvec_minmax_conv_secure(bool *negp, unsigned long *lvalp,
+					int *valp,
+					int write, void *data)
+{
+	struct do_proc_dointvec_minmax_conv_param *param = data;
+	if (write) {
+		int val = *negp ? -*lvalp : *lvalp;
+		if ((param->min && *param->min > val) ||
+		    (param->max && *param->max < val))
+			return -EINVAL;
+		pax_open_kernel();
+		*valp = val;
+		pax_close_kernel();
+	} else {
+		int val = *valp;
+		if (val < 0) {
+			*negp = true;
+			*lvalp = -(unsigned long)val;
+		} else {
+			*negp = false;
+			*lvalp = (unsigned long)val;
+		}
+	}
+	return 0;
+}
+
 /**
  * proc_dointvec_minmax - read a vector of integers with min/max values
  * @table: the sysctl table
@@ -2430,6 +2532,17 @@ int proc_dointvec_minmax(struct ctl_table *table, int write,
 				do_proc_dointvec_minmax_conv, &param);
 }
 
+int proc_dointvec_minmax_secure(struct ctl_table *table, int write,
+		  void __user *buffer, size_t *lenp, loff_t *ppos)
+{
+	struct do_proc_dointvec_minmax_conv_param param = {
+		.min = (int *) table->extra1,
+		.max = (int *) table->extra2,
+	};
+	return do_proc_dointvec(table, write, buffer, lenp, ppos,
+				do_proc_dointvec_minmax_conv_secure, &param);
+}
+
 static void validate_coredump_safety(void)
 {
 #ifdef CONFIG_COREDUMP
@@ -2918,6 +3031,12 @@ int proc_dostring(struct ctl_table *table, int write,
 	return -ENOSYS;
 }
 
+int proc_dostring_modpriv(struct ctl_table *table, int write,
+		  void __user *buffer, size_t *lenp, loff_t *ppos)
+{
+	return -ENOSYS;
+}
+
 int proc_dointvec(struct ctl_table *table, int write,
 		  void __user *buffer, size_t *lenp, loff_t *ppos)
 {
@@ -2981,5 +3100,6 @@ EXPORT_SYMBOL(proc_dointvec_minmax);
 EXPORT_SYMBOL(proc_dointvec_userhz_jiffies);
 EXPORT_SYMBOL(proc_dointvec_ms_jiffies);
 EXPORT_SYMBOL(proc_dostring);
+EXPORT_SYMBOL(proc_dostring_modpriv);
 EXPORT_SYMBOL(proc_doulongvec_minmax);
 EXPORT_SYMBOL(proc_doulongvec_ms_jiffies_minmax);
diff --git a/kernel/taskstats.c b/kernel/taskstats.c
index cbb387a265db..99d91f644a94 100644
--- a/kernel/taskstats.c
+++ b/kernel/taskstats.c
@@ -28,9 +28,12 @@
 #include <linux/fs.h>
 #include <linux/file.h>
 #include <linux/pid_namespace.h>
+#include <linux/grsecurity.h>
 #include <net/genetlink.h>
 #include <linux/atomic.h>
 
+extern int gr_is_taskstats_denied(int pid);
+
 /*
  * Maximum length of a cpumask that can be specified in
  * the TASKSTATS_CMD_ATTR_REGISTER/DEREGISTER_CPUMASK attribute
@@ -544,6 +547,9 @@ static int cmd_attr_tgid(struct genl_info *info)
 
 static int taskstats_user_cmd(struct sk_buff *skb, struct genl_info *info)
 {
+	if (gr_is_taskstats_denied(current->pid))
+		return -EACCES;
+
 	if (info->attrs[TASKSTATS_CMD_ATTR_REGISTER_CPUMASK])
 		return cmd_attr_register_cpumask(info);
 	else if (info->attrs[TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK])
diff --git a/kernel/time/posix-timers.c b/kernel/time/posix-timers.c
index 4b029e3e17f3..7e6663aea442 100644
--- a/kernel/time/posix-timers.c
+++ b/kernel/time/posix-timers.c
@@ -43,6 +43,7 @@
 #include <linux/hash.h>
 #include <linux/posix-clock.h>
 #include <linux/posix-timers.h>
+#include <linux/grsecurity.h>
 #include <linux/syscalls.h>
 #include <linux/wait.h>
 #include <linux/workqueue.h>
@@ -1021,6 +1022,13 @@ SYSCALL_DEFINE2(clock_settime, const clockid_t, which_clock,
 	if (copy_from_user(&new_tp, tp, sizeof (*tp)))
 		return -EFAULT;
 
+	/* only the CLOCK_REALTIME clock can be set, all other clocks
+	   have their clock_set fptr set to a nosettime dummy function
+	   CLOCK_REALTIME has a NULL clock_set fptr which causes it to
+	   call common_clock_set, which calls do_sys_settimeofday, which
+	   we hook
+	*/
+
 	return kc->clock_set(which_clock, &new_tp);
 }
 
diff --git a/kernel/time/time.c b/kernel/time/time.c
index bd62fb8e8e77..8b387ee6822b 100644
--- a/kernel/time/time.c
+++ b/kernel/time/time.c
@@ -177,6 +177,11 @@ int do_sys_settimeofday64(const struct timespec64 *tv, const struct timezone *tz
 		if (tz->tz_minuteswest > 15*60 || tz->tz_minuteswest < -15*60)
 			return -EINVAL;
 
+		/* we log in do_settimeofday called below, so don't log twice
+		*/
+		if (!tv)
+			gr_log_timechange();
+
 		sys_tz = *tz;
 		update_vsyscall_tz();
 		if (firsttime) {
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index 46e312e9be38..c96310f407ed 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -15,6 +15,7 @@
 #include <linux/init.h>
 #include <linux/mm.h>
 #include <linux/sched.h>
+#include <linux/grsecurity.h>
 #include <linux/syscore_ops.h>
 #include <linux/clocksource.h>
 #include <linux/jiffies.h>
@@ -1172,6 +1173,8 @@ int do_settimeofday64(const struct timespec64 *ts)
 	if (!timespec64_valid_strict(ts))
 		return -EINVAL;
 
+	gr_log_timechange();
+
 	raw_spin_lock_irqsave(&timekeeper_lock, flags);
 	write_seqcount_begin(&tk_core.seq);
 
diff --git a/kernel/time/timer_list.c b/kernel/time/timer_list.c
index ba7d8b288bb3..aa301b0ec729 100644
--- a/kernel/time/timer_list.c
+++ b/kernel/time/timer_list.c
@@ -50,12 +50,16 @@ static void SEQ_printf(struct seq_file *m, const char *fmt, ...)
 
 static void print_name_offset(struct seq_file *m, void *sym)
 {
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	SEQ_printf(m, "<%p>", NULL);
+#else
 	char symname[KSYM_NAME_LEN];
 
 	if (lookup_symbol_name((unsigned long)sym, symname) < 0)
 		SEQ_printf(m, "<%pK>", sym);
 	else
 		SEQ_printf(m, "%s", symname);
+#endif
 }
 
 static void
@@ -124,11 +128,14 @@ print_active_timers(struct seq_file *m, struct hrtimer_clock_base *base,
 static void
 print_base(struct seq_file *m, struct hrtimer_clock_base *base, u64 now)
 {
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	SEQ_printf(m, "  .base:       %p\n", NULL);
+#else
 	SEQ_printf(m, "  .base:       %pK\n", base);
+#endif
 	SEQ_printf(m, "  .index:      %d\n", base->index);
 
 	SEQ_printf(m, "  .resolution: %u nsecs\n", (unsigned) hrtimer_resolution);
-
 	SEQ_printf(m,   "  .get_time:   ");
 	print_name_offset(m, base->get_time);
 	SEQ_printf(m,   "\n");
@@ -393,7 +400,11 @@ static int __init init_timer_list_procfs(void)
 {
 	struct proc_dir_entry *pe;
 
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+	pe = proc_create("timer_list", 0400, NULL, &timer_list_fops);
+#else
 	pe = proc_create("timer_list", 0444, NULL, &timer_list_fops);
+#endif
 	if (!pe)
 		return -ENOMEM;
 	return 0;
diff --git a/kernel/time/timer_stats.c b/kernel/time/timer_stats.c
index 6c5013d0f973..671b58227f98 100644
--- a/kernel/time/timer_stats.c
+++ b/kernel/time/timer_stats.c
@@ -269,12 +269,16 @@ void timer_stats_update_stats(void *timer, pid_t pid, void *startf,
 
 static void print_name_offset(struct seq_file *m, unsigned long addr)
 {
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	seq_printf(m, "<%p>", NULL);
+#else
 	char symname[KSYM_NAME_LEN];
 
 	if (lookup_symbol_name(addr, symname) < 0)
-		seq_printf(m, "<%p>", (void *)addr);
+		seq_printf(m, "<%pK>", (void *)addr);
 	else
 		seq_printf(m, "%s", symname);
+#endif
 }
 
 static int tstats_show(struct seq_file *m, void *v)
@@ -417,7 +421,11 @@ static int __init init_tstats_procfs(void)
 {
 	struct proc_dir_entry *pe;
 
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+	pe = proc_create("timer_stats", 0600, NULL, &tstats_fops);
+#else
 	pe = proc_create("timer_stats", 0644, NULL, &tstats_fops);
+#endif
 	if (!pe)
 		return -ENOMEM;
 	return 0;
diff --git a/kernel/trace/Kconfig b/kernel/trace/Kconfig
index bf30221347e2..9c16b00284ac 100644
--- a/kernel/trace/Kconfig
+++ b/kernel/trace/Kconfig
@@ -102,6 +102,7 @@ config TRACING
 config GENERIC_TRACER
 	bool
 	select TRACING
+	depends on !GRKERNSEC_KMEM
 
 #
 # Minimum requirements an architecture has to meet for us to
@@ -115,6 +116,7 @@ config TRACING_SUPPORT
 	# irqflags tracing for your architecture.
 	depends on TRACE_IRQFLAGS_SUPPORT || PPC32
 	depends on STACKTRACE_SUPPORT
+	depends on !GRKERNSEC_KMEM
 	default y
 
 if TRACING_SUPPORT
@@ -256,6 +258,7 @@ config ENABLE_DEFAULT_TRACERS
 	bool "Trace process context switches and events"
 	depends on !GENERIC_TRACER
 	select TRACING
+	depends on !GRKERNSEC_KMEM
 	help
 	  This tracer hooks to various trace points in the kernel,
 	  allowing the user to pick and choose which trace point they
@@ -409,6 +412,7 @@ config BLK_DEV_IO_TRACE
 	depends on BLOCK
 	select RELAY
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	select TRACEPOINTS
 	select GENERIC_TRACER
 	select STACKTRACE
@@ -433,6 +437,7 @@ config KPROBE_EVENT
 	depends on HAVE_REGS_AND_STACK_ACCESS_API
 	bool "Enable kprobes-based dynamic events"
 	select TRACING
+	depends on !GRKERNSEC_KMEM
 	select PROBE_EVENTS
 	default y
 	help
@@ -454,6 +459,7 @@ config UPROBE_EVENT
 	select UPROBES
 	select PROBE_EVENTS
 	select TRACING
+	depends on !GRKERNSEC_KMEM
 	default n
 	help
 	  This allows the user to add tracing events on top of userspace
diff --git a/kernel/trace/trace_syscalls.c b/kernel/trace/trace_syscalls.c
index 5e10395da88e..c258d96435c7 100644
--- a/kernel/trace/trace_syscalls.c
+++ b/kernel/trace/trace_syscalls.c
@@ -605,6 +605,8 @@ static int perf_sysenter_enable(struct trace_event_call *call)
 	int num;
 
 	num = ((struct syscall_metadata *)call->data)->syscall_nr;
+	if (WARN_ON_ONCE(num < 0 || num >= NR_syscalls))
+		return -EINVAL;
 
 	mutex_lock(&syscall_trace_lock);
 	if (!sys_perf_refcount_enter)
@@ -624,6 +626,8 @@ static void perf_sysenter_disable(struct trace_event_call *call)
 	int num;
 
 	num = ((struct syscall_metadata *)call->data)->syscall_nr;
+	if (WARN_ON_ONCE(num < 0 || num >= NR_syscalls))
+		return;
 
 	mutex_lock(&syscall_trace_lock);
 	sys_perf_refcount_enter--;
@@ -676,6 +680,8 @@ static int perf_sysexit_enable(struct trace_event_call *call)
 	int num;
 
 	num = ((struct syscall_metadata *)call->data)->syscall_nr;
+	if (WARN_ON_ONCE(num < 0 || num >= NR_syscalls))
+		return -EINVAL;
 
 	mutex_lock(&syscall_trace_lock);
 	if (!sys_perf_refcount_exit)
@@ -695,6 +701,8 @@ static void perf_sysexit_disable(struct trace_event_call *call)
 	int num;
 
 	num = ((struct syscall_metadata *)call->data)->syscall_nr;
+	if (WARN_ON_ONCE(num < 0 || num >= NR_syscalls))
+		return;
 
 	mutex_lock(&syscall_trace_lock);
 	sys_perf_refcount_exit--;
diff --git a/kernel/user_namespace.c b/kernel/user_namespace.c
index 8fbc98bacd24..0c3cfe2e5433 100644
--- a/kernel/user_namespace.c
+++ b/kernel/user_namespace.c
@@ -76,6 +76,21 @@ int create_user_ns(struct cred *new)
 	struct ucounts *ucounts;
 	int ret, i;
 
+#ifdef CONFIG_GRKERNSEC
+	/*
+	 * This doesn't really inspire confidence:
+	 * http://marc.info/?l=linux-kernel&m=135543612731939&w=2
+	 * http://marc.info/?l=linux-kernel&m=135545831607095&w=2
+	 * Increases kernel attack surface in areas developers
+	 * previously cared little about ("low importance due
+	 * to requiring "root" capability")
+	 * To be removed when this code receives *proper* review
+	 */
+	if (!capable(CAP_SYS_ADMIN) || !capable(CAP_SETUID) ||
+			!capable(CAP_SETGID))
+		return -EPERM;
+#endif
+
 	ret = -ENOSPC;
 	if (parent_ns->level > 32)
 		goto fail;
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index 8bec5c75ed72..8ff38cd2c1bb 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -244,6 +244,7 @@ config PAGE_OWNER
 	bool "Track page owner"
 	depends on DEBUG_KERNEL && STACKTRACE_SUPPORT
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	select STACKTRACE
 	select STACKDEPOT
 	select PAGE_EXTENSION
@@ -260,6 +261,7 @@ config PAGE_OWNER
 config DEBUG_FS
 	bool "Debug Filesystem"
 	select SRCU
+	depends on !GRKERNSEC_KMEM
 	help
 	  debugfs is a virtual file system that kernel developers use to put
 	  debugging files into.  Enable this option to be able to read and
@@ -513,6 +515,7 @@ config DEBUG_KMEMLEAK
 	bool "Kernel memory leak detector"
 	depends on DEBUG_KERNEL && HAVE_DEBUG_KMEMLEAK
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	select STACKTRACE if STACKTRACE_SUPPORT
 	select KALLSYMS
 	select CRC32
@@ -712,6 +715,7 @@ config KCOV
 	select DEBUG_FS
 	select GCC_PLUGINS if !COMPILE_TEST
 	select GCC_PLUGIN_SANCOV if !COMPILE_TEST
+	depends on !GRKERNSEC_KMEM
 	help
 	  KCOV exposes kernel code coverage information in a form suitable
 	  for coverage-guided fuzzing (randomized testing).
@@ -1013,7 +1017,7 @@ config DEBUG_MUTEXES
 
 config DEBUG_WW_MUTEX_SLOWPATH
 	bool "Wait/wound mutex debugging: Slowpath testing"
-	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT
+	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT && !PAX_CONSTIFY_PLUGIN
 	select DEBUG_LOCK_ALLOC
 	select DEBUG_SPINLOCK
 	select DEBUG_MUTEXES
@@ -1511,6 +1515,7 @@ config NOTIFIER_ERROR_INJECTION
 	tristate "Notifier error injection"
 	depends on DEBUG_KERNEL
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	help
 	  This option provides the ability to inject artificial errors to
 	  specified notifier chain callbacks. It is useful to test the error
@@ -1656,6 +1661,7 @@ config FAIL_MMC_REQUEST
 config FAIL_FUTEX
 	bool "Fault-injection capability for futexes"
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	depends on FAULT_INJECTION && FUTEX
 	help
 	  Provide fault-injection capability for futexes.
@@ -1680,6 +1686,7 @@ config LATENCYTOP
 	depends on DEBUG_KERNEL
 	depends on STACKTRACE_SUPPORT
 	depends on PROC_FS
+	depends on !GRKERNSEC_HIDESYM
 	select FRAME_POINTER if !MIPS && !PPC && !S390 && !MICROBLAZE && !ARM_UNWIND && !ARC
 	select KALLSYMS
 	select KALLSYMS_ALL
@@ -1834,7 +1841,7 @@ endmenu # runtime tests
 
 config PROVIDE_OHCI1394_DMA_INIT
 	bool "Remote debugging over FireWire early on boot"
-	depends on PCI && X86
+	depends on PCI && X86 && !GRKERNSEC
 	help
 	  If you want to debug problems which hang or crash the kernel early
 	  on boot and the crashing machine has a FireWire port, you can use
diff --git a/lib/is_single_threaded.c b/lib/is_single_threaded.c
index 391fd23976a2..96e17b6e0146 100644
--- a/lib/is_single_threaded.c
+++ b/lib/is_single_threaded.c
@@ -22,6 +22,9 @@ bool current_is_single_threaded(void)
 	struct task_struct *p, *t;
 	bool ret;
 
+	if (!mm)
+		return true;
+
 	if (atomic_read(&task->signal->live) != 1)
 		return false;
 
diff --git a/lib/list_debug.c b/lib/list_debug.c
index 3a044e295ddc..38bdeaafb060 100644
--- a/lib/list_debug.c
+++ b/lib/list_debug.c
@@ -25,18 +25,26 @@ static bool __list_add_debug(struct list_head *new,
 			     struct list_head *prev,
 			     struct list_head *next)
 {
-	if (WARN(next->prev != prev,
-		"list_add corruption. next->prev should be "
-		"prev (%p), but was %p. (next=%p).\n",
-		prev, next->prev, next) ||
-	    WARN(prev->next != next,
-		"list_add corruption. prev->next should be "
-		"next (%p), but was %p. (prev=%p).\n",
-		next, prev->next, prev) ||
-	    WARN(new == prev || new == next,
-		"list_add double add: new=%p, prev=%p, next=%p.\n",
-		new, prev, next))
+	if (unlikely(next->prev != prev)) {
+		printk(KERN_ERR "list_add corruption. next->prev should be "
+			"prev (%p), but was %p. (next=%p).\n",
+			prev, next->prev, next);
+		BUG();
 		return false;
+	}
+	if (unlikely(prev->next != next)) {
+		printk(KERN_ERR "list_add corruption. prev->next should be "
+			"next (%p), but was %p. (prev=%p).\n",
+			next, prev->next, prev);
+		BUG();
+		return false;
+	}
+	if (unlikely(new == prev || new == next)) {
+		printk(KERN_ERR "list_add double add: new=%p, prev=%p, next=%p.\n",
+			new, prev, next);
+		BUG();
+		return false;
+	}
 	return true;
 }
 
@@ -61,19 +69,30 @@ static bool __list_del_entry_debug(struct list_head *entry)
 	prev = entry->prev;
 	next = entry->next;
 
-	if (WARN(next == LIST_POISON1,
-		"list_del corruption, %p->next is LIST_POISON1 (%p)\n",
-		entry, LIST_POISON1) ||
-	    WARN(prev == LIST_POISON2,
-		"list_del corruption, %p->prev is LIST_POISON2 (%p)\n",
-		entry, LIST_POISON2) ||
-	    WARN(prev->next != entry,
-		"list_del corruption. prev->next should be %p, "
-		"but was %p\n", entry, prev->next) ||
-	    WARN(next->prev != entry,
-		"list_del corruption. next->prev should be %p, "
-		"but was %p\n", entry, next->prev))
+	if (unlikely(next == LIST_POISON1)) {
+		printk(KERN_ERR "list_del corruption, %p->next is LIST_POISON1 (%p)\n",
+			entry, LIST_POISON1);
+		BUG();
+		return false;
+	}
+	if (unlikely(prev == LIST_POISON2)) {
+		printk(KERN_ERR "list_del corruption, %p->prev is LIST_POISON2 (%p)\n",
+			entry, LIST_POISON2);
+		BUG();
+		return false;
+	}
+	if (unlikely(entry->prev->next != entry)) {
+		printk(KERN_ERR "list_del corruption. prev->next should be %p, "
+			"but was %p\n", entry, prev->next);
+		BUG();
+		return false;
+	}
+	if (unlikely(entry->next->prev != entry)) {
+		printk(KERN_ERR "list_del corruption. next->prev should be %p, "
+			"but was %p\n", entry, next->prev);
+		BUG();
 		return false;
+	}
 	return true;
 }
 
diff --git a/lib/nlattr.c b/lib/nlattr.c
index fce1e9afc6d9..d44559b80147 100644
--- a/lib/nlattr.c
+++ b/lib/nlattr.c
@@ -278,6 +278,8 @@ int nla_memcpy(void *dest, const struct nlattr *src, int count)
 {
 	int minlen = min_t(int, count, nla_len(src));
 
+	BUG_ON(minlen < 0);
+
 	memcpy(dest, nla_data(src), minlen);
 	if (count > minlen)
 		memset(dest + minlen, 0, count - minlen);
diff --git a/lib/rbtree.c b/lib/rbtree.c
index eb8a19fee110..3cb9b612ac67 100644
--- a/lib/rbtree.c
+++ b/lib/rbtree.c
@@ -412,7 +412,9 @@ static inline void dummy_copy(struct rb_node *old, struct rb_node *new) {}
 static inline void dummy_rotate(struct rb_node *old, struct rb_node *new) {}
 
 static const struct rb_augment_callbacks dummy_callbacks = {
-	dummy_propagate, dummy_copy, dummy_rotate
+	.propagate = dummy_propagate,
+	.copy = dummy_copy,
+	.rotate = dummy_rotate
 };
 
 void rb_insert_color(struct rb_node *node, struct rb_root *root)
diff --git a/lib/vsprintf.c b/lib/vsprintf.c
index 11a12c79127b..2871684ad57c 100644
--- a/lib/vsprintf.c
+++ b/lib/vsprintf.c
@@ -16,6 +16,9 @@
  * - scnprintf and vscnprintf
  */
 
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+#define __INCLUDED_BY_HIDESYM 1
+#endif
 #include <stdarg.h>
 #include <linux/clk.h>
 #include <linux/clk-provider.h>
@@ -680,7 +683,7 @@ char *symbol_string(char *buf, char *end, void *ptr,
 #ifdef CONFIG_KALLSYMS
 	if (*fmt == 'B')
 		sprint_backtrace(sym, value);
-	else if (*fmt != 'f' && *fmt != 's')
+	else if (*fmt != 'f' && *fmt != 's' && *fmt != 'X')
 		sprint_symbol(sym, value);
 	else
 		sprint_symbol_no_offset(sym, value);
@@ -1470,7 +1473,11 @@ char *flags_string(char *buf, char *end, void *flags_ptr, const char *fmt)
 	return format_flags(buf, end, flags, names);
 }
 
-int kptr_restrict __read_mostly;
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+int kptr_restrict __read_only = 1;
+#else
+int kptr_restrict __read_only;
+#endif
 
 /*
  * Show a '%p' thing.  A kernel extension is that the '%p' is followed
@@ -1481,8 +1488,10 @@ int kptr_restrict __read_mostly;
  *
  * - 'F' For symbolic function descriptor pointers with offset
  * - 'f' For simple symbolic function names without offset
+ * - 'X' For simple symbolic function names without offset approved for use with GRKERNSEC_HIDESYM
  * - 'S' For symbolic direct pointers with offset
  * - 's' For symbolic direct pointers without offset
+ * - 'A' For symbolic direct pointers with offset approved for use with GRKERNSEC_HIDESYM
  * - '[FfSs]R' as above with __builtin_extract_return_addr() translation
  * - 'B' For backtraced symbolic direct pointers with offset
  * - 'R' For decoded struct resource, e.g., [mem 0x0-0x1f 64bit pref]
@@ -1593,6 +1602,14 @@ char *pointer(const char *fmt, char *buf, char *end, void *ptr,
 		/* Fallthrough */
 	case 'S':
 	case 's':
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+		break;
+#else
+		return symbol_string(buf, end, ptr, spec, fmt);
+#endif
+	case 'X':
+		ptr = dereference_function_descriptor(ptr);
+	case 'A':
 	case 'B':
 		return symbol_string(buf, end, ptr, spec, fmt);
 	case 'R':
@@ -1657,6 +1674,8 @@ char *pointer(const char *fmt, char *buf, char *end, void *ptr,
 			va_end(va);
 			return buf;
 		}
+	case 'P':
+		break;
 	case 'K':
 		switch (kptr_restrict) {
 		case 0:
@@ -1686,6 +1705,9 @@ char *pointer(const char *fmt, char *buf, char *end, void *ptr,
 			 */
 			cred = current_cred();
 			if (!has_capability_noaudit(current, CAP_SYSLOG) ||
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+			    !has_capability_noaudit(current, CAP_SYS_ADMIN) ||
+#endif
 			    !uid_eq(cred->euid, cred->uid) ||
 			    !gid_eq(cred->egid, cred->gid))
 				ptr = NULL;
@@ -1719,6 +1741,22 @@ char *pointer(const char *fmt, char *buf, char *end, void *ptr,
 	case 'G':
 		return flags_string(buf, end, ptr, fmt);
 	}
+
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	/* 'P' = approved pointers to copy to userland,
+	   as in the /proc/kallsyms case, as we make it display nothing
+	   for non-root users, and the real contents for root users
+	   'X' = approved simple symbols
+	   Also ignore 'K' pointers, since we force their NULLing for non-root users
+	   above
+	*/
+	if ((unsigned long)ptr > TASK_SIZE && *fmt != 'P' && *fmt != 'X' && *fmt != 'K' && is_usercopy_object(buf)) {
+		printk(KERN_ALERT "grsec: kernel infoleak detected!  Please report this log to spender@grsecurity.net.\n");
+		dump_stack();
+		ptr = NULL;
+	}
+#endif
+
 	spec.flags |= SMALL;
 	if (spec.field_width == -1) {
 		spec.field_width = default_width;
diff --git a/localversion-grsec b/localversion-grsec
new file mode 100644
index 000000000000..7cd6065beb8d
--- /dev/null
+++ b/localversion-grsec
@@ -0,0 +1 @@
+-grsec
diff --git a/mm/Kconfig b/mm/Kconfig
index 980b5ea0f1fb..ab679cfb7b8f 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -344,7 +344,8 @@ config KSM
 config DEFAULT_MMAP_MIN_ADDR
 	int "Low address space to protect from user allocation"
 	depends on MMU
-	default 32768
+	default 32768 if ALPHA || ARM || PARISC || SPARC32
+	default 65536
 	help
 	  This is the portion of low virtual memory which should be protected
 	  from userspace allocation.  Keeping a user from writing to low pages
@@ -377,8 +378,9 @@ config MEMORY_FAILURE
 
 config HWPOISON_INJECT
 	tristate "HWPoison pages injector"
-	depends on MEMORY_FAILURE && DEBUG_KERNEL && PROC_FS
+	depends on MEMORY_FAILURE && DEBUG_KERNEL && PROC_FS && !GRKERNSEC
 	select PROC_PAGE_MONITOR
+	depends on !GRKERNSEC
 
 config NOMMU_INITIAL_TRIM_EXCESS
 	int "Turn on mmap() excess space trimming before booting"
@@ -548,6 +550,7 @@ config MEM_SOFT_DIRTY
 	bool "Track memory changes"
 	depends on CHECKPOINT_RESTORE && HAVE_ARCH_SOFT_DIRTY && PROC_FS
 	select PROC_PAGE_MONITOR
+	depends on !GRKERNSEC
 	help
 	  This option enables memory changes tracking by introducing a
 	  soft-dirty bit on pte-s. This bit it set when someone writes
@@ -632,6 +635,7 @@ config ZSMALLOC_STAT
 	bool "Export zsmalloc statistics"
 	depends on ZSMALLOC
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	help
 	  This option enables code in the zsmalloc to collect various
 	  statistics about whats happening in zsmalloc and exports that
diff --git a/mm/Kconfig.debug b/mm/Kconfig.debug
index afcc550877ff..ed3f09775601 100644
--- a/mm/Kconfig.debug
+++ b/mm/Kconfig.debug
@@ -10,6 +10,7 @@ config PAGE_EXTENSION
 config DEBUG_PAGEALLOC
 	bool "Debug page memory allocations"
 	depends on DEBUG_KERNEL
+	depends on !PAX_MEMORY_SANITIZE
 	depends on !HIBERNATION || ARCH_SUPPORTS_DEBUG_PAGEALLOC && !PPC && !SPARC
 	depends on !KMEMCHECK
 	select PAGE_EXTENSION
diff --git a/mm/filemap.c b/mm/filemap.c
index 9ce08e7c1336..b6f95cc39b7b 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -2547,6 +2547,7 @@ inline ssize_t generic_write_checks(struct kiocb *iocb, struct iov_iter *from)
 	pos = iocb->ki_pos;
 
 	if (limit != RLIM_INFINITY) {
+		gr_learn_resource(current, RLIMIT_FSIZE, iocb->ki_pos, 0);
 		if (iocb->ki_pos >= limit) {
 			send_sig(SIGXFSZ, current, 0);
 			return -EFBIG;
diff --git a/mm/kmemleak.c b/mm/kmemleak.c
index d1380ed93fdf..41c63631f4a3 100644
--- a/mm/kmemleak.c
+++ b/mm/kmemleak.c
@@ -369,7 +369,7 @@ static void print_unreferenced(struct seq_file *seq,
 
 	for (i = 0; i < object->trace_len; i++) {
 		void *ptr = (void *)object->trace[i];
-		seq_printf(seq, "    [<%p>] %pS\n", ptr, ptr);
+		seq_printf(seq, "    [<%pP>] %pA\n", ptr, ptr);
 	}
 }
 
@@ -2010,7 +2010,7 @@ static int __init kmemleak_late_init(void)
 		return -ENOMEM;
 	}
 
-	dentry = debugfs_create_file("kmemleak", S_IRUGO, NULL, NULL,
+	dentry = debugfs_create_file("kmemleak", S_IRUSR, NULL, NULL,
 				     &kmemleak_fops);
 	if (!dentry)
 		pr_warn("Failed to create the debugfs kmemleak file\n");
diff --git a/mm/memory.c b/mm/memory.c
index 9b25a46b0c92..e8b4bc4a0a31 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -698,7 +698,7 @@ static void print_bad_pte(struct vm_area_struct *vma, unsigned long addr,
 	/*
 	 * Choose text because data symbols depend on CONFIG_KALLSYMS_ALL=y
 	 */
-	pr_alert("file:%pD fault:%pf mmap:%pf readpage:%pf\n",
+	pr_alert("file:%pD fault:%pX mmap:%pX readpage:%pX\n",
 		 vma->vm_file,
 		 vma->vm_ops ? vma->vm_ops->fault : NULL,
 		 vma->vm_file ? vma->vm_file->f_op->mmap : NULL,
diff --git a/mm/mempolicy.c b/mm/mempolicy.c
index 29b6fa72a948..5cb985f467f0 100644
--- a/mm/mempolicy.c
+++ b/mm/mempolicy.c
@@ -1440,8 +1440,7 @@ SYSCALL_DEFINE4(migrate_pages, pid_t, pid, unsigned long, maxnode,
 	 */
 	tcred = __task_cred(task);
 	if (!uid_eq(cred->euid, tcred->suid) && !uid_eq(cred->euid, tcred->uid) &&
-	    !uid_eq(cred->uid,  tcred->suid) && !uid_eq(cred->uid,  tcred->uid) &&
-	    !capable(CAP_SYS_NICE)) {
+	    !uid_eq(cred->uid,  tcred->suid) && !capable(CAP_SYS_NICE)) {
 		rcu_read_unlock();
 		err = -EPERM;
 		goto out_put;
@@ -1472,6 +1471,15 @@ SYSCALL_DEFINE4(migrate_pages, pid_t, pid, unsigned long, maxnode,
 		goto out;
 	}
 
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	if (mm != current->mm &&
+	    (mm->pax_flags & MF_PAX_RANDMMAP || mm->pax_flags & MF_PAX_SEGMEXEC)) {
+		mmput(mm);
+		err = -EPERM;
+		goto out;
+	}
+#endif
+
 	err = do_migrate_pages(mm, old, new,
 		capable(CAP_SYS_NICE) ? MPOL_MF_MOVE_ALL : MPOL_MF_MOVE);
 
diff --git a/mm/migrate.c b/mm/migrate.c
index 66ce6b490b13..c5f0a41f7115 100644
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@ -1693,8 +1693,7 @@ SYSCALL_DEFINE6(move_pages, pid_t, pid, unsigned long, nr_pages,
 	 */
 	tcred = __task_cred(task);
 	if (!uid_eq(cred->euid, tcred->suid) && !uid_eq(cred->euid, tcred->uid) &&
-	    !uid_eq(cred->uid,  tcred->suid) && !uid_eq(cred->uid,  tcred->uid) &&
-	    !capable(CAP_SYS_NICE)) {
+	    !uid_eq(cred->uid,  tcred->suid) && !capable(CAP_SYS_NICE)) {
 		rcu_read_unlock();
 		err = -EPERM;
 		goto out;
diff --git a/mm/mlock.c b/mm/mlock.c
index b1f0dc1be5dd..70e0033382b5 100644
--- a/mm/mlock.c
+++ b/mm/mlock.c
@@ -14,6 +14,7 @@
 #include <linux/pagevec.h>
 #include <linux/mempolicy.h>
 #include <linux/syscalls.h>
+#include <linux/security.h>
 #include <linux/sched.h>
 #include <linux/export.h>
 #include <linux/rmap.h>
@@ -704,6 +705,10 @@ static __must_check int do_mlock(unsigned long start, size_t len, vm_flags_t fla
 	}
 
 	/* check against resource limits */
+	if (locked > (ULONG_MAX >> PAGE_SHIFT))
+		gr_learn_resource(current, RLIMIT_MEMLOCK, ULONG_MAX, 1);
+	else
+		gr_learn_resource(current, RLIMIT_MEMLOCK, locked << PAGE_SHIFT, 1);
 	if ((locked <= lock_limit) || capable(CAP_IPC_LOCK))
 		error = apply_vma_lock_flags(start, len, flags);
 
@@ -822,6 +827,10 @@ SYSCALL_DEFINE1(mlockall, int, flags)
 		return -EINTR;
 
 	ret = -ENOMEM;
+	if (current->mm->total_vm > (ULONG_MAX >> PAGE_SHIFT))
+		gr_learn_resource(current, RLIMIT_MEMLOCK, ULONG_MAX, 1);
+	else
+		gr_learn_resource(current, RLIMIT_MEMLOCK, current->mm->total_vm << PAGE_SHIFT, 1);
 	if (!(flags & MCL_CURRENT) || (current->mm->total_vm <= lock_limit) ||
 	    capable(CAP_IPC_LOCK))
 		ret = apply_mlockall_flags(flags);
diff --git a/mm/mmap.c b/mm/mmap.c
index c591192b847c..72d400bc2d76 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -44,6 +44,7 @@
 #include <linux/userfaultfd_k.h>
 #include <linux/moduleparam.h>
 #include <linux/pkeys.h>
+#include <linux/random.h>
 
 #include <asm/uaccess.h>
 #include <asm/cacheflush.h>
@@ -200,6 +201,7 @@ static int do_brk(unsigned long addr, unsigned long len);
 
 SYSCALL_DEFINE1(brk, unsigned long, brk)
 {
+	unsigned long rlim;
 	unsigned long retval;
 	unsigned long newbrk, oldbrk;
 	struct mm_struct *mm = current->mm;
@@ -231,7 +233,13 @@ SYSCALL_DEFINE1(brk, unsigned long, brk)
 	 * segment grow beyond its set limit the in case where the limit is
 	 * not page aligned -Ram Gupta
 	 */
-	if (check_data_rlimit(rlimit(RLIMIT_DATA), brk, mm->start_brk,
+	rlim = rlimit(RLIMIT_DATA);
+#ifdef CONFIG_GRKERNSEC_PROC_MEMMAP
+	/* force a minimum 16MB brk heap on setuid/setgid binaries */
+	if (rlim < (4096 * PAGE_SIZE) && (get_dumpable(mm) != SUID_DUMP_USER) && gr_is_global_nonroot(current_uid()))
+		rlim = 4096 * PAGE_SIZE;
+#endif
+	if (check_data_rlimit(rlim, brk, mm->start_brk,
 			      mm->end_data, mm->start_data))
 		goto out;
 
@@ -1369,6 +1377,10 @@ static inline int mlock_future_check(struct mm_struct *mm,
 		locked += mm->locked_vm;
 		lock_limit = rlimit(RLIMIT_MEMLOCK);
 		lock_limit >>= PAGE_SHIFT;
+		if (locked > (ULONG_MAX >> PAGE_SHIFT))
+			gr_learn_resource(current, RLIMIT_MEMLOCK, ULONG_MAX, 1);
+		else
+			gr_learn_resource(current, RLIMIT_MEMLOCK, locked << PAGE_SHIFT, 1);
 		if (locked > lock_limit && !capable(CAP_IPC_LOCK))
 			return -EAGAIN;
 	}
@@ -1439,7 +1451,16 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 
 #ifdef CONFIG_PAX_MPROTECT
 	if (mm->pax_flags & MF_PAX_MPROTECT) {
-		if ((vm_flags & (VM_WRITE | VM_EXEC)) == (VM_WRITE | VM_EXEC))
+
+#ifdef CONFIG_GRKERNSEC_RWXMAP_LOG
+		if (file && !pgoff && (vm_flags & VM_EXEC) && mm->binfmt &&
+		    mm->binfmt->handle_mmap)
+			mm->binfmt->handle_mmap(file);
+#endif
+
+#ifndef CONFIG_PAX_MPROTECT_COMPAT
+		if ((vm_flags & (VM_WRITE | VM_EXEC)) == (VM_WRITE | VM_EXEC)) {
+			gr_log_rwxmmap(file);
 
 #ifdef CONFIG_PAX_EMUPLT
 			vm_flags &= ~VM_EXEC;
@@ -1447,8 +1468,14 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 			return -EPERM;
 #endif
 
+		}
+
 		if (!(vm_flags & VM_EXEC))
 			vm_flags &= ~VM_MAYEXEC;
+#else
+		if ((vm_flags & (VM_WRITE | VM_EXEC)) != VM_EXEC)
+			vm_flags &= ~(VM_EXEC | VM_MAYEXEC);
+#endif
 		else
 			vm_flags &= ~VM_MAYWRITE;
 	}
@@ -1546,6 +1573,9 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 			vm_flags |= VM_NORESERVE;
 	}
 
+	if (!gr_acl_handle_mmap(file, prot))
+		return -EACCES;
+	
 	addr = mmap_region(file, addr, len, vm_flags, pgoff);
 	if (!IS_ERR_VALUE(addr) &&
 	    ((vm_flags & VM_LOCKED) ||
@@ -1891,7 +1921,17 @@ unsigned long mmap_region(struct file *file, unsigned long addr,
 	return error;
 }
 
-bool check_heap_stack_gap(const struct vm_area_struct *vma, unsigned long addr, unsigned long len)
+#ifdef CONFIG_GRKERNSEC_RAND_THREADSTACK
+unsigned long gr_rand_threadstack_offset(const struct mm_struct *mm, const struct file *filp, unsigned long flags)
+{
+	if ((mm->pax_flags & MF_PAX_RANDMMAP) && !filp && (flags & MAP_STACK))
+		return ((prandom_u32() & 0xFF) + 1) << PAGE_SHIFT;
+
+	return 0;
+}
+#endif
+
+bool check_heap_stack_gap(const struct vm_area_struct *vma, unsigned long addr, unsigned long len, unsigned long offset)
 {
 	if (!vma) {
 #ifdef CONFIG_STACK_GROWSUP
@@ -1914,6 +1954,8 @@ bool check_heap_stack_gap(const struct vm_area_struct *vma, unsigned long addr,
 	else if (vma->vm_prev && (vma->vm_prev->vm_flags & VM_GROWSUP))
 		return addr - vma->vm_prev->vm_end >= sysctl_heap_stack_gap;
 #endif
+	else if (offset)
+		return offset <= vma->vm_start - addr - len;
 
 	return true;
 }
@@ -1983,6 +2025,11 @@ unsigned long unmapped_area(const struct vm_unmapped_area_info *info)
 		gap_start += skip_heap_stack_gap(vma->vm_prev, VM_GROWSUP, gap_start, gap_end);
 		gap_end -= skip_heap_stack_gap(vma, VM_GROWSDOWN, gap_start, gap_end);
 
+		if (gap_end - gap_start > info->threadstack_offset)
+			gap_start += info->threadstack_offset;
+		else
+			gap_start = gap_end;
+
 		if (gap_end >= low_limit && gap_end - gap_start >= length)
 			goto found;
 
@@ -2090,6 +2137,11 @@ unsigned long unmapped_area_topdown(const struct vm_unmapped_area_info *info)
 		gap_start += skip_heap_stack_gap(vma->vm_prev, VM_GROWSUP, gap_start, gap_end);
 		gap_end -= skip_heap_stack_gap(vma, VM_GROWSDOWN, gap_start, gap_end);
 
+		if (gap_end - gap_start > info->threadstack_offset)
+			gap_end -= info->threadstack_offset;
+		else
+			gap_end = gap_start;
+
 		if (gap_start <= high_limit && gap_end - gap_start >= length)
 			goto found;
 
@@ -2153,6 +2205,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 
 	if (len > TASK_SIZE - mmap_min_addr)
 		return -ENOMEM;
@@ -2168,7 +2221,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
 		if (TASK_SIZE - len >= addr && addr >= mmap_min_addr &&
-		    check_heap_stack_gap(vma, addr, len))
+		    check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -2177,6 +2230,7 @@ arch_get_unmapped_area(struct file *filp, unsigned long addr,
 	info.low_limit = mm->mmap_base;
 	info.high_limit = TASK_SIZE;
 	info.align_mask = 0;
+	info.threadstack_offset = offset;
 	return vm_unmapped_area(&info);
 }
 #endif
@@ -2195,6 +2249,7 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
 	struct mm_struct *mm = current->mm;
 	unsigned long addr = addr0;
 	struct vm_unmapped_area_info info;
+	unsigned long offset = gr_rand_threadstack_offset(mm, filp, flags);
 
 	/* requested length too big for entire address space */
 	if (len > TASK_SIZE - mmap_min_addr)
@@ -2212,7 +2267,7 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
 		if (TASK_SIZE - len >= addr && addr >= mmap_min_addr &&
-				check_heap_stack_gap(vma, addr, len))
+				check_heap_stack_gap(vma, addr, len, offset))
 			return addr;
 	}
 
@@ -2221,6 +2276,7 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
 	info.low_limit = max(PAGE_SIZE, mmap_min_addr);
 	info.high_limit = mm->mmap_base;
 	info.align_mask = 0;
+	info.threadstack_offset = offset;
 	addr = vm_unmapped_area(&info);
 
 	/*
@@ -2387,6 +2443,7 @@ static int acct_stack_growth(struct vm_area_struct *vma, unsigned long size, uns
 
 	/* Stack limit test */
 	actual_size = size;
+	gr_learn_resource(current, RLIMIT_STACK, actual_size, 1);
 	if (actual_size > READ_ONCE(rlim[RLIMIT_STACK].rlim_cur))
 		return -ENOMEM;
 
@@ -2397,6 +2454,10 @@ static int acct_stack_growth(struct vm_area_struct *vma, unsigned long size, uns
 		locked = mm->locked_vm + grow;
 		limit = READ_ONCE(rlim[RLIMIT_MEMLOCK].rlim_cur);
 		limit >>= PAGE_SHIFT;
+		if (locked > (ULONG_MAX >> PAGE_SHIFT))
+			gr_learn_resource(current, RLIMIT_MEMLOCK, ULONG_MAX, 1);
+		else
+			gr_learn_resource(current, RLIMIT_MEMLOCK, locked << PAGE_SHIFT, 1);
 		if (locked > limit && !capable(CAP_IPC_LOCK))
 			return -ENOMEM;
 	}
@@ -2422,6 +2483,9 @@ static int acct_stack_growth(struct vm_area_struct *vma, unsigned long size, uns
  * PA-RISC uses this for its stack; IA64 for its Register Backing Store.
  * vma is the last one with address > vma->vm_end.  Have to extend vma.
  */
+#ifndef CONFIG_IA64
+static
+#endif
 int expand_upwards(struct vm_area_struct *vma, unsigned long address)
 {
 	struct mm_struct *mm = vma->vm_mm;
@@ -3382,6 +3446,9 @@ int insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
 	     security_vm_enough_memory_mm(mm, vma_pages(vma)))
 		return -ENOMEM;
 
+	if (security_mmap_addr(vma->vm_start))
+		return -EPERM;
+
 	/*
 	 * The vm_pgoff of a purely anonymous vma should be irrelevant
 	 * until its first write fault, when page's anon_vma and index
@@ -3539,21 +3606,31 @@ long pax_mirror_vma(struct vm_area_struct *vma_m, struct vm_area_struct *vma)
  */
 bool may_expand_vm(struct mm_struct *mm, vm_flags_t flags, unsigned long npages)
 {
+	if ((mm->total_vm + npages) > (ULONG_MAX >> PAGE_SHIFT))
+		gr_learn_resource(current, RLIMIT_AS, ULONG_MAX, 1);
+	else
+		gr_learn_resource(current, RLIMIT_AS, (mm->total_vm + npages) << PAGE_SHIFT, 1);
+
 	if (mm->total_vm + npages > rlimit(RLIMIT_AS) >> PAGE_SHIFT)
 		return false;
 
-	if (is_data_mapping(flags) &&
-	    mm->data_vm + npages > rlimit(RLIMIT_DATA) >> PAGE_SHIFT) {
-		/* Workaround for Valgrind */
-		if (rlimit(RLIMIT_DATA) == 0 &&
-		    mm->data_vm + npages <= rlimit_max(RLIMIT_DATA) >> PAGE_SHIFT)
-			return true;
-		if (!ignore_rlimit_data) {
-			pr_warn_once("%s (%d): VmData %lu exceed data ulimit %lu. Update limits or use boot option ignore_rlimit_data.\n",
-				     current->comm, current->pid,
-				     (mm->data_vm + npages) << PAGE_SHIFT,
-				     rlimit(RLIMIT_DATA));
-			return false;
+	if (is_data_mapping(flags)) {
+		if ((mm->data_vm + npages) > (ULONG_MAX >> PAGE_SHIFT))
+			gr_learn_resource(current, RLIMIT_DATA, ULONG_MAX, 1);
+		else
+			gr_learn_resource(current, RLIMIT_DATA, (mm->data_vm + npages) << PAGE_SHIFT, 1);
+		if (mm->data_vm + npages > rlimit(RLIMIT_DATA) >> PAGE_SHIFT) {
+			/* Workaround for Valgrind */
+			if (rlimit(RLIMIT_DATA) == 0 &&
+			    mm->data_vm + npages <= rlimit_max(RLIMIT_DATA) >> PAGE_SHIFT)
+				return true;
+			if (!ignore_rlimit_data) {
+				pr_warn_once("%s (%d): VmData %lu exceed data ulimit %lu. Update limits or use boot option ignore_rlimit_data.\n",
+					     current->comm, current->pid,
+					     (mm->data_vm + npages) << PAGE_SHIFT,
+					     rlimit(RLIMIT_DATA));
+				return false;
+			}
 		}
 	}
 
@@ -3663,10 +3740,15 @@ static struct vm_area_struct *__install_special_mapping(
 
 #ifdef CONFIG_PAX_MPROTECT
 	if (mm->pax_flags & MF_PAX_MPROTECT) {
+#ifndef CONFIG_PAX_MPROTECT_COMPAT
 		if ((vm_flags & (VM_WRITE | VM_EXEC)) == (VM_WRITE | VM_EXEC))
 			return ERR_PTR(-EPERM);
 		if (!(vm_flags & VM_EXEC))
 			vm_flags &= ~VM_MAYEXEC;
+#else
+		if ((vm_flags & (VM_WRITE | VM_EXEC)) != VM_EXEC)
+			vm_flags &= ~(VM_EXEC | VM_MAYEXEC);
+#endif
 		else
 			vm_flags &= ~VM_MAYWRITE;
 	}
diff --git a/mm/mprotect.c b/mm/mprotect.c
index a6a2dca595ec..5a4f86ea2d3b 100644
--- a/mm/mprotect.c
+++ b/mm/mprotect.c
@@ -576,6 +576,14 @@ static int do_mprotect_pkey(unsigned long start, size_t len,
 
 		/* newflags >> 4 shift VM_MAY% in place of VM_% */
 		if ((newflags & ~(newflags >> 4)) & (VM_READ | VM_WRITE | VM_EXEC)) {
+			if (prot & (PROT_WRITE | PROT_EXEC))
+				gr_log_rwxmprotect(vma);
+
+			error = -EACCES;
+			goto out;
+		}
+
+		if (!gr_acl_handle_mprotect(vma->vm_file, prot)) {
 			error = -EACCES;
 			goto out;
 		}
diff --git a/mm/process_vm_access.c b/mm/process_vm_access.c
index b80063d0f24b..d763a7810196 100644
--- a/mm/process_vm_access.c
+++ b/mm/process_vm_access.c
@@ -13,6 +13,7 @@
 #include <linux/uio.h>
 #include <linux/sched.h>
 #include <linux/highmem.h>
+#include <linux/security.h>
 #include <linux/ptrace.h>
 #include <linux/slab.h>
 #include <linux/syscalls.h>
@@ -202,6 +203,11 @@ static ssize_t process_vm_rw_core(pid_t pid, struct iov_iter *iter,
 		goto free_proc_pages;
 	}
 
+	if (gr_handle_ptrace(task, vm_write ? PTRACE_POKETEXT : PTRACE_ATTACH)) {
+		rc = -EPERM;
+		goto put_task_struct;
+	}
+
 	mm = mm_access(task, PTRACE_MODE_ATTACH_REALCREDS);
 	if (!mm || IS_ERR(mm)) {
 		rc = IS_ERR(mm) ? PTR_ERR(mm) : -ESRCH;
diff --git a/mm/shmem.c b/mm/shmem.c
index 107951b11e71..054adce386fa 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -34,7 +34,7 @@
 #include <linux/uio.h>
 #include <linux/khugepaged.h>
 
-static struct vfsmount *shm_mnt;
+struct vfsmount *shm_mnt;
 
 #ifdef CONFIG_SHMEM
 /*
diff --git a/mm/slab.c b/mm/slab.c
index 64a417a8faac..d9233f3b49ec 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -116,6 +116,7 @@
 #include	<linux/kmemcheck.h>
 #include	<linux/memory.h>
 #include	<linux/prefetch.h>
+#include	<linux/vmalloc.h>
 
 #include	<net/sock.h>
 
@@ -4462,7 +4463,7 @@ static const struct file_operations proc_slabstats_operations = {
 static int __init slab_proc_init(void)
 {
 #ifdef CONFIG_DEBUG_SLAB_LEAK
-	proc_create("slab_allocators", 0, NULL, &proc_slabstats_operations);
+	proc_create("slab_allocators", S_IRUSR, NULL, &proc_slabstats_operations);
 #endif
 	return 0;
 }
@@ -4479,6 +4480,17 @@ bool is_usercopy_object(const void *ptr)
 	if (!slab_is_available())
 		return false;
 
+	if (is_vmalloc_addr(ptr)
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	    && !object_starts_on_stack(ptr)
+#endif
+	) {
+		struct vm_struct *vm = find_vm_area(ptr);
+		if (vm && (vm->flags & VM_USERCOPY))
+			return true;
+		return false;
+	}
+
 	if (!virt_addr_valid(ptr))
 		return false;
 
diff --git a/mm/slab_common.c b/mm/slab_common.c
index 58e689f9fb47..cb5d8a422244 100644
--- a/mm/slab_common.c
+++ b/mm/slab_common.c
@@ -490,7 +490,8 @@ struct kmem_cache *
 kmem_cache_create(const char *name, size_t size, size_t align,
 		  unsigned long flags, void (*ctor)(void *))
 {
-	return __kmem_cache_create_usercopy(name, size, align, flags, 0, 0, ctor);
+	return __kmem_cache_create_usercopy(name, size, align, flags, 0,
+		(flags & SLAB_USERCOPY) ? size : 0, ctor);
 }
 EXPORT_SYMBOL(kmem_cache_create);
 
@@ -524,7 +525,7 @@ static void release_caches(struct list_head *release, bool need_rcu_barrier)
 		rcu_barrier();
 
 	list_for_each_entry_safe(s, s2, release, list) {
-#ifdef SLAB_SUPPORTS_SYSFS
+#if defined(SLAB_SUPPORTS_SYSFS) && !defined(CONFIG_GRKERNSEC_PROC_ADD)
 		sysfs_slab_remove(s);
 #else
 		slab_kmem_cache_release(s);
diff --git a/mm/slob.c b/mm/slob.c
index 7ee5f36aa90f..73c02bace82d 100644
--- a/mm/slob.c
+++ b/mm/slob.c
@@ -67,6 +67,7 @@
 #include <linux/rcupdate.h>
 #include <linux/list.h>
 #include <linux/kmemleak.h>
+#include <linux/vmalloc.h>
 
 #include <trace/events/kmem.h>
 
@@ -546,6 +547,17 @@ bool is_usercopy_object(const void *ptr)
 	if (!slab_is_available())
 		return false;
 
+	if (is_vmalloc_addr(ptr)
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	    && !object_starts_on_stack(ptr)
+#endif
+	) {
+		struct vm_struct *vm = find_vm_area(ptr);
+		if (vm && (vm->flags & VM_USERCOPY))
+			return true;
+		return false;
+	}
+
 	if (!virt_addr_valid(ptr))
 		return false;
 
diff --git a/mm/slub.c b/mm/slub.c
index 0cc4317cfc31..5566ff1577f3 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -211,7 +211,7 @@ struct track {
 
 enum track_item { TRACK_ALLOC, TRACK_FREE };
 
-#ifdef CONFIG_SYSFS
+#if defined(CONFIG_SYSFS) && !defined(CONFIG_GRKERNSEC_PROC_ADD)
 static int sysfs_slab_add(struct kmem_cache *);
 static int sysfs_slab_alias(struct kmem_cache *, const char *);
 static void memcg_propagate_slab_attrs(struct kmem_cache *s);
@@ -237,30 +237,40 @@ static inline void stat(const struct kmem_cache *s, enum stat_item si)
  * 			Core slab cache functions
  *******************************************************************/
 
+static const unsigned long global_rand __latent_entropy;
+
 static inline void *get_freepointer(struct kmem_cache *s, void *object)
 {
-	return *(void **)(object + s->offset);
+	unsigned long freepointer_addr = (unsigned long)object + s->offset;
+	return (void *)(*(unsigned long *)freepointer_addr ^ global_rand ^ freepointer_addr);
 }
 
 static void prefetch_freepointer(const struct kmem_cache *s, void *object)
 {
-	prefetch(object + s->offset);
+	unsigned long freepointer_addr = (unsigned long)object + s->offset;
+	if (object) {
+		void **freepointer_ptr = (void **)(*(unsigned long *)freepointer_addr ^ global_rand ^ freepointer_addr);
+		prefetch(freepointer_ptr);
+	}
 }
 
 static inline void *get_freepointer_safe(struct kmem_cache *s, void *object)
 {
+	unsigned long freepointer_addr;
 	void *p;
 
 	if (!debug_pagealloc_enabled())
 		return get_freepointer(s, object);
 
-	probe_kernel_read(&p, (void **)(object + s->offset), sizeof(p));
-	return p;
+	freepointer_addr = (unsigned long)object + s->offset;
+	probe_kernel_read(&p, (void **)freepointer_addr, sizeof(p));
+	return (void *)((unsigned long)p ^ global_rand ^ freepointer_addr);
 }
 
 static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)
 {
-	*(void **)(object + s->offset) = fp;
+	unsigned long freepointer_addr = (unsigned long)object + s->offset;
+	*(void **)freepointer_addr = (void *)((unsigned long)fp ^ global_rand ^ freepointer_addr);
 }
 
 /* Loop over all objects in a slab */
@@ -566,7 +576,7 @@ static void print_track(const char *s, struct track *t)
 	if (!t->addr)
 		return;
 
-	pr_err("INFO: %s in %pS age=%lu cpu=%u pid=%d\n",
+	pr_err("INFO: %s in %pA age=%lu cpu=%u pid=%d\n",
 	       s, (void *)t->addr, jiffies - t->when, t->cpu, t->pid);
 #ifdef CONFIG_STACKTRACE
 	{
@@ -3815,6 +3825,17 @@ bool is_usercopy_object(const void *ptr)
 	if (!slab_is_available())
 		return false;
 
+	if (is_vmalloc_addr(ptr)
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	    && !object_starts_on_stack(ptr)
+#endif
+	) {
+		struct vm_struct *vm = find_vm_area(ptr);
+		if (vm && (vm->flags & VM_USERCOPY))
+			return true;
+		return false;
+	}
+
 	if (!virt_addr_valid(ptr))
 		return false;
 
@@ -4312,7 +4333,7 @@ void *__kmalloc_node_track_caller(size_t size, gfp_t gfpflags,
 }
 #endif
 
-#ifdef CONFIG_SYSFS
+#if defined(CONFIG_SYSFS) && !defined(CONFIG_GRKERNSEC_PROC_ADD)
 static int count_inuse(struct page *page)
 {
 	return page->inuse;
@@ -4593,7 +4614,11 @@ static int list_locations(struct kmem_cache *s, char *buf,
 		len += sprintf(buf + len, "%7ld ", l->count);
 
 		if (l->addr)
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+			len += sprintf(buf + len, "%pS", NULL);
+#else
 			len += sprintf(buf + len, "%pS", (void *)l->addr);
+#endif
 		else
 			len += sprintf(buf + len, "<not-available>");
 
@@ -4691,12 +4716,12 @@ static void __init resiliency_test(void)
 	validate_slab_cache(kmalloc_caches[9]);
 }
 #else
-#ifdef CONFIG_SYSFS
+#if defined(CONFIG_SYSFS) && !defined(CONFIG_GRKERNSEC_PROC_ADD)
 static void resiliency_test(void) {};
 #endif
 #endif
 
-#ifdef CONFIG_SYSFS
+#if defined(CONFIG_SYSFS) && !defined(CONFIG_GRKERNSEC_PROC_ADD)
 enum slab_stat_type {
 	SL_ALL,			/* All slabs */
 	SL_PARTIAL,		/* Only partially allocated slabs */
@@ -4933,7 +4958,11 @@ static ssize_t ctor_show(struct kmem_cache *s, char *buf)
 {
 	if (!s->ctor)
 		return 0;
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+	return sprintf(buf, "%pS\n", NULL);
+#else
 	return sprintf(buf, "%pS\n", s->ctor);
+#endif
 }
 SLAB_ATTR_RO(ctor);
 
@@ -5632,6 +5661,7 @@ static char *create_unique_id(struct kmem_cache *s)
 	return name;
 }
 
+#if defined(CONFIG_SYSFS) && !defined(CONFIG_GRKERNSEC_PROC_ADD)
 static int sysfs_slab_add(struct kmem_cache *s)
 {
 	int err;
@@ -5703,6 +5733,7 @@ void sysfs_slab_remove(struct kmem_cache *s)
 	kobject_del(&s->kobj);
 	kobject_put(&s->kobj);
 }
+#endif
 
 /*
  * Need to buffer aliases during bootup until sysfs becomes
@@ -5716,6 +5747,7 @@ struct saved_alias {
 
 static struct saved_alias *alias_list;
 
+#if defined(CONFIG_SYSFS) && !defined(CONFIG_GRKERNSEC_PROC_ADD)
 static int sysfs_slab_alias(struct kmem_cache *s, const char *name)
 {
 	struct saved_alias *al;
@@ -5738,6 +5770,7 @@ static int sysfs_slab_alias(struct kmem_cache *s, const char *name)
 	alias_list = al;
 	return 0;
 }
+#endif
 
 static int __init slab_sysfs_init(void)
 {
diff --git a/mm/usercopy.c b/mm/usercopy.c
index 8b3fb1c5bc4e..3dfb587e0e61 100644
--- a/mm/usercopy.c
+++ b/mm/usercopy.c
@@ -94,8 +94,17 @@ static bool overlaps(const void *ptr, unsigned long n, unsigned long low,
 static inline const char *check_kernel_text_object(const void *ptr,
 						   unsigned long n)
 {
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	unsigned long textlow = ktla_ktva((unsigned long)_stext);
+#ifdef CONFIG_MODULES
+	unsigned long texthigh = (unsigned long)MODULES_EXEC_VADDR;
+#else
+	unsigned long texthigh = ktla_ktva((unsigned long)_etext);
+#endif
+#else
 	unsigned long textlow = (unsigned long)_stext;
 	unsigned long texthigh = (unsigned long)_etext;
+#endif
 	unsigned long textlow_linear, texthigh_linear;
 
 	if (overlaps(ptr, n, textlow, texthigh))
@@ -256,12 +265,10 @@ void __check_object_size(const void *ptr, unsigned long n, bool to_user)
 	switch (check_stack_object((unsigned long)ptr, n)) {
 	case NOT_STACK:
 		/* Object is not touching the current process stack. */
-#ifdef CONFIG_BROKEN_SECURITY
 		/* Check for object in kernel to avoid text exposure. */
 		err = check_kernel_text_object(ptr, n);
 		if (err)
 			break;
-#endif
 		return;
 
 	case GOOD_FRAME:
diff --git a/mm/util.c b/mm/util.c
index a4805fd7319c..344fbfb87d9d 100644
--- a/mm/util.c
+++ b/mm/util.c
@@ -134,7 +134,7 @@ void *memdup_user(const void __user *src, size_t len)
 	 * cause pagefault, which makes it pointless to use GFP_NOFS
 	 * or GFP_ATOMIC.
 	 */
-	p = kmalloc_track_caller(len, GFP_KERNEL);
+	p = kmalloc_track_caller(len, GFP_KERNEL|GFP_USERCOPY);
 	if (!p)
 		return ERR_PTR(-ENOMEM);
 
@@ -621,6 +621,9 @@ int get_cmdline(struct task_struct *task, char *buffer, int buflen)
 	if (!mm->arg_end)
 		goto out_mm;	/* Shh! No looking before we're done */
 
+	if (gr_acl_handle_procpidmem(task))
+		goto out_mm;
+
 	down_read(&mm->mmap_sem);
 	arg_start = mm->arg_start;
 	arg_end = mm->arg_end;
diff --git a/mm/vmalloc.c b/mm/vmalloc.c
index f6dfe4de0fcb..333cf4377324 100644
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@ -45,6 +45,21 @@ struct vfree_deferred {
 static DEFINE_PER_CPU(struct vfree_deferred, vfree_deferred);
 static DEFINE_PER_CPU(struct vfree_deferred, vunmap_deferred);
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+struct stack_deferred_llist {
+	struct llist_head list;
+	void *stack;
+	void *lowmem_stack;
+};
+
+struct stack_deferred {
+	struct stack_deferred_llist list;
+	struct work_struct wq;
+};
+
+static DEFINE_PER_CPU(struct stack_deferred, stack_deferred);
+#endif
+
 static void __vunmap(const void *, int);
 
 static void vfree_work(struct work_struct *w)
@@ -52,9 +67,9 @@ static void vfree_work(struct work_struct *w)
 	struct vfree_deferred *p = container_of(w, struct vfree_deferred, wq);
 	struct llist_node *llnode = llist_del_all(&p->list);
 	while (llnode) {
-		void *p = llnode;
+		void *x = llnode;
 		llnode = llist_next(llnode);
-		__vunmap(p, 1);
+		__vunmap(x, 1);
 	}
 }
 
@@ -63,12 +78,30 @@ static void vunmap_work(struct work_struct *w)
 	struct vfree_deferred *p = container_of(w, struct vfree_deferred, wq);
 	struct llist_node *llnode = llist_del_all(&p->list);
 	while (llnode) {
-		void *p = llnode;
+		void *x = llnode;
 		llnode = llist_next(llnode);
-		__vunmap(p, 0);
+		__vunmap(x, 0);
 	}
 }
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+static void unmap_work(struct work_struct *w)
+{
+	struct stack_deferred *p = container_of(w, struct stack_deferred, wq);
+	struct llist_node *llnode = llist_del_all(&p->list.list);
+	while (llnode) {
+		struct stack_deferred_llist *x =
+			llist_entry((struct llist_head *)llnode,
+				     struct stack_deferred_llist, list);
+		void *stack = ACCESS_ONCE(x->stack);
+		void *lowmem_stack = ACCESS_ONCE(x->lowmem_stack);
+		llnode = llist_next(llnode);
+		__vunmap(stack, 0);
+		free_pages((unsigned long)lowmem_stack, THREAD_SIZE_ORDER);
+	}
+}
+#endif
+
 /*** Page table manipulation functions ***/
 
 static void vunmap_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end)
@@ -1278,6 +1311,9 @@ void __init vmalloc_init(void)
 	for_each_possible_cpu(i) {
 		struct vmap_block_queue *vbq;
 		struct vfree_deferred *p;
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+		struct stack_deferred *p2;
+#endif
 
 		vbq = &per_cpu(vmap_block_queue, i);
 		spin_lock_init(&vbq->lock);
@@ -1290,6 +1326,12 @@ void __init vmalloc_init(void)
 		p = &per_cpu(vunmap_deferred, i);
 		init_llist_head(&p->list);
 		INIT_WORK(&p->wq, vunmap_work);
+
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+		p2 = &per_cpu(stack_deferred, i);
+		init_llist_head(&p2->list.list);
+		INIT_WORK(&p2->wq, unmap_work);
+#endif
 	}
 
 	/* Import existing vmlist entries. */
@@ -1436,7 +1478,11 @@ static struct vm_struct *__get_vm_area_node(unsigned long size,
 	if (unlikely(!area))
 		return NULL;
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+	if (!(flags & VM_NO_GUARD) || (start >= VMALLOC_START && end <= VMALLOC_END))
+#else
 	if (!(flags & VM_NO_GUARD))
+#endif
 		size += PAGE_SIZE;
 
 	va = alloc_vmap_area(size, align, start, end, node, gfp_mask);
@@ -1620,7 +1666,6 @@ void vunmap(const void *addr)
 {
 	if (!addr)
 		return;
-
 	if (unlikely(in_interrupt())) {
 		struct vfree_deferred *p = this_cpu_ptr(&vunmap_deferred);
 		if (pax_llist_add((struct llist_node *)addr, &p->list))
@@ -1632,6 +1677,23 @@ void vunmap(const void *addr)
 }
 EXPORT_SYMBOL(vunmap);
 
+#ifdef CONFIG_GRKERNSEC_KSTACKOVERFLOW
+void unmap_process_stacks(struct task_struct *task)
+{
+	if (unlikely(in_interrupt())) {
+		struct stack_deferred *p = this_cpu_ptr(&stack_deferred);
+		struct stack_deferred_llist *list = task->stack;
+		list->stack = task->stack;
+		list->lowmem_stack = task->lowmem_stack;
+		if (llist_add((struct llist_node *)&list->list, &p->list.list))
+			schedule_work(&p->wq);
+	} else {
+		__vunmap(task->stack, 0);
+		free_pages((unsigned long)task->lowmem_stack, THREAD_SIZE_ORDER);
+	}
+}
+#endif
+
 /**
  *	vmap  -  map an array of pages into virtually contiguous space
  *	@pages:		array of page pointers
@@ -1820,6 +1882,14 @@ static void *__vmalloc_node(unsigned long size, unsigned long align,
 				gfp_mask, prot, 0, node, caller);
 }
 
+void *vmalloc_usercopy(unsigned long size)
+{
+	return __vmalloc_node_range(size, 1, VMALLOC_START, VMALLOC_END,
+				    GFP_KERNEL | __GFP_HIGHMEM, PAGE_KERNEL,
+				    VM_USERCOPY, NUMA_NO_NODE,
+				    __builtin_return_address(0));
+}
+
 void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)
 {
 	return __vmalloc_node(size, 1, gfp_mask, prot, NUMA_NO_NODE,
@@ -2736,7 +2806,11 @@ static int s_show(struct seq_file *m, void *p)
 		v->addr, v->addr + v->size, v->size);
 
 	if (v->caller)
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+		seq_printf(m, " %pK", v->caller);
+#else
 		seq_printf(m, " %pS", v->caller);
+#endif
 
 	if (v->nr_pages)
 		seq_printf(m, " pages=%d", v->nr_pages);
diff --git a/mm/vmstat.c b/mm/vmstat.c
index ebb9e91c2e90..6e8df6a7ef5c 100644
--- a/mm/vmstat.c
+++ b/mm/vmstat.c
@@ -27,6 +27,7 @@
 #include <linux/mm_inline.h>
 #include <linux/page_ext.h>
 #include <linux/page_owner.h>
+#include <linux/grsecurity.h>
 
 #include "internal.h"
 
@@ -1477,10 +1478,22 @@ static void *vmstat_start(struct seq_file *m, loff_t *pos)
 	stat_items_size += sizeof(struct vm_event_state);
 #endif
 
-	v = kmalloc(stat_items_size, GFP_KERNEL);
+	v = kzalloc(stat_items_size, GFP_KERNEL);
 	m->private = v;
 	if (!v)
 		return ERR_PTR(-ENOMEM);
+
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+#if defined(CONFIG_GRKERNSEC_PROC_USER) || defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
+        if (!uid_eq(current_uid(), GLOBAL_ROOT_UID)
+#ifdef CONFIG_GRKERNSEC_PROC_USERGROUP
+                && !in_group_p(grsec_proc_gid)
+#endif
+        )
+		return (unsigned long *)m->private + *pos;
+#endif
+#endif
+
 	for (i = 0; i < NR_VM_ZONE_STAT_ITEMS; i++)
 		v[i] = global_page_state(i);
 	v += NR_VM_ZONE_STAT_ITEMS;
@@ -1791,10 +1804,16 @@ static int __init setup_vmstat(void)
 	cpu_notifier_register_done();
 #endif
 #ifdef CONFIG_PROC_FS
-	proc_create("buddyinfo", S_IRUGO, NULL, &fragmentation_file_operations);
-	proc_create("pagetypeinfo", S_IRUGO, NULL, &pagetypeinfo_file_ops);
-	proc_create("vmstat", S_IRUGO, NULL, &proc_vmstat_file_operations);
-	proc_create("zoneinfo", S_IRUGO, NULL, &proc_zoneinfo_file_operations);
+	{
+		mode_t gr_mode = S_IRUGO;
+#ifdef CONFIG_GRKERNSEC_PROC_ADD
+		gr_mode = S_IRUSR;
+#endif
+		proc_create("buddyinfo", gr_mode, NULL, &fragmentation_file_operations);
+		proc_create("pagetypeinfo", gr_mode, NULL, &pagetypeinfo_file_ops);
+		proc_create("vmstat", S_IRUGO, NULL, &proc_vmstat_file_operations);
+		proc_create("zoneinfo", gr_mode, NULL, &proc_zoneinfo_file_operations);
+	}
 #endif
 	return 0;
 }
diff --git a/net/appletalk/atalk_proc.c b/net/appletalk/atalk_proc.c
index af46bc49e1e9..f9adfcdfd5c9 100644
--- a/net/appletalk/atalk_proc.c
+++ b/net/appletalk/atalk_proc.c
@@ -256,7 +256,7 @@ int __init atalk_proc_init(void)
 	struct proc_dir_entry *p;
 	int rc = -ENOMEM;
 
-	atalk_proc_dir = proc_mkdir("atalk", init_net.proc_net);
+	atalk_proc_dir = proc_mkdir_restrict("atalk", init_net.proc_net);
 	if (!atalk_proc_dir)
 		goto out;
 
diff --git a/net/atm/lec.c b/net/atm/lec.c
index 5d2693826afb..fddc41a03767 100644
--- a/net/atm/lec.c
+++ b/net/atm/lec.c
@@ -111,9 +111,9 @@ static inline void lec_arp_put(struct lec_arp_table *entry)
 }
 
 static struct lane2_ops lane2_ops = {
-	lane2_resolve,		/* resolve,             spec 3.1.3 */
-	lane2_associate_req,	/* associate_req,       spec 3.1.4 */
-	NULL			/* associate indicator, spec 3.1.5 */
+	.resolve = lane2_resolve,
+	.associate_req = lane2_associate_req,
+	.associate_indicator = NULL
 };
 
 static unsigned char bus_mac[ETH_ALEN] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
diff --git a/net/atm/mpoa_caches.c b/net/atm/mpoa_caches.c
index 9e60e74c807d..a89fdebeffda 100644
--- a/net/atm/mpoa_caches.c
+++ b/net/atm/mpoa_caches.c
@@ -535,33 +535,32 @@ static void eg_destroy_cache(struct mpoa_client *mpc)
 
 
 static const struct in_cache_ops ingress_ops = {
-	in_cache_add_entry,               /* add_entry       */
-	in_cache_get,                     /* get             */
-	in_cache_get_with_mask,           /* get_with_mask   */
-	in_cache_get_by_vcc,              /* get_by_vcc      */
-	in_cache_put,                     /* put             */
-	in_cache_remove_entry,            /* remove_entry    */
-	cache_hit,                        /* cache_hit       */
-	clear_count_and_expired,          /* clear_count     */
-	check_resolving_entries,          /* check_resolving */
-	refresh_entries,                  /* refresh         */
-	in_destroy_cache                  /* destroy_cache   */
+	.add_entry = in_cache_add_entry,
+	.get = in_cache_get,
+	.get_with_mask = in_cache_get_with_mask,
+	.get_by_vcc = in_cache_get_by_vcc,
+	.put = in_cache_put,
+	.remove_entry = in_cache_remove_entry,
+	.cache_hit = cache_hit,
+	.clear_count = clear_count_and_expired,
+	.check_resolving = check_resolving_entries,
+	.refresh = refresh_entries,
+	.destroy_cache = in_destroy_cache
 };
 
 static const struct eg_cache_ops egress_ops = {
-	eg_cache_add_entry,               /* add_entry        */
-	eg_cache_get_by_cache_id,         /* get_by_cache_id  */
-	eg_cache_get_by_tag,              /* get_by_tag       */
-	eg_cache_get_by_vcc,              /* get_by_vcc       */
-	eg_cache_get_by_src_ip,           /* get_by_src_ip    */
-	eg_cache_put,                     /* put              */
-	eg_cache_remove_entry,            /* remove_entry     */
-	update_eg_cache_entry,            /* update           */
-	clear_expired,                    /* clear_expired    */
-	eg_destroy_cache                  /* destroy_cache    */
+	.add_entry = eg_cache_add_entry,
+	.get_by_cache_id = eg_cache_get_by_cache_id,
+	.get_by_tag = eg_cache_get_by_tag,
+	.get_by_vcc = eg_cache_get_by_vcc,
+	.get_by_src_ip = eg_cache_get_by_src_ip,
+	.put = eg_cache_put,
+	.remove_entry = eg_cache_remove_entry,
+	.update = update_eg_cache_entry,
+	.clear_expired = clear_expired,
+	.destroy_cache = eg_destroy_cache
 };
 
-
 void atm_mpoa_init_cache(struct mpoa_client *mpc)
 {
 	mpc->in_ops = &ingress_ops;
diff --git a/net/can/bcm.c b/net/can/bcm.c
index e4f694dfcf83..62ad3135cf89 100644
--- a/net/can/bcm.c
+++ b/net/can/bcm.c
@@ -1699,7 +1699,7 @@ static int __init bcm_module_init(void)
 	}
 
 	/* create /proc/net/can-bcm directory */
-	proc_dir = proc_mkdir("can-bcm", init_net.proc_net);
+	proc_dir = proc_mkdir_restrict("can-bcm", init_net.proc_net);
 	return 0;
 }
 
diff --git a/net/can/proc.c b/net/can/proc.c
index 85ef7bb0f176..84c0fec26ac8 100644
--- a/net/can/proc.c
+++ b/net/can/proc.c
@@ -514,7 +514,7 @@ static void can_remove_proc_readentry(const char *name)
 void can_init_proc(void)
 {
 	/* create /proc/net/can directory */
-	can_dir = proc_mkdir("can", init_net.proc_net);
+	can_dir = proc_mkdir_restrict("can", init_net.proc_net);
 
 	if (!can_dir) {
 		pr_info("can: failed to create /proc/net/can.\n");
diff --git a/net/core/dev_ioctl.c b/net/core/dev_ioctl.c
index b94b1d293506..da3ed7c4e08e 100644
--- a/net/core/dev_ioctl.c
+++ b/net/core/dev_ioctl.c
@@ -368,8 +368,13 @@ void dev_load(struct net *net, const char *name)
 	no_module = !dev;
 	if (no_module && capable(CAP_NET_ADMIN))
 		no_module = request_module("netdev-%s", name);
-	if (no_module && capable(CAP_SYS_MODULE))
+	if (no_module && capable(CAP_SYS_MODULE)) {
+#ifdef CONFIG_GRKERNSEC_MODHARDEN
+		___request_module(true, "grsec_modharden_netdev", "%s", name);
+#else
 		request_module("%s", name);
+#endif
+	}
 }
 EXPORT_SYMBOL(dev_load);
 
diff --git a/net/core/filter.c b/net/core/filter.c
index 1e16cbf9cc52..2c5b949e871b 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -593,7 +593,11 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,
 
 		/* Unknown instruction. */
 		default:
-			goto err;
+			WARN(1, KERN_ALERT "Unknown sock filter code:%u jt:%u tf:%u k:%u\n",
+				       fp->code, fp->jt, fp->jf, fp->k);
+			kfree(addrs);
+			BUG();
+			return -EINVAL;
 		}
 
 		insn++;
@@ -637,7 +641,7 @@ static int check_load_and_stores(const struct sock_filter *filter, int flen)
 	u16 *masks, memvalid = 0; /* One bit per cell, 16 cells */
 	int pc, ret = 0;
 
-	BUILD_BUG_ON(BPF_MEMWORDS > 16);
+	BUILD_BUG_ON(BPF_MEMWORDS != 16);
 
 	masks = kmalloc_array(flen, sizeof(*masks), GFP_KERNEL);
 	if (!masks)
diff --git a/net/core/net-procfs.c b/net/core/net-procfs.c
index 5518cfaee62b..f2a895f8a8bc 100644
--- a/net/core/net-procfs.c
+++ b/net/core/net-procfs.c
@@ -79,7 +79,13 @@ static void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)
 	struct rtnl_link_stats64 temp;
 	const struct rtnl_link_stats64 *stats = dev_get_stats(dev, &temp);
 
-	seq_printf(seq, "%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu "
+	if (gr_proc_is_restricted())
+		seq_printf(seq, "%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu "
+		   "%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu\n",
+		   dev->name, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL,
+		   0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL);
+	else
+		seq_printf(seq, "%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu "
 		   "%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu\n",
 		   dev->name, stats->rx_bytes, stats->rx_packets,
 		   stats->rx_errors,
@@ -167,7 +173,7 @@ static int softnet_seq_show(struct seq_file *seq, void *v)
 	return 0;
 }
 
-static const struct seq_operations dev_seq_ops = {
+const struct seq_operations dev_seq_ops = {
 	.start = dev_seq_start,
 	.next  = dev_seq_next,
 	.stop  = dev_seq_stop,
@@ -197,7 +203,7 @@ static const struct seq_operations softnet_seq_ops = {
 
 static int softnet_seq_open(struct inode *inode, struct file *file)
 {
-	return seq_open(file, &softnet_seq_ops);
+	return seq_open_restrict(file, &softnet_seq_ops);
 }
 
 static const struct file_operations softnet_seq_fops = {
@@ -284,8 +290,13 @@ static int ptype_seq_show(struct seq_file *seq, void *v)
 		else
 			seq_printf(seq, "%04x", ntohs(pt->type));
 
+#ifdef CONFIG_GRKERNSEC_HIDESYM
+		seq_printf(seq, " %-8s %pf\n",
+			   pt->dev ? pt->dev->name : "", NULL);
+#else
 		seq_printf(seq, " %-8s %pf\n",
 			   pt->dev ? pt->dev->name : "", pt->func);
+#endif
 	}
 
 	return 0;
diff --git a/net/core/pktgen.c b/net/core/pktgen.c
index 306b8f0e03c1..021418787e4b 100644
--- a/net/core/pktgen.c
+++ b/net/core/pktgen.c
@@ -3867,7 +3867,7 @@ static int __net_init pg_net_init(struct net *net)
 	pn->net = net;
 	INIT_LIST_HEAD(&pn->pktgen_threads);
 	pn->pktgen_exiting = false;
-	pn->proc_dir = proc_mkdir(PG_PROC_DIR, pn->net->proc_net);
+	pn->proc_dir = proc_mkdir_restrict(PG_PROC_DIR, pn->net->proc_net);
 	if (!pn->proc_dir) {
 		pr_warn("cannot create /proc/net/%s\n", PG_PROC_DIR);
 		return -ENODEV;
diff --git a/net/core/sock.c b/net/core/sock.c
index 0a3d949c9f9c..f5adedfb636a 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -890,29 +890,30 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 		}
 		break;
 
-	case SO_ATTACH_BPF:
+	case SO_ATTACH_REUSEPORT_CBPF:
 		ret = -EINVAL;
-		if (optlen == sizeof(u32)) {
-			u32 ufd;
+		if (optlen == sizeof(struct sock_fprog)) {
+			struct sock_fprog fprog;
 
 			ret = -EFAULT;
-			if (copy_from_user(&ufd, optval, sizeof(ufd)))
+			if (copy_from_user(&fprog, optval, sizeof(fprog)))
 				break;
 
-			ret = sk_attach_bpf(ufd, sk);
+			ret = sk_reuseport_attach_filter(&fprog, sk);
 		}
 		break;
 
-	case SO_ATTACH_REUSEPORT_CBPF:
+#ifndef GRKERNSEC_BPF_HARDEN
+	case SO_ATTACH_BPF:
 		ret = -EINVAL;
-		if (optlen == sizeof(struct sock_fprog)) {
-			struct sock_fprog fprog;
+		if (optlen == sizeof(u32)) {
+			u32 ufd;
 
 			ret = -EFAULT;
-			if (copy_from_user(&fprog, optval, sizeof(fprog)))
+			if (copy_from_user(&ufd, optval, sizeof(ufd)))
 				break;
 
-			ret = sk_reuseport_attach_filter(&fprog, sk);
+			ret = sk_attach_bpf(ufd, sk);
 		}
 		break;
 
@@ -929,6 +930,8 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 		}
 		break;
 
+#endif
+
 	case SO_DETACH_FILTER:
 		ret = sk_detach_filter(sk);
 		break;
diff --git a/net/core/sysctl_net_core.c b/net/core/sysctl_net_core.c
index 0fb5ea5d0022..7db59f71a354 100644
--- a/net/core/sysctl_net_core.c
+++ b/net/core/sysctl_net_core.c
@@ -286,7 +286,7 @@ static struct ctl_table net_core_table[] = {
 		.mode		= 0444,
 		.proc_handler	= proc_do_rss_key,
 	},
-#ifdef CONFIG_BPF_JIT
+#if defined(CONFIG_BPF_JIT) && !defined(CONFIG_GRKERNSEC_BPF_HARDEN)
 	{
 		.procname	= "bpf_jit_enable",
 		.data		= &bpf_jit_enable,
diff --git a/net/decnet/dn_dev.c b/net/decnet/dn_dev.c
index b2c26b081134..41f803e35da3 100644
--- a/net/decnet/dn_dev.c
+++ b/net/decnet/dn_dev.c
@@ -201,7 +201,7 @@ static struct dn_dev_sysctl_table {
 		.extra1 = &min_t3,
 		.extra2 = &max_t3
 	},
-	{0}
+	{ }
 	},
 };
 
diff --git a/net/ipv4/devinet.c b/net/ipv4/devinet.c
index 9744e3a0b93b..cb05c97954a5 100644
--- a/net/ipv4/devinet.c
+++ b/net/ipv4/devinet.c
@@ -69,7 +69,8 @@
 
 static struct ipv4_devconf ipv4_devconf = {
 	.data = {
-		[IPV4_DEVCONF_ACCEPT_REDIRECTS - 1] = 1,
+		[IPV4_DEVCONF_ACCEPT_REDIRECTS - 1] = 0,
+		[IPV4_DEVCONF_RP_FILTER - 1] = 1,
 		[IPV4_DEVCONF_SEND_REDIRECTS - 1] = 1,
 		[IPV4_DEVCONF_SECURE_REDIRECTS - 1] = 1,
 		[IPV4_DEVCONF_SHARED_MEDIA - 1] = 1,
@@ -80,7 +81,8 @@ static struct ipv4_devconf ipv4_devconf = {
 
 static struct ipv4_devconf ipv4_devconf_dflt = {
 	.data = {
-		[IPV4_DEVCONF_ACCEPT_REDIRECTS - 1] = 1,
+		[IPV4_DEVCONF_ACCEPT_REDIRECTS - 1] = 0,
+		[IPV4_DEVCONF_RP_FILTER - 1] = 1,
 		[IPV4_DEVCONF_SEND_REDIRECTS - 1] = 1,
 		[IPV4_DEVCONF_SECURE_REDIRECTS - 1] = 1,
 		[IPV4_DEVCONF_SHARED_MEDIA - 1] = 1,
diff --git a/net/ipv4/inet_hashtables.c b/net/ipv4/inet_hashtables.c
index ca97835bfec4..4876208b469b 100644
--- a/net/ipv4/inet_hashtables.c
+++ b/net/ipv4/inet_hashtables.c
@@ -19,6 +19,7 @@
 #include <linux/slab.h>
 #include <linux/wait.h>
 #include <linux/vmalloc.h>
+#include <linux/security.h>
 
 #include <net/addrconf.h>
 #include <net/inet_connection_sock.h>
@@ -57,6 +58,8 @@ u32 sk_ehashfn(const struct sock *sk)
 			    sk->sk_daddr, sk->sk_dport);
 }
 
+extern void gr_update_task_in_ip_table(const struct inet_sock *inet);
+
 /*
  * Allocate and initialize a new local port bind bucket.
  * The bindhash mutex for snum's hash chain must be held here.
@@ -644,6 +647,9 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 	spin_unlock(&head->lock);
 	if (tw)
 		inet_twsk_deschedule_put(tw);
+
+	gr_update_task_in_ip_table(inet_sk(sk));
+
 	local_bh_enable();
 	return 0;
 }
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index d6feabb03516..9cb3988a24b4 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -148,6 +148,10 @@
 #include <linux/netlink.h>
 #include <net/dst_metadata.h>
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+extern int grsec_enable_blackhole;
+#endif
+
 /*
  *	Process Router Attention IP option (RFC 2113)
  */
@@ -223,6 +227,9 @@ static int ip_local_deliver_finish(struct net *net, struct sock *sk, struct sk_b
 			if (!raw) {
 				if (xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
 					__IP_INC_STATS(net, IPSTATS_MIB_INUNKNOWNPROTOS);
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+					if (!grsec_enable_blackhole || (skb->dev->flags & IFF_LOOPBACK))
+#endif
 					icmp_send(skb, ICMP_DEST_UNREACH,
 						  ICMP_PROT_UNREACH, 0);
 				}
diff --git a/net/ipv4/ip_vti.c b/net/ipv4/ip_vti.c
index ede4d43f4dad..f7953fe623f4 100644
--- a/net/ipv4/ip_vti.c
+++ b/net/ipv4/ip_vti.c
@@ -593,7 +593,7 @@ static int vti_device_event(struct notifier_block *unused,
 	return NOTIFY_DONE;
 }
 
-static struct notifier_block vti_notifier_block = {
+static notifier_block_no_const vti_notifier_block __read_only = {
 	.notifier_call = vti_device_event,
 };
 
diff --git a/net/ipv4/netfilter/ipt_CLUSTERIP.c b/net/ipv4/netfilter/ipt_CLUSTERIP.c
index 4a9e6db9df8d..06174e18b6ec 100644
--- a/net/ipv4/netfilter/ipt_CLUSTERIP.c
+++ b/net/ipv4/netfilter/ipt_CLUSTERIP.c
@@ -730,7 +730,7 @@ static int clusterip_net_init(struct net *net)
 	spin_lock_init(&cn->lock);
 
 #ifdef CONFIG_PROC_FS
-	cn->procdir = proc_mkdir("ipt_CLUSTERIP", net->proc_net);
+	cn->procdir = proc_mkdir_restrict("ipt_CLUSTERIP", net->proc_net);
 	if (!cn->procdir) {
 		pr_err("Unable to proc dir entry\n");
 		return -ENOMEM;
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index f875f6ff8f0e..fdb89dc17561 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -232,7 +232,7 @@ static const struct seq_operations rt_cache_seq_ops = {
 
 static int rt_cache_seq_open(struct inode *inode, struct file *file)
 {
-	return seq_open(file, &rt_cache_seq_ops);
+	return seq_open_restrict(file, &rt_cache_seq_ops);
 }
 
 static const struct file_operations rt_cache_seq_fops = {
@@ -323,7 +323,7 @@ static const struct seq_operations rt_cpu_seq_ops = {
 
 static int rt_cpu_seq_open(struct inode *inode, struct file *file)
 {
-	return seq_open(file, &rt_cpu_seq_ops);
+	return seq_open_restrict(file, &rt_cpu_seq_ops);
 }
 
 static const struct file_operations rt_cpu_seq_fops = {
@@ -361,7 +361,7 @@ static int rt_acct_proc_show(struct seq_file *m, void *v)
 
 static int rt_acct_proc_open(struct inode *inode, struct file *file)
 {
-	return single_open(file, rt_acct_proc_show, NULL);
+	return single_open_restrict(file, rt_acct_proc_show, NULL);
 }
 
 static const struct file_operations rt_acct_proc_fops = {
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index e76b5f31657e..948899991da1 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -288,11 +288,13 @@ static void tcp_ecn_rcv_synack(struct tcp_sock *tp, const struct tcphdr *th)
 		tp->ecn_flags &= ~TCP_ECN_OK;
 }
 
+#ifndef CONFIG_GRKERNSEC_NO_SIMULT_CONNECT
 static void tcp_ecn_rcv_syn(struct tcp_sock *tp, const struct tcphdr *th)
 {
 	if ((tp->ecn_flags & TCP_ECN_OK) && (!th->ece || !th->cwr))
 		tp->ecn_flags &= ~TCP_ECN_OK;
 }
+#endif
 
 static bool tcp_ecn_rcv_ecn_echo(const struct tcp_sock *tp, const struct tcphdr *th)
 {
@@ -5820,6 +5822,7 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 	    tcp_paws_reject(&tp->rx_opt, 0))
 		goto discard_and_undo;
 
+#ifndef CONFIG_GRKERNSEC_NO_SIMULT_CONNECT
 	if (th->syn) {
 		/* We see SYN without ACK. It is attempt of
 		 * simultaneous connect with crossed SYNs.
@@ -5871,6 +5874,7 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 		goto discard;
 #endif
 	}
+#endif
 	/* "fifth, if neither of the SYN or RST bits is set then
 	 * drop the segment and return."
 	 */
@@ -5914,7 +5918,7 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
 			goto discard;
 
 		if (th->syn) {
-			if (th->fin)
+			if (th->fin || th->urg || th->psh)
 				goto discard;
 			/* It is possible that we process SYN packets from backlog,
 			 * so we need to make sure to disable BH right there.
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index e02355e1f069..2b781b3bb3ce 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -87,6 +87,10 @@
 int sysctl_tcp_tw_reuse __read_mostly;
 int sysctl_tcp_low_latency __read_mostly;
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+extern int grsec_enable_blackhole;
+#endif
+
 #ifdef CONFIG_TCP_MD5SIG
 static int tcp_v4_md5_hash_hdr(char *md5_hash, const struct tcp_md5sig_key *key,
 			       __be32 daddr, __be32 saddr, const struct tcphdr *th);
@@ -1431,6 +1435,9 @@ int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
 	return 0;
 
 reset:
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+	if (!grsec_enable_blackhole)
+#endif
 	tcp_v4_send_reset(rsk, skb);
 discard:
 	kfree_skb(skb);
@@ -1641,12 +1648,19 @@ int tcp_v4_rcv(struct sk_buff *skb)
 lookup:
 	sk = __inet_lookup_skb(&tcp_hashinfo, skb, __tcp_hdrlen(th), th->source,
 			       th->dest, &refcounted);
-	if (!sk)
+	if (!sk) {
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+		ret = 1;
+#endif
 		goto no_tcp_socket;
-
+	}
 process:
-	if (sk->sk_state == TCP_TIME_WAIT)
+	if (sk->sk_state == TCP_TIME_WAIT) {
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+		ret = 2;
+#endif
 		goto do_time_wait;
+	}
 
 	if (sk->sk_state == TCP_NEW_SYN_RECV) {
 		struct request_sock *req = inet_reqsk(sk);
@@ -1736,6 +1750,10 @@ int tcp_v4_rcv(struct sk_buff *skb)
 bad_packet:
 		__TCP_INC_STATS(net, TCP_MIB_INERRS);
 	} else {
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+		if (!grsec_enable_blackhole || (ret == 1 &&
+		    (skb->dev->flags & IFF_LOOPBACK)))
+#endif
 		tcp_v4_send_reset(NULL, skb);
 	}
 
diff --git a/net/ipv4/tcp_minisocks.c b/net/ipv4/tcp_minisocks.c
index 8615a6b8550f..772fcdb56aca 100644
--- a/net/ipv4/tcp_minisocks.c
+++ b/net/ipv4/tcp_minisocks.c
@@ -27,6 +27,10 @@
 #include <net/inet_common.h>
 #include <net/xfrm.h>
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+extern int grsec_enable_blackhole;
+#endif
+
 int sysctl_tcp_abort_on_overflow __read_mostly;
 
 struct inet_timewait_death_row tcp_death_row = {
@@ -787,7 +791,10 @@ struct sock *tcp_check_req(struct sock *sk, struct sk_buff *skb,
 		 * avoid becoming vulnerable to outside attack aiming at
 		 * resetting legit local connections.
 		 */
-		req->rsk_ops->send_reset(sk, skb);
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+		if (!grsec_enable_blackhole)
+#endif
+			req->rsk_ops->send_reset(sk, skb);
 	} else if (fastopen) { /* received a valid RST pkt */
 		reqsk_fastopen_remove(sk, req, true);
 		tcp_reset(sk);
diff --git a/net/ipv4/tcp_timer.c b/net/ipv4/tcp_timer.c
index b1e65b3b4361..fafad4789eda 100644
--- a/net/ipv4/tcp_timer.c
+++ b/net/ipv4/tcp_timer.c
@@ -22,6 +22,10 @@
 #include <linux/gfp.h>
 #include <net/tcp.h>
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+extern int grsec_lastack_retries;
+#endif
+
 int sysctl_tcp_thin_linear_timeouts __read_mostly;
 
 /**
@@ -232,6 +236,13 @@ static int tcp_write_timeout(struct sock *sk)
 		}
 	}
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+	if ((sk->sk_state == TCP_LAST_ACK) &&
+	    (grsec_lastack_retries > 0) &&
+	    (grsec_lastack_retries < retry_until))
+		retry_until = grsec_lastack_retries;
+#endif
+
 	if (retransmits_timed_out(sk, retry_until,
 				  syn_set ? 0 : icsk->icsk_user_timeout, syn_set)) {
 		/* Has it gone just too far? */
diff --git a/net/ipv4/udp.c b/net/ipv4/udp.c
index b2638baedc13..f5f5d03bd5c5 100644
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@ -87,6 +87,7 @@
 #include <linux/types.h>
 #include <linux/fcntl.h>
 #include <linux/module.h>
+#include <linux/security.h>
 #include <linux/socket.h>
 #include <linux/sockios.h>
 #include <linux/igmp.h>
@@ -116,6 +117,10 @@
 #include <net/sock_reuseport.h>
 #include <net/addrconf.h>
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+extern int grsec_enable_blackhole;
+#endif
+
 struct udp_table udp_table __read_mostly;
 EXPORT_SYMBOL(udp_table);
 
@@ -615,6 +620,9 @@ static inline bool __udp_is_mcast_sock(struct net *net, struct sock *sk,
 	return true;
 }
 
+extern int gr_search_udp_recvmsg(struct sock *sk, const struct sk_buff *skb);
+extern int gr_search_udp_sendmsg(struct sock *sk, struct sockaddr_in *addr);
+
 /*
  * This routine is called by the ICMP module when it gets some
  * sort of error condition.  If err < 0 then the socket should
@@ -941,9 +949,18 @@ int udp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
 		dport = usin->sin_port;
 		if (dport == 0)
 			return -EINVAL;
+
+		err = gr_search_udp_sendmsg(sk, usin);
+		if (err)
+			return err;
 	} else {
 		if (sk->sk_state != TCP_ESTABLISHED)
 			return -EDESTADDRREQ;
+
+		err = gr_search_udp_sendmsg(sk, NULL);
+		if (err)
+			return err;
+
 		daddr = inet->inet_daddr;
 		dport = inet->inet_dport;
 		/* Open fast path for connected socket.
@@ -1296,6 +1313,9 @@ int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
 			goto csum_copy_err;
 	}
 
+	if (likely(!err))
+		err = gr_search_udp_recvmsg(sk, skb);
+
 	if (unlikely(err)) {
 		trace_kfree_skb(skb, udp_recvmsg);
 		if (!peeked) {
@@ -1812,6 +1832,9 @@ int __udp4_lib_rcv(struct sk_buff *skb, struct udp_table *udptable,
 		goto csum_error;
 
 	__UDP_INC_STATS(net, UDP_MIB_NOPORTS, proto == IPPROTO_UDPLITE);
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+	if (!grsec_enable_blackhole || (skb->dev->flags & IFF_LOOPBACK))
+#endif
 	icmp_send(skb, ICMP_DEST_UNREACH, ICMP_PORT_UNREACH, 0);
 
 	/*
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index 3fcd651d5470..84104589e732 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -199,7 +199,7 @@ static struct ipv6_devconf ipv6_devconf __read_mostly = {
 	.hop_limit		= IPV6_DEFAULT_HOPLIMIT,
 	.mtu6			= IPV6_MIN_MTU,
 	.accept_ra		= 1,
-	.accept_redirects	= 1,
+	.accept_redirects	= 0,
 	.autoconf		= 1,
 	.force_mld_version	= 0,
 	.mldv1_unsolicited_report_interval = 10 * HZ,
@@ -245,7 +245,7 @@ static struct ipv6_devconf ipv6_devconf_dflt __read_mostly = {
 	.hop_limit		= IPV6_DEFAULT_HOPLIMIT,
 	.mtu6			= IPV6_MIN_MTU,
 	.accept_ra		= 1,
-	.accept_redirects	= 1,
+	.accept_redirects	= 0,
 	.autoconf		= 1,
 	.force_mld_version	= 0,
 	.mldv1_unsolicited_report_interval = 10 * HZ,
@@ -4130,16 +4130,23 @@ static const struct file_operations if6_fops = {
 	.release	= seq_release_net,
 };
 
+extern void register_ipv6_seq_ops_addr(struct seq_operations *addr);
+extern void unregister_ipv6_seq_ops_addr(void);
+
 static int __net_init if6_proc_net_init(struct net *net)
 {
-	if (!proc_create("if_inet6", S_IRUGO, net->proc_net, &if6_fops))
+	register_ipv6_seq_ops_addr(&if6_seq_ops);
+	if (!proc_create("if_inet6", S_IRUGO, net->proc_net, &if6_fops)) {
+		unregister_ipv6_seq_ops_addr();
 		return -ENOMEM;
+	}
 	return 0;
 }
 
 static void __net_exit if6_proc_net_exit(struct net *net)
 {
 	remove_proc_entry("if_inet6", net->proc_net);
+	unregister_ipv6_seq_ops_addr();
 }
 
 static struct pernet_operations if6_proc_net_ops = {
diff --git a/net/ipv6/proc.c b/net/ipv6/proc.c
index 9e557127ec52..6572951aa2b8 100644
--- a/net/ipv6/proc.c
+++ b/net/ipv6/proc.c
@@ -324,7 +324,7 @@ static int __net_init ipv6_proc_init_net(struct net *net)
 	if (!proc_create("snmp6", S_IRUGO, net->proc_net, &snmp6_seq_fops))
 		goto proc_snmp6_fail;
 
-	net->mib.proc_net_devsnmp6 = proc_mkdir("dev_snmp6", net->proc_net);
+	net->mib.proc_net_devsnmp6 = proc_mkdir_restrict("dev_snmp6", net->proc_net);
 	if (!net->mib.proc_net_devsnmp6)
 		goto proc_dev_snmp6_fail;
 	return 0;
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index b2e61a0e8d0a..bf47484f180f 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -101,6 +101,10 @@ static void inet6_sk_rx_dst_set(struct sock *sk, const struct sk_buff *skb)
 	}
 }
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+extern int grsec_enable_blackhole;
+#endif
+
 static __u32 tcp_v6_init_sequence(const struct sk_buff *skb)
 {
 	return secure_tcpv6_sequence_number(ipv6_hdr(skb)->daddr.s6_addr32,
@@ -1304,6 +1308,9 @@ static int tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb)
 	return 0;
 
 reset:
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+	if (!grsec_enable_blackhole)
+#endif
 	tcp_v6_send_reset(sk, skb);
 discard:
 	if (opt_skb)
@@ -1408,12 +1415,20 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 	sk = __inet6_lookup_skb(&tcp_hashinfo, skb, __tcp_hdrlen(th),
 				th->source, th->dest, inet6_iif(skb),
 				&refcounted);
-	if (!sk)
+	if (!sk) {
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+		ret = 1;
+#endif
 		goto no_tcp_socket;
+	}
 
 process:
-	if (sk->sk_state == TCP_TIME_WAIT)
+	if (sk->sk_state == TCP_TIME_WAIT) {
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+		ret = 2;
+#endif
 		goto do_time_wait;
+	}
 
 	if (sk->sk_state == TCP_NEW_SYN_RECV) {
 		struct request_sock *req = inet_reqsk(sk);
@@ -1503,6 +1518,10 @@ static int tcp_v6_rcv(struct sk_buff *skb)
 bad_packet:
 		__TCP_INC_STATS(net, TCP_MIB_INERRS);
 	} else {
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+		if (!grsec_enable_blackhole || (ret == 1 &&
+		    (skb->dev->flags & IFF_LOOPBACK)))
+#endif
 		tcp_v6_send_reset(NULL, skb);
 	}
 
diff --git a/net/ipv6/udp.c b/net/ipv6/udp.c
index b4a9cc1686c4..c8715aabe216 100644
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@ -78,6 +78,10 @@ static u32 udp6_ehashfn(const struct net *net,
 			       udp_ipv6_hash_secret + net_hash_mix(net));
 }
 
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+extern int grsec_enable_blackhole;
+#endif
+
 static u32 udp6_portaddr_hash(const struct net *net,
 			      const struct in6_addr *addr6,
 			      unsigned int port)
@@ -846,6 +850,9 @@ int __udp6_lib_rcv(struct sk_buff *skb, struct udp_table *udptable,
 		goto csum_error;
 
 	__UDP6_INC_STATS(net, UDP_MIB_NOPORTS, proto == IPPROTO_UDPLITE);
+#ifdef CONFIG_GRKERNSEC_BLACKHOLE
+	if (!grsec_enable_blackhole || (skb->dev->flags & IFF_LOOPBACK))
+#endif
 	icmpv6_send(skb, ICMPV6_DEST_UNREACH, ICMPV6_PORT_UNREACH, 0);
 
 	kfree_skb(skb);
diff --git a/net/ipx/ipx_proc.c b/net/ipx/ipx_proc.c
index c1d247ebe916..9e5949d06ef5 100644
--- a/net/ipx/ipx_proc.c
+++ b/net/ipx/ipx_proc.c
@@ -289,7 +289,7 @@ int __init ipx_proc_init(void)
 	struct proc_dir_entry *p;
 	int rc = -ENOMEM;
 
-	ipx_proc_dir = proc_mkdir("ipx", init_net.proc_net);
+	ipx_proc_dir = proc_mkdir_restrict("ipx", init_net.proc_net);
 
 	if (!ipx_proc_dir)
 		goto out;
diff --git a/net/irda/irproc.c b/net/irda/irproc.c
index b9ac598e2116..f88cc5627cf9 100644
--- a/net/irda/irproc.c
+++ b/net/irda/irproc.c
@@ -66,7 +66,7 @@ void __init irda_proc_register(void)
 {
 	int i;
 
-	proc_irda = proc_mkdir("irda", init_net.proc_net);
+	proc_irda = proc_mkdir_restrict("irda", init_net.proc_net);
 	if (proc_irda == NULL)
 		return;
 
diff --git a/net/llc/llc_proc.c b/net/llc/llc_proc.c
index 29c509c54bb2..c19322a9c8e1 100644
--- a/net/llc/llc_proc.c
+++ b/net/llc/llc_proc.c
@@ -247,7 +247,7 @@ int __init llc_proc_init(void)
 	int rc = -ENOMEM;
 	struct proc_dir_entry *p;
 
-	llc_proc_dir = proc_mkdir("llc", init_net.proc_net);
+	llc_proc_dir = proc_mkdir_restrict("llc", init_net.proc_net);
 	if (!llc_proc_dir)
 		goto out;
 
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index e8d56d9a4df2..473bc8e7adec 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -1166,6 +1166,16 @@ config NETFILTER_XT_MATCH_ESP
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config NETFILTER_XT_MATCH_GRADM
+	tristate '"gradm" match support'
+	depends on NETFILTER_XTABLES && NETFILTER_ADVANCED
+	depends on GRKERNSEC && !GRKERNSEC_NO_RBAC
+	---help---
+	  The gradm match allows to match on grsecurity RBAC being enabled.
+	  It is useful when iptables rules are applied early on bootup to
+	  prevent connections to the machine (except from a trusted host)
+	  while the RBAC system is disabled.
+
 config NETFILTER_XT_MATCH_HASHLIMIT
 	tristate '"hashlimit" match support'
 	depends on IP6_NF_IPTABLES || IP6_NF_IPTABLES=n
diff --git a/net/netfilter/Makefile b/net/netfilter/Makefile
index c23c3c84416f..7568d8b46d3e 100644
--- a/net/netfilter/Makefile
+++ b/net/netfilter/Makefile
@@ -149,6 +149,7 @@ obj-$(CONFIG_NETFILTER_XT_MATCH_DEVGROUP) += xt_devgroup.o
 obj-$(CONFIG_NETFILTER_XT_MATCH_DSCP) += xt_dscp.o
 obj-$(CONFIG_NETFILTER_XT_MATCH_ECN) += xt_ecn.o
 obj-$(CONFIG_NETFILTER_XT_MATCH_ESP) += xt_esp.o
+obj-$(CONFIG_NETFILTER_XT_MATCH_GRADM) += xt_gradm.o
 obj-$(CONFIG_NETFILTER_XT_MATCH_HASHLIMIT) += xt_hashlimit.o
 obj-$(CONFIG_NETFILTER_XT_MATCH_HELPER) += xt_helper.o
 obj-$(CONFIG_NETFILTER_XT_MATCH_HL) += xt_hl.o
diff --git a/net/netfilter/xt_gradm.c b/net/netfilter/xt_gradm.c
new file mode 100644
index 000000000000..a7cb915fe1cf
--- /dev/null
+++ b/net/netfilter/xt_gradm.c
@@ -0,0 +1,51 @@
+/*
+ *	gradm match for netfilter
+ *	Copyright (c) Zbigniew Krzystolik, 2010
+ *
+ *	This program is free software; you can redistribute it and/or modify
+ *	it under the terms of the GNU General Public License; either version
+ *	2 or 3 as published by the Free Software Foundation.
+ */
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/skbuff.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/grsecurity.h>
+#include <linux/netfilter/xt_gradm.h>
+
+static bool
+gradm_mt(const struct sk_buff *skb, struct xt_action_param *par)
+{
+	const struct xt_gradm_mtinfo *info = par->matchinfo;
+	bool retval = false;
+	if (gr_acl_is_enabled())
+		retval = true;
+	return retval ^ info->invflags;
+}
+
+static struct xt_match gradm_mt_reg __read_mostly = {
+		.name       = "gradm",
+		.revision   = 0,
+		.family     = NFPROTO_UNSPEC,
+		.match      = gradm_mt,
+		.matchsize  = XT_ALIGN(sizeof(struct xt_gradm_mtinfo)),
+		.me         = THIS_MODULE,
+};
+
+static int __init gradm_mt_init(void)
+{
+	return xt_register_match(&gradm_mt_reg);
+}
+
+static void __exit gradm_mt_exit(void)
+{
+	xt_unregister_match(&gradm_mt_reg);
+}
+
+module_init(gradm_mt_init);
+module_exit(gradm_mt_exit);
+MODULE_AUTHOR("Zbigniew Krzystolik <zbyniu@destrukcja.pl>");
+MODULE_DESCRIPTION("Xtables: Grsecurity RBAC match");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ipt_gradm");
+MODULE_ALIAS("ip6t_gradm");
diff --git a/net/netfilter/xt_hashlimit.c b/net/netfilter/xt_hashlimit.c
index b89b688e9d01..c9383a252196 100644
--- a/net/netfilter/xt_hashlimit.c
+++ b/net/netfilter/xt_hashlimit.c
@@ -1065,11 +1065,11 @@ static int __net_init hashlimit_proc_net_init(struct net *net)
 {
 	struct hashlimit_net *hashlimit_net = hashlimit_pernet(net);
 
-	hashlimit_net->ipt_hashlimit = proc_mkdir("ipt_hashlimit", net->proc_net);
+	hashlimit_net->ipt_hashlimit = proc_mkdir_restrict("ipt_hashlimit", net->proc_net);
 	if (!hashlimit_net->ipt_hashlimit)
 		return -ENOMEM;
 #if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)
-	hashlimit_net->ip6t_hashlimit = proc_mkdir("ip6t_hashlimit", net->proc_net);
+	hashlimit_net->ip6t_hashlimit = proc_mkdir_restrict("ip6t_hashlimit", net->proc_net);
 	if (!hashlimit_net->ip6t_hashlimit) {
 		remove_proc_entry("ipt_hashlimit", net->proc_net);
 		return -ENOMEM;
diff --git a/net/netfilter/xt_recent.c b/net/netfilter/xt_recent.c
index e3b7a09b103e..ee271acf97c1 100644
--- a/net/netfilter/xt_recent.c
+++ b/net/netfilter/xt_recent.c
@@ -639,7 +639,7 @@ static int __net_init recent_proc_net_init(struct net *net)
 {
 	struct recent_net *recent_net = recent_pernet(net);
 
-	recent_net->xt_recent = proc_mkdir("xt_recent", net->proc_net);
+	recent_net->xt_recent = proc_mkdir_restrict("xt_recent", net->proc_net);
 	if (!recent_net->xt_recent)
 		return -ENOMEM;
 	return 0;
diff --git a/net/socket.c b/net/socket.c
index 610bc0e9bd35..1991a222de26 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -89,6 +89,7 @@
 #include <linux/magic.h>
 #include <linux/slab.h>
 #include <linux/xattr.h>
+#include <linux/in.h>
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
@@ -107,6 +108,7 @@
 #include <linux/atalk.h>
 #include <net/busy_poll.h>
 #include <linux/errqueue.h>
+#include <linux/grsock.h>
 
 #ifdef CONFIG_NET_RX_BUSY_POLL
 unsigned int sysctl_net_busy_read __read_mostly;
@@ -160,7 +162,7 @@ static const struct file_operations socket_file_ops = {
  */
 
 static DEFINE_SPINLOCK(net_family_lock);
-static const struct net_proto_family __rcu *net_families[NPROTO] __read_mostly;
+const struct net_proto_family __rcu *net_families[NPROTO] __read_mostly;
 
 /*
  *	Statistics counters of the socket lists
@@ -369,7 +371,7 @@ static struct dentry *sockfs_mount(struct file_system_type *fs_type,
 				  &sockfs_dentry_operations, SOCKFS_MAGIC);
 }
 
-static struct vfsmount *sock_mnt __read_mostly;
+struct vfsmount *sock_mnt __read_mostly;
 
 static struct file_system_type sock_fs_type = {
 	.name =		"sockfs",
@@ -1108,6 +1110,8 @@ int __sock_create(struct net *net, int family, int type, int protocol,
 		return -EAFNOSUPPORT;
 	if (type < 0 || type >= SOCK_MAX)
 		return -EINVAL;
+	if (protocol < 0)
+		return -EINVAL;
 
 	/* Compatibility.
 
@@ -1124,6 +1128,20 @@ int __sock_create(struct net *net, int family, int type, int protocol,
 	if (err)
 		return err;
 
+	if(!kern && !gr_search_socket(family, type, protocol)) {
+		if (rcu_access_pointer(net_families[family]) == NULL)
+			return -EAFNOSUPPORT;
+		else
+			return -EACCES;
+	}
+
+	if (!kern && gr_handle_sock_all(family, type, protocol)) {
+		if (rcu_access_pointer(net_families[family]) == NULL)
+			return -EAFNOSUPPORT;
+		else
+			return -EACCES;
+	}
+
 	/*
 	 *	Allocate the socket and allow the family to set things up. if
 	 *	the protocol is 0, the family is instructed to select an appropriate
@@ -1375,6 +1393,14 @@ SYSCALL_DEFINE3(bind, int, fd, struct sockaddr __user *, umyaddr, int, addrlen)
 	if (sock) {
 		err = move_addr_to_kernel(umyaddr, addrlen, &address);
 		if (err >= 0) {
+			if (gr_handle_sock_server((struct sockaddr *)&address)) {
+				err = -EACCES;
+				goto error;
+			}
+			err = gr_search_bind(sock, (struct sockaddr_in *)&address);
+			if (err)
+				goto error;
+
 			err = security_socket_bind(sock,
 						   (struct sockaddr *)&address,
 						   addrlen);
@@ -1383,6 +1409,7 @@ SYSCALL_DEFINE3(bind, int, fd, struct sockaddr __user *, umyaddr, int, addrlen)
 						      (struct sockaddr *)
 						      &address, addrlen);
 		}
+error:
 		fput_light(sock->file, fput_needed);
 	}
 	return err;
@@ -1406,10 +1433,20 @@ SYSCALL_DEFINE2(listen, int, fd, int, backlog)
 		if ((unsigned int)backlog > somaxconn)
 			backlog = somaxconn;
 
+		if (gr_handle_sock_server_other(sock->sk)) {
+			err = -EPERM;
+			goto error;
+		}
+
+		err = gr_search_listen(sock);
+		if (err)
+			goto error;
+
 		err = security_socket_listen(sock, backlog);
 		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
+error:
 		fput_light(sock->file, fput_needed);
 	}
 	return err;
@@ -1453,6 +1490,18 @@ SYSCALL_DEFINE4(accept4, int, fd, struct sockaddr __user *, upeer_sockaddr,
 	newsock->type = sock->type;
 	newsock->ops = sock->ops;
 
+	if (gr_handle_sock_server_other(sock->sk)) {
+		err = -EPERM;
+		sock_release(newsock);
+		goto out_put;
+	}
+
+	err = gr_search_accept(sock);
+	if (err) {
+		sock_release(newsock);
+		goto out_put;
+	}
+
 	/*
 	 * We don't need try_module_get here, as the listening socket (sock)
 	 * has the protocol module (sock->ops->owner) held.
@@ -1498,6 +1547,8 @@ SYSCALL_DEFINE4(accept4, int, fd, struct sockaddr __user *, upeer_sockaddr,
 	fd_install(newfd, newfile);
 	err = newfd;
 
+	gr_attach_curr_ip(newsock->sk);
+
 out_put:
 	fput_light(sock->file, fput_needed);
 out:
@@ -1530,6 +1581,7 @@ SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
 		int, addrlen)
 {
 	struct socket *sock;
+	struct sockaddr *sck;
 	struct sockaddr_storage address;
 	int err, fput_needed;
 
@@ -1540,6 +1592,17 @@ SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
 	if (err < 0)
 		goto out_put;
 
+	sck = (struct sockaddr *)&address;
+
+	if (gr_handle_sock_client(sck)) {
+		err = -EACCES;
+		goto out_put;
+	}
+
+	err = gr_search_connect(sock, (struct sockaddr_in *)sck);
+	if (err)
+		goto out_put;
+
 	err =
 	    security_socket_connect(sock, (struct sockaddr *)&address, addrlen);
 	if (err)
@@ -1562,7 +1625,7 @@ SYSCALL_DEFINE3(getsockname, int, fd, struct sockaddr __user *, usockaddr,
 		int __user *, usockaddr_len)
 {
 	struct socket *sock;
-	struct sockaddr_storage address;
+	struct sockaddr_storage address = { };
 	int len, err, fput_needed;
 
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
@@ -1593,7 +1656,7 @@ SYSCALL_DEFINE3(getpeername, int, fd, struct sockaddr __user *, usockaddr,
 		int __user *, usockaddr_len)
 {
 	struct socket *sock;
-	struct sockaddr_storage address;
+	struct sockaddr_storage address = { };
 	int len, err, fput_needed;
 
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
@@ -1686,7 +1749,7 @@ SYSCALL_DEFINE6(recvfrom, int, fd, void __user *, ubuf, size_t, size,
 	struct socket *sock;
 	struct iovec iov;
 	struct msghdr msg;
-	struct sockaddr_storage address;
+	struct sockaddr_storage address = { };
 	int err, err2;
 	int fput_needed;
 
@@ -2089,7 +2152,7 @@ static int ___sys_recvmsg(struct socket *sock, struct user_msghdr __user *msg,
 	ssize_t err;
 
 	/* kernel mode address */
-	struct sockaddr_storage addr;
+	struct sockaddr_storage addr = { };
 
 	/* user mode address pointers */
 	struct sockaddr __user *uaddr;
diff --git a/net/sunrpc/Kconfig b/net/sunrpc/Kconfig
index 04ce2c0b660e..b1dd1bdfa362 100644
--- a/net/sunrpc/Kconfig
+++ b/net/sunrpc/Kconfig
@@ -38,6 +38,7 @@ config SUNRPC_DEBUG
 	bool "RPC: Enable dprintk debugging"
 	depends on SUNRPC && SYSCTL
 	select DEBUG_FS
+	depends on !GRKERNSEC_KMEM
 	help
 	  This option enables a sysctl-based debugging interface
 	  that is be used by the 'rpcdebug' utility to turn on or off
diff --git a/net/sunrpc/cache.c b/net/sunrpc/cache.c
index 8aabe12201f8..52b88d4fec63 100644
--- a/net/sunrpc/cache.c
+++ b/net/sunrpc/cache.c
@@ -1624,7 +1624,7 @@ static int create_cache_proc_entries(struct cache_detail *cd, struct net *net)
 	struct sunrpc_net *sn;
 
 	sn = net_generic(net, sunrpc_net_id);
-	cd->u.procfs.proc_ent = proc_mkdir(cd->name, sn->proc_net_rpc);
+	cd->u.procfs.proc_ent = proc_mkdir_restrict(cd->name, sn->proc_net_rpc);
 	if (cd->u.procfs.proc_ent == NULL)
 		goto out_nomem;
 	cd->u.procfs.channel_ent = NULL;
diff --git a/net/sunrpc/stats.c b/net/sunrpc/stats.c
index 2ecb994314c1..5afb49ff1e18 100644
--- a/net/sunrpc/stats.c
+++ b/net/sunrpc/stats.c
@@ -290,7 +290,7 @@ int rpc_proc_init(struct net *net)
 
 	dprintk("RPC:       registering /proc/net/rpc\n");
 	sn = net_generic(net, sunrpc_net_id);
-	sn->proc_net_rpc = proc_mkdir("rpc", net->proc_net);
+	sn->proc_net_rpc = proc_mkdir_restrict("rpc", net->proc_net);
 	if (sn->proc_net_rpc == NULL)
 		return -ENOMEM;
 
diff --git a/net/unix/af_unix.c b/net/unix/af_unix.c
index 2d03d5bcb5b9..0905d718dd50 100644
--- a/net/unix/af_unix.c
+++ b/net/unix/af_unix.c
@@ -921,6 +921,12 @@ static struct sock *unix_find_other(struct net *net,
 		err = -ECONNREFUSED;
 		if (!S_ISSOCK(inode->i_mode))
 			goto put_fail;
+
+		if (!gr_acl_handle_unix(path.dentry, path.mnt)) {
+			err = -EACCES;
+			goto put_fail;
+		}
+
 		u = unix_find_socket_byinode(inode);
 		if (!u)
 			goto put_fail;
@@ -941,6 +947,13 @@ static struct sock *unix_find_other(struct net *net,
 		if (u) {
 			struct dentry *dentry;
 			dentry = unix_sk(u)->path.dentry;
+
+			if (!gr_handle_chroot_unix(pid_vnr(u->sk_peer_pid))) {
+				err = -EPERM;
+				sock_put(u);
+				goto fail;
+			}
+
 			if (dentry)
 				touch_atime(&unix_sk(u)->path);
 		} else
@@ -974,12 +987,19 @@ static int unix_mknod(const char *sun_path, umode_t mode, struct path *res)
 	 */
 	err = security_path_mknod(&path, dentry, mode, 0);
 	if (!err) {
+		if (!gr_acl_handle_mknod(dentry, path.dentry, path.mnt, mode)) {
+			err = -EACCES;
+			goto out;
+		}
 		err = vfs_mknod(d_inode(path.dentry), dentry, mode, 0);
 		if (!err) {
 			res->mnt = mntget(path.mnt);
 			res->dentry = dget(dentry);
+			gr_handle_create(dentry, path.mnt);
 		}
 	}
+
+out:
 	done_path_create(&path, dentry);
 	return err;
 }
@@ -995,7 +1015,7 @@ static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 	unsigned int hash;
 	struct unix_address *addr;
 	struct hlist_head *list;
-	struct path path = { NULL, NULL };
+	struct path path = { };
 
 	err = -EINVAL;
 	if (sunaddr->sun_family != AF_UNIX)
@@ -2794,9 +2814,13 @@ static int unix_seq_show(struct seq_file *seq, void *v)
 		seq_puts(seq, "Num       RefCount Protocol Flags    Type St "
 			 "Inode Path\n");
 	else {
-		struct sock *s = v;
+		struct sock *s = v, *peer;
 		struct unix_sock *u = unix_sk(s);
 		unix_state_lock(s);
+		peer = unix_peer(s);
+		unix_state_unlock(s);
+
+		unix_state_double_lock(s, peer);
 
 		seq_printf(seq, "%pK: %08X %08X %08X %04X %02X %5lu",
 			s,
@@ -2821,11 +2845,32 @@ static int unix_seq_show(struct seq_file *seq, void *v)
 				seq_putc(seq, '@');
 				i++;
 			}
-			for ( ; i < len; i++)
-				seq_putc(seq, u->addr->name->sun_path[i] ?:
-					 '@');
-		}
-		unix_state_unlock(s);
+			for ( ; i < len; i++) {
+				char c = u->addr->name->sun_path[i];
+				switch (c) {
+				case '\n':
+					seq_putc(seq, '\\');
+					seq_putc(seq, 'n');
+					break;
+				case '\t':
+					seq_putc(seq, '\\');
+					seq_putc(seq, 't');
+					break;
+				case '\\':
+					seq_putc(seq, '\\');
+					seq_putc(seq, '\\');
+					break;
+				case 0:
+					seq_putc(seq, '@');
+					break;
+				default:
+					seq_putc(seq, c);
+				}
+			}
+		} else if (peer)
+			seq_printf(seq, " P%lu", sock_i_ino(peer));
+
+		unix_state_double_unlock(s, peer);
 		seq_putc(seq, '\n');
 	}
 
diff --git a/net/vmw_vsock/vmci_transport_notify.c b/net/vmw_vsock/vmci_transport_notify.c
index fd8cf0214d51..1406db4d97d1 100644
--- a/net/vmw_vsock/vmci_transport_notify.c
+++ b/net/vmw_vsock/vmci_transport_notify.c
@@ -662,19 +662,19 @@ static void vmci_transport_notify_pkt_process_negotiate(struct sock *sk)
 
 /* Socket control packet based operations. */
 const struct vmci_transport_notify_ops vmci_transport_notify_pkt_ops = {
-	vmci_transport_notify_pkt_socket_init,
-	vmci_transport_notify_pkt_socket_destruct,
-	vmci_transport_notify_pkt_poll_in,
-	vmci_transport_notify_pkt_poll_out,
-	vmci_transport_notify_pkt_handle_pkt,
-	vmci_transport_notify_pkt_recv_init,
-	vmci_transport_notify_pkt_recv_pre_block,
-	vmci_transport_notify_pkt_recv_pre_dequeue,
-	vmci_transport_notify_pkt_recv_post_dequeue,
-	vmci_transport_notify_pkt_send_init,
-	vmci_transport_notify_pkt_send_pre_block,
-	vmci_transport_notify_pkt_send_pre_enqueue,
-	vmci_transport_notify_pkt_send_post_enqueue,
-	vmci_transport_notify_pkt_process_request,
-	vmci_transport_notify_pkt_process_negotiate,
+	.socket_init = vmci_transport_notify_pkt_socket_init,
+	.socket_destruct = vmci_transport_notify_pkt_socket_destruct,
+	.poll_in = vmci_transport_notify_pkt_poll_in,
+	.poll_out = vmci_transport_notify_pkt_poll_out,
+	.handle_notify_pkt = vmci_transport_notify_pkt_handle_pkt,
+	.recv_init = vmci_transport_notify_pkt_recv_init,
+	.recv_pre_block = vmci_transport_notify_pkt_recv_pre_block,
+	.recv_pre_dequeue = vmci_transport_notify_pkt_recv_pre_dequeue,
+	.recv_post_dequeue = vmci_transport_notify_pkt_recv_post_dequeue,
+	.send_init = vmci_transport_notify_pkt_send_init,
+	.send_pre_block = vmci_transport_notify_pkt_send_pre_block,
+	.send_pre_enqueue = vmci_transport_notify_pkt_send_pre_enqueue,
+	.send_post_enqueue = vmci_transport_notify_pkt_send_post_enqueue,
+	.process_request = vmci_transport_notify_pkt_process_request,
+	.process_negotiate = vmci_transport_notify_pkt_process_negotiate,
 };
diff --git a/net/vmw_vsock/vmci_transport_notify_qstate.c b/net/vmw_vsock/vmci_transport_notify_qstate.c
index 21e591dafb03..f3a0afc46208 100644
--- a/net/vmw_vsock/vmci_transport_notify_qstate.c
+++ b/net/vmw_vsock/vmci_transport_notify_qstate.c
@@ -420,19 +420,19 @@ vmci_transport_notify_pkt_send_pre_enqueue(
 
 /* Socket always on control packet based operations. */
 const struct vmci_transport_notify_ops vmci_transport_notify_pkt_q_state_ops = {
-	vmci_transport_notify_pkt_socket_init,
-	vmci_transport_notify_pkt_socket_destruct,
-	vmci_transport_notify_pkt_poll_in,
-	vmci_transport_notify_pkt_poll_out,
-	vmci_transport_notify_pkt_handle_pkt,
-	vmci_transport_notify_pkt_recv_init,
-	vmci_transport_notify_pkt_recv_pre_block,
-	vmci_transport_notify_pkt_recv_pre_dequeue,
-	vmci_transport_notify_pkt_recv_post_dequeue,
-	vmci_transport_notify_pkt_send_init,
-	vmci_transport_notify_pkt_send_pre_block,
-	vmci_transport_notify_pkt_send_pre_enqueue,
-	vmci_transport_notify_pkt_send_post_enqueue,
-	vmci_transport_notify_pkt_process_request,
-	vmci_transport_notify_pkt_process_negotiate,
+	.socket_init = vmci_transport_notify_pkt_socket_init,
+	.socket_destruct = vmci_transport_notify_pkt_socket_destruct,
+	.poll_in = vmci_transport_notify_pkt_poll_in,
+	.poll_out = vmci_transport_notify_pkt_poll_out,
+	.handle_notify_pkt = vmci_transport_notify_pkt_handle_pkt,
+	.recv_init = vmci_transport_notify_pkt_recv_init,
+	.recv_pre_block = vmci_transport_notify_pkt_recv_pre_block,
+	.recv_pre_dequeue = vmci_transport_notify_pkt_recv_pre_dequeue,
+	.recv_post_dequeue = vmci_transport_notify_pkt_recv_post_dequeue,
+	.send_init = vmci_transport_notify_pkt_send_init,
+	.send_pre_block = vmci_transport_notify_pkt_send_pre_block,
+	.send_pre_enqueue = vmci_transport_notify_pkt_send_pre_enqueue,
+	.send_post_enqueue = vmci_transport_notify_pkt_send_post_enqueue,
+	.process_request = vmci_transport_notify_pkt_process_request,
+	.process_negotiate = vmci_transport_notify_pkt_process_negotiate,
 };
diff --git a/net/x25/sysctl_net_x25.c b/net/x25/sysctl_net_x25.c
index 43239527a205..a06dfe143c67 100644
--- a/net/x25/sysctl_net_x25.c
+++ b/net/x25/sysctl_net_x25.c
@@ -70,7 +70,7 @@ static struct ctl_table x25_table[] = {
 		.mode = 	0644,
 		.proc_handler = proc_dointvec,
 	},
-	{ 0, },
+	{ },
 };
 
 void __init x25_register_sysctl(void)
diff --git a/net/x25/x25_proc.c b/net/x25/x25_proc.c
index 0917f047f2cf..f4e3d8c795cc 100644
--- a/net/x25/x25_proc.c
+++ b/net/x25/x25_proc.c
@@ -209,7 +209,7 @@ static const struct file_operations x25_seq_forward_fops = {
 
 int __init x25_proc_init(void)
 {
-	if (!proc_mkdir("x25", init_net.proc_net))
+	if (!proc_mkdir_restrict("x25", init_net.proc_net))
 		return -ENOMEM;
 
 	if (!proc_create("x25/route", S_IRUGO, init_net.proc_net,
diff --git a/scripts/Makefile.gcc-plugins b/scripts/Makefile.gcc-plugins
index 8e7e5f907fca..f15dad8d2fea 100644
--- a/scripts/Makefile.gcc-plugins
+++ b/scripts/Makefile.gcc-plugins
@@ -59,6 +59,10 @@ ifdef CONFIG_GCC_PLUGINS
   gcc-plugin-cflags-$(CONFIG_PAX_SIZE_OVERFLOW_EXTRA)	+= -fplugin-arg-size_overflow_plugin-check-fptrs
   gcc-plugin-cflags-$(CONFIG_PAX_SIZE_OVERFLOW_EXTRA)	+= -fplugin-arg-size_overflow_plugin-check-vars
 
+  gcc-plugin-$(CONFIG_GRKERNSEC_RANDSTRUCT)		+= randomize_layout_plugin.so
+  gcc-plugin-cflags-$(CONFIG_GRKERNSEC_RANDSTRUCT)	+= -DRANDSTRUCT_PLUGIN
+  gcc-plugin-cflags-$(CONFIG_GRKERNSEC_RANDSTRUCT_PERFORMANCE) += -fplugin-arg-randomize_layout_plugin-performance-mode
+
   gcc-plugin-$(CONFIG_PAX_MEMORY_STRUCTLEAK)		+= structleak_plugin.so
   gcc-plugin-cflags-$(CONFIG_PAX_MEMORY_STRUCTLEAK)	+= -DSTRUCTLEAK_PLUGIN
 
diff --git a/scripts/gcc-plugins/Makefile b/scripts/gcc-plugins/Makefile
index 445de5632266..ec1516ef99f1 100644
--- a/scripts/gcc-plugins/Makefile
+++ b/scripts/gcc-plugins/Makefile
@@ -26,6 +26,16 @@ $(HOSTLIBS)-y := $(foreach p,$(GCC_PLUGIN),$(if $(findstring /,$(p)),,$(p)))
 always := $($(HOSTLIBS)-y)
 $(foreach p,$($(HOSTLIBS)-y:%.so=%),$(eval $(p)-objs := $(p).o))
 
+$(obj)/randomize_layout_plugin.o: $(objtree)/$(obj)/randomize_layout_seed.h
+
+quiet_cmd_create_randomize_layout_seed = GENSEED  $@
+	cmd_create_randomize_layout_seed = \
+	$(CONFIG_SHELL) $(srctree)/$(src)/gen-random-seed.sh $@ $(objtree)/include/generated/randomize_layout_hash.h
+$(objtree)/$(obj)/randomize_layout_seed.h: FORCE
+	$(call if_changed,create_randomize_layout_seed)
+ 
+targets += randomize_layout_seed.h randomize_layout_hash.h
+
 subdir-y := $(GCC_PLUGIN_SUBDIR)
 subdir-  += $(GCC_PLUGIN_SUBDIR)
 
diff --git a/scripts/gcc-plugins/gen-random-seed.sh b/scripts/gcc-plugins/gen-random-seed.sh
new file mode 100644
index 000000000000..7514850f4815
--- /dev/null
+++ b/scripts/gcc-plugins/gen-random-seed.sh
@@ -0,0 +1,8 @@
+#!/bin/sh
+
+if [ ! -f "$1" ]; then
+	SEED=`od -A n -t x8 -N 32 /dev/urandom | tr -d ' \n'`
+	echo "const char *randstruct_seed = \"$SEED\";" > "$1"
+	HASH=`echo -n "$SEED" | sha256sum | cut -d" " -f1 | tr -d ' \n'`
+	echo "#define RANDSTRUCT_HASHED_SEED \"$HASH\"" > "$2"
+fi
diff --git a/scripts/gcc-plugins/randomize_layout_plugin.c b/scripts/gcc-plugins/randomize_layout_plugin.c
new file mode 100644
index 000000000000..71911c828aae
--- /dev/null
+++ b/scripts/gcc-plugins/randomize_layout_plugin.c
@@ -0,0 +1,940 @@
+/*
+ * Copyright 2014-2016 by Open Source Security, Inc., Brad Spengler <spender@grsecurity.net>
+ *                   and PaX Team <pageexec@freemail.hu>
+ * Licensed under the GPL v2
+ *
+ * Note: the choice of the license means that the compilation process is
+ *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,
+ *       but for the kernel it doesn't matter since it doesn't link against
+ *       any of the gcc libraries
+ *
+ * Usage:
+ * $ # for 4.5/4.6/C based 4.7
+ * $ gcc -I`gcc -print-file-name=plugin`/include -I`gcc -print-file-name=plugin`/include/c-family -fPIC -shared -O2 -o randomize_layout_plugin.so randomize_layout_plugin.c
+ * $ # for C++ based 4.7/4.8+
+ * $ g++ -I`g++ -print-file-name=plugin`/include -I`g++ -print-file-name=plugin`/include/c-family -fPIC -shared -O2 -o randomize_layout_plugin.so randomize_layout_plugin.c
+ * $ gcc -fplugin=./randomize_layout_plugin.so test.c -O2
+ */
+
+#include "gcc-common.h"
+#include "randomize_layout_seed.h"
+
+#if BUILDING_GCC_MAJOR < 4 || (BUILDING_GCC_MAJOR == 4 && BUILDING_GCC_MINOR < 6) || \
+   (BUILDING_GCC_MAJOR == 4 && BUILDING_GCC_MINOR == 6 && BUILDING_GCC_PATCHLEVEL < 4)
+#error "The RANDSTRUCT plugin requires GCC 4.6.4 or newer."
+#endif
+
+#define ORIG_TYPE_NAME(node) \
+	(TYPE_NAME(TYPE_MAIN_VARIANT(node)) != NULL_TREE ? ((const unsigned char *)IDENTIFIER_POINTER(TYPE_NAME(TYPE_MAIN_VARIANT(node)))) : (const unsigned char *)"anonymous")
+
+__visible int plugin_is_GPL_compatible;
+
+static int performance_mode;
+
+static struct plugin_info randomize_layout_plugin_info = {
+	.version	= "201402201816",
+	.help		= "disable\t\t\tdo not activate plugin\n"
+			  "performance-mode\tenable cacheline-aware layout randomization\n"
+};
+
+/* from old Linux dcache.h */
+static inline unsigned long
+partial_name_hash(unsigned long c, unsigned long prevhash)
+{
+	return (prevhash + (c << 4) + (c >> 4)) * 11;
+}
+static inline unsigned int
+name_hash(const unsigned char *name)
+{
+	unsigned long hash = 0;
+	unsigned int len = strlen((const char *)name);
+	while (len--)
+		hash = partial_name_hash(*name++, hash);
+	return (unsigned int)hash;
+}
+
+static tree handle_randomize_layout_attr(tree *node, tree name, tree args, int flags, bool *no_add_attrs)
+{
+	tree type;
+
+	*no_add_attrs = true;
+	if (TREE_CODE(*node) == FUNCTION_DECL) {
+		error("%qE attribute does not apply to functions (%qF)", name, *node);
+		return NULL_TREE;
+	}
+
+	if (TREE_CODE(*node) == PARM_DECL) {
+		error("%qE attribute does not apply to function parameters (%qD)", name, *node);
+		return NULL_TREE;
+	}
+
+	if (TREE_CODE(*node) == VAR_DECL) {
+		error("%qE attribute does not apply to variables (%qD)", name, *node);
+		return NULL_TREE;
+	}
+
+	if (TYPE_P(*node)) {
+		type = *node;
+	} else {
+		gcc_assert(TREE_CODE(*node) == TYPE_DECL);
+		type = TREE_TYPE(*node);
+	}
+
+	if (TREE_CODE(type) != RECORD_TYPE) {
+		error("%qE attribute used on %qT applies to struct types only", name, type);
+		return NULL_TREE;
+	}
+
+	if (lookup_attribute(IDENTIFIER_POINTER(name), TYPE_ATTRIBUTES(type))) {
+		error("%qE attribute is already applied to the type %qT", name, type);
+		return NULL_TREE;
+	}
+
+	*no_add_attrs = false;
+
+	return NULL_TREE;
+}
+
+/* set on complete types that we don't need to inspect further at all */
+static tree handle_randomize_considered_attr(tree *node, tree name, tree args, int flags, bool *no_add_attrs)
+{
+	*no_add_attrs = false;
+	return NULL_TREE;
+}
+
+/*
+ * set on types that we've performed a shuffle on, to prevent re-shuffling
+ * this does not preclude us from inspecting its fields for potential shuffles
+ */
+static tree handle_randomize_performed_attr(tree *node, tree name, tree args, int flags, bool *no_add_attrs)
+{
+	*no_add_attrs = false;
+	return NULL_TREE;
+}
+
+/*
+ * 64bit variant of Bob Jenkins' public domain PRNG
+ * 256 bits of internal state
+ */
+
+typedef unsigned long long u64;
+
+typedef struct ranctx { u64 a; u64 b; u64 c; u64 d; } ranctx;
+
+#define rot(x,k) (((x)<<(k))|((x)>>(64-(k))))
+static u64 ranval(ranctx *x) {
+	u64 e = x->a - rot(x->b, 7);
+	x->a = x->b ^ rot(x->c, 13);
+	x->b = x->c + rot(x->d, 37);
+	x->c = x->d + e;
+	x->d = e + x->a;
+	return x->d;
+}
+
+static void raninit(ranctx *x, u64 *seed) {
+	int i;
+
+	x->a = seed[0];
+	x->b = seed[1];
+	x->c = seed[2];
+	x->d = seed[3];
+
+	for (i=0; i < 30; ++i)
+		(void)ranval(x);
+}
+
+static u64 shuffle_seed[4];
+
+struct partition_group {
+	tree tree_start;
+	unsigned long start;
+	unsigned long length;
+};
+
+static void partition_struct(tree *fields, unsigned long length, struct partition_group *size_groups, unsigned long *num_groups)
+{
+	unsigned long i;
+	unsigned long accum_size = 0;
+	unsigned long accum_length = 0;
+	unsigned long group_idx = 0;
+
+	gcc_assert(length < INT_MAX);
+
+	memset(size_groups, 0, sizeof(struct partition_group) * length);
+
+	for (i = 0; i < length; i++) {
+		if (size_groups[group_idx].tree_start == NULL_TREE) {
+			size_groups[group_idx].tree_start = fields[i];
+			size_groups[group_idx].start = i;
+			accum_length = 0;
+			accum_size = 0;
+		}
+		accum_size += (unsigned long)int_size_in_bytes(TREE_TYPE(fields[i]));
+		accum_length++;
+		if (accum_size >= 64) {
+			size_groups[group_idx].length = accum_length;
+			accum_length = 0;
+			group_idx++;
+		}
+	}
+
+	if (size_groups[group_idx].tree_start != NULL_TREE &&
+	    !size_groups[group_idx].length) {
+		size_groups[group_idx].length = accum_length;
+		group_idx++;
+	}
+
+	*num_groups = group_idx;
+}
+
+static void performance_shuffle(tree *newtree, unsigned long length, ranctx *prng_state)
+{
+	unsigned long i, x;
+	struct partition_group size_group[length];
+	unsigned long num_groups = 0;
+	unsigned long randnum;
+
+	partition_struct(newtree, length, (struct partition_group *)&size_group, &num_groups);
+	for (i = num_groups - 1; i > 0; i--) {
+		struct partition_group tmp;
+		randnum = ranval(prng_state) % (i + 1);
+		tmp = size_group[i];
+		size_group[i] = size_group[randnum];
+		size_group[randnum] = tmp;
+	}
+
+	for (x = 0; x < num_groups; x++) {
+		for (i = size_group[x].start + size_group[x].length - 1; i > size_group[x].start; i--) {
+			tree tmp;
+			if (DECL_BIT_FIELD_TYPE(newtree[i]))
+				continue;
+			randnum = ranval(prng_state) % (i + 1);
+			// we could handle this case differently if desired
+			if (DECL_BIT_FIELD_TYPE(newtree[randnum]))
+				continue;
+			tmp = newtree[i];
+			newtree[i] = newtree[randnum];
+			newtree[randnum] = tmp;
+		}
+	}
+}
+
+static void full_shuffle(tree *newtree, unsigned long length, ranctx *prng_state)
+{
+	unsigned long i, randnum;
+
+	for (i = length - 1; i > 0; i--) {
+		tree tmp;
+		randnum = ranval(prng_state) % (i + 1);
+		tmp = newtree[i];
+		newtree[i] = newtree[randnum];
+		newtree[randnum] = tmp;
+	}
+}
+
+/* modern in-place Fisher-Yates shuffle */
+static void shuffle(const_tree type, tree *newtree, unsigned long length)
+{
+	unsigned long i;
+	u64 seed[4];
+	ranctx prng_state;
+	const unsigned char *structname;
+
+	if (length == 0)
+		return;
+
+	gcc_assert(TREE_CODE(type) == RECORD_TYPE);
+
+	structname = ORIG_TYPE_NAME(type);
+
+#ifdef __DEBUG_PLUGIN
+	fprintf(stderr, "Shuffling struct %s %p\n", (const char *)structname, type);
+#ifdef __DEBUG_VERBOSE
+	debug_tree((tree)type);
+#endif
+#endif
+
+	for (i = 0; i < 4; i++) {
+		seed[i] = shuffle_seed[i];
+		seed[i] ^= name_hash(structname);
+	}
+
+	raninit(&prng_state, (u64 *)&seed);
+
+	if (performance_mode)
+		performance_shuffle(newtree, length, &prng_state);
+	else
+		full_shuffle(newtree, length, &prng_state);
+}
+
+static bool is_flexible_array(const_tree field)
+{
+	const_tree fieldtype;
+	const_tree typesize;
+	const_tree elemtype;
+	const_tree elemsize;
+
+	fieldtype = TREE_TYPE(field);
+	typesize = TYPE_SIZE(fieldtype);
+
+	if (TREE_CODE(fieldtype) != ARRAY_TYPE)
+		return false;
+
+	elemtype = TREE_TYPE(fieldtype);
+	elemsize = TYPE_SIZE(elemtype);
+
+	/* size of type is represented in bits */
+
+	if (typesize == NULL_TREE && TYPE_DOMAIN(fieldtype) != NULL_TREE &&
+	    TYPE_MAX_VALUE(TYPE_DOMAIN(fieldtype)) == NULL_TREE)
+		return true;
+
+	if (typesize != NULL_TREE && 
+	    (TREE_CONSTANT(typesize) && (!tree_to_uhwi(typesize) ||
+	     tree_to_uhwi(typesize) == tree_to_uhwi(elemsize))))
+		return true;
+
+	return false;
+}
+
+static int relayout_struct(tree type)
+{
+	unsigned long num_fields = (unsigned long)list_length(TYPE_FIELDS(type));
+	unsigned long shuffle_length = num_fields;
+	tree field;
+	tree newtree[num_fields];
+	unsigned long i;
+	tree list;
+	tree variant;
+	tree main_variant;
+	expanded_location xloc;
+	bool has_flexarray = false;
+
+	if (TYPE_FIELDS(type) == NULL_TREE)
+		return 0;
+
+	if (num_fields < 2)
+		return 0;
+
+	gcc_assert(TREE_CODE(type) == RECORD_TYPE);
+
+	gcc_assert(num_fields < INT_MAX);
+
+	if (lookup_attribute("randomize_performed", TYPE_ATTRIBUTES(type)) ||
+	    lookup_attribute("no_randomize_layout", TYPE_ATTRIBUTES(TYPE_MAIN_VARIANT(type))))
+		return 0;
+
+	/* Workaround for 3rd-party VirtualBox source that we can't modify ourselves */
+	if (!strcmp((const char *)ORIG_TYPE_NAME(type), "INTNETTRUNKFACTORY") ||
+	    !strcmp((const char *)ORIG_TYPE_NAME(type), "RAWPCIFACTORY"))
+		return 0;
+
+	/* throw out any structs in uapi */
+	xloc = expand_location(DECL_SOURCE_LOCATION(TYPE_FIELDS(type)));
+
+	if (strstr(xloc.file, "/uapi/"))
+		error(G_("attempted to randomize userland API struct %s"), ORIG_TYPE_NAME(type));
+
+	for (field = TYPE_FIELDS(type), i = 0; field; field = TREE_CHAIN(field), i++) {
+		gcc_assert(TREE_CODE(field) == FIELD_DECL);
+		newtree[i] = field;
+	}
+
+	/*
+	 * enforce that we don't randomize the layout of the last
+	 * element of a struct if it's a 0 or 1-length array
+	 * or a proper flexible array
+	 */
+	if (is_flexible_array(newtree[num_fields - 1])) {
+		has_flexarray = true;
+		shuffle_length--;
+	}
+
+	shuffle(type, (tree *)newtree, shuffle_length);
+
+	/*
+	 * set up a bogus anonymous struct field designed to error out on unnamed struct initializers
+	 * as gcc provides no other way to detect such code
+	 */
+	list = make_node(FIELD_DECL);
+	TREE_CHAIN(list) = newtree[0];
+	TREE_TYPE(list) = void_type_node;
+	DECL_SIZE(list) = bitsize_zero_node;
+	DECL_NONADDRESSABLE_P(list) = 1;
+	DECL_FIELD_BIT_OFFSET(list) = bitsize_zero_node;
+	DECL_SIZE_UNIT(list) = size_zero_node;
+	DECL_FIELD_OFFSET(list) = size_zero_node;
+	DECL_CONTEXT(list) = type;
+	// to satisfy the constify plugin
+	TREE_READONLY(list) = 1;
+
+	for (i = 0; i < num_fields - 1; i++)
+		TREE_CHAIN(newtree[i]) = newtree[i+1];
+	TREE_CHAIN(newtree[num_fields - 1]) = NULL_TREE;
+
+	main_variant = TYPE_MAIN_VARIANT(type);
+	for (variant = main_variant; variant; variant = TYPE_NEXT_VARIANT(variant)) {
+		TYPE_FIELDS(variant) = list;
+		TYPE_ATTRIBUTES(variant) = copy_list(TYPE_ATTRIBUTES(variant));
+		TYPE_ATTRIBUTES(variant) = tree_cons(get_identifier("randomize_performed"), NULL_TREE, TYPE_ATTRIBUTES(variant));
+		if (has_flexarray)
+			TYPE_ATTRIBUTES(type) = tree_cons(get_identifier("has_flexarray"), NULL_TREE, TYPE_ATTRIBUTES(type));
+	}
+
+	/*
+	 * force a re-layout of the main variant
+	 * the TYPE_SIZE for all variants will be recomputed
+	 * by finalize_type_size()
+	 */
+	TYPE_SIZE(main_variant) = NULL_TREE;
+	layout_type(main_variant);
+	gcc_assert(TYPE_SIZE(main_variant) != NULL_TREE);
+
+	return 1;
+}
+
+/* from constify plugin */
+static const_tree get_field_type(const_tree field)
+{
+	return strip_array_types(TREE_TYPE(field));
+}
+
+/* from constify plugin */
+static bool is_fptr(const_tree fieldtype)
+{
+	if (TREE_CODE(fieldtype) != POINTER_TYPE)
+		return false;
+
+	return TREE_CODE(TREE_TYPE(fieldtype)) == FUNCTION_TYPE;
+}
+
+/* derived from constify plugin */
+static int is_pure_ops_struct(const_tree node)
+{
+	const_tree field;
+
+	gcc_assert(TREE_CODE(node) == RECORD_TYPE || TREE_CODE(node) == UNION_TYPE);
+
+	for (field = TYPE_FIELDS(node); field; field = TREE_CHAIN(field)) {
+		const_tree fieldtype = get_field_type(field);
+		enum tree_code code = TREE_CODE(fieldtype);
+
+		if (node == fieldtype)
+			continue;
+
+		if (!is_fptr(fieldtype))
+			return 0;
+
+		if (code != RECORD_TYPE && code != UNION_TYPE)
+			continue;
+
+		if (!is_pure_ops_struct(fieldtype))
+			return 0;
+	}
+
+	return 1;
+}
+
+static void randomize_type(tree type)
+{
+	tree variant;
+
+	gcc_assert(TREE_CODE(type) == RECORD_TYPE);
+
+	if (lookup_attribute("randomize_considered", TYPE_ATTRIBUTES(type)))
+		return;
+
+	if (lookup_attribute("randomize_layout", TYPE_ATTRIBUTES(TYPE_MAIN_VARIANT(type))) || is_pure_ops_struct(type))
+		relayout_struct(type);
+
+	for (variant = TYPE_MAIN_VARIANT(type); variant; variant = TYPE_NEXT_VARIANT(variant)) {
+		TYPE_ATTRIBUTES(type) = copy_list(TYPE_ATTRIBUTES(type));
+		TYPE_ATTRIBUTES(type) = tree_cons(get_identifier("randomize_considered"), NULL_TREE, TYPE_ATTRIBUTES(type));
+	}
+#ifdef __DEBUG_PLUGIN
+	fprintf(stderr, "Marking randomize_considered on struct %s\n", ORIG_TYPE_NAME(type));
+#ifdef __DEBUG_VERBOSE
+	debug_tree(type);
+#endif
+#endif
+}
+
+static void update_decl_size(tree decl)
+{
+	tree lastval, lastidx, field, init, type, flexsize;
+	unsigned HOST_WIDE_INT len;
+
+	type = TREE_TYPE(decl);
+
+	if (!lookup_attribute("has_flexarray", TYPE_ATTRIBUTES(type)))
+		return;
+
+	init = DECL_INITIAL(decl);
+	if (init == NULL_TREE || init == error_mark_node)
+		return;
+
+	if (TREE_CODE(init) != CONSTRUCTOR)
+		return;
+
+	len = CONSTRUCTOR_NELTS(init);
+        if (!len)
+		return;
+
+	lastval = CONSTRUCTOR_ELT(init, CONSTRUCTOR_NELTS(init) - 1)->value;
+	lastidx = CONSTRUCTOR_ELT(init, CONSTRUCTOR_NELTS(init) - 1)->index;
+
+	for (field = TYPE_FIELDS(TREE_TYPE(decl)); TREE_CHAIN(field); field = TREE_CHAIN(field))
+		;
+
+	if (lastidx != field)
+		return;
+
+	if (TREE_CODE(lastval) != STRING_CST) {
+		error("Only string constants are supported as initializers "
+		      "for randomized structures with flexible arrays");
+		return;
+	}
+
+	flexsize = bitsize_int(TREE_STRING_LENGTH(lastval) *
+		tree_to_uhwi(TYPE_SIZE(TREE_TYPE(TREE_TYPE(lastval)))));
+
+	DECL_SIZE(decl) = size_binop(PLUS_EXPR, TYPE_SIZE(type), flexsize);
+
+	return;
+}
+
+
+static void randomize_layout_finish_decl(void *event_data, void *data)
+{
+	tree decl = (tree)event_data;
+	tree type;
+
+	if (decl == NULL_TREE || decl == error_mark_node)
+		return;
+
+	type = TREE_TYPE(decl);
+
+	if (TREE_CODE(decl) != VAR_DECL)
+		return;
+
+	if (TREE_CODE(type) != RECORD_TYPE && TREE_CODE(type) != UNION_TYPE)
+		return;
+
+	if (!lookup_attribute("randomize_performed", TYPE_ATTRIBUTES(type)))
+		return;
+
+	DECL_SIZE(decl) = 0;
+	DECL_SIZE_UNIT(decl) = 0;
+	DECL_ALIGN(decl) = 0;
+	DECL_MODE (decl) = VOIDmode;
+	SET_DECL_RTL(decl, 0);
+	update_decl_size(decl);
+	layout_decl(decl, 0);
+}
+
+static void finish_type(void *event_data, void *data)
+{
+	tree type = (tree)event_data;
+
+	if (type == NULL_TREE || type == error_mark_node)
+		return;
+
+	if (TREE_CODE(type) != RECORD_TYPE)
+		return;
+
+	if (TYPE_FIELDS(type) == NULL_TREE)
+		return;
+
+	if (lookup_attribute("randomize_considered", TYPE_ATTRIBUTES(type)))
+		return;
+
+#ifdef __DEBUG_PLUGIN
+	fprintf(stderr, "Calling randomize_type on %s\n", ORIG_TYPE_NAME(type));
+#endif
+#ifdef __DEBUG_VERBOSE
+	debug_tree(type);
+#endif
+	randomize_type(type);
+
+	return;
+}
+
+static struct attribute_spec randomize_layout_attr = {
+	.name		= "randomize_layout",
+	// related to args
+	.min_length	= 0,
+	.max_length	= 0,
+	.decl_required	= false,
+	// need type declaration
+	.type_required	= true,
+	.function_type_required = false,
+	.handler		= handle_randomize_layout_attr,
+#if BUILDING_GCC_VERSION >= 4007
+	.affects_type_identity  = true
+#endif
+};
+
+static struct attribute_spec no_randomize_layout_attr = {
+	.name		= "no_randomize_layout",
+	// related to args
+	.min_length	= 0,
+	.max_length	= 0,
+	.decl_required	= false,
+	// need type declaration
+	.type_required	= true,
+	.function_type_required = false,
+	.handler		= handle_randomize_layout_attr,
+#if BUILDING_GCC_VERSION >= 4007
+	.affects_type_identity  = true
+#endif
+};
+
+static struct attribute_spec randomize_considered_attr = {
+	.name		= "randomize_considered",
+	// related to args
+	.min_length	= 0,
+	.max_length	= 0,
+	.decl_required	= false,
+	// need type declaration
+	.type_required	= true,
+	.function_type_required = false,
+	.handler		= handle_randomize_considered_attr,
+#if BUILDING_GCC_VERSION >= 4007
+	.affects_type_identity  = false
+#endif
+};
+
+static struct attribute_spec randomize_performed_attr = {
+	.name		= "randomize_performed",
+	// related to args
+	.min_length	= 0,
+	.max_length	= 0,
+	.decl_required	= false,
+	// need type declaration
+	.type_required	= true,
+	.function_type_required = false,
+	.handler		= handle_randomize_performed_attr,
+#if BUILDING_GCC_VERSION >= 4007
+	.affects_type_identity  = false
+#endif
+};
+
+static void register_attributes(void *event_data, void *data)
+{
+	register_attribute(&randomize_layout_attr);
+	register_attribute(&no_randomize_layout_attr);
+	register_attribute(&randomize_considered_attr);
+	register_attribute(&randomize_performed_attr);
+}
+
+static void check_bad_casts_in_constructor(tree var, tree init)
+{
+	unsigned HOST_WIDE_INT idx;
+	tree field, val;
+	tree field_type, val_type;
+
+	FOR_EACH_CONSTRUCTOR_ELT(CONSTRUCTOR_ELTS(init), idx, field, val) {
+		if (TREE_CODE(val) == CONSTRUCTOR) {
+			check_bad_casts_in_constructor(var, val);
+			continue;
+		}
+
+		/* pipacs' plugin creates franken-arrays that differ from those produced by
+		   normal code which all have valid 'field' trees. work around this */
+		if (field == NULL_TREE)
+			continue;
+		field_type = TREE_TYPE(field);
+		val_type = TREE_TYPE(val);
+
+		if (TREE_CODE(field_type) != POINTER_TYPE || TREE_CODE(val_type) != POINTER_TYPE)
+			continue;
+
+		if (field_type == val_type)
+			continue;
+
+		field_type = TYPE_MAIN_VARIANT(strip_array_types(TYPE_MAIN_VARIANT(TREE_TYPE(field_type))));
+		val_type = TYPE_MAIN_VARIANT(strip_array_types(TYPE_MAIN_VARIANT(TREE_TYPE(val_type))));
+
+		if (field_type == void_type_node)
+			continue;
+		if (field_type == val_type)
+			continue;
+		if (TREE_CODE(val_type) != RECORD_TYPE)
+			continue;
+
+		if (!lookup_attribute("randomize_performed", TYPE_ATTRIBUTES(val_type)))
+			continue;
+		inform(DECL_SOURCE_LOCATION(var), "found mismatched struct pointer types: %qT and %qT\n", TYPE_MAIN_VARIANT(field_type), TYPE_MAIN_VARIANT(val_type));
+	}
+}
+
+/* derived from the constify plugin */
+static void check_global_variables(void *event_data, void *data)
+{
+	struct varpool_node *node;
+	tree init;
+
+	FOR_EACH_VARIABLE(node) {
+		tree var = NODE_DECL(node);
+		init = DECL_INITIAL(var);
+		if (init == NULL_TREE)
+			continue;
+
+		if (TREE_CODE(init) != CONSTRUCTOR)
+			continue;
+
+		check_bad_casts_in_constructor(var, init);
+	}
+}
+
+static bool dominated_by_is_err(const_tree rhs, basic_block bb)
+{
+	basic_block dom;
+	gimple dom_stmt;
+	gimple call_stmt;
+	const_tree dom_lhs;
+	const_tree poss_is_err_cond;
+	const_tree poss_is_err_func;
+	const_tree is_err_arg;
+
+	dom = get_immediate_dominator(CDI_DOMINATORS, bb);
+	if (!dom)
+		return false;
+
+	dom_stmt = last_stmt(dom);
+	if (!dom_stmt)
+		return false;
+
+	if (gimple_code(dom_stmt) != GIMPLE_COND)
+		return false;
+
+	if (gimple_cond_code(dom_stmt) != NE_EXPR)
+		return false;
+
+	if (!integer_zerop(gimple_cond_rhs(dom_stmt)))
+		return false;
+
+	poss_is_err_cond = gimple_cond_lhs(dom_stmt);
+
+	if (TREE_CODE(poss_is_err_cond) != SSA_NAME)
+		return false;
+
+	call_stmt = SSA_NAME_DEF_STMT(poss_is_err_cond);
+
+	if (gimple_code(call_stmt) != GIMPLE_CALL)
+		return false;
+
+	dom_lhs = gimple_get_lhs(call_stmt);
+	poss_is_err_func = gimple_call_fndecl(call_stmt);
+	if (!poss_is_err_func)
+		return false;
+	if (dom_lhs != poss_is_err_cond)
+		return false;
+	if (strcmp(DECL_NAME_POINTER(poss_is_err_func), "IS_ERR"))
+		return false;
+
+	is_err_arg = gimple_call_arg(call_stmt, 0);
+	if (!is_err_arg)
+		return false;
+
+	if (is_err_arg != rhs)
+		return false;
+
+	return true;
+}
+
+static void handle_local_var_initializers(void)
+{
+	tree var;
+	unsigned int i;
+
+	FOR_EACH_LOCAL_DECL(cfun, i, var) {
+		tree init = DECL_INITIAL(var);
+		if (!init)
+			continue;
+		if (TREE_CODE(init) != CONSTRUCTOR)
+			continue;
+		check_bad_casts_in_constructor(var, init);
+	}
+}
+
+/*
+ * iterate over all statements to find "bad" casts:
+ * those where the address of the start of a structure is cast
+ * to a pointer of a structure of a different type, or a
+ * structure pointer type is cast to a different structure pointer type
+ */
+static unsigned int find_bad_casts_execute(void)
+{
+	basic_block bb;
+
+	handle_local_var_initializers();
+
+	FOR_EACH_BB_FN(bb, cfun) {
+		gimple_stmt_iterator gsi;
+
+		for (gsi = gsi_start_bb(bb); !gsi_end_p(gsi); gsi_next(&gsi)) {
+			gimple stmt;
+			const_tree lhs;
+			const_tree lhs_type;
+			const_tree rhs1;
+			const_tree rhs_type;
+			const_tree ptr_lhs_type;
+			const_tree ptr_rhs_type;
+			const_tree op0;
+			const_tree op0_type;
+			enum tree_code rhs_code;
+
+			stmt = gsi_stmt(gsi);
+
+#ifdef __DEBUG_PLUGIN
+#ifdef __DEBUG_VERBOSE
+			debug_gimple_stmt(stmt);
+			debug_tree(gimple_get_lhs(stmt));
+#endif
+#endif
+
+			if (gimple_code(stmt) != GIMPLE_ASSIGN)
+				continue;
+
+#ifdef __DEBUG_PLUGIN
+#ifdef __DEBUG_VERBOSE
+			debug_tree(gimple_assign_rhs1(stmt));
+#endif
+#endif
+
+			rhs_code = gimple_assign_rhs_code(stmt);
+
+			if (rhs_code != ADDR_EXPR && rhs_code != SSA_NAME)
+				continue;
+
+			lhs = gimple_get_lhs(stmt);
+			lhs_type = TREE_TYPE(lhs);
+			rhs1 = gimple_assign_rhs1(stmt);
+			rhs_type = TREE_TYPE(rhs1);
+
+			if (TREE_CODE(rhs_type) != POINTER_TYPE ||
+			    TREE_CODE(lhs_type) != POINTER_TYPE)
+				continue;
+
+			ptr_lhs_type = TYPE_MAIN_VARIANT(strip_array_types(TYPE_MAIN_VARIANT(TREE_TYPE(lhs_type))));
+			ptr_rhs_type = TYPE_MAIN_VARIANT(strip_array_types(TYPE_MAIN_VARIANT(TREE_TYPE(rhs_type))));
+
+			if (ptr_rhs_type == void_type_node)
+				continue;
+
+			if (ptr_lhs_type == void_type_node)
+				continue;
+
+			if (dominated_by_is_err(rhs1, bb))
+				continue;
+
+			if (TREE_CODE(ptr_rhs_type) != RECORD_TYPE) {
+#ifndef __DEBUG_PLUGIN
+				if (lookup_attribute("randomize_performed", TYPE_ATTRIBUTES(ptr_lhs_type)))
+#endif
+				inform(gimple_location(stmt), "found mismatched struct pointer types: %qT and %qT\n", ptr_lhs_type, ptr_rhs_type);
+				continue;
+			}
+
+			if (rhs_code == SSA_NAME && ptr_lhs_type == ptr_rhs_type)
+				continue;
+
+			if (rhs_code == ADDR_EXPR) {
+				op0 = TREE_OPERAND(rhs1, 0);
+
+				if (op0 == NULL_TREE)
+					continue;
+
+				if (TREE_CODE(op0) != VAR_DECL)
+					continue;
+
+				op0_type = TYPE_MAIN_VARIANT(strip_array_types(TYPE_MAIN_VARIANT(TREE_TYPE(op0))));
+				if (op0_type == ptr_lhs_type)
+					continue;
+
+#ifndef __DEBUG_PLUGIN
+				if (lookup_attribute("randomize_performed", TYPE_ATTRIBUTES(op0_type)))
+#endif
+				inform(gimple_location(stmt), "found mismatched struct pointer types: %qT and %qT\n", ptr_lhs_type, op0_type);
+			} else {
+				const_tree ssa_name_var = SSA_NAME_VAR(rhs1);
+				/* skip bogus type casts introduced by container_of */
+				if (ssa_name_var != NULL_TREE && DECL_NAME(ssa_name_var) && 
+				    !strcmp((const char *)DECL_NAME_POINTER(ssa_name_var), "__mptr"))
+					continue;
+#ifndef __DEBUG_PLUGIN
+				if (lookup_attribute("randomize_performed", TYPE_ATTRIBUTES(ptr_rhs_type)))
+#endif
+				inform(gimple_location(stmt), "found mismatched struct pointer types: %qT and %qT\n", ptr_lhs_type, ptr_rhs_type);
+			}
+
+		}
+	}
+	return 0;
+}
+
+#define PASS_NAME find_bad_casts
+#define NO_GATE
+#define TODO_FLAGS_FINISH TODO_dump_func
+#include "gcc-generate-gimple-pass.h"
+
+__visible int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	int i;
+	const char * const plugin_name = plugin_info->base_name;
+	const int argc = plugin_info->argc;
+	const struct plugin_argument * const argv = plugin_info->argv;
+	bool enable = true;
+	int obtained_seed = 0;
+	struct register_pass_info find_bad_casts_pass_info;
+
+	find_bad_casts_pass_info.pass			= make_find_bad_casts_pass();
+	find_bad_casts_pass_info.reference_pass_name	= "ssa";
+	find_bad_casts_pass_info.ref_pass_instance_number	= 1;
+	find_bad_casts_pass_info.pos_op			= PASS_POS_INSERT_AFTER;
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	if (strncmp(lang_hooks.name, "GNU C", 5) && !strncmp(lang_hooks.name, "GNU C+", 6)) {
+		inform(UNKNOWN_LOCATION, G_("%s supports C only, not %s"), plugin_name, lang_hooks.name);
+		enable = false;
+	}
+
+	for (i = 0; i < argc; ++i) {
+		if (!strcmp(argv[i].key, "disable")) {
+			enable = false;
+			continue;
+		}
+		if (!strcmp(argv[i].key, "performance-mode")) {
+			performance_mode = 1;
+			continue;
+		}
+		error(G_("unknown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+	}
+
+	if (strlen(randstruct_seed) != 64) {
+		error(G_("invalid seed value supplied for %s plugin"), plugin_name);
+		return 1;
+	}
+	obtained_seed = sscanf(randstruct_seed, "%016llx%016llx%016llx%016llx",
+		&shuffle_seed[0], &shuffle_seed[1], &shuffle_seed[2], &shuffle_seed[3]);
+	if (obtained_seed != 4) {
+		error(G_("Invalid seed supplied for %s plugin"), plugin_name);
+		return 1;
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &randomize_layout_plugin_info);
+	if (enable) {
+		register_callback(plugin_name, PLUGIN_ALL_IPA_PASSES_START, check_global_variables, NULL);
+		register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &find_bad_casts_pass_info);
+		register_callback(plugin_name, PLUGIN_FINISH_TYPE, finish_type, NULL);
+		register_callback(plugin_name, PLUGIN_FINISH_DECL, randomize_layout_finish_decl, NULL);
+	}
+	register_callback(plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL);
+
+	return 0;
+}
diff --git a/scripts/gcc-plugins/size_overflow_plugin/e_fields.data b/scripts/gcc-plugins/size_overflow_plugin/e_fields.data
index 87b7ef5f3992..88df810cd282 100644
--- a/scripts/gcc-plugins/size_overflow_plugin/e_fields.data
+++ b/scripts/gcc-plugins/size_overflow_plugin/e_fields.data
@@ -2,6 +2,7 @@ recv_ctrl_pipe_us_data_0_fields recv_ctrl_pipe us_data 0 0 NULL
 __earlyonly_bootmem_alloc_fndecl_3_fields __earlyonly_bootmem_alloc fndecl 2-3-4 3 NULL
 size_ttm_mem_reg_8_fields size ttm_mem_reg 0 8 NULL
 char2uni_nls_table_12_fields char2uni nls_table 0 12 NULL
+nrbufs_pipe_inode_info_13_fields nrbufs pipe_inode_info 0 13 NULL
 NumPhys__EVENT_DATA_SAS_EXPANDER_STATUS_CHANGE_17_fields NumPhys _EVENT_DATA_SAS_EXPANDER_STATUS_CHANGE 0 17 NULL
 pci_mem_start_qed_dev_info_18_fields pci_mem_start qed_dev_info 0 18 NULL
 ext4_seek_data_fndecl_21_fields ext4_seek_data fndecl 2 21 NULL
@@ -82,10 +83,13 @@ bytesperline_sh_veu_vfmt_288_fields bytesperline sh_veu_vfmt 0 288 NULL nohashar
 vmscsi_size_delta_vardecl_storvsc_drv_c_288_fields vmscsi_size_delta vardecl_storvsc_drv.c 0 288 &bytesperline_sh_veu_vfmt_288_fields
 xfs_qm_dqread_fndecl_302_fields xfs_qm_dqread fndecl 0 302 NULL nohasharray
 num_targets_dm_table_302_fields num_targets dm_table 0 302 &xfs_qm_dqread_fndecl_302_fields
+tx_ring_size_mvneta_port_307_fields tx_ring_size mvneta_port 0 307 NULL
+omapdss_update_prop_fndecl_309_fields omapdss_update_prop fndecl 3 309 NULL
 cfpkt_create_pfx_fndecl_313_fields cfpkt_create_pfx fndecl 2 313 NULL
 MaxBufferSize_negotiate_rsp_314_fields MaxBufferSize negotiate_rsp 0 314 NULL nohasharray
 ip_num_acl_subject_label_314_fields ip_num acl_subject_label 0 314 &MaxBufferSize_negotiate_rsp_314_fields
 name_len_jffs2_raw_xattr_318_fields name_len jffs2_raw_xattr 0 318 NULL
+bo_handle_count_drm_vc4_submit_cl_326_fields bo_handle_count drm_vc4_submit_cl 0 326 NULL
 start_fb_cmap_user_333_fields start fb_cmap_user 0 333 NULL
 block_size_se_dev_attrib_334_fields block_size se_dev_attrib 0 334 NULL
 xfs_file_iomap_begin_fndecl_341_fields xfs_file_iomap_begin fndecl 2-3 341 NULL
@@ -219,13 +223,15 @@ amt_complete_orangefs_io_response_925_fields amt_complete orangefs_io_response 0
 isofs_bread_fndecl_929_fields isofs_bread fndecl 2 929 NULL
 xpnet_dev_change_mtu_fndecl_932_fields xpnet_dev_change_mtu fndecl 2 932 NULL
 nfrags_pkt_gl_937_fields nfrags pkt_gl 0 937 NULL
-size_skl_algo_data_942_fields size skl_algo_data 0 942 NULL
+size_skl_algo_data_942_fields size skl_algo_data 0 942 NULL nohasharray
+num_spis_alpine_msix_data_942_fields num_spis alpine_msix_data 0 942 &size_skl_algo_data_942_fields
 pci_num_vf_fndecl_952_fields pci_num_vf fndecl 0 952 NULL
 ssid_len_wireless_dev_954_fields ssid_len wireless_dev 0 954 NULL
 length_ndis_80211_bssid_ex_955_fields length ndis_80211_bssid_ex 0 955 NULL
 xfs_bmap_rtalloc_fndecl_958_fields xfs_bmap_rtalloc fndecl 0 958 NULL
 size_wl3501_md_ind_961_fields size wl3501_md_ind 0 961 NULL
 avc_tuner_tuneqpsk_fndecl_978_fields avc_tuner_tuneqpsk fndecl 0 978 NULL
+tx_ring_size_tx_queue_982_fields tx_ring_size tx_queue 0 982 NULL
 em28xx_alloc_urbs_fndecl_983_fields em28xx_alloc_urbs fndecl 5-6 983 NULL nohasharray
 s_blocks_count_hi_ext4_super_block_983_fields s_blocks_count_hi ext4_super_block 0 983 &em28xx_alloc_urbs_fndecl_983_fields
 nd_integrity_init_fndecl_985_fields nd_integrity_init fndecl 2 985 NULL nohasharray
@@ -273,6 +279,7 @@ rx_ring_count_e1000_adapter_1107_fields rx_ring_count e1000_adapter 0 1107 NULL
 cmd_sg_entries_vardecl_ib_srp_c_1108_fields cmd_sg_entries vardecl_ib_srp.c 0 1108 NULL
 ResponseDataLength__MPI2_SMP_PASSTHROUGH_REPLY_1113_fields ResponseDataLength _MPI2_SMP_PASSTHROUGH_REPLY 0 1113 NULL
 io_free_memtype_fndecl_1116_fields io_free_memtype fndecl 1-2 1116 NULL
+gb_operation_get_payload_size_max_fndecl_1118_fields gb_operation_get_payload_size_max fndecl 0 1118 NULL
 rxkad_decrypt_ticket_fndecl_1120_fields rxkad_decrypt_ticket fndecl 3 1120 NULL
 ctl_in_pipe_brcmf_usbdev_info_1124_fields ctl_in_pipe brcmf_usbdev_info 0 1124 NULL
 forw_xfs_dir3_icleaf_hdr_1136_fields forw xfs_dir3_icleaf_hdr 0 1136 NULL
@@ -335,6 +342,7 @@ found_index_locate_info_1355_fields found_index locate_info 0 1355 NULL
 MemReadHSCX_fndecl_1364_fields MemReadHSCX fndecl 0 1364 NULL
 len_btrfs_ordered_sum_1365_fields len btrfs_ordered_sum 0 1365 NULL nohasharray
 ssram_size_telemetry_unit_config_1365_fields ssram_size telemetry_unit_config 0 1365 &len_btrfs_ordered_sum_1365_fields
+tx_ring_count_xgbe_prv_data_1366_fields tx_ring_count xgbe_prv_data 0 1366 NULL
 len_orinoco_scan_data_1370_fields len orinoco_scan_data 0 1370 NULL nohasharray
 dlen_hci_sco_hdr_1370_fields dlen hci_sco_hdr 0 1370 &len_orinoco_scan_data_1370_fields
 v_total_aty128_crtc_1375_fields v_total aty128_crtc 0 1375 NULL
@@ -446,6 +454,7 @@ offset_scrub_nocow_inode_1762_fields offset scrub_nocow_inode 0 1762 NULL
 __es_insert_extent_fndecl_1764_fields __es_insert_extent fndecl 0 1764 NULL
 nentries_hfi1_user_sdma_comp_q_1768_fields nentries hfi1_user_sdma_comp_q 0 1768 NULL
 eqe_size_mlx4_caps_1775_fields eqe_size mlx4_caps 0 1775 NULL
+overlay_num_mmp_path_info_1781_fields overlay_num mmp_path_info 0 1781 NULL
 key_length_mwifiex_wep_key_1784_fields key_length mwifiex_wep_key 0 1784 NULL
 __of_translate_address_fndecl_1786_fields __of_translate_address fndecl 0 1786 NULL
 pitch_radeonfb_info_1792_fields pitch radeonfb_info 0 1792 NULL
@@ -503,6 +512,7 @@ vga_vram_base_vardecl_vgacon_c_2024_fields vga_vram_base vardecl_vgacon.c 0 2024
 max_write_fuse_conn_2028_fields max_write fuse_conn 0 2028 NULL
 process_adv_report_fndecl_2030_fields process_adv_report fndecl 9 2030 NULL
 ib_umem_odp_map_dma_single_page_fndecl_2040_fields ib_umem_odp_map_dma_single_page fndecl 0 2040 NULL
+num_phy_chans_d40_base_2049_fields num_phy_chans d40_base 0 2049 NULL
 gss_encrypt_xdr_buf_fndecl_2050_fields gss_encrypt_xdr_buf fndecl 3 2050 NULL
 set_sock_size_fndecl_2051_fields set_sock_size fndecl 3 2051 NULL
 fscrypt_zeroout_range_fndecl_2052_fields fscrypt_zeroout_range fndecl 3 2052 NULL
@@ -529,6 +539,7 @@ count_skge_ring_2140_fields count skge_ring 0 2140 NULL
 xfs_do_writepage_fndecl_2144_fields xfs_do_writepage fndecl 0 2144 NULL nohasharray
 capacity_p9_fcall_2144_fields capacity p9_fcall 0 2144 &xfs_do_writepage_fndecl_2144_fields
 multi_ios_hda_gen_spec_2147_fields multi_ios hda_gen_spec 0 2147 NULL
+ioc_len_obd_ioctl_hdr_2148_fields ioc_len obd_ioctl_hdr 0 2148 NULL
 mpc_new_length_vardecl_mpparse_c_2163_fields mpc_new_length vardecl_mpparse.c 0 2163 NULL nohasharray
 block_size__drive_info_struct_2163_fields block_size _drive_info_struct 0 2163 &mpc_new_length_vardecl_mpparse_c_2163_fields
 read_size_perf_event_2173_fields read_size perf_event 0 2173 NULL
@@ -628,6 +639,7 @@ len_patch_info_2583_fields len patch_info 0 2583 NULL
 nr_pages_scif_pinned_pages_2586_fields nr_pages scif_pinned_pages 0 2586 NULL
 page_cache_tree_insert_fndecl_2600_fields page_cache_tree_insert fndecl 0 2600 NULL
 maxfrsize_bfa_fcs_rport_s_2601_fields maxfrsize bfa_fcs_rport_s 0 2601 NULL
+ld_active_tgt_count_lov_desc_2613_fields ld_active_tgt_count lov_desc 0 2613 NULL
 dst_maxburst_dma_slave_config_2619_fields dst_maxburst dma_slave_config 0 2619 NULL
 len_whc_std_2626_fields len whc_std 0 2626 NULL
 ptn3460_read_bytes_fndecl_2627_fields ptn3460_read_bytes fndecl 4 2627 NULL
@@ -792,6 +804,7 @@ rx_buffer_len_ixgb_adapter_3217_fields rx_buffer_len ixgb_adapter 0 3217 NULL no
 cw1200_sdio_memcpy_fromio_fndecl_3217_fields cw1200_sdio_memcpy_fromio fndecl 4 3217 &rx_buffer_len_ixgb_adapter_3217_fields
 mad_size_ib_mad_private_3230_fields mad_size ib_mad_private 0 3230 NULL
 sq_num_entries_c4iw_qp_attributes_3234_fields sq_num_entries c4iw_qp_attributes 0 3234 NULL
+uniforms_size_drm_vc4_submit_cl_3245_fields uniforms_size drm_vc4_submit_cl 0 3245 NULL
 max_wqe_ocrdma_dev_attr_3246_fields max_wqe ocrdma_dev_attr 0 3246 NULL
 s_max_sge_rvt_qp_3248_fields s_max_sge rvt_qp 0 3248 NULL
 of_property_match_string_fndecl_3250_fields of_property_match_string fndecl 0 3250 NULL
@@ -858,6 +871,8 @@ namelen_xfs_dir2_sf_entry_3481_fields namelen xfs_dir2_sf_entry 0 3481 NULL noha
 chip_send_contexts_hfi1_devdata_3481_fields chip_send_contexts hfi1_devdata 0 3481 &namelen_xfs_dir2_sf_entry_3481_fields
 xfer_len_nvme_trans_io_cdb_3486_fields xfer_len nvme_trans_io_cdb 0 3486 NULL
 from_dio_submit_3494_fields from dio_submit 0 3494 NULL
+hs_bkt_bits_cfs_hash_3509_fields hs_bkt_bits cfs_hash 0 3509 NULL
+statesize_hash_alg_common_3517_fields statesize hash_alg_common 0 3517 NULL
 gru_vtop_fndecl_3522_fields gru_vtop fndecl 2 3522 NULL
 cipso_v4_gentag_rng_fndecl_3532_fields cipso_v4_gentag_rng fndecl 0 3532 NULL
 cl_out_max_entry_size_mvumi_hs_page1_3540_fields cl_out_max_entry_size mvumi_hs_page1 0 3540 NULL
@@ -867,7 +882,8 @@ mult_count_ide_drive_s_3550_fields mult_count ide_drive_s 0 3550 NULL
 ocfs2_read_xattr_bucket_fndecl_3553_fields ocfs2_read_xattr_bucket fndecl 2 3553 NULL
 sg_copy_from_buffer_fndecl_3557_fields sg_copy_from_buffer fndecl 0-4 3557 NULL
 mt2063_write_fndecl_3567_fields mt2063_write fndecl 4 3567 NULL
-page_cache_sync_readahead_fndecl_3569_fields page_cache_sync_readahead fndecl 4 3569 NULL
+page_cache_sync_readahead_fndecl_3569_fields page_cache_sync_readahead fndecl 4 3569 NULL nohasharray
+nr_clk_ids_samsung_cmu_info_3569_fields nr_clk_ids samsung_cmu_info 0 3569 &page_cache_sync_readahead_fndecl_3569_fields
 encode_diropargs3_fndecl_3574_fields encode_diropargs3 fndecl 4 3574 NULL
 pkcs7_view_content_fndecl_3589_fields pkcs7_view_content fndecl 3 3589 NULL nohasharray
 ddr_av_base_mthca_av_table_3589_fields ddr_av_base mthca_av_table 0 3589 &pkcs7_view_content_fndecl_3589_fields
@@ -1105,6 +1121,7 @@ qdepth_uas_dev_info_4551_fields qdepth uas_dev_info 0 4551 NULL
 __collapse_huge_page_swapin_fndecl_4553_fields __collapse_huge_page_swapin fndecl 3 4553 NULL nohasharray
 data_len_o2net_msg_4553_fields data_len o2net_msg 0 4553 &__collapse_huge_page_swapin_fndecl_4553_fields
 hwcursor_size_sis_video_info_4560_fields hwcursor_size sis_video_info 0 4560 NULL
+channels_snd_korg1212_4562_fields channels snd_korg1212 0 4562 NULL
 usbvision_rvmalloc_fndecl_4564_fields usbvision_rvmalloc fndecl 1 4564 NULL
 word1_pkt_stat_desc_4565_fields word1 pkt_stat_desc 0 4565 NULL
 far_copies_geom_4570_fields far_copies geom 0 4570 NULL
@@ -1119,7 +1136,8 @@ btrfs_del_inode_extref_fndecl_4607_fields btrfs_del_inode_extref fndecl 4 4607 N
 max_event_log_size_iwl_base_params_4612_fields max_event_log_size iwl_base_params 0 4612 NULL
 sxgbe_change_mtu_fndecl_4613_fields sxgbe_change_mtu fndecl 2 4613 NULL
 cksumlength_gss_krb5_enctype_4630_fields cksumlength gss_krb5_enctype 0 4630 NULL
-tcam_size_mc5_4631_fields tcam_size mc5 0 4631 NULL
+tcam_size_mc5_4631_fields tcam_size mc5 0 4631 NULL nohasharray
+size_minus_one_mxt_object_4631_fields size_minus_one mxt_object 0 4631 &tcam_size_mc5_4631_fields
 total_bytes__osd_req_data_segment_4634_fields total_bytes _osd_req_data_segment 0 4634 NULL
 setup_efi_state_fndecl_4639_fields setup_efi_state fndecl 5-2-4-3 4639 NULL
 irq_nvecs_bnx2_4644_fields irq_nvecs bnx2 0 4644 NULL
@@ -1209,6 +1227,7 @@ radeon_align_pitch_fndecl_4969_fields radeon_align_pitch fndecl 0-2 4969 NULL
 len_htc_record_hdr_4978_fields len htc_record_hdr 0 4978 NULL
 len_i40iw_sge_4979_fields len i40iw_sge 0 4979 NULL
 t_data_nents_se_cmd_4981_fields t_data_nents se_cmd 0 4981 NULL
+buffer_size_most_channel_config_4986_fields buffer_size most_channel_config 0 4986 NULL
 scif_send_fndecl_4988_fields scif_send fndecl 3 4988 NULL
 __mt7601u_dma_fw_fndecl_4994_fields __mt7601u_dma_fw fndecl 4 4994 NULL
 kmem_cache_create_fndecl_5007_fields kmem_cache_create fndecl 2-3 5007 NULL
@@ -1331,7 +1350,8 @@ __tipc_sendmsg_fndecl_5510_fields __tipc_sendmsg fndecl 3 5510 NULL
 vmw_execbuf_submit_cmdbuf_fndecl_5516_fields vmw_execbuf_submit_cmdbuf fndecl 3 5516 NULL
 line_slgt_info_5527_fields line slgt_info 0 5527 NULL
 ceph_tcp_sendpage_fndecl_5531_fields ceph_tcp_sendpage fndecl 0-4 5531 NULL
-batadv_arp_get_type_fndecl_5538_fields batadv_arp_get_type fndecl 3 5538 NULL
+batadv_arp_get_type_fndecl_5538_fields batadv_arp_get_type fndecl 3 5538 NULL nohasharray
+__vmalloc_node_range_fndecl_5538_fields __vmalloc_node_range fndecl 1-3 5538 &batadv_arp_get_type_fndecl_5538_fields
 vector_acpi_hest_notify_5540_fields vector acpi_hest_notify 0 5540 NULL
 logical_ext4_allocation_request_5548_fields logical ext4_allocation_request 0 5548 NULL
 __netdev_alloc_skb_fndecl_5552_fields __netdev_alloc_skb fndecl 2 5552 NULL
@@ -1375,6 +1395,7 @@ lbtf_cmd_async_fndecl_5691_fields lbtf_cmd_async fndecl 4 5691 NULL
 s_blocks_count_ext2_super_block_5695_fields s_blocks_count ext2_super_block 0 5695 NULL
 write_bytes_to_xdr_buf_fndecl_5702_fields write_bytes_to_xdr_buf fndecl 4-2 5702 NULL
 virtnet_change_mtu_fndecl_5709_fields virtnet_change_mtu fndecl 2 5709 NULL
+zm_wmfw_adsp1_alg_hdr_5710_fields zm wmfw_adsp1_alg_hdr 0 5710 NULL
 sys_fcntl_fndecl_5712_fields sys_fcntl fndecl 3 5712 NULL
 vt_hdr_vxfs_typed_5715_fields vt_hdr vxfs_typed 0 5715 NULL
 hfsplus_get_block_fndecl_5725_fields hfsplus_get_block fndecl 2 5725 NULL
@@ -1448,6 +1469,7 @@ status_register_read_fndecl_6023_fields status_register_read fndecl 4 6023 &max_
 wqe_cnt_mlx5_ib_wq_6024_fields wqe_cnt mlx5_ib_wq 0 6024 NULL
 flags_rtl8180_rx_desc_6025_fields flags rtl8180_rx_desc 0 6025 NULL
 xlog_bwrite_fndecl_6028_fields xlog_bwrite fndecl 2 6028 NULL
+size_drm_vc4_create_shader_bo_6033_fields size drm_vc4_create_shader_bo 0 6033 NULL
 msix_map_region_fndecl_6035_fields msix_map_region fndecl 2 6035 NULL
 push_pipe_fndecl_6041_fields push_pipe fndecl 2-0 6041 NULL nohasharray
 ceph_create_snap_context_fndecl_6041_fields ceph_create_snap_context fndecl 1 6041 &push_pipe_fndecl_6041_fields
@@ -1457,6 +1479,7 @@ scif_rb_space_fndecl_6052_fields scif_rb_space fndecl 0 6052 NULL
 dmi_len_vardecl_dmi_scan_c_6054_fields dmi_len vardecl_dmi_scan.c 0 6054 NULL nohasharray
 ext4_inode_table_fndecl_6054_fields ext4_inode_table fndecl 0 6054 &dmi_len_vardecl_dmi_scan_c_6054_fields
 map_base_tpm_inf_dev_6056_fields map_base tpm_inf_dev 0 6056 NULL
+reqsize_kpp_alg_6064_fields reqsize kpp_alg 0 6064 NULL
 length_hci_ev_le_advertising_info_6074_fields length hci_ev_le_advertising_info 0 6074 NULL
 elog_len_extlog_l1_head_6075_fields elog_len extlog_l1_head 0 6075 NULL
 ioctx_alloc_fndecl_6081_fields ioctx_alloc fndecl 1 6081 NULL
@@ -1464,6 +1487,7 @@ __get_user_pages_unlocked_fndecl_6088_fields __get_user_pages_unlocked fndecl 3
 remote_miu_nfc_llcp_sock_6088_fields remote_miu nfc_llcp_sock 0 6088 &__get_user_pages_unlocked_fndecl_6088_fields nohasharray
 pcifront_scan_root_fndecl_6088_fields pcifront_scan_root fndecl 3 6088 &remote_miu_nfc_llcp_sock_6088_fields
 channel_num_ad9523_channel_spec_6095_fields channel_num ad9523_channel_spec 0 6095 NULL
+__gfs2_xattr_set_fndecl_6098_fields __gfs2_xattr_set fndecl 4 6098 NULL
 alloc_irdadev_fndecl_6103_fields alloc_irdadev fndecl 1 6103 NULL
 rate_min_snd_pcm_hardware_6109_fields rate_min snd_pcm_hardware 0 6109 NULL nohasharray
 blkdev_issue_discard_fndecl_6109_fields blkdev_issue_discard fndecl 0-3-2 6109 &rate_min_snd_pcm_hardware_6109_fields
@@ -1472,6 +1496,7 @@ ilf_blkno_xfs_inode_log_format_6118_fields ilf_blkno xfs_inode_log_format 0 6118
 hblank_panel_info_6122_fields hblank panel_info 0 6122 NULL
 max_gs_mlx5_ib_wq_6148_fields max_gs mlx5_ib_wq 0 6148 NULL
 bytes_per_sector_mspro_devinfo_6149_fields bytes_per_sector mspro_devinfo 0 6149 NULL
+fts_ieee80211_device_6153_fields fts ieee80211_device 0 6153 NULL
 name_len_f2fs_dir_entry_6154_fields name_len f2fs_dir_entry 0 6154 NULL
 buf_size_rte_log_le_6160_fields buf_size rte_log_le 0 6160 NULL nohasharray
 udf_read_tagged_fndecl_6160_fields udf_read_tagged fndecl 2 6160 &buf_size_rte_log_le_6160_fields
@@ -1582,6 +1607,7 @@ jffs2_security_setxattr_fndecl_6550_fields jffs2_security_setxattr fndecl 6 6550
 xlog_do_log_recovery_fndecl_6557_fields xlog_do_log_recovery fndecl 3 6557 NULL
 cxgbit_xmit_pdu_fndecl_6562_fields cxgbit_xmit_pdu fndecl 5 6562 NULL
 verity_verify_io_fndecl_6564_fields verity_verify_io fndecl 0 6564 NULL
+num_x_edt_ft5x06_ts_data_6566_fields num_x edt_ft5x06_ts_data 0 6566 NULL
 i915_gem_object_ggtt_pin_fndecl_6569_fields i915_gem_object_ggtt_pin fndecl 3-5 6569 NULL
 ath6kl_wmi_connect_cmd_fndecl_6571_fields ath6kl_wmi_connect_cmd fndecl 2 6571 NULL
 rts51x_write_mem_fndecl_6573_fields rts51x_write_mem fndecl 4 6573 NULL
@@ -1658,6 +1684,7 @@ ctrl_dma_acm_6806_fields ctrl_dma acm 0 6806 NULL
 ip6ip6_err_fndecl_6807_fields ip6ip6_err fndecl 5 6807 NULL
 nfc_digital_allocate_device_fndecl_6810_fields nfc_digital_allocate_device fndecl 4 6810 NULL
 tx_pipe_at76_priv_6815_fields tx_pipe at76_priv 0 6815 NULL
+hs_rehash_bits_cfs_hash_6820_fields hs_rehash_bits cfs_hash 0 6820 NULL
 bfs_iget_fndecl_6821_fields bfs_iget fndecl 2 6821 NULL
 chip_rcv_contexts_hfi1_devdata_6824_fields chip_rcv_contexts hfi1_devdata 0 6824 NULL
 centre_vertically_fndecl_6833_fields centre_vertically fndecl 2 6833 NULL
@@ -1795,6 +1822,7 @@ v_tot_disp_crtc_7400_fields v_tot_disp crtc 0 7400 NULL
 calipso_genopt_fndecl_7401_fields calipso_genopt fndecl 0 7401 NULL
 ext4_ext_zeroout_fndecl_7404_fields ext4_ext_zeroout fndecl 0 7404 NULL
 fw_sent_bcm203x_data_7405_fields fw_sent bcm203x_data 0 7405 NULL
+ln_namelen_lu_name_7408_fields ln_namelen lu_name 0 7408 NULL
 __ip_append_data_fndecl_7411_fields __ip_append_data fndecl 9-8 7411 NULL
 default_value_cx88_ctrl_7412_fields default_value cx88_ctrl 0 7412 NULL
 htotal_psb_pipe_7415_fields htotal psb_pipe 0 7415 NULL nohasharray
@@ -1833,7 +1861,8 @@ tuple_size_blk_integrity_7585_fields tuple_size blk_integrity 0 7585 NULL
 length_sctp_chunkhdr_7587_fields length sctp_chunkhdr 0 7587 NULL
 ftdi_elan_edset_input_fndecl_7588_fields ftdi_elan_edset_input fndecl 0 7588 NULL
 data_size_efi_setvariable_7593_fields data_size efi_setvariable 0 7593 NULL
-scan_index_iio_chan_spec_7597_fields scan_index iio_chan_spec 0 7597 NULL
+scan_index_iio_chan_spec_7597_fields scan_index iio_chan_spec 0 7597 NULL nohasharray
+num_regions_wm_adsp_fw_caps_7597_fields num_regions wm_adsp_fw_caps 0 7597 &scan_index_iio_chan_spec_7597_fields
 q_blkno_xfs_dquot_7601_fields q_blkno xfs_dquot 0 7601 NULL
 pathmtu_sctp_transport_7603_fields pathmtu sctp_transport 0 7603 NULL
 fuse_listxattr_fndecl_7605_fields fuse_listxattr fndecl 3 7605 NULL
@@ -1879,6 +1908,7 @@ maxcmd_nvme_ctrl_7774_fields maxcmd nvme_ctrl 0 7774 NULL
 t_data_nents_orig_se_cmd_7775_fields t_data_nents_orig se_cmd 0 7775 NULL
 mode_size_cyttsp4_sysinfo_ofs_7780_fields mode_size cyttsp4_sysinfo_ofs 0 7780 NULL
 mmu_private_affs_inode_info_7785_fields mmu_private affs_inode_info 0 7785 NULL
+read_index_wm_adsp_compr_buf_7788_fields read_index wm_adsp_compr_buf 0 7788 NULL
 qxl_framebuffer_surface_dirty_fndecl_7791_fields qxl_framebuffer_surface_dirty fndecl 6 7791 NULL
 inode_getblk_fndecl_7794_fields inode_getblk fndecl 2-0 7794 NULL
 __clk_speculate_rates_fndecl_7795_fields __clk_speculate_rates fndecl 2 7795 NULL
@@ -1950,7 +1980,8 @@ sd_complete_frame_fndecl_8096_fields sd_complete_frame fndecl 3 8096 NULL
 batchcount_kmem_cache_8098_fields batchcount kmem_cache 0 8098 NULL
 sddr55_read_data_fndecl_8099_fields sddr55_read_data fndecl 4-3 8099 NULL
 rx_cmp_meta_data_rx_cmp_ext_8103_fields rx_cmp_meta_data rx_cmp_ext 0 8103 NULL
-tgt_count_blogic_adapter_8109_fields tgt_count blogic_adapter 0 8109 NULL
+tgt_count_blogic_adapter_8109_fields tgt_count blogic_adapter 0 8109 NULL nohasharray
+nr_relocs_drm_etnaviv_gem_submit_8109_fields nr_relocs drm_etnaviv_gem_submit 0 8109 &tgt_count_blogic_adapter_8109_fields
 speed_channel_8113_fields speed channel 0 8113 NULL
 up_dnode_8116_fields up dnode 0 8116 NULL
 __copy_user_nocache_fndecl_8122_fields __copy_user_nocache fndecl 0 8122 NULL
@@ -1971,7 +2002,8 @@ tidoffset_user_sdma_request_8166_fields tidoffset user_sdma_request 0 8166 NULL
 ubifs_scanned_corruption_fndecl_8170_fields ubifs_scanned_corruption fndecl 3 8170 NULL
 tx_ring_count_igb_adapter_8171_fields tx_ring_count igb_adapter 0 8171 NULL
 jumpshot_write_data_fndecl_8172_fields jumpshot_write_data fndecl 4 8172 NULL
-blksz_mmc_data_8174_fields blksz mmc_data 0 8174 NULL
+blksz_mmc_data_8174_fields blksz mmc_data 0 8174 NULL nohasharray
+ptr_mask_efx_tx_queue_8174_fields ptr_mask efx_tx_queue 0 8174 &blksz_mmc_data_8174_fields
 avail_ubifs_wbuf_8176_fields avail ubifs_wbuf 0 8176 NULL
 pdu_read_fndecl_8183_fields pdu_read fndecl 3 8183 NULL
 nsftids_tid_info_8187_fields nsftids tid_info 0 8187 NULL
@@ -1993,12 +2025,15 @@ vmw_cursor_update_dmabuf_fndecl_8254_fields vmw_cursor_update_dmabuf fndecl 4-3
 default_erasesize_fndecl_8255_fields default_erasesize fndecl 0 8255 NULL
 address_acpi_table_bert_8260_fields address acpi_table_bert 0 8260 NULL
 xfs_unmap_extent_fndecl_8261_fields xfs_unmap_extent fndecl 2 8261 NULL
+buf_size_ispstat_buffer_8262_fields buf_size ispstat_buffer 0 8262 NULL
 datablkcnt_capi_register_params_8263_fields datablkcnt capi_register_params 0 8263 NULL
 cow_file_range_inline_fndecl_8264_fields cow_file_range_inline fndecl 4-3 8264 NULL
+num_u3_ports_xhci_hcd_mtk_8272_fields num_u3_ports xhci_hcd_mtk 0 8272 NULL
 datablklen_capi_register_params_8275_fields datablklen capi_register_params 0 8275 NULL
 cdc_ncm_check_tx_max_fndecl_8278_fields cdc_ncm_check_tx_max fndecl 0-2 8278 NULL
 msg_len_rndis_message_8281_fields msg_len rndis_message 0 8281 NULL
-__sg_free_table_fndecl_8283_fields __sg_free_table fndecl 2 8283 NULL
+__sg_free_table_fndecl_8283_fields __sg_free_table fndecl 2 8283 NULL nohasharray
+expectedlen_drbg_testvec_8283_fields expectedlen drbg_testvec 0 8283 &__sg_free_table_fndecl_8283_fields
 rxrpc_kernel_recv_data_fndecl_8286_fields rxrpc_kernel_recv_data fndecl 4 8286 NULL
 tail_len_cfg80211_beacon_data_8293_fields tail_len cfg80211_beacon_data 0 8293 NULL
 ns_blocks_per_segment_the_nilfs_8295_fields ns_blocks_per_segment the_nilfs 0 8295 NULL nohasharray
@@ -2123,6 +2158,7 @@ my_skb_align_fndecl_8755_fields my_skb_align fndecl 2 8755 NULL
 snd_pcm_hw_param_set_fndecl_8761_fields snd_pcm_hw_param_set fndecl 4 8761 NULL
 length_acpi_nfit_system_address_8762_fields length acpi_nfit_system_address 0 8762 NULL
 max_swap_info_struct_8767_fields max swap_info_struct 0 8767 NULL
+max_pfn_radeon_vm_manager_8768_fields max_pfn radeon_vm_manager 0 8768 NULL
 amdtp_stream_set_parameters_fndecl_8769_fields amdtp_stream_set_parameters fndecl 3 8769 NULL
 gfs2_adjust_quota_fndecl_8777_fields gfs2_adjust_quota fndecl 2 8777 NULL
 data_dma_powermate_device_8783_fields data_dma powermate_device 0 8783 NULL
@@ -2199,7 +2235,8 @@ keys_bset_9063_fields keys bset 0 9063 &_drbd_bm_find_next_fndecl_9063_fields no
 tx_buf_sz_iadev_priv_9063_fields tx_buf_sz iadev_priv 0 9063 &keys_bset_9063_fields nohasharray
 send_mpa_reply_fndecl_9063_fields send_mpa_reply fndecl 3 9063 &tx_buf_sz_iadev_priv_9063_fields
 buflen_compat_xfs_fsop_attrlist_handlereq_9071_fields buflen compat_xfs_fsop_attrlist_handlereq 0 9071 NULL
-current_sg_offset_msb_data_9075_fields current_sg_offset msb_data 0 9075 NULL
+current_sg_offset_msb_data_9075_fields current_sg_offset msb_data 0 9075 NULL nohasharray
+nr_inport_coresight_platform_data_9075_fields nr_inport coresight_platform_data 0 9075 &current_sg_offset_msb_data_9075_fields
 nilfs_dat_read_fndecl_9076_fields nilfs_dat_read fndecl 2 9076 NULL
 advertised_mtu_tipc_link_9077_fields advertised_mtu tipc_link 0 9077 NULL
 out_int_pipe_usbtest_dev_9078_fields out_int_pipe usbtest_dev 0 9078 NULL
@@ -2258,6 +2295,7 @@ nsid_nvmet_ns_9259_fields nsid nvmet_ns 0 9259 NULL
 buffer_size_snd_rawmidi_runtime_9267_fields buffer_size snd_rawmidi_runtime 0 9267 NULL
 netlbl_bitmap_walk_fndecl_9270_fields netlbl_bitmap_walk fndecl 0-3 9270 NULL
 wl1251_sdio_write_fndecl_9274_fields wl1251_sdio_write fndecl 4 9274 NULL
+lsm_stripe_count_lov_stripe_md_9277_fields lsm_stripe_count lov_stripe_md 0 9277 NULL
 ResponseDataLength__MSG_SMP_PASSTHROUGH_REPLY_9278_fields ResponseDataLength _MSG_SMP_PASSTHROUGH_REPLY 0 9278 NULL
 nr_pages_start_info_9283_fields nr_pages start_info 0 9283 NULL nohasharray
 regmap_encx24j600_write_fndecl_9283_fields regmap_encx24j600_write fndecl 3 9283 &nr_pages_start_info_9283_fields
@@ -2323,6 +2361,7 @@ mpage_add_bh_to_extent_fndecl_9577_fields mpage_add_bh_to_extent fndecl 2 9577 N
 mode_buf_len_udl_device_9578_fields mode_buf_len udl_device 0 9578 NULL
 cfg80211_rx_mgmt_fndecl_9583_fields cfg80211_rx_mgmt fndecl 5 9583 NULL
 crtc_vblank_start_drm_display_mode_9587_fields crtc_vblank_start drm_display_mode 0 9587 NULL
+per_vf_tids_qed_tm_iids_9589_fields per_vf_tids qed_tm_iids 0 9589 NULL
 tool_setup_mw_fndecl_9597_fields tool_setup_mw fndecl 3 9597 NULL
 xlog_grant_head_wait_fndecl_9598_fields xlog_grant_head_wait fndecl 0 9598 NULL
 ileb_len_ubifs_info_9607_fields ileb_len ubifs_info 0 9607 NULL
@@ -2357,6 +2396,7 @@ pkt_len_virtio_vsock_pkt_info_9698_fields pkt_len virtio_vsock_pkt_info 0 9698 N
 phys_addr_ntb_transport_mw_9704_fields phys_addr ntb_transport_mw 0 9704 NULL
 payload_len_cfg80211_wowlan_tcp_9706_fields payload_len cfg80211_wowlan_tcp 0 9706 NULL
 sr_write_async_fndecl_9707_fields sr_write_async fndecl 3 9707 NULL
+reloc_count_flat_hdr_9712_fields reloc_count flat_hdr 0 9712 NULL
 xprt_rdma_max_inline_write_vardecl_transport_c_9715_fields xprt_rdma_max_inline_write vardecl_transport.c 0 9715 NULL
 page_size_dataflash_9722_fields page_size dataflash 0 9722 NULL
 setup_port_fndecl_9724_fields setup_port fndecl 5-4 9724 NULL nohasharray
@@ -2410,6 +2450,7 @@ __ceph_do_getattr_fndecl_9918_fields __ceph_do_getattr fndecl 0 9918 NULL
 audit_log_n_string_fndecl_9930_fields audit_log_n_string fndecl 3 9930 NULL
 len_load_info_9931_fields len load_info 0 9931 NULL
 r_rcv_len_rvt_qp_9940_fields r_rcv_len rvt_qp 0 9940 NULL
+num_chan_pl330_config_9943_fields num_chan pl330_config 0 9943 NULL
 buffer_len_bnad_debug_info_9948_fields buffer_len bnad_debug_info 0 9948 NULL
 error_dm_crypt_io_9949_fields error dm_crypt_io 0 9949 NULL
 ath6kl_wmi_send_probe_response_cmd_fndecl_9955_fields ath6kl_wmi_send_probe_response_cmd fndecl 6-2 9955 NULL
@@ -2516,8 +2557,10 @@ iomem_base_myri10ge_priv_10393_fields iomem_base myri10ge_priv 0 10393 NULL
 tg3_run_loopback_fndecl_10398_fields tg3_run_loopback fndecl 2 10398 NULL nohasharray
 generic_write_checks_fndecl_10398_fields generic_write_checks fndecl 0 10398 &tg3_run_loopback_fndecl_10398_fields
 ihead_offs_ubifs_info_10400_fields ihead_offs ubifs_info 0 10400 NULL
+length_p_header95_10401_fields length p_header95 0 10401 NULL
 romfs_blk_strnlen_fndecl_10402_fields romfs_blk_strnlen fndecl 3-2-0 10402 NULL
-_osd_req_sizeof_alist_header_fndecl_10405_fields _osd_req_sizeof_alist_header fndecl 0 10405 NULL
+_osd_req_sizeof_alist_header_fndecl_10405_fields _osd_req_sizeof_alist_header fndecl 0 10405 NULL nohasharray
+num_vss_cfgs_wm8994_pdata_10405_fields num_vss_cfgs wm8994_pdata 0 10405 &_osd_req_sizeof_alist_header_fndecl_10405_fields
 zap_vma_ptes_fndecl_10406_fields zap_vma_ptes fndecl 3-2 10406 NULL
 jfs_xattr_set_fndecl_10409_fields jfs_xattr_set fndecl 6 10409 NULL
 addr_page_req_dsc_10411_fields addr page_req_dsc 0 10411 NULL
@@ -2538,7 +2581,8 @@ page_shift_nand_chip_10453_fields page_shift nand_chip 0 10453 NULL
 length_acpi_mem_space_context_10460_fields length acpi_mem_space_context 0 10460 NULL
 vxlan_change_mtu_fndecl_10464_fields vxlan_change_mtu fndecl 2 10464 NULL nohasharray
 __btt_map_write_fndecl_10464_fields __btt_map_write fndecl 0 10464 &vxlan_change_mtu_fndecl_10464_fields
-wNdpOutDivisor_usb_cdc_ncm_ntb_parameters_10467_fields wNdpOutDivisor usb_cdc_ncm_ntb_parameters 0 10467 NULL
+wNdpOutDivisor_usb_cdc_ncm_ntb_parameters_10467_fields wNdpOutDivisor usb_cdc_ncm_ntb_parameters 0 10467 NULL nohasharray
+notesize_fndecl_10467_fields notesize fndecl 0 10467 &wNdpOutDivisor_usb_cdc_ncm_ntb_parameters_10467_fields
 devnum_usb_device_10474_fields devnum usb_device 0 10474 NULL
 signature_mspro_attribute_10483_fields signature mspro_attribute 0 10483 NULL
 out_min_chans_snd_card_asihpi_10490_fields out_min_chans snd_card_asihpi 0 10490 NULL nohasharray
@@ -2684,6 +2728,7 @@ l2cap_build_conf_rsp_fndecl_10988_fields l2cap_build_conf_rsp fndecl 0 10988 NUL
 msize_vardecl_pmc551_c_10989_fields msize vardecl_pmc551.c 0 10989 NULL nohasharray
 vxfs_blkiget_fndecl_10989_fields vxfs_blkiget fndecl 3-2 10989 &msize_vardecl_pmc551_c_10989_fields
 height_v4l2_rect_10995_fields height v4l2_rect 0 10995 NULL
+bitmap_size_dma_iommu_mapping_10997_fields bitmap_size dma_iommu_mapping 0 10997 NULL
 l2nbperpage_jfs_sb_info_11000_fields l2nbperpage jfs_sb_info 0 11000 NULL
 il4965_tx_agg_stop_fndecl_11004_fields il4965_tx_agg_stop fndecl 4 11004 NULL
 xfs_bmap_add_extent_unwritten_real_fndecl_11006_fields xfs_bmap_add_extent_unwritten_real fndecl 0 11006 NULL
@@ -2790,7 +2835,8 @@ ieee80211_send_bar_fndecl_11472_fields ieee80211_send_bar fndecl 3 11472 NULL
 hsync_len_videomode_11474_fields hsync_len videomode 0 11474 NULL
 iov_shorten_fndecl_11481_fields iov_shorten fndecl 3 11481 NULL nohasharray
 c_cpos_ocfs2_write_cluster_desc_11481_fields c_cpos ocfs2_write_cluster_desc 0 11481 &iov_shorten_fndecl_11481_fields
-num_crtc_drm_mode_config_11484_fields num_crtc drm_mode_config 0 11484 NULL
+num_crtc_drm_mode_config_11484_fields num_crtc drm_mode_config 0 11484 NULL nohasharray
+wReportDescLength_gb_hid_desc_response_11484_fields wReportDescLength gb_hid_desc_response 0 11484 &num_crtc_drm_mode_config_11484_fields
 get_ablock_fndecl_11495_fields get_ablock fndecl 2 11495 NULL nohasharray
 length_RioCommand_11495_fields length RioCommand 0 11495 &get_ablock_fndecl_11495_fields
 batadv_max_header_len_fndecl_11496_fields batadv_max_header_len fndecl 0 11496 NULL
@@ -2814,6 +2860,7 @@ brcmf_fil_iovar_data_get_fndecl_11579_fields brcmf_fil_iovar_data_get fndecl 4 1
 next_index_jfs_inode_info_11588_fields next_index jfs_inode_info 0 11588 NULL
 add_advertising_fndecl_11602_fields add_advertising fndecl 4 11602 NULL
 prev_free_msdos_sb_info_11603_fields prev_free msdos_sb_info 0 11603 NULL
+desc_num_hnae_ring_11610_fields desc_num hnae_ring 0 11610 NULL
 frame_length_spi_message_11612_fields frame_length spi_message 0 11612 NULL
 batadv_tt_hash_find_fndecl_11619_fields batadv_tt_hash_find fndecl 3 11619 NULL
 word1_atl1e_recv_ret_status_11620_fields word1 atl1e_recv_ret_status 0 11620 NULL
@@ -2879,6 +2926,7 @@ idetape_queue_rw_tail_fndecl_11881_fields idetape_queue_rw_tail fndecl 3 11881 N
 bochs_dispi_read_fndecl_11885_fields bochs_dispi_read fndecl 0 11885 NULL nohasharray
 leaf_dealloc_fndecl_11885_fields leaf_dealloc fndecl 4-3 11885 &bochs_dispi_read_fndecl_11885_fields
 num_channels_iw_scan_req_11889_fields num_channels iw_scan_req 0 11889 NULL
+gb_operation_message_alloc_fndecl_11891_fields gb_operation_message_alloc fndecl 3 11891 NULL
 vfs_read_fndecl_11892_fields vfs_read fndecl 0-3 11892 NULL
 llcp_tlv16_fndecl_11893_fields llcp_tlv16 fndecl 0 11893 NULL
 flaglen_ring_desc_ex_11894_fields flaglen ring_desc_ex 0 11894 NULL
@@ -2890,12 +2938,14 @@ residual_length_atto_vda_scsi_rsp_11918_fields residual_length atto_vda_scsi_rsp
 p9_fd_read_fndecl_11921_fields p9_fd_read fndecl 0-3 11921 NULL
 tx_buffer_count_hso_serial_11927_fields tx_buffer_count hso_serial 0 11927 NULL
 orig_start_move_extent_11928_fields orig_start move_extent 0 11928 NULL
+length_p_header100_11933_fields length p_header100 0 11933 NULL
 ext4_move_extents_fndecl_11935_fields ext4_move_extents fndecl 5-3-4 11935 NULL
 alloc_low_pages_fndecl_11940_fields alloc_low_pages fndecl 1 11940 NULL
 mss_request_sock_11943_fields mss request_sock 0 11943 NULL
 choose_data_offset_fndecl_11950_fields choose_data_offset fndecl 0 11950 NULL
 max_rdma_atomic_rvt_driver_params_11957_fields max_rdma_atomic rvt_driver_params 0 11957 NULL
 qla4_82xx_pci_set_window_fndecl_11958_fields qla4_82xx_pci_set_window fndecl 0-2 11958 NULL
+per_vf_cids_qed_tm_iids_11959_fields per_vf_cids qed_tm_iids 0 11959 NULL
 red_left_pad_kmem_cache_11964_fields red_left_pad kmem_cache 0 11964 NULL
 i_xattr_nid_f2fs_inode_info_11976_fields i_xattr_nid f2fs_inode_info 0 11976 NULL
 ath10k_htt_rx_crypto_param_len_fndecl_11982_fields ath10k_htt_rx_crypto_param_len fndecl 0 11982 NULL
@@ -2911,6 +2961,7 @@ br_send_bpdu_fndecl_12022_fields br_send_bpdu fndecl 3 12022 NULL nohasharray
 rfcomm_sock_sendmsg_fndecl_12022_fields rfcomm_sock_sendmsg fndecl 3 12022 &br_send_bpdu_fndecl_12022_fields
 yres_fb_var_screeninfo_12023_fields yres fb_var_screeninfo 0 12023 NULL
 xfs_dir2_sf_addname_easy_fndecl_12024_fields xfs_dir2_sf_addname_easy fndecl 4 12024 NULL
+arm_iommu_create_mapping_fndecl_12027_fields arm_iommu_create_mapping fndecl 3 12027 NULL
 sisusb_write_mem_bulk_fndecl_12029_fields sisusb_write_mem_bulk fndecl 4 12029 NULL
 scsi_cmds_max_iscsi_session_12037_fields scsi_cmds_max iscsi_session 0 12037 NULL
 rf_suballoc_bit_ocfs2_refcount_block_12038_fields rf_suballoc_bit ocfs2_refcount_block 0 12038 NULL
@@ -3251,6 +3302,7 @@ xfs_iomap_write_unwritten_fndecl_13278_fields xfs_iomap_write_unwritten fndecl 3
 num_ofld_uld_adapter_13281_fields num_ofld_uld adapter 0 13281 NULL
 status_usb_iso_packet_descriptor_13287_fields status usb_iso_packet_descriptor 0 13287 NULL
 num_bytes_sigma_fw_chunk_control_13289_fields num_bytes sigma_fw_chunk_control 0 13289 NULL
+ioc_plen1_libcfs_ioctl_data_13297_fields ioc_plen1 libcfs_ioctl_data 0 13297 NULL
 alloc_page_buffers_fndecl_13304_fields alloc_page_buffers fndecl 2 13304 NULL
 __vhost_get_user_fndecl_13313_fields __vhost_get_user fndecl 3 13313 NULL
 token_size_iw_ioctl_description_13319_fields token_size iw_ioctl_description 0 13319 NULL nohasharray
@@ -3333,7 +3385,7 @@ retrans_out_tcp_sock_13559_fields retrans_out tcp_sock 0 13559 NULL nohasharray
 __devcgroup_inode_permission_fndecl_13559_fields __devcgroup_inode_permission fndecl 0 13559 &retrans_out_tcp_sock_13559_fields nohasharray
 iomap_apply_fndecl_13559_fields iomap_apply fndecl 0 13559 &__devcgroup_inode_permission_fndecl_13559_fields
 capture_periodsize_rme96_13564_fields capture_periodsize rme96 0 13564 NULL
-edt_ft5x06_ts_readwrite_fndecl_13570_fields edt_ft5x06_ts_readwrite fndecl 2-4 13570 NULL
+edt_ft5x06_ts_readwrite_fndecl_13570_fields edt_ft5x06_ts_readwrite fndecl 2-4-0 13570 NULL
 avc_tuner_dsd_dvb_t_fndecl_13571_fields avc_tuner_dsd_dvb_t fndecl 0 13571 NULL
 pitch_drm_mode_create_dumb_13574_fields pitch drm_mode_create_dumb 0 13574 NULL
 fd_do_prot_fill_fndecl_13583_fields fd_do_prot_fill fndecl 5-3 13583 NULL
@@ -3487,6 +3539,7 @@ size_uhid_input2_req_14140_fields size uhid_input2_req 0 14140 NULL
 cros_ec_spi_receive_packet_fndecl_14142_fields cros_ec_spi_receive_packet fndecl 2 14142 NULL
 short_len_fat_ioctl_filldir_callback_14151_fields short_len fat_ioctl_filldir_callback 0 14151 NULL
 page_size_at24_platform_data_14152_fields page_size at24_platform_data 0 14152 NULL
+num_ratios_coreclk_soc_desc_14154_fields num_ratios coreclk_soc_desc 0 14154 NULL
 range_min_regmap_range_node_14166_fields range_min regmap_range_node 0 14166 NULL
 ocfs2_read_blocks_sync_fndecl_14169_fields ocfs2_read_blocks_sync fndecl 2 14169 NULL
 cmd_len_scsi_cmnd_14171_fields cmd_len scsi_cmnd 0 14171 NULL nohasharray
@@ -3607,6 +3660,7 @@ alb_send_lp_vid_fndecl_14613_fields alb_send_lp_vid fndecl 4 14613 NULL
 recv_bulk_pipe_us_data_14615_fields recv_bulk_pipe us_data 0 14615 NULL
 node_scif_dev_14623_fields node scif_dev 0 14623 NULL
 vmw_execbuf_cmdbuf_fndecl_14639_fields vmw_execbuf_cmdbuf fndecl 4 14639 NULL
+length_comedi_lrange_14641_fields length comedi_lrange 0 14641 NULL
 SSIDsize_bss_info_14644_fields SSIDsize bss_info 0 14644 NULL
 dln2_gpio_get_pin_count_fndecl_14646_fields dln2_gpio_get_pin_count fndecl 0 14646 NULL
 endpoint_usbdevfs_urb_14649_fields endpoint usbdevfs_urb 0 14649 NULL
@@ -3651,6 +3705,7 @@ td_fill_fndecl_14788_fields td_fill fndecl 3 14788 NULL
 brcmf_sdio_verifymemory_fndecl_14795_fields brcmf_sdio_verifymemory fndecl 4-2 14795 NULL nohasharray
 snd_ssthresh_tcp_sock_14795_fields snd_ssthresh tcp_sock 0 14795 &brcmf_sdio_verifymemory_fndecl_14795_fields
 mthca_map_user_db_fndecl_14796_fields mthca_map_user_db fndecl 5 14796 NULL
+alloc_component_match_14799_fields alloc component_match 0 14799 NULL
 sb_max_fwd_alloc_hpfs_sb_info_14807_fields sb_max_fwd_alloc hpfs_sb_info 0 14807 NULL
 nr_sectors_fat_floppy_defaults_14809_fields nr_sectors fat_floppy_defaults 0 14809 NULL
 read_fn_xusb_udc_14819_fields read_fn xusb_udc 0 14819 NULL
@@ -3819,7 +3874,8 @@ index_btframe_15545_fields index btframe 0 15545 NULL
 data_length_mts_transfer_context_15546_fields data_length mts_transfer_context 0 15546 NULL
 lowpan_xmit_fragment_fndecl_15552_fields lowpan_xmit_fragment fndecl 4-6 15552 NULL
 ep_in_kingsun_cb_15553_fields ep_in kingsun_cb 0 15553 NULL
-diff_usnic_uiom_reg_15554_fields diff usnic_uiom_reg 0 15554 NULL
+diff_usnic_uiom_reg_15554_fields diff usnic_uiom_reg 0 15554 NULL nohasharray
+num_odfs_clkgen_pll_data_15554_fields num_odfs clkgen_pll_data 0 15554 &diff_usnic_uiom_reg_15554_fields
 video_buffer_size_vivid_dev_15556_fields video_buffer_size vivid_dev 0 15556 NULL
 max_sges_qedr_qp_hwq_info_15558_fields max_sges qedr_qp_hwq_info 0 15558 NULL
 swiotlb_late_init_with_tbl_fndecl_15566_fields swiotlb_late_init_with_tbl fndecl 2 15566 NULL nohasharray
@@ -3839,6 +3895,7 @@ udf_compute_nr_groups_fndecl_15617_fields udf_compute_nr_groups fndecl 0 15617 N
 ch_r_head_jsm_channel_15625_fields ch_r_head jsm_channel 0 15625 NULL
 nents_sg_table_15627_fields nents sg_table 0 15627 NULL nohasharray
 drm_addmap_core_fndecl_15627_fields drm_addmap_core fndecl 3-2 15627 &nents_sg_table_15627_fields
+lov_alloc_memmd_fndecl_15630_fields lov_alloc_memmd fndecl 2 15630 NULL
 mcs_wrap_mir_skb_fndecl_15633_fields mcs_wrap_mir_skb fndecl 0 15633 NULL
 end_bttv_vbi_fmt_15637_fields end bttv_vbi_fmt 0 15637 NULL
 dma_in_redrat3_dev_15639_fields dma_in redrat3_dev 0 15639 NULL
@@ -3949,6 +4006,7 @@ nsec_seg_buf_16050_fields nsec seg_buf 0 16050 NULL
 nouveau_bo_new_fndecl_16051_fields nouveau_bo_new fndecl 2 16051 NULL
 len_ahc_dma_seg_16052_fields len ahc_dma_seg 0 16052 NULL
 ue_phys_ocfs2_unwritten_extent_16054_fields ue_phys ocfs2_unwritten_extent 0 16054 NULL
+n_insns_comedi_insnlist_16056_fields n_insns comedi_insnlist 0 16056 NULL
 xfs_alloc_fix_freelist_fndecl_16057_fields xfs_alloc_fix_freelist fndecl 0 16057 NULL
 ts_packet_size_cx231xx_tsport_16063_fields ts_packet_size cx231xx_tsport 0 16063 NULL
 ddp_ppod_init_idata_fndecl_16064_fields ddp_ppod_init_idata fndecl 4 16064 NULL
@@ -3962,6 +4020,7 @@ pci_add_resource_offset_fndecl_16095_fields pci_add_resource_offset fndecl 3 160
 w_mode_size_16096_fields w mode_size 0 16096 NULL
 param_len_mgmt_pending_cmd_16099_fields param_len mgmt_pending_cmd 0 16099 NULL
 grow_dev_page_fndecl_16100_fields grow_dev_page fndecl 4-5-3 16100 NULL
+instances_minus_one_mxt_object_16107_fields instances_minus_one mxt_object 0 16107 NULL
 find_extend_vma_fndecl_16110_fields find_extend_vma fndecl 2 16110 NULL
 brcmf_usb_dl_send_bulk_fndecl_16113_fields brcmf_usb_dl_send_bulk fndecl 3 16113 NULL nohasharray
 xillybus_llseek_fndecl_16113_fields xillybus_llseek fndecl 2 16113 &brcmf_usb_dl_send_bulk_fndecl_16113_fields
@@ -4005,11 +4064,13 @@ mmio_size_sis_video_info_16284_fields mmio_size sis_video_info 0 16284 NULL
 find_ibft_region_fndecl_16285_fields find_ibft_region fndecl 0 16285 NULL
 num_queues_qede_dev_16291_fields num_queues qede_dev 0 16291 NULL
 isdn_tty_countDLE_fndecl_16304_fields isdn_tty_countDLE fndecl 0 16304 NULL
-len_ieee80211_vendor_radiotap_16308_fields len ieee80211_vendor_radiotap 0 16308 NULL
+len_ieee80211_vendor_radiotap_16308_fields len ieee80211_vendor_radiotap 0 16308 NULL nohasharray
+wm_adsp_compr_copy_fndecl_16308_fields wm_adsp_compr_copy fndecl 3 16308 &len_ieee80211_vendor_radiotap_16308_fields
 aac_fib_send_fndecl_16315_fields aac_fib_send fndecl 3 16315 NULL
 memblock_mark_mirror_fndecl_16321_fields memblock_mark_mirror fndecl 2-1 16321 NULL
 major_tty_driver_16323_fields major tty_driver 0 16323 NULL
 AscGetMaxDmaCount_fndecl_16326_fields AscGetMaxDmaCount fndecl 0 16326 NULL
+len_gb_raw_send_request_16340_fields len gb_raw_send_request 0 16340 NULL
 sys_dup2_fndecl_16343_fields sys_dup2 fndecl 2 16343 NULL nohasharray
 max_vfs_be_resources_16343_fields max_vfs be_resources 0 16343 &sys_dup2_fndecl_16343_fields
 page_offset_mlx5_srq_attr_16345_fields page_offset mlx5_srq_attr 0 16345 NULL
@@ -4029,7 +4090,8 @@ controller_number_mspro_sys_info_16408_fields controller_number mspro_sys_info 0
 romfs_dev_read_fndecl_16412_fields romfs_dev_read fndecl 2-4 16412 NULL
 bcnt_aoeif_16414_fields bcnt aoeif 0 16414 NULL
 n_sectors_hpfs_super_block_16421_fields n_sectors hpfs_super_block 0 16421 NULL
-bNrInPins_uac_selector_unit_descriptor_16423_fields bNrInPins uac_selector_unit_descriptor 0 16423 NULL
+bNrInPins_uac_selector_unit_descriptor_16423_fields bNrInPins uac_selector_unit_descriptor 0 16423 NULL nohasharray
+per_vf_cids_qed_cdu_iids_16423_fields per_vf_cids qed_cdu_iids 0 16423 &bNrInPins_uac_selector_unit_descriptor_16423_fields
 vm_start_usb_memory_16438_fields vm_start usb_memory 0 16438 NULL
 numa_emulation_fndecl_16441_fields numa_emulation fndecl 2 16441 NULL
 ep_in_usbtest_info_16442_fields ep_in usbtest_info 0 16442 NULL
@@ -4054,7 +4116,8 @@ size_i40iw_chunk_16517_fields size i40iw_chunk 0 16517 NULL
 btrfs_block_rsv_add_fndecl_16520_fields btrfs_block_rsv_add fndecl 0 16520 NULL
 blocks_available_dio_submit_16522_fields blocks_available dio_submit 0 16522 NULL
 xb_suballoc_loc_ocfs2_xattr_block_16523_fields xb_suballoc_loc ocfs2_xattr_block 0 16523 NULL
-io_throttle_count_vnic_snic_config_16529_fields io_throttle_count vnic_snic_config 0 16529 NULL
+io_throttle_count_vnic_snic_config_16529_fields io_throttle_count vnic_snic_config 0 16529 NULL nohasharray
+gb_raw_send_fndecl_16529_fields gb_raw_send fndecl 2 16529 &io_throttle_count_vnic_snic_config_16529_fields
 hfi1_max_qp_wrs_vardecl_16533_fields hfi1_max_qp_wrs vardecl 0 16533 NULL nohasharray
 comm_size_perf_comm_event_16533_fields comm_size perf_comm_event 0 16533 &hfi1_max_qp_wrs_vardecl_16533_fields
 lpt_lebs_ubifs_info_16535_fields lpt_lebs ubifs_info 0 16535 NULL
@@ -4103,6 +4166,7 @@ pcm_buf_host_rw_ofs_snd_card_asihpi_pcm_16719_fields pcm_buf_host_rw_ofs snd_car
 opcfg_ofsl_cyttsp4_sysinfo_data_16723_fields opcfg_ofsl cyttsp4_sysinfo_data 0 16723 NULL
 multi_io_quirk_mmc_host_ops_16729_fields multi_io_quirk mmc_host_ops 0 16729 NULL
 fat_length_fat_boot_sector_16730_fields fat_length fat_boot_sector 0 16730 NULL
+shader_rec_size_drm_vc4_submit_cl_16731_fields shader_rec_size drm_vc4_submit_cl 0 16731 NULL
 width_qxl_head_16734_fields width qxl_head 0 16734 NULL
 nchannels_twl6030_gpadc_platform_data_16736_fields nchannels twl6030_gpadc_platform_data 0 16736 NULL
 udf_add_extendedattr_fndecl_16737_fields udf_add_extendedattr fndecl 2 16737 NULL
@@ -4117,7 +4181,8 @@ cfg80211_classify8021d_fndecl_16771_fields cfg80211_classify8021d fndecl 0 16771
 key_len_iw_encode_ext_16773_fields key_len iw_encode_ext 0 16773 NULL
 security_inode_need_killpriv_fndecl_16777_fields security_inode_need_killpriv fndecl 0 16777 NULL
 qxl_draw_opaque_fb_fndecl_16781_fields qxl_draw_opaque_fb fndecl 2 16781 NULL
-u132_hcd_giveback_urb_fndecl_16783_fields u132_hcd_giveback_urb fndecl 4 16783 NULL
+u132_hcd_giveback_urb_fndecl_16783_fields u132_hcd_giveback_urb fndecl 4 16783 NULL nohasharray
+extra_prefix_len_ieee80211_crypto_ops_16783_fields extra_prefix_len ieee80211_crypto_ops 0 16783 &u132_hcd_giveback_urb_fndecl_16783_fields
 iscsit_build_text_rsp_fndecl_16784_fields iscsit_build_text_rsp fndecl 0 16784 NULL nohasharray
 num_pfns_virtio_balloon_16784_fields num_pfns virtio_balloon 0 16784 &iscsit_build_text_rsp_fndecl_16784_fields
 efi_memmap_init_late_fndecl_16787_fields efi_memmap_init_late fndecl 2-1 16787 NULL
@@ -4218,6 +4283,7 @@ mtu_vnic_enet_config_17176_fields mtu vnic_enet_config 0 17176 NULL nohasharray
 ip_options_get_finish_fndecl_17176_fields ip_options_get_finish fndecl 4 17176 &mtu_vnic_enet_config_17176_fields
 start_block_swap_extent_17179_fields start_block swap_extent 0 17179 NULL
 read_normal_summaries_fndecl_17185_fields read_normal_summaries fndecl 2 17185 NULL
+num_component_match_17187_fields num component_match 0 17187 NULL
 sys_pread64_fndecl_17210_fields sys_pread64 fndecl 3 17210 NULL
 logical_blk_num_osst_tape_17216_fields logical_blk_num osst_tape 0 17216 NULL
 ud_clear_fndecl_17219_fields ud_clear fndecl 6-4-5-3 17219 NULL nohasharray
@@ -4287,6 +4353,7 @@ cipso_v4_map_lvl_hton_fndecl_17481_fields cipso_v4_map_lvl_hton fndecl 0 17481 N
 sddr09_write_inplace_fndecl_17484_fields sddr09_write_inplace fndecl 4-3 17484 NULL nohasharray
 replace_fd_fndecl_17484_fields replace_fd fndecl 1 17484 &sddr09_write_inplace_fndecl_17484_fields
 e_block_mb_cache_entry_17485_fields e_block mb_cache_entry 0 17485 NULL
+len_tmc_drvdata_17487_fields len tmc_drvdata 0 17487 NULL
 mlx4_ib_reg_user_mr_fndecl_17492_fields mlx4_ib_reg_user_mr fndecl 3-2 17492 NULL
 qp_memcpy_from_queue_fndecl_17500_fields qp_memcpy_from_queue fndecl 5-4 17500 NULL
 invalidate_fndecl_17509_fields invalidate fndecl 4-3 17509 NULL
@@ -4317,6 +4384,7 @@ ent_bread_fatent_operations_17603_fields ent_bread fatent_operations 0 17603 &ql
 isoc_ep_stk_camera_17604_fields isoc_ep stk_camera 0 17604 NULL
 nr_planes_nvm_dev_17609_fields nr_planes nvm_dev 0 17609 NULL
 min_alloc_order_gen_pool_17628_fields min_alloc_order gen_pool 0 17628 NULL
+num_peri_pl330_config_17630_fields num_peri pl330_config 0 17630 NULL
 video_linelength_sis_video_info_17642_fields video_linelength sis_video_info 0 17642 NULL
 wl12xx_sdio_raw_read_fndecl_17648_fields wl12xx_sdio_raw_read fndecl 4 17648 NULL
 buf_len_ceph_none_authorizer_17652_fields buf_len ceph_none_authorizer 0 17652 NULL
@@ -4437,6 +4505,7 @@ _osdv2_req_encode_common_fndecl_18086_fields _osdv2_req_encode_common fndecl 2 1
 bits_per_pixel_drm_framebuffer_18087_fields bits_per_pixel drm_framebuffer 0 18087 NULL
 di_nextents_xfs_icdinode_18090_fields di_nextents xfs_icdinode 0 18090 NULL
 inode2sd_fndecl_18094_fields inode2sd fndecl 3 18094 NULL
+stack_size_flat_hdr_18108_fields stack_size flat_hdr 0 18108 NULL
 btrfs_qgroup_reserve_data_fndecl_18109_fields btrfs_qgroup_reserve_data fndecl 0-3-2 18109 NULL
 addr_width_fsl_edma_slave_config_18115_fields addr_width fsl_edma_slave_config 0 18115 NULL
 befs_read_datastream_fndecl_18116_fields befs_read_datastream fndecl 3 18116 NULL
@@ -4519,7 +4588,8 @@ hlen_hfi1_packet_18431_fields hlen hfi1_packet 0 18431 NULL
 fb_find_mode_fndecl_18438_fields fb_find_mode fndecl 7 18438 NULL
 device_pci_device_id_18441_fields device pci_device_id 0 18441 NULL
 count_iov_iter_18447_fields count iov_iter 0 18447 NULL
-data_len_hfa384x_tx_frame_18449_fields data_len hfa384x_tx_frame 0 18449 NULL
+data_len_hfa384x_tx_frame_18449_fields data_len hfa384x_tx_frame 0 18449 NULL nohasharray
+mp_tx_agg_buf_size_sdio_mmc_card_18449_fields mp_tx_agg_buf_size sdio_mmc_card 0 18449 &data_len_hfa384x_tx_frame_18449_fields
 copy_range_nfulnl_instance_18460_fields copy_range nfulnl_instance 0 18460 NULL nohasharray
 max_entries_bpf_map_18460_fields max_entries bpf_map 0 18460 &copy_range_nfulnl_instance_18460_fields
 bsize_jfs_sb_info_18477_fields bsize jfs_sb_info 0 18477 NULL
@@ -4572,10 +4642,13 @@ num_ccells_per_conn_iscsi_kwqe_init1_18665_fields num_ccells_per_conn iscsi_kwqe
 nilfs_move_2nd_super_fndecl_18666_fields nilfs_move_2nd_super fndecl 2 18666 NULL
 len_xdr_netobj_18672_fields len xdr_netobj 0 18672 NULL
 pn_recvmsg_fndecl_18676_fields pn_recvmsg fndecl 3 18676 NULL
+nr_clk_regs_samsung_cmu_info_18678_fields nr_clk_regs samsung_cmu_info 0 18678 NULL
+ocd_max_easize_obd_connect_data_18682_fields ocd_max_easize obd_connect_data 0 18682 NULL
 i2c_wr_max_cx24120_config_18687_fields i2c_wr_max cx24120_config 0 18687 NULL
 num_tc_net_device_18703_fields num_tc net_device 0 18703 NULL
 size_rxdone_entry_desc_18704_fields size rxdone_entry_desc 0 18704 NULL
-den_step_snd_ratnum_18705_fields den_step snd_ratnum 0 18705 NULL
+den_step_snd_ratnum_18705_fields den_step snd_ratnum 0 18705 NULL nohasharray
+num_dup_tsns_sctp_tsnmap_18705_fields num_dup_tsns sctp_tsnmap 0 18705 &den_step_snd_ratnum_18705_fields
 ent_get_fatent_operations_18715_fields ent_get fatent_operations 0 18715 NULL
 read_reg_isar_hw_18717_fields read_reg isar_hw 0 18717 NULL
 feature_len_mic_device_desc_18719_fields feature_len mic_device_desc 0 18719 NULL
@@ -4618,6 +4691,7 @@ num_entries_compat_ipt_replace_18835_fields num_entries compat_ipt_replace 0 188
 xfs_inobt_insert_rec_fndecl_18839_fields xfs_inobt_insert_rec fndecl 4 18839 NULL
 rsn_ie_len_hostap_bss_info_18840_fields rsn_ie_len hostap_bss_info 0 18840 NULL
 number_snd_card_18845_fields number snd_card 0 18845 NULL
+exynos_drm_gem_init_fndecl_18846_fields exynos_drm_gem_init fndecl 2 18846 NULL
 process_measurement_fndecl_18847_fields process_measurement fndecl 3 18847 NULL nohasharray
 n_targets_rsxx_cardinfo_18847_fields n_targets rsxx_cardinfo 0 18847 &process_measurement_fndecl_18847_fields
 taglen_nfsd4_compoundargs_18849_fields taglen nfsd4_compoundargs 0 18849 NULL nohasharray
@@ -4824,13 +4898,15 @@ pcfg_ofsh_cyttsp4_sysinfo_data_19644_fields pcfg_ofsh cyttsp4_sysinfo_data 0 196
 memory_maker_code_mspro_sys_info_19650_fields memory_maker_code mspro_sys_info 0 19650 NULL
 get_rq_pas_size_fndecl_19651_fields get_rq_pas_size fndecl 0 19651 NULL
 af9033_rd_regs_fndecl_19652_fields af9033_rd_regs fndecl 4 19652 NULL
+hr_itemcount_hsm_request_19657_fields hr_itemcount hsm_request 0 19657 NULL
 configfs_dir_lseek_fndecl_19658_fields configfs_dir_lseek fndecl 2 19658 NULL
 peer_fwd_cnt_virtio_vsock_sock_19661_fields peer_fwd_cnt virtio_vsock_sock 0 19661 NULL
 videobuf_vmalloc_to_sg_fndecl_19671_fields videobuf_vmalloc_to_sg fndecl 2 19671 NULL
 recv_intr_pipe_us_data_19678_fields recv_intr_pipe us_data 0 19678 NULL
 depth_em28xx_fmt_19696_fields depth em28xx_fmt 0 19696 NULL nohasharray
 size_pkt_hdr_19696_fields size pkt_hdr 0 19696 &depth_em28xx_fmt_19696_fields nohasharray
-pcnt_bits_ubifs_info_19696_fields pcnt_bits ubifs_info 0 19696 &size_pkt_hdr_19696_fields
+pcnt_bits_ubifs_info_19696_fields pcnt_bits ubifs_info 0 19696 &size_pkt_hdr_19696_fields nohasharray
+prealloc_bufsz_comedi_async_19696_fields prealloc_bufsz comedi_async 0 19696 &pcnt_bits_ubifs_info_19696_fields
 st_fixed_buffer_size_vardecl_st_c_19699_fields st_fixed_buffer_size vardecl_st.c 0 19699 NULL
 gfs2_file_splice_write_fndecl_19705_fields gfs2_file_splice_write fndecl 4 19705 NULL
 max_blksize_sdio_func_19715_fields max_blksize sdio_func 0 19715 NULL
@@ -4849,6 +4925,7 @@ vram_base_qxl_device_19773_fields vram_base qxl_device 0 19773 NULL
 onenand_read_ops_nolock_fndecl_19774_fields onenand_read_ops_nolock fndecl 2 19774 NULL
 gss_decrypt_xdr_buf_fndecl_19786_fields gss_decrypt_xdr_buf fndecl 3 19786 NULL
 rcvbuf_size_rds_tcp_net_19796_fields rcvbuf_size rds_tcp_net 0 19796 NULL
+num_u2_ports_xhci_hcd_mtk_19801_fields num_u2_ports xhci_hcd_mtk 0 19801 NULL
 fromlen_nfs3_symlinkargs_19803_fields fromlen nfs3_symlinkargs 0 19803 NULL
 btrfs_test_inodes_fndecl_19807_fields btrfs_test_inodes fndecl 1-2 19807 NULL
 len_rpcsec_gss_oid_19814_fields len rpcsec_gss_oid 0 19814 NULL
@@ -4910,6 +4987,7 @@ id_len_netdev_phys_item_id_20043_fields id_len netdev_phys_item_id 0 20043 &bata
 max_rqst_sz_nfs4_channel_attrs_20083_fields max_rqst_sz nfs4_channel_attrs 0 20083 NULL
 rxsize_grcan_device_config_20087_fields rxsize grcan_device_config 0 20087 NULL
 bnx2_set_rx_ring_size_fndecl_20092_fields bnx2_set_rx_ring_size fndecl 2 20092 NULL
+r8712_read32_fndecl_20095_fields r8712_read32 fndecl 0 20095 NULL
 reg_count_cs_extent_def_20096_fields reg_count cs_extent_def 0 20096 NULL
 dm_bufio_get_block_number_fndecl_20097_fields dm_bufio_get_block_number fndecl 0 20097 NULL
 qla82xx_pci_mem_write_direct_fndecl_20099_fields qla82xx_pci_mem_write_direct fndecl 2 20099 NULL
@@ -4918,7 +4996,8 @@ minimum_v4l2_ctrl_20103_fields minimum v4l2_ctrl 0 20103 NULL
 precopy_buffers_fndecl_20104_fields precopy_buffers fndecl 3 20104 NULL
 max_acl_len_hci_rp_read_data_block_size_20119_fields max_acl_len hci_rp_read_data_block_size 0 20119 NULL
 d_nhash_vxfs_dirblk_20122_fields d_nhash vxfs_dirblk 0 20122 NULL
-source_sctphdr_20129_fields source sctphdr 0 20129 NULL
+source_sctphdr_20129_fields source sctphdr 0 20129 NULL nohasharray
+ao_chans_pci224_board_20129_fields ao_chans pci224_board 0 20129 &source_sctphdr_20129_fields
 btrfs_punch_hole_fndecl_20130_fields btrfs_punch_hole fndecl 3-2 20130 NULL
 in_ep_snd_usb_midi_endpoint_info_20132_fields in_ep snd_usb_midi_endpoint_info 0 20132 NULL
 data_sectors_per_block_partition_20138_fields data_sectors_per_block partition 0 20138 NULL
@@ -5100,6 +5179,7 @@ num_mlx4_resource_20869_fields num mlx4_resource 0 20869 NULL
 length_iwl_ucode_tlv_20871_fields length iwl_ucode_tlv 0 20871 NULL
 btrfs_prealloc_file_range_fndecl_20872_fields btrfs_prealloc_file_range fndecl 3-4 20872 NULL
 nr_hotspot_blocks_smq_policy_20876_fields nr_hotspot_blocks smq_policy 0 20876 NULL
+max_q_per_vf_rcb_common_cb_20877_fields max_q_per_vf rcb_common_cb 0 20877 NULL
 usb_stor_intr_transfer_fndecl_20883_fields usb_stor_intr_transfer fndecl 3 20883 NULL
 cl_local_node_o2nm_cluster_20896_fields cl_local_node o2nm_cluster 0 20896 NULL
 idiag_info_size_inet_diag_handler_20898_fields idiag_info_size inet_diag_handler 0 20898 NULL
@@ -5246,7 +5326,8 @@ stripes_stripe_c_21457_fields stripes stripe_c 0 21457 NULL
 indirect2direct_fndecl_21459_fields indirect2direct fndecl 6 21459 NULL
 ezusb_access_ltv_fndecl_21485_fields ezusb_access_ltv fndecl 3 21485 NULL
 mmio_start_fb_fix_screeninfo_21486_fields mmio_start fb_fix_screeninfo 0 21486 NULL
-fuse_do_ioctl_fndecl_21491_fields fuse_do_ioctl fndecl 2 21491 NULL
+fuse_do_ioctl_fndecl_21491_fields fuse_do_ioctl fndecl 2 21491 NULL nohasharray
+num_channels_ep93xx_dma_platform_data_21491_fields num_channels ep93xx_dma_platform_data 0 21491 &fuse_do_ioctl_fndecl_21491_fields
 hpfs_ea_ext_remove_fndecl_21492_fields hpfs_ea_ext_remove fndecl 4-2 21492 NULL
 memsize_vgastate_21493_fields memsize vgastate 0 21493 NULL nohasharray
 num_iac_hci_cp_write_current_iac_lap_21493_fields num_iac hci_cp_write_current_iac_lap 0 21493 &memsize_vgastate_21493_fields
@@ -5257,7 +5338,8 @@ fifo_size_hscx_hw_21522_fields fifo_size hscx_hw 0 21522 NULL nohasharray
 c67x00_urb_dequeue_fndecl_21522_fields c67x00_urb_dequeue fndecl 3 21522 &fifo_size_hscx_hw_21522_fields
 data_offset_mdp_superblock_1_21524_fields data_offset mdp_superblock_1 0 21524 NULL
 xennet_max_queues_vardecl_xen_netfront_c_21530_fields xennet_max_queues vardecl_xen-netfront.c 0 21530 NULL
-hfsplus_find_init_fndecl_21533_fields hfsplus_find_init fndecl 0 21533 NULL
+hfsplus_find_init_fndecl_21533_fields hfsplus_find_init fndecl 0 21533 NULL nohasharray
+nr_bos_drm_msm_gem_submit_21533_fields nr_bos drm_msm_gem_submit 0 21533 &hfsplus_find_init_fndecl_21533_fields
 zr364xx_read_fndecl_21537_fields zr364xx_read fndecl 3 21537 NULL
 pcm_snd_oxfw_stream_formation_21546_fields pcm snd_oxfw_stream_formation 0 21546 NULL
 ql_get_full_dup_fndecl_21549_fields ql_get_full_dup fndecl 0 21549 NULL
@@ -5325,6 +5407,7 @@ __ceph_setxattr_fndecl_21751_fields __ceph_setxattr fndecl 4 21751 NULL nohashar
 length_ena_eth_io_rx_cdesc_base_21751_fields length ena_eth_io_rx_cdesc_base 0 21751 &__ceph_setxattr_fndecl_21751_fields
 bufsiz_mousedev_client_21759_fields bufsiz mousedev_client 0 21759 NULL
 width_tm6000_fh_21761_fields width tm6000_fh 0 21761 NULL
+req_lim_delta_srp_login_rsp_21762_fields req_lim_delta srp_login_rsp 0 21762 NULL
 next_checkpoint_r5l_log_21765_fields next_checkpoint r5l_log 0 21765 NULL
 br_startblock_xfs_bmbt_irec_21769_fields br_startblock xfs_bmbt_irec 0 21769 NULL
 byte_len_spi_eeprom_21786_fields byte_len spi_eeprom 0 21786 NULL
@@ -5332,6 +5415,7 @@ tpg_alloc_fndecl_21789_fields tpg_alloc fndecl 2 21789 NULL
 find_group_dir_fndecl_21790_fields find_group_dir fndecl 0 21790 NULL
 idetape_chrdev_read_fndecl_21794_fields idetape_chrdev_read fndecl 3 21794 NULL
 reg_stride_regmap_21801_fields reg_stride regmap 0 21801 NULL
+num_vss_hpf_cfgs_wm8994_pdata_21802_fields num_vss_hpf_cfgs wm8994_pdata 0 21802 NULL
 __svc_create_fndecl_21804_fields __svc_create fndecl 2 21804 NULL
 hwi_ws_sz_hba_parameters_21815_fields hwi_ws_sz hba_parameters 0 21815 NULL
 numacb_vardecl_21828_fields numacb vardecl 0 21828 NULL
@@ -5453,12 +5537,14 @@ num_udav_mthca_profile_22243_fields num_udav mthca_profile 0 22243 NULL
 ieee80211_check_pending_bar_fndecl_22244_fields ieee80211_check_pending_bar fndecl 3 22244 NULL
 rf_suballoc_loc_ocfs2_refcount_block_22248_fields rf_suballoc_loc ocfs2_refcount_block 0 22248 NULL
 hfsplus_asc2uni_fndecl_22252_fields hfsplus_asc2uni fndecl 0 22252 NULL
+receive_data_fndecl_22256_fields receive_data fndecl 2 22256 NULL
 bbio_error_fndecl_22264_fields bbio_error fndecl 3 22264 NULL
 usCRTC_V_Total__ATOM_MODE_TIMING_22265_fields usCRTC_V_Total _ATOM_MODE_TIMING 0 22265 NULL
 mangle_contents_fndecl_22272_fields mangle_contents fndecl 4-6 22272 NULL
 gtt_total_entries__intel_private_22281_fields gtt_total_entries _intel_private 0 22281 NULL nohasharray
 reord_tcp_sacktag_state_22281_fields reord tcp_sacktag_state 0 22281 &gtt_total_entries__intel_private_22281_fields
 scif_get_phys_fndecl_22295_fields scif_get_phys fndecl 0-1 22295 NULL
+gfs2_listxattr_fndecl_22298_fields gfs2_listxattr fndecl 3 22298 NULL
 read_head_n_tty_data_22317_fields read_head n_tty_data 0 22317 NULL
 swiotlb_late_init_with_default_size_fndecl_22319_fields swiotlb_late_init_with_default_size fndecl 1 22319 NULL
 be_fill_queue_fndecl_22320_fields be_fill_queue fndecl 2 22320 NULL
@@ -5531,7 +5617,8 @@ fsync_file_operations_22566_fields fsync file_operations 0 22566 NULL
 burst_fsl_edma_slave_config_22570_fields burst fsl_edma_slave_config 0 22570 NULL
 adc12138_mode_programming_fndecl_22579_fields adc12138_mode_programming fndecl 4 22579 NULL
 id_rfcomm_dev_22580_fields id rfcomm_dev 0 22580 NULL
-qlcnic_pci_sriov_configure_fndecl_22588_fields qlcnic_pci_sriov_configure fndecl 2 22588 NULL
+qlcnic_pci_sriov_configure_fndecl_22588_fields qlcnic_pci_sriov_configure fndecl 2 22588 NULL nohasharray
+rx_queue_size_pxa168_eth_platform_data_22588_fields rx_queue_size pxa168_eth_platform_data 0 22588 &qlcnic_pci_sriov_configure_fndecl_22588_fields
 scif_rb_get_next_fndecl_22601_fields scif_rb_get_next fndecl 3 22601 NULL
 tx_data_max_size_sst_generic_ipc_22604_fields tx_data_max_size sst_generic_ipc 0 22604 NULL
 brcmf_fil_cmd_data_get_fndecl_22605_fields brcmf_fil_cmd_data_get fndecl 4 22605 NULL
@@ -5546,6 +5633,7 @@ length_obj_key_22626_fields length obj_key 0 22626 NULL
 n_compat_sel_arg_struct_22628_fields n compat_sel_arg_struct 0 22628 NULL
 hci_si_event_fndecl_22639_fields hci_si_event fndecl 3 22639 NULL
 scif_vwriteto_fndecl_22640_fields scif_vwriteto fndecl 3-4 22640 NULL
+num_rcv_bufs_visornic_devdata_22643_fields num_rcv_bufs visornic_devdata 0 22643 NULL
 queue_size_snd_timer_params_22646_fields queue_size snd_timer_params 0 22646 NULL
 do_msgsnd_fndecl_22648_fields do_msgsnd fndecl 4 22648 NULL
 isight_decode_fndecl_22650_fields isight_decode fndecl 4 22650 NULL
@@ -5560,6 +5648,7 @@ vidioc_s_input_fndecl_22689_fields vidioc_s_input fndecl 3 22689 NULL
 qca_recv_fndecl_22690_fields qca_recv fndecl 3 22690 NULL
 ctl_dma_yealink_dev_22696_fields ctl_dma yealink_dev 0 22696 NULL
 len_vring_desc_22700_fields len vring_desc 0 22700 NULL
+supplies_count_gb_power_supplies_22705_fields supplies_count gb_power_supplies 0 22705 NULL
 alloc_vudc_device_fndecl_22709_fields alloc_vudc_device fndecl 1 22709 NULL
 brcmf_sdio_read_control_fndecl_22712_fields brcmf_sdio_read_control fndecl 3 22712 NULL
 scif_rb_write_fndecl_22718_fields scif_rb_write fndecl 0-3 22718 NULL
@@ -5574,6 +5663,7 @@ __blk_bios_map_sg_fndecl_22734_fields __blk_bios_map_sg fndecl 0 22734 NULL
 xprt_alloc_fndecl_22736_fields xprt_alloc fndecl 4-3 22736 NULL
 num_fcoe_qps_i40e_pf_22740_fields num_fcoe_qps i40e_pf 0 22740 NULL
 iwlagn_pass_packet_to_mac80211_fndecl_22746_fields iwlagn_pass_packet_to_mac80211 fndecl 3 22746 NULL
+iov_iter_revert_fndecl_22771_fields iov_iter_revert fndecl 2 22771 NULL
 rambase_brcmf_chip_22773_fields rambase brcmf_chip 0 22773 NULL
 efi_memmap_alloc_fndecl_22776_fields efi_memmap_alloc fndecl 1-0 22776 NULL
 ndr_mappings_nd_region_22782_fields ndr_mappings nd_region 0 22782 NULL
@@ -5611,6 +5701,7 @@ snap_names_len_rbd_image_header_ondisk_22898_fields snap_names_len rbd_image_hea
 ima_post_read_file_fndecl_22903_fields ima_post_read_file fndecl 3 22903 NULL nohasharray
 lpfc_fcp_io_channel_init_fndecl_22903_fields lpfc_fcp_io_channel_init fndecl 2 22903 &ima_post_read_file_fndecl_22903_fields
 count_ioctl_gntdev_map_grant_ref_22904_fields count ioctl_gntdev_map_grant_ref 0 22904 NULL
+num_y_edt_ft5x06_ts_data_22905_fields num_y edt_ft5x06_ts_data 0 22905 NULL
 membase_phys_efx_nic_22907_fields membase_phys efx_nic 0 22907 NULL
 vmalloc_32_fndecl_22908_fields vmalloc_32 fndecl 1 22908 NULL
 cfg80211_report_obss_beacon_fndecl_22910_fields cfg80211_report_obss_beacon fndecl 3 22910 NULL
@@ -5667,6 +5758,7 @@ l2_len_ovs_frag_data_23095_fields l2_len ovs_frag_data 0 23095 NULL nohasharray
 s_cluster_ratio_ext4_sb_info_23095_fields s_cluster_ratio ext4_sb_info 0 23095 &l2_len_ovs_frag_data_23095_fields
 qla27xx_fwdt_template_default_size_fndecl_23103_fields qla27xx_fwdt_template_default_size fndecl 0 23103 NULL
 __minimum_chunk_size_fndecl_23105_fields __minimum_chunk_size fndecl 0 23105 NULL
+aim_vdev_read_fndecl_23120_fields aim_vdev_read fndecl 3 23120 NULL
 xfs_rmap_unmap_fndecl_23123_fields xfs_rmap_unmap fndecl 0 23123 NULL nohasharray
 sq_max_sges_c4iw_qp_attributes_23123_fields sq_max_sges c4iw_qp_attributes 0 23123 &xfs_rmap_unmap_fndecl_23123_fields
 numchips_nand_chip_23137_fields numchips nand_chip 0 23137 NULL
@@ -5678,6 +5770,7 @@ max_tx_urbs_kvaser_usb_23152_fields max_tx_urbs kvaser_usb 0 23152 NULL
 memblock_free_fndecl_23154_fields memblock_free fndecl 2-1 23154 NULL
 oxu_create_fndecl_23159_fields oxu_create fndecl 3-2 23159 NULL
 isdn_audio_xlaw2adpcm_fndecl_23162_fields isdn_audio_xlaw2adpcm fndecl 0 23162 NULL
+gfs2_xattr_set_fndecl_23165_fields gfs2_xattr_set fndecl 6 23165 NULL
 width_linux_logo_23166_fields width linux_logo 0 23166 NULL
 memblock_alloc_base_fndecl_23169_fields memblock_alloc_base fndecl 2-1-0-3 23169 NULL nohasharray
 MaxIoCommands_aac_init_23169_fields MaxIoCommands aac_init 0 23169 &memblock_alloc_base_fndecl_23169_fields
@@ -5686,6 +5779,7 @@ x_res_vbe_mode_ib_23177_fields x_res vbe_mode_ib 0 23177 NULL
 udf_current_aext_fndecl_23183_fields udf_current_aext fndecl 0 23183 NULL
 __reuseport_alloc_fndecl_23190_fields __reuseport_alloc fndecl 1 23190 NULL
 seq_lseek_fndecl_23197_fields seq_lseek fndecl 2 23197 NULL
+offs_aim_fh_23201_fields offs aim_fh 0 23201 NULL
 read_swap_header_fndecl_23222_fields read_swap_header fndecl 0 23222 NULL
 clk_core_get_rate_fndecl_23225_fields clk_core_get_rate fndecl 0 23225 NULL nohasharray
 vid_hdr_offset_ubi_device_23225_fields vid_hdr_offset ubi_device 0 23225 &clk_core_get_rate_fndecl_23225_fields
@@ -5751,6 +5845,7 @@ offset_ttm_bus_placement_23475_fields offset ttm_bus_placement 0 23475 NULL
 coda_psdev_write_fndecl_23484_fields coda_psdev_write fndecl 3 23484 NULL
 control_skge_rx_desc_23486_fields control skge_rx_desc 0 23486 NULL
 mxt_read_and_process_messages_fndecl_23502_fields mxt_read_and_process_messages fndecl 2-0 23502 NULL
+pf_tids_total_qed_tm_iids_23535_fields pf_tids_total qed_tm_iids 0 23535 NULL
 offset_crypto_cts_reqctx_23536_fields offset crypto_cts_reqctx 0 23536 NULL
 ieee80211_new_mesh_header_fndecl_23538_fields ieee80211_new_mesh_header fndecl 0 23538 NULL
 ring_size_per_user_data_23539_fields ring_size per_user_data 0 23539 NULL
@@ -5887,6 +5982,7 @@ minimum_pcc_memory_resource_24022_fields minimum pcc_memory_resource 0 24022 NUL
 btt_map_write_fndecl_24029_fields btt_map_write fndecl 0 24029 NULL nohasharray
 fill_user_desc_fndecl_24029_fields fill_user_desc fndecl 2 24029 &btt_map_write_fndecl_24029_fields
 bpp__sisbios_mode_24033_fields bpp _sisbios_mode 0 24033 NULL
+mbo_offs_aim_channel_24035_fields mbo_offs aim_channel 0 24035 NULL
 __radix_tree_preload_fndecl_24036_fields __radix_tree_preload fndecl 0 24036 NULL nohasharray
 namelen_cramfs_inode_24036_fields namelen cramfs_inode 0 24036 &__radix_tree_preload_fndecl_24036_fields
 obj_size_request_sock_ops_24037_fields obj_size request_sock_ops 0 24037 NULL
@@ -6066,6 +6162,7 @@ compat_sys_fcntl_fndecl_24629_fields compat_sys_fcntl fndecl 3 24629 NULL
 elan_i2c_read_block_fndecl_24636_fields elan_i2c_read_block fndecl 4 24636 NULL
 desc_count_orangefs_bufmap_24642_fields desc_count orangefs_bufmap 0 24642 NULL nohasharray
 len_n_flags_il_rx_pkt_24642_fields len_n_flags il_rx_pkt 0 24642 &desc_count_orangefs_bufmap_24642_fields
+data_mcp_cmd_response_24644_fields data mcp_cmd_response 0 24644 NULL
 array_len_xdr_array2_desc_24652_fields array_len xdr_array2_desc 0 24652 NULL
 cur_sg_ore_per_dev_state_24654_fields cur_sg ore_per_dev_state 0 24654 NULL
 offset_musb_qh_24658_fields offset musb_qh 0 24658 NULL
@@ -6116,6 +6213,7 @@ array_resync_offset_dm_raid_superblock_24815_fields array_resync_offset dm_raid_
 HBP_kyrofb_info_24818_fields HBP kyrofb_info 0 24818 NULL
 insert_state_fndecl_24820_fields insert_state fndecl 0-4-3 24820 NULL
 readahead_cached_dev_24826_fields readahead cached_dev 0 24826 NULL
+param_size_preview_update_24836_fields param_size preview_update 0 24836 NULL
 alloc_fddidev_fndecl_24837_fields alloc_fddidev fndecl 1 24837 NULL
 ceph_osdc_notify_ack_fndecl_24848_fields ceph_osdc_notify_ack fndecl 7 24848 NULL
 cx88_alsa_dma_init_fndecl_24851_fields cx88_alsa_dma_init fndecl 2 24851 NULL nohasharray
@@ -6146,7 +6244,8 @@ current_area_pstore_24931_fields current_area pstore 0 24931 &__mutex_lock_killa
 max_sectors_per_io_vardecl_megaraid_c_24934_fields max_sectors_per_io vardecl_megaraid.c 0 24934 NULL
 rtl_download_firmware_fndecl_24937_fields rtl_download_firmware fndecl 3 24937 NULL
 key_len_cfg80211_connect_params_24952_fields key_len cfg80211_connect_params 0 24952 NULL
-vmalloc_fndecl_24955_fields vmalloc fndecl 1 24955 NULL
+vmalloc_fndecl_24955_fields vmalloc fndecl 1 24955 NULL nohasharray
+size_video_still_picture_24955_fields size video_still_picture 0 24955 &vmalloc_fndecl_24955_fields
 pkts_acked_ack_sample_24969_fields pkts_acked ack_sample 0 24969 NULL
 pppol2tp_sendmsg_fndecl_24975_fields pppol2tp_sendmsg fndecl 3 24975 NULL nohasharray
 system_dir_blkno_ocfs2_super_24975_fields system_dir_blkno ocfs2_super 0 24975 &pppol2tp_sendmsg_fndecl_24975_fields nohasharray
@@ -6230,6 +6329,7 @@ validate_checkpoint_fndecl_25229_fields validate_checkpoint fndecl 2 25229 NULL
 show_configfs_attribute_25232_fields show configfs_attribute 0 25232 NULL
 spy_number_iw_spy_data_25234_fields spy_number iw_spy_data 0 25234 NULL
 offset_zatm_pool_info_25250_fields offset zatm_pool_info 0 25250 NULL
+fpnum_omap3isp_ccdc_fpc_25254_fields fpnum omap3isp_ccdc_fpc 0 25254 NULL
 btrfs_submit_direct_fndecl_25259_fields btrfs_submit_direct fndecl 3 25259 NULL
 ar5523_cmd_fndecl_25261_fields ar5523_cmd fndecl 4 25261 NULL
 start_page_swap_extent_25262_fields start_page swap_extent 0 25262 NULL nohasharray
@@ -6274,6 +6374,7 @@ atom_size_pcpu_alloc_info_25396_fields atom_size pcpu_alloc_info 0 25396 NULL
 brcmf_pcie_read_tcm16_fndecl_25401_fields brcmf_pcie_read_tcm16 fndecl 0 25401 NULL
 metromem_dma_metronomefb_par_25407_fields metromem_dma metronomefb_par 0 25407 NULL
 memblock_virt_alloc_try_nid_fndecl_25409_fields memblock_virt_alloc_try_nid fndecl 2-3-4 25409 NULL
+nr_valid_peri_dma_pl330_platdata_25412_fields nr_valid_peri dma_pl330_platdata 0 25412 NULL
 entries_size_ebt_replace_kernel_25413_fields entries_size ebt_replace_kernel 0 25413 NULL
 image_len_gspca_dev_25419_fields image_len gspca_dev 0 25419 NULL
 remap_pci_mem_fndecl_25421_fields remap_pci_mem fndecl 2-1 25421 NULL nohasharray
@@ -6408,6 +6509,7 @@ vchnl_vf_send_add_hmc_objs_req_fndecl_25963_fields vchnl_vf_send_add_hmc_objs_re
 len_xsd_sockmsg_25963_fields len xsd_sockmsg 0 25963 &vchnl_vf_send_add_hmc_objs_req_fndecl_25963_fields
 ieee802154_hdr_get_sechdr_fndecl_25965_fields ieee802154_hdr_get_sechdr fndecl 0 25965 NULL
 memblock_remove_range_fndecl_25969_fields memblock_remove_range fndecl 3-2 25969 NULL
+vscnprintf_fndecl_25984_fields vscnprintf fndecl 0 25984 NULL
 ns_blocksize_bits_the_nilfs_25985_fields ns_blocksize_bits the_nilfs 0 25985 NULL
 split_state_fndecl_25992_fields split_state fndecl 0-4 25992 NULL
 vga_vram_size_vardecl_vgacon_c_25995_fields vga_vram_size vardecl_vgacon.c 0 25995 NULL
@@ -6476,6 +6578,7 @@ simple_io_fndecl_26280_fields simple_io fndecl 4 26280 NULL nohasharray
 xlate_dev_mem_ptr_fndecl_26280_fields xlate_dev_mem_ptr fndecl 1 26280 &simple_io_fndecl_26280_fields
 send_write_fndecl_26285_fields send_write fndecl 6-0-5 26285 NULL
 tx_data_length_hso_serial_26287_fields tx_data_length hso_serial 0 26287 NULL
+size_rsn_ie_t_26289_fields size rsn_ie_t 0 26289 NULL
 hub_port_connect_fndecl_26292_fields hub_port_connect fndecl 2 26292 NULL nohasharray
 sc_max_sge_svcxprt_rdma_26292_fields sc_max_sge svcxprt_rdma 0 26292 &hub_port_connect_fndecl_26292_fields
 members_count_dlm_space_26293_fields members_count dlm_space 0 26293 NULL
@@ -6511,6 +6614,7 @@ dict_size_comp_opts_26391_fields dict_size comp_opts 0 26391 NULL
 maximum_num_physicals_aac_dev_26393_fields maximum_num_physicals aac_dev 0 26393 NULL
 lcd_write_fndecl_26394_fields lcd_write fndecl 3 26394 NULL
 transcnt_elsa_hw_26395_fields transcnt elsa_hw 0 26395 NULL
+ea_init_fndecl_26400_fields ea_init fndecl 5 26400 NULL
 gbuffers_vardecl_meye_c_26402_fields gbuffers vardecl_meye.c 0 26402 NULL
 xhci_giveback_urb_in_irq_fndecl_26403_fields xhci_giveback_urb_in_irq fndecl 3 26403 NULL nohasharray
 bad_peb_limit_ubi_device_26403_fields bad_peb_limit ubi_device 0 26403 &xhci_giveback_urb_in_irq_fndecl_26403_fields
@@ -6566,6 +6670,7 @@ smbios_entry_point_size_vardecl_dmi_scan_c_26579_fields smbios_entry_point_size
 read_tree_block_fndecl_26587_fields read_tree_block fndecl 2 26587 NULL nohasharray
 initial_ssthresh_vardecl_tcp_cubic_c_26587_fields initial_ssthresh vardecl_tcp_cubic.c 0 26587 &read_tree_block_fndecl_26587_fields
 rates_len_add_sta_param_26593_fields rates_len add_sta_param 0 26593 NULL
+tx_desc_count_xgbe_prv_data_26603_fields tx_desc_count xgbe_prv_data 0 26603 NULL
 UMAsize_sis_video_info_26611_fields UMAsize sis_video_info 0 26611 NULL
 width_drm_vmw_size_26615_fields width drm_vmw_size 0 26615 NULL
 control_blocks_gru_create_context_req_26616_fields control_blocks gru_create_context_req 0 26616 NULL
@@ -6594,6 +6699,7 @@ front_len_ceph_msgpool_26653_fields front_len ceph_msgpool 0 26653 NULL
 pmcraid_get_minor_fndecl_26656_fields pmcraid_get_minor fndecl 0 26656 NULL
 nr_recvmsg_fndecl_26658_fields nr_recvmsg fndecl 3 26658 NULL
 jbd2_journal_begin_ordered_truncate_fndecl_26661_fields jbd2_journal_begin_ordered_truncate fndecl 3 26661 NULL
+qed_qm_pf_mem_size_fndecl_26667_fields qed_qm_pf_mem_size fndecl 0 26667 NULL
 hdlc_change_mtu_fndecl_26672_fields hdlc_change_mtu fndecl 2 26672 NULL
 oobsize_mtd_info_26683_fields oobsize mtd_info 0 26683 NULL
 swap_cgroup_swapon_fndecl_26685_fields swap_cgroup_swapon fndecl 2 26685 NULL
@@ -6676,6 +6782,7 @@ bt_sock_recvmsg_fndecl_26967_fields bt_sock_recvmsg fndecl 3 26967 NULL
 brk_mm_struct_26976_fields brk mm_struct 0 26976 NULL nohasharray
 init_allocator_fndecl_26976_fields init_allocator fndecl 3 26976 &brk_mm_struct_26976_fields
 ctrl_out_pipe_hfcusb_data_26981_fields ctrl_out_pipe hfcusb_data 0 26981 NULL
+num_waitchks_drm_tegra_submit_26983_fields num_waitchks drm_tegra_submit 0 26983 NULL
 skd_skreq_prep_buffering_fndecl_26987_fields skd_skreq_prep_buffering fndecl 3 26987 NULL
 __tipc_send_stream_fndecl_26990_fields __tipc_send_stream fndecl 3 26990 NULL
 address_length_acpi_address64_attribute_26992_fields address_length acpi_address64_attribute 0 26992 NULL
@@ -6739,6 +6846,7 @@ netup_unidvb_dma_init_fndecl_27199_fields netup_unidvb_dma_init fndecl 2 27199 N
 tpm_tis_spi_read_bytes_fndecl_27206_fields tpm_tis_spi_read_bytes fndecl 3 27206 NULL
 ath6kl_wmi_scanparams_cmd_fndecl_27208_fields ath6kl_wmi_scanparams_cmd fndecl 2 27208 NULL
 __ext4_read_dirblock_fndecl_27210_fields __ext4_read_dirblock fndecl 2 27210 NULL
+nr_bos_drm_etnaviv_gem_submit_27211_fields nr_bos drm_etnaviv_gem_submit 0 27211 NULL
 block_size_scsi_tape_27212_fields block_size scsi_tape 0 27212 NULL
 num_prior_parent_snaps_ceph_mds_snap_realm_27215_fields num_prior_parent_snaps ceph_mds_snap_realm 0 27215 NULL
 sdio_memcpy_fromio_fndecl_27218_fields sdio_memcpy_fromio fndecl 4 27218 NULL
@@ -6866,6 +6974,7 @@ bsize_videobuf_buffer_27645_fields bsize videobuf_buffer 0 27645 NULL
 period_frames_usb_stream_config_27656_fields period_frames usb_stream_config 0 27656 NULL
 WriteRegs_fndecl_27658_fields WriteRegs fndecl 4 27658 NULL
 xen_get_pages_limit_fndecl_27661_fields xen_get_pages_limit fndecl 0 27661 NULL
+gb_operation_create_common_fndecl_27662_fields gb_operation_create_common fndecl 4 27662 NULL
 ceph_osdc_wait_request_fndecl_27663_fields ceph_osdc_wait_request fndecl 0 27663 NULL
 efx_ef10_mem_map_size_fndecl_27664_fields efx_ef10_mem_map_size fndecl 0 27664 NULL
 size_compat_ip6t_replace_27672_fields size compat_ip6t_replace 0 27672 NULL
@@ -6940,6 +7049,7 @@ ext4_seek_hole_fndecl_27990_fields ext4_seek_hole fndecl 2 27990 NULL
 write_mei_hw_ops_27991_fields write mei_hw_ops 0 27991 NULL
 credits_send_context_27993_fields credits send_context 0 27993 NULL nohasharray
 alloc_ccbs_blogic_adapter_27993_fields alloc_ccbs blogic_adapter 0 27993 &credits_send_context_27993_fields
+cumulative_size_wm_adsp_buffer_region_27998_fields cumulative_size wm_adsp_buffer_region 0 27998 NULL
 page_count_scrub_block_28000_fields page_count scrub_block 0 28000 NULL nohasharray
 ubifs_end_scan_fndecl_28000_fields ubifs_end_scan fndecl 4 28000 &page_count_scrub_block_28000_fields
 max_x_fb_monspecs_28003_fields max_x fb_monspecs 0 28003 NULL
@@ -6960,6 +7070,7 @@ cl_nodelen_rpc_clnt_28055_fields cl_nodelen rpc_clnt 0 28055 NULL
 xfs_end_io_direct_write_fndecl_28060_fields xfs_end_io_direct_write fndecl 3-2 28060 NULL
 s_imap_blocks_minix_sb_info_28062_fields s_imap_blocks minix_sb_info 0 28062 NULL
 gfs2_llseek_fndecl_28067_fields gfs2_llseek fndecl 2 28067 NULL
+nr_cmds_drm_msm_gem_submit_28071_fields nr_cmds drm_msm_gem_submit 0 28071 NULL
 rsi_prepare_skb_fndecl_28075_fields rsi_prepare_skb fndecl 4-3 28075 NULL
 qla4_82xx_pci_mem_write_direct_fndecl_28076_fields qla4_82xx_pci_mem_write_direct fndecl 2 28076 NULL
 abituguru_detect_fndecl_28078_fields abituguru_detect fndecl 0 28078 NULL
@@ -7003,13 +7114,15 @@ wil_seq_hexdump_fndecl_28225_fields wil_seq_hexdump fndecl 3 28225 &s_blocksize_
 space_slots_btrfs_ioctl_space_args_28231_fields space_slots btrfs_ioctl_space_args 0 28231 NULL
 mux_device_request_fndecl_28235_fields mux_device_request fndecl 7 28235 NULL nohasharray
 l2cap_mtu_vardecl_core_c_28235_fields l2cap_mtu vardecl_core.c 0 28235 &mux_device_request_fndecl_28235_fields
+bits_mpidr_hash_28236_fields bits mpidr_hash 0 28236 NULL
 old_addr_inmem_pages_28238_fields old_addr inmem_pages 0 28238 NULL
 loop_end_patch_info_28242_fields loop_end patch_info 0 28242 NULL
 btrfs_qgroup_free_data_fndecl_28246_fields btrfs_qgroup_free_data fndecl 2-3 28246 NULL nohasharray
 ino_bfs_dirent_28246_fields ino bfs_dirent 0 28246 &btrfs_qgroup_free_data_fndecl_28246_fields
 baud_base_serial_struct_28251_fields baud_base serial_struct 0 28251 NULL
 bcm_tx_send_fndecl_28258_fields bcm_tx_send fndecl 4 28258 NULL
-count_e1000_tx_ring_28261_fields count e1000_tx_ring 0 28261 NULL
+count_e1000_tx_ring_28261_fields count e1000_tx_ring 0 28261 NULL nohasharray
+ea_set_i_fndecl_28261_fields ea_set_i fndecl 5 28261 &count_e1000_tx_ring_28261_fields
 flags_rxe_bth_28263_fields flags rxe_bth 0 28263 NULL
 x1_osd_cmd_s_28266_fields x1 osd_cmd_s 0 28266 NULL
 mt7601u_rx_process_seg_fndecl_28268_fields mt7601u_rx_process_seg fndecl 3 28268 NULL
@@ -7085,6 +7198,7 @@ len_s3fwrn5_fw_header_28556_fields len s3fwrn5_fw_header 0 28556 NULL
 ci_ll_init_fndecl_28561_fields ci_ll_init fndecl 3 28561 NULL nohasharray
 num_pads_uvc_entity_28561_fields num_pads uvc_entity 0 28561 &ci_ll_init_fndecl_28561_fields
 PRO_RATE_DEFAULT_vardecl_ice1712_c_28563_fields PRO_RATE_DEFAULT vardecl_ice1712.c 0 28563 NULL
+wm_adsp_write_data_word_fndecl_28566_fields wm_adsp_write_data_word fndecl 0 28566 NULL
 size_vhost_iotlb_msg_28568_fields size vhost_iotlb_msg 0 28568 NULL
 nvme_npages_fndecl_28569_fields nvme_npages fndecl 0-1 28569 NULL
 out_max_chans_snd_card_asihpi_28574_fields out_max_chans snd_card_asihpi 0 28574 NULL
@@ -7147,7 +7261,8 @@ items_max_vxge_hw_mempool_28806_fields items_max vxge_hw_mempool 0 28806 NULL no
 brcmf_fil_bsscfg_data_set_fndecl_28806_fields brcmf_fil_bsscfg_data_set fndecl 4 28806 &items_max_vxge_hw_mempool_28806_fields
 e820_remove_range_fndecl_28810_fields e820_remove_range fndecl 1-2 28810 NULL
 sisusb_send_bridge_packet_fndecl_28818_fields sisusb_send_bridge_packet fndecl 2 28818 NULL
-ceph_build_auth_fndecl_28825_fields ceph_build_auth fndecl 0 28825 NULL
+ceph_build_auth_fndecl_28825_fields ceph_build_auth fndecl 0 28825 NULL nohasharray
+oid_printf_vargs_fndecl_28825_fields oid_printf_vargs fndecl 0 28825 &ceph_build_auth_fndecl_28825_fields
 sdio_memcpy_toio_fndecl_28828_fields sdio_memcpy_toio fndecl 4 28828 NULL
 vram_end_radeon_mc_28831_fields vram_end radeon_mc 0 28831 NULL
 right_qxl_urect_28833_fields right qxl_urect 0 28833 NULL nohasharray
@@ -7156,7 +7271,8 @@ dm_table_add_target_fndecl_28838_fields dm_table_add_target fndecl 4-3 28838 NUL
 dsp_buffer_alloc_fndecl_28855_fields dsp_buffer_alloc fndecl 2 28855 NULL
 pf_cids_qed_src_iids_28859_fields pf_cids qed_src_iids 0 28859 NULL
 mt9t031_set_params_fndecl_28862_fields mt9t031_set_params fndecl 4-3 28862 NULL
-tx_pending_ethtool_ringparam_28864_fields tx_pending ethtool_ringparam 0 28864 NULL
+tx_pending_ethtool_ringparam_28864_fields tx_pending ethtool_ringparam 0 28864 NULL nohasharray
+size_pmk_list_t_28864_fields size pmk_list_t 0 28864 &tx_pending_ethtool_ringparam_28864_fields
 ie_length_brcmf_bss_info_le_28867_fields ie_length brcmf_bss_info_le 0 28867 NULL
 usb_stor_access_xfer_buf_fndecl_28868_fields usb_stor_access_xfer_buf fndecl 0-2 28868 NULL
 i2c_master_recv_fndecl_28869_fields i2c_master_recv fndecl 0-3 28869 NULL
@@ -7192,7 +7308,8 @@ aper_size_agp_kern_info_28990_fields aper_size agp_kern_info 0 28990 NULL
 klen_WepKeyRid_28997_fields klen WepKeyRid 0 28997 NULL
 handle_unit_fndecl_29000_fields handle_unit fndecl 0-1 29000 NULL nohasharray
 rawsize_nd_namespace_label_29000_fields rawsize nd_namespace_label 0 29000 &handle_unit_fndecl_29000_fields
-len_p54p_desc_29001_fields len p54p_desc 0 29001 NULL
+len_p54p_desc_29001_fields len p54p_desc 0 29001 NULL nohasharray
+buf_read_ptr_comedi_async_29001_fields buf_read_ptr comedi_async 0 29001 &len_p54p_desc_29001_fields
 nl80211_send_mgmt_fndecl_29002_fields nl80211_send_mgmt fndecl 7 29002 NULL
 num_lns_csio_hw_29004_fields num_lns csio_hw 0 29004 NULL
 __kfifo_out_peek_fndecl_29010_fields __kfifo_out_peek fndecl 0-3 29010 NULL
@@ -7217,6 +7334,7 @@ ath6kl_wmi_deletekey_cmd_fndecl_29086_fields ath6kl_wmi_deletekey_cmd fndecl 2 2
 len_scifioctl_unreg_29093_fields len scifioctl_unreg 0 29093 NULL
 dlm_lowcomms_get_buffer_fndecl_29111_fields dlm_lowcomms_get_buffer fndecl 2 29111 NULL
 bttv_read_fndecl_29115_fields bttv_read fndecl 3 29115 NULL
+size_tmc_drvdata_29121_fields size tmc_drvdata 0 29121 NULL
 start_dm_verity_fec_29127_fields start dm_verity_fec 0 29127 NULL
 ioctl_code_usbdevfs_ioctl_29134_fields ioctl_code usbdevfs_ioctl 0 29134 NULL
 y1_virtio_gpu_framebuffer_29147_fields y1 virtio_gpu_framebuffer 0 29147 NULL
@@ -7363,6 +7481,7 @@ i40e_pci_sriov_configure_fndecl_29688_fields i40e_pci_sriov_configure fndecl 2 2
 size_tool_mw_29693_fields size tool_mw 0 29693 NULL
 osd_req_write_sg_kern_fndecl_29697_fields osd_req_write_sg_kern fndecl 5 29697 NULL
 qlcnic_pci_sriov_enable_fndecl_29700_fields qlcnic_pci_sriov_enable fndecl 2 29700 NULL
+lmm_stripe_count_lov_user_md_v1_29706_fields lmm_stripe_count lov_user_md_v1 0 29706 NULL
 get_vm_area_caller_fndecl_29708_fields get_vm_area_caller fndecl 1 29708 NULL
 ocfs2_add_refcounted_extent_fndecl_29709_fields ocfs2_add_refcounted_extent fndecl 6-7-5 29709 NULL
 ieee80211_stop_tx_ba_cb_irqsafe_fndecl_29711_fields ieee80211_stop_tx_ba_cb_irqsafe fndecl 3 29711 NULL
@@ -7409,6 +7528,7 @@ residual_st_cmdstatus_29897_fields residual st_cmdstatus 0 29897 NULL
 be_pci_sriov_configure_fndecl_29900_fields be_pci_sriov_configure fndecl 2 29900 NULL
 edge_write_fndecl_29911_fields edge_write fndecl 4 29911 NULL
 io_error_dio_29914_fields io_error dio 0 29914 NULL
+size_exynos_drm_gem_29915_fields size exynos_drm_gem 0 29915 NULL
 fw_imem_len_rt_firmware_29916_fields fw_imem_len rt_firmware 0 29916 NULL
 size_ipt_replace_29921_fields size ipt_replace 0 29921 NULL
 nr_frags_skb_shared_info_29925_fields nr_frags skb_shared_info 0 29925 NULL
@@ -7486,6 +7606,7 @@ prism2_ap_get_sta_qual_fndecl_30181_fields prism2_ap_get_sta_qual fndecl 0 30181
 in_ep_num_rtl_hal_usbint_cfg_30182_fields in_ep_num rtl_hal_usbint_cfg 0 30182 NULL
 alloc_pci_root_info_fndecl_30198_fields alloc_pci_root_info fndecl 2-1 30198 NULL
 buf_len_uvesafb_task_30200_fields buf_len uvesafb_task 0 30200 NULL
+pipe_size_renesas_usbhs_driver_param_30206_fields pipe_size renesas_usbhs_driver_param 0 30206 NULL
 len_header_msg_30207_fields len header_msg 0 30207 NULL
 bm_bits_bm_xfer_ctx_30221_fields bm_bits bm_xfer_ctx 0 30221 NULL nohasharray
 rd_offset_nfsd4_read_30221_fields rd_offset nfsd4_read 0 30221 &bm_bits_bm_xfer_ctx_30221_fields
@@ -7584,7 +7705,8 @@ ext4_collapse_range_fndecl_30598_fields ext4_collapse_range fndecl 3-2 30598 NUL
 offset_drm_i915_gem_pread_30601_fields offset drm_i915_gem_pread 0 30601 NULL
 update_backups_fndecl_30602_fields update_backups fndecl 2 30602 NULL
 add_ino_fndecl_30603_fields add_ino fndecl 4 30603 NULL
-total_data_placed_lpfc_wcqe_complete_30612_fields total_data_placed lpfc_wcqe_complete 0 30612 NULL
+total_data_placed_lpfc_wcqe_complete_30612_fields total_data_placed lpfc_wcqe_complete 0 30612 NULL nohasharray
+blk_sz_os_dat_entry_s_30612_fields blk_sz os_dat_entry_s 0 30612 &total_data_placed_lpfc_wcqe_complete_30612_fields
 ieee802_11_parse_elems_crc_fndecl_30615_fields ieee802_11_parse_elems_crc fndecl 2 30615 NULL
 size_cmdQ_30622_fields size cmdQ 0 30622 NULL
 msc_buffer_win_alloc_fndecl_30624_fields msc_buffer_win_alloc fndecl 2 30624 NULL
@@ -7603,6 +7725,7 @@ mac_drv_rx_complete_fndecl_30692_fields mac_drv_rx_complete fndecl 4 30692 NULL
 keybytes_gss_krb5_enctype_30694_fields keybytes gss_krb5_enctype 0 30694 NULL
 status_urb_30696_fields status urb 0 30696 NULL
 hdsp_spdif_sample_rate_fndecl_30700_fields hdsp_spdif_sample_rate fndecl 0 30700 NULL
+bin_cl_size_drm_vc4_submit_cl_30710_fields bin_cl_size drm_vc4_submit_cl 0 30710 NULL
 numPhys_PVSCSIConfigPageController_30726_fields numPhys PVSCSIConfigPageController 0 30726 NULL
 num_descriptors_pmc_ctx_30735_fields num_descriptors pmc_ctx 0 30735 NULL
 nci_hci_send_data_fndecl_30741_fields nci_hci_send_data fndecl 5 30741 NULL
@@ -7701,6 +7824,7 @@ pci_sriov_get_totalvfs_fndecl_31059_fields pci_sriov_get_totalvfs fndecl 0 31059
 t4_max_qp_depth_c4iw_hw_queue_31059_fields t4_max_qp_depth c4iw_hw_queue 0 31059 &pci_sriov_get_totalvfs_fndecl_31059_fields
 drbd_bm_bits_fndecl_31061_fields drbd_bm_bits fndecl 0 31061 NULL
 si_lf_eblk_bfs_sb_info_31064_fields si_lf_eblk bfs_sb_info 0 31064 NULL
+gb_operation_response_alloc_fndecl_31065_fields gb_operation_response_alloc fndecl 2 31065 NULL
 hdr_offset_xfrm_type_31067_fields hdr_offset xfrm_type 0 31067 NULL
 bulk_in_endpointAddress_usb_serial_port_31069_fields bulk_in_endpointAddress usb_serial_port 0 31069 NULL
 segsize_musb_qh_31074_fields segsize musb_qh 0 31074 NULL
@@ -7759,6 +7883,7 @@ irq_pcmcia_device_31283_fields irq pcmcia_device 0 31283 NULL
 mmap_base_kioctx_31285_fields mmap_base kioctx 0 31285 NULL
 igb_enable_sriov_fndecl_31288_fields igb_enable_sriov fndecl 2 31288 NULL
 nfs_readdir_page_filler_fndecl_31292_fields nfs_readdir_page_filler fndecl 5 31292 NULL
+avail_wm_adsp_compr_buf_31294_fields avail wm_adsp_compr_buf 0 31294 NULL
 fs_shift_hfsplus_sb_info_31309_fields fs_shift hfsplus_sb_info 0 31309 NULL
 rxblen_brcmf_sdio_31317_fields rxblen brcmf_sdio 0 31317 NULL
 bio_integrity_add_page_fndecl_31320_fields bio_integrity_add_page fndecl 3-4 31320 NULL
@@ -7818,6 +7943,7 @@ kernel_physical_mapping_init_fndecl_31561_fields kernel_physical_mapping_init fn
 qlcnic_validate_ringparam_fndecl_31569_fields qlcnic_validate_ringparam fndecl 0 31569 NULL
 can_change_mtu_fndecl_31583_fields can_change_mtu fndecl 2 31583 NULL
 dvb_dvr_set_buffer_size_fndecl_31587_fields dvb_dvr_set_buffer_size fndecl 2 31587 NULL
+num_txq_bna_attr_31588_fields num_txq bna_attr 0 31588 NULL
 emac_receive_skb_fndecl_31589_fields emac_receive_skb fndecl 3 31589 NULL
 v_max_out_saa7146_standard_31591_fields v_max_out saa7146_standard 0 31591 NULL
 nbchannel_capi_profile_31592_fields nbchannel capi_profile 0 31592 NULL
@@ -8007,6 +8133,7 @@ khugepaged_scan_pmd_fndecl_32330_fields khugepaged_scan_pmd fndecl 3 32330 NULL
 bochs_ttm_tt_create_fndecl_32333_fields bochs_ttm_tt_create fndecl 2 32333 NULL nohasharray
 datablock_size_btrfsic_state_32333_fields datablock_size btrfsic_state 0 32333 &bochs_ttm_tt_create_fndecl_32333_fields
 mem_start_net_device_32337_fields mem_start net_device 0 32337 NULL
+exynos_drm_gem_create_fndecl_32344_fields exynos_drm_gem_create fndecl 3 32344 NULL
 scrub_raid56_parity_fndecl_32354_fields scrub_raid56_parity fndecl 5 32354 NULL nohasharray
 brcmf_fws_hdrpull_fndecl_32354_fields brcmf_fws_hdrpull fndecl 2 32354 &scrub_raid56_parity_fndecl_32354_fields
 end_crash_mem_range_32361_fields end crash_mem_range 0 32361 NULL
@@ -8117,6 +8244,7 @@ nfc_allocate_device_fndecl_32805_fields nfc_allocate_device fndecl 3 32805 &pipe
 info_len_ib_ucm_info_32807_fields info_len ib_ucm_info 0 32807 NULL
 m_len_f2fs_map_blocks_32808_fields m_len f2fs_map_blocks 0 32808 NULL
 l_start_xfs_flock64_32809_fields l_start xfs_flock64 0 32809 NULL
+lights_count_gb_lights_32813_fields lights_count gb_lights 0 32813 NULL
 length_ppp_option_data_32814_fields length ppp_option_data 0 32814 NULL
 namelen_jfs_ea_32820_fields namelen jfs_ea 0 32820 NULL
 xfs_btree_compute_maxlevels_fndecl_32823_fields xfs_btree_compute_maxlevels fndecl 0 32823 NULL
@@ -8233,6 +8361,7 @@ udf_load_partdesc_fndecl_33239_fields udf_load_partdesc fndecl 2 33239 NULL
 mfs_fc_lport_33249_fields mfs fc_lport 0 33249 NULL
 metadata_size_ecryptfs_crypt_stat_33252_fields metadata_size ecryptfs_crypt_stat 0 33252 NULL
 val_sz_orangefs_getxattr_response_33253_fields val_sz orangefs_getxattr_response 0 33253 NULL
+size_reserved_mem_33254_fields size reserved_mem 0 33254 NULL
 wb_offset_nfs_page_33255_fields wb_offset nfs_page 0 33255 NULL
 handle_bytes_file_handle_33261_fields handle_bytes file_handle 0 33261 NULL
 ip_vs_prepare_tunneled_skb_fndecl_33269_fields ip_vs_prepare_tunneled_skb fndecl 3 33269 NULL
@@ -8261,6 +8390,7 @@ lpfc_sg_seg_cnt_init_fndecl_33371_fields lpfc_sg_seg_cnt_init fndecl 2 33371 NUL
 ib_qib_max_srq_wrs_vardecl_33376_fields ib_qib_max_srq_wrs vardecl 0 33376 NULL
 sbitmap_resize_fndecl_33380_fields sbitmap_resize fndecl 2 33380 NULL
 xfs_buf_ioerror_fndecl_33390_fields xfs_buf_ioerror fndecl 2 33390 NULL
+stream_size_drm_etnaviv_gem_submit_33393_fields stream_size drm_etnaviv_gem_submit 0 33393 NULL
 data_offset_rndis_packet_33403_fields data_offset rndis_packet 0 33403 NULL
 lbmRead_fndecl_33420_fields lbmRead fndecl 2 33420 NULL
 dreq_gss_dccp_request_sock_33423_fields dreq_gss dccp_request_sock 0 33423 NULL
@@ -8280,6 +8410,7 @@ mt7601u_mcu_msg_alloc_fndecl_33453_fields mt7601u_mcu_msg_alloc fndecl 3 33453 N
 ocfs2_divide_xattr_bucket_fndecl_33455_fields ocfs2_divide_xattr_bucket fndecl 3-4 33455 NULL
 max_recv_send_sge_ocrdma_mbx_query_config_33459_fields max_recv_send_sge ocrdma_mbx_query_config 0 33459 NULL
 tx_pipe_usbpn_dev_33474_fields tx_pipe usbpn_dev 0 33474 NULL
+data_start_flat_hdr_33476_fields data_start flat_hdr 0 33476 NULL
 packets_out_tcp_sock_33478_fields packets_out tcp_sock 0 33478 NULL
 __nbd_ioctl_fndecl_33480_fields __nbd_ioctl fndecl 4 33480 NULL
 ath6kl_buf_alloc_fndecl_33483_fields ath6kl_buf_alloc fndecl 1 33483 NULL
@@ -8310,6 +8441,7 @@ qed_sriov_enable_fndecl_33587_fields qed_sriov_enable fndecl 2 33587 NULL
 hdr_info_bnxt_tpa_info_33589_fields hdr_info bnxt_tpa_info 0 33589 NULL
 i2c_readregs_fndecl_33590_fields i2c_readregs fndecl 5 33590 NULL
 hci_mgmt_cmd_fndecl_33591_fields hci_mgmt_cmd fndecl 4 33591 NULL
+lde_namelen_lu_dirent_33595_fields lde_namelen lu_dirent 0 33595 NULL
 fsl_spi_bufs_fndecl_33599_fields fsl_spi_bufs fndecl 0 33599 NULL
 max_header_size_iriap_cb_33603_fields max_header_size iriap_cb 0 33603 NULL
 drm_prime_pages_to_sg_fndecl_33612_fields drm_prime_pages_to_sg fndecl 2 33612 NULL
@@ -8323,6 +8455,7 @@ s_want_extra_isize_ext4_sb_info_33648_fields s_want_extra_isize ext4_sb_info 0 3
 check_header_fndecl_33649_fields check_header fndecl 2 33649 NULL
 xfs_alloc_ag_vextent_fndecl_33660_fields xfs_alloc_ag_vextent fndecl 0 33660 NULL
 savage_init_hw_fndecl_33678_fields savage_init_hw fndecl 0 33678 NULL
+size_drm_exynos_gem_create_33679_fields size drm_exynos_gem_create 0 33679 NULL
 data_size_vxge_rx_priv_33684_fields data_size vxge_rx_priv 0 33684 NULL
 len_scif_copy_work_33687_fields len scif_copy_work 0 33687 NULL
 mb_find_order_for_block_fndecl_33691_fields mb_find_order_for_block fndecl 0 33691 NULL
@@ -8351,11 +8484,13 @@ wmi_send_fndecl_33768_fields wmi_send fndecl 4 33768 NULL
 status_ffs_ep_33781_fields status ffs_ep 0 33781 NULL
 cx2341x_ctrl_new_std_fndecl_33782_fields cx2341x_ctrl_new_std fndecl 3-6 33782 NULL
 max_gpios_rdc321x_gpio_pdata_33783_fields max_gpios rdc321x_gpio_pdata 0 33783 NULL
-do_jit_fndecl_33785_fields do_jit fndecl 0 33785 NULL
+do_jit_fndecl_33785_fields do_jit fndecl 0 33785 NULL nohasharray
+fm_mapped_extents_ll_user_fiemap_33785_fields fm_mapped_extents ll_user_fiemap 0 33785 &do_jit_fndecl_33785_fields
 sis190_try_rx_copy_fndecl_33790_fields sis190_try_rx_copy fndecl 3 33790 NULL
 sd_write_data_fndecl_33792_fields sd_write_data fndecl 5 33792 NULL
 icv_truncbits_xfrm_algo_auth_info_33798_fields icv_truncbits xfrm_algo_auth_info 0 33798 NULL
 __ip_tun_to_nlattr_fndecl_33801_fields __ip_tun_to_nlattr fndecl 4 33801 NULL
+edt_ft5x06_register_read_fndecl_33803_fields edt_ft5x06_register_read fndecl 0 33803 NULL
 page_size_vmw_cmdbuf_alloc_info_33815_fields page_size vmw_cmdbuf_alloc_info 0 33815 NULL
 custom_length_iscsi_stats_33819_fields custom_length iscsi_stats 0 33819 NULL
 mult_usb_ep_33831_fields mult usb_ep 0 33831 NULL
@@ -8373,11 +8508,13 @@ tolen_nfs_linkargs_33881_fields tolen nfs_linkargs 0 33881 NULL nohasharray
 walk_system_ram_res_fndecl_33881_fields walk_system_ram_res fndecl 2-1 33881 &tolen_nfs_linkargs_33881_fields
 len_gsm_control_33882_fields len gsm_control 0 33882 NULL
 reiserfs_xattr_get_fndecl_33887_fields reiserfs_xattr_get fndecl 0 33887 NULL
+size_gb_operation_msg_hdr_33890_fields size gb_operation_msg_hdr 0 33890 NULL
 src_len_ccp_xts_aes_engine_33899_fields src_len ccp_xts_aes_engine 0 33899 NULL
 init_stripe_fndecl_33902_fields init_stripe fndecl 2 33902 NULL
 xfs_bmbt_maxrecs_fndecl_33906_fields xfs_bmbt_maxrecs fndecl 0 33906 NULL
 _install_special_mapping_fndecl_33907_fields _install_special_mapping fndecl 2-3 33907 NULL
 create_monitor_ctrl_command_fndecl_33909_fields create_monitor_ctrl_command fndecl 4 33909 NULL
+rx_desc_count_xgbe_prv_data_33915_fields rx_desc_count xgbe_prv_data 0 33915 NULL
 w83627hf_device_add_fndecl_33919_fields w83627hf_device_add fndecl 1 33919 NULL
 wil_vring_alloc_skb_fndecl_33924_fields wil_vring_alloc_skb fndecl 4 33924 NULL
 size_cmdline_vardecl_dma_contiguous_c_33925_fields size_cmdline vardecl_dma-contiguous.c 0 33925 NULL
@@ -8427,6 +8564,7 @@ len_hdlcdrv_hdlcrx_34043_fields len hdlcdrv_hdlcrx 0 34043 NULL
 dma_size_nx_host_rds_ring_34047_fields dma_size nx_host_rds_ring 0 34047 NULL
 sys_mmap_pgoff_fndecl_34056_fields sys_mmap_pgoff fndecl 2 34056 NULL
 cdc_ncm_change_mtu_fndecl_34062_fields cdc_ncm_change_mtu fndecl 2 34062 NULL
+lov_get_stripecnt_fndecl_34066_fields lov_get_stripecnt fndecl 0 34066 NULL
 gsm_control_modem_fndecl_34068_fields gsm_control_modem fndecl 3 34068 NULL
 wb_bytes_nfs_page_34071_fields wb_bytes nfs_page 0 34071 NULL nohasharray
 memmap_exclude_ranges_fndecl_34071_fields memmap_exclude_ranges fndecl 3-4 34071 &wb_bytes_nfs_page_34071_fields nohasharray
@@ -8658,6 +8796,7 @@ s35390a_get_reg_fndecl_34971_fields s35390a_get_reg fndecl 4 34971 NULL
 cw1200_queue_stats_init_fndecl_34973_fields cw1200_queue_stats_init fndecl 2 34973 NULL nohasharray
 items_snd_soc_tplg_enum_control_34973_fields items snd_soc_tplg_enum_control 0 34973 &cw1200_queue_stats_init_fndecl_34973_fields
 gcr_base_intel_pmc_ipc_dev_34977_fields gcr_base intel_pmc_ipc_dev 0 34977 NULL
+wm_adsp_buffer_capture_block_fndecl_35001_fields wm_adsp_buffer_capture_block fndecl 2-0 35001 NULL
 rx_ring_count_ixgbe_adapter_35004_fields rx_ring_count ixgbe_adapter 0 35004 NULL
 amb_len_i5k_amb_data_35007_fields amb_len i5k_amb_data 0 35007 NULL nohasharray
 platform_get_irq_byname_fndecl_35007_fields platform_get_irq_byname fndecl 0 35007 &amb_len_i5k_amb_data_35007_fields
@@ -8684,6 +8823,7 @@ inbuf_dma_ati_remote_35083_fields inbuf_dma ati_remote 0 35083 NULL
 ieee80211_add_rx_radiotap_header_fndecl_35086_fields ieee80211_add_rx_radiotap_header fndecl 4 35086 NULL nohasharray
 reclaim_pages_fndecl_35086_fields reclaim_pages fndecl 3 35086 &ieee80211_add_rx_radiotap_header_fndecl_35086_fields
 ubi_calc_data_len_fndecl_35092_fields ubi_calc_data_len fndecl 0-3 35092 NULL
+er_data_len_gfs2_ea_request_35098_fields er_data_len gfs2_ea_request 0 35098 NULL
 num_vf_qps_i40e_pf_35102_fields num_vf_qps i40e_pf 0 35102 NULL
 prot_length_se_device_35103_fields prot_length se_device 0 35103 NULL
 dma_common_get_sgtable_fndecl_35105_fields dma_common_get_sgtable fndecl 5 35105 NULL
@@ -8693,6 +8833,7 @@ ath6kl_wmi_set_bitrate_mask_fndecl_35108_fields ath6kl_wmi_set_bitrate_mask fnde
 pn_raw_send_fndecl_35113_fields pn_raw_send fndecl 2 35113 NULL
 max_uc_mac_be_resources_35119_fields max_uc_mac be_resources 0 35119 NULL
 vxfs_bmap_indir_fndecl_35120_fields vxfs_bmap_indir fndecl 2-0-4 35120 NULL
+alloc_vm_area_fndecl_35121_fields alloc_vm_area fndecl 1 35121 NULL
 advance_dma_data_fndecl_35124_fields advance_dma_data fndecl 2 35124 NULL
 sm501_alloc_mem_fndecl_35125_fields sm501_alloc_mem fndecl 4 35125 NULL
 bch_empty_fifo_fndecl_35126_fields bch_empty_fifo fndecl 2 35126 NULL
@@ -8781,7 +8922,8 @@ ocfs2_prepare_refcount_change_for_del_fndecl_35442_fields ocfs2_prepare_refcount
 pcf2123_read_fndecl_35443_fields pcf2123_read fndecl 4 35443 NULL
 wake_len_cfg80211_wowlan_tcp_35448_fields wake_len cfg80211_wowlan_tcp 0 35448 NULL nohasharray
 len_he_buff_35448_fields len he_buff 0 35448 &wake_len_cfg80211_wowlan_tcp_35448_fields
-ocfs2_truncate_file_fndecl_35455_fields ocfs2_truncate_file fndecl 3 35455 NULL
+ocfs2_truncate_file_fndecl_35455_fields ocfs2_truncate_file fndecl 3 35455 NULL nohasharray
+properties_count_gb_power_supply_35455_fields properties_count gb_power_supply 0 35455 &ocfs2_truncate_file_fndecl_35455_fields
 octeon_create_droq_fndecl_35457_fields octeon_create_droq fndecl 4-3 35457 NULL
 bytes_to_read_mpt3_diag_read_buffer_35460_fields bytes_to_read mpt3_diag_read_buffer 0 35460 NULL
 drbd_send_fndecl_35461_fields drbd_send fndecl 4 35461 NULL
@@ -8898,7 +9040,8 @@ snd_pcm_format_physical_width_fndecl_35858_fields snd_pcm_format_physical_width
 ipw_write_packet_sent_callback_fndecl_35859_fields ipw_write_packet_sent_callback fndecl 2 35859 NULL
 check_acl_fndecl_35867_fields check_acl fndecl 0 35867 NULL
 usb_stor_bulk_transfer_sglist_fndecl_35871_fields usb_stor_bulk_transfer_sglist fndecl 2-5-4 35871 NULL
-pcol_add_page_fndecl_35872_fields pcol_add_page fndecl 3 35872 NULL
+pcol_add_page_fndecl_35872_fields pcol_add_page fndecl 3 35872 NULL nohasharray
+processed_length_mbo_35872_fields processed_length mbo 0 35872 &pcol_add_page_fndecl_35872_fields
 snd_hdsp_midi_output_possible_fndecl_35873_fields snd_hdsp_midi_output_possible fndecl 0 35873 NULL
 shared_out_nid_ca0132_spec_35876_fields shared_out_nid ca0132_spec 0 35876 NULL
 st_sensors_spi_read_fndecl_35890_fields st_sensors_spi_read fndecl 4 35890 NULL
@@ -8909,6 +9052,7 @@ max_sq_desc_sz_mlx4_caps_35905_fields max_sq_desc_sz mlx4_caps 0 35905 &fe_group
 lirc_base_dev_vardecl_lirc_dev_c_35907_fields lirc_base_dev vardecl_lirc_dev.c 0 35907 NULL
 right_vardecl_matroxfb_base_c_35916_fields right vardecl_matroxfb_base.c 0 35916 NULL
 softback_end_vardecl_fbcon_c_35923_fields softback_end vardecl_fbcon.c 0 35923 NULL
+n_algs_wmfw_adsp1_id_hdr_35926_fields n_algs wmfw_adsp1_id_hdr 0 35926 NULL
 ieee802154_hdr_minlen_fndecl_35927_fields ieee802154_hdr_minlen fndecl 0 35927 NULL
 drm_rect_calc_vscale_fndecl_35928_fields drm_rect_calc_vscale fndecl 0 35928 NULL
 bytes_written_cq_fcp_rq_desc_35931_fields bytes_written cq_fcp_rq_desc 0 35931 NULL
@@ -8978,6 +9122,7 @@ vm_mmap_fndecl_36168_fields vm_mmap fndecl 3-0 36168 NULL
 qd2offset_fndecl_36177_fields qd2offset fndecl 0 36177 NULL nohasharray
 member_cnt_tipc_mon_domain_36177_fields member_cnt tipc_mon_domain 0 36177 &qd2offset_fndecl_36177_fields
 length_octeon_droq_info_36178_fields length octeon_droq_info 0 36178 NULL
+nr_ion_platform_data_36179_fields nr ion_platform_data 0 36179 NULL
 i915_gem_get_ggtt_size_fndecl_36180_fields i915_gem_get_ggtt_size fndecl 0-2 36180 NULL
 len_ib_ucm_mra_36185_fields len ib_ucm_mra 0 36185 NULL
 flash_size_jffs2_sb_info_36187_fields flash_size jffs2_sb_info 0 36187 NULL
@@ -9018,7 +9163,8 @@ fat_dump_len_be_adapter_36296_fields fat_dump_len be_adapter 0 36296 NULL
 mru_ovs_skb_cb_36300_fields mru ovs_skb_cb 0 36300 NULL
 command_size_drm_vmw_execbuf_arg_36305_fields command_size drm_vmw_execbuf_arg 0 36305 NULL
 size_kernfs_elem_attr_36307_fields size kernfs_elem_attr 0 36307 NULL
-snd_dma_alloc_pages_fndecl_36308_fields snd_dma_alloc_pages fndecl 3 36308 NULL
+snd_dma_alloc_pages_fndecl_36308_fields snd_dma_alloc_pages fndecl 3 36308 NULL nohasharray
+len_etd_priv_36308_fields len etd_priv 0 36308 &snd_dma_alloc_pages_fndecl_36308_fields
 max_transfer_snd_usb_midi_out_endpoint_36311_fields max_transfer snd_usb_midi_out_endpoint 0 36311 NULL
 chunk_size_mdp_superblock_s_36313_fields chunk_size mdp_superblock_s 0 36313 NULL
 dpdData_size_wsm_configuration_36315_fields dpdData_size wsm_configuration 0 36315 NULL
@@ -9119,6 +9265,7 @@ __kfifo_dma_in_prepare_r_fndecl_36659_fields __kfifo_dma_in_prepare_r fndecl 4-5
 shmem_alloc_page_fndecl_36659_fields shmem_alloc_page fndecl 3 36659 &__kfifo_dma_in_prepare_r_fndecl_36659_fields
 __tty_alloc_driver_fndecl_36660_fields __tty_alloc_driver fndecl 1 36660 NULL
 dac_channels_mixer_oxygen_model_36662_fields dac_channels_mixer oxygen_model 0 36662 NULL
+regmap_raw_write_fndecl_36664_fields regmap_raw_write fndecl 0 36664 NULL
 i_file_acl_lo_ext4_inode_36684_fields i_file_acl_lo ext4_inode 0 36684 NULL
 size_drm_map_36685_fields size drm_map 0 36685 NULL
 size_drm_agp_buffer_36687_fields size drm_agp_buffer 0 36687 NULL
@@ -9148,6 +9295,7 @@ sector_stripe_head_36797_fields sector stripe_head 0 36797 NULL
 v4l_bufsize_vardecl_36803_fields v4l_bufsize vardecl 0 36803 NULL
 idetape_chrdev_write_fndecl_36811_fields idetape_chrdev_write fndecl 3 36811 NULL
 mthca_reg_user_mr_fndecl_36815_fields mthca_reg_user_mr fndecl 3-2 36815 NULL
+size_drm_armada_gem_pwrite_36816_fields size drm_armada_gem_pwrite 0 36816 NULL
 mthca_setup_cmd_doorbells_fndecl_36817_fields mthca_setup_cmd_doorbells fndecl 2 36817 NULL
 card_type_nozomi_36822_fields card_type nozomi 0 36822 NULL
 ir_pre_altera_jtag_36823_fields ir_pre altera_jtag 0 36823 NULL
@@ -9181,6 +9329,7 @@ reserved_kmem_cache_36976_fields reserved kmem_cache 0 36976 NULL
 rx_bufsize_ath_common_36977_fields rx_bufsize ath_common 0 36977 NULL
 usbvision_frames_alloc_fndecl_36983_fields usbvision_frames_alloc fndecl 0-2 36983 NULL
 v_sync_strt_wid_aty128_crtc_36987_fields v_sync_strt_wid aty128_crtc 0 36987 NULL
+size_gb_audio_get_topology_size_response_36992_fields size gb_audio_get_topology_size_response 0 36992 NULL
 lbmAllocate_fndecl_36995_fields lbmAllocate fndecl 2 36995 NULL
 exp_len_ccp_rsa_engine_36998_fields exp_len ccp_rsa_engine 0 36998 NULL
 fp_num_tx_qede_dev_37007_fields fp_num_tx qede_dev 0 37007 NULL
@@ -9272,7 +9421,8 @@ rc_len_whcrc_37363_fields rc_len whcrc 0 37363 NULL
 gsm_change_mtu_fndecl_37364_fields gsm_change_mtu fndecl 2 37364 NULL
 alauda_read_data_fndecl_37367_fields alauda_read_data fndecl 3-2 37367 NULL
 peer_addr_len_drbd_connection_37371_fields peer_addr_len drbd_connection 0 37371 NULL
-virtscsi_add_cmd_fndecl_37379_fields virtscsi_add_cmd fndecl 3-4 37379 NULL
+virtscsi_add_cmd_fndecl_37379_fields virtscsi_add_cmd fndecl 3-4 37379 NULL nohasharray
+size_list_size_vc4_bo_cache_37379_fields size_list_size vc4_bo_cache 0 37379 &virtscsi_add_cmd_fndecl_37379_fields
 gotoxay_fndecl_37380_fields gotoxay fndecl 2-3 37380 NULL
 nvkm_ramht_new_fndecl_37381_fields nvkm_ramht_new fndecl 2 37381 NULL
 size_pnp_mem_37384_fields size pnp_mem 0 37384 NULL
@@ -9304,6 +9454,7 @@ ks8851_rdfifo_fndecl_37510_fields ks8851_rdfifo fndecl 3 37510 NULL
 inode_newsize_ok_fndecl_37511_fields inode_newsize_ok fndecl 0-2 37511 NULL
 etherMtu_mac_eeprom_port_cfg_37523_fields etherMtu_mac eeprom_port_cfg 0 37523 NULL nohasharray
 __data_len_request_37523_fields __data_len request 0 37523 &etherMtu_mac_eeprom_port_cfg_37523_fields
+line_max_gb_gpio_controller_37526_fields line_max gb_gpio_controller 0 37526 NULL
 efx_realloc_channels_fndecl_37528_fields efx_realloc_channels fndecl 2-3 37528 NULL
 num_txd_netxen_adapter_37529_fields num_txd netxen_adapter 0 37529 NULL
 ieee80211_bss_info_update_fndecl_37537_fields ieee80211_bss_info_update fndecl 4 37537 NULL
@@ -9333,8 +9484,10 @@ lsave_sz_ubifs_info_37672_fields lsave_sz ubifs_info 0 37672 NULL
 len_ethtool_eeprom_37676_fields len ethtool_eeprom 0 37676 NULL
 eeprom_blob_size_iwl_priv_37680_fields eeprom_blob_size iwl_priv 0 37680 NULL
 lastextent_efs_inode_info_37681_fields lastextent efs_inode_info 0 37681 NULL
+zm_wmfw_adsp2_alg_hdr_37694_fields zm wmfw_adsp2_alg_hdr 0 37694 NULL
 usb_ftdi_elan_edset_setup_fndecl_37695_fields usb_ftdi_elan_edset_setup fndecl 0 37695 NULL
 orig_video_points_screen_info_37702_fields orig_video_points screen_info 0 37702 NULL
+num_tx_ring_sh_eth_private_37717_fields num_tx_ring sh_eth_private 0 37717 NULL
 regset_tls_get_fndecl_37721_fields regset_tls_get fndecl 3 37721 NULL
 zap_bt_entries_mapping_fndecl_37722_fields zap_bt_entries_mapping fndecl 3-4-2 37722 NULL
 bfad_debugfs_lseek_fndecl_37724_fields bfad_debugfs_lseek fndecl 2 37724 NULL
@@ -9344,6 +9497,7 @@ sk_wmem_queued_sock_37733_fields sk_wmem_queued sock 0 37733 NULL
 ieee80211_aes_gcm_encrypt_fndecl_37737_fields ieee80211_aes_gcm_encrypt fndecl 5 37737 NULL
 len_cap_mon_bin_hdr_37739_fields len_cap mon_bin_hdr 0 37739 NULL
 cryptlen_skcipher_request_37750_fields cryptlen skcipher_request 0 37750 NULL
+num_enh_eq_cfgs_wm8994_pdata_37752_fields num_enh_eq_cfgs wm8994_pdata 0 37752 NULL
 vmw_kms_ldu_do_dmabuf_dirty_fndecl_37757_fields vmw_kms_ldu_do_dmabuf_dirty fndecl 6 37757 NULL
 ath6kl_dbg_dump_fndecl_37760_fields ath6kl_dbg_dump fndecl 5 37760 NULL
 length_acpi_object_buffer_37768_fields length acpi_object_buffer 0 37768 NULL
@@ -9383,6 +9537,7 @@ xfs_buf_get_uncached_fndecl_37894_fields xfs_buf_get_uncached fndecl 2 37894 NUL
 bulk_in_ipheth_device_37894_fields bulk_in ipheth_device 0 37894 &xfs_buf_get_uncached_fndecl_37894_fields
 prod_xfs_alloc_arg_37897_fields prod xfs_alloc_arg 0 37897 NULL
 calc_send_wqe_fndecl_37899_fields calc_send_wqe fndecl 0 37899 NULL
+vc4_get_cache_list_for_size_fndecl_37902_fields vc4_get_cache_list_for_size fndecl 2 37902 NULL
 datalen_user_key_payload_37906_fields datalen user_key_payload 0 37906 NULL
 pasid_kfd_process_37907_fields pasid kfd_process 0 37907 NULL
 mlx5_set_port_qetcr_reg_fndecl_37932_fields mlx5_set_port_qetcr_reg fndecl 3 37932 NULL
@@ -9481,6 +9636,7 @@ ftid_base_tid_info_38313_fields ftid_base tid_info 0 38313 NULL
 __bestmult_fndecl_38314_fields __bestmult fndecl 2 38314 NULL
 t37_nodes_mxt_dbg_38317_fields t37_nodes mxt_dbg 0 38317 NULL
 nr_siblings_perf_event_38320_fields nr_siblings perf_event 0 38320 NULL
+shader_rec_count_drm_vc4_submit_cl_38324_fields shader_rec_count drm_vc4_submit_cl 0 38324 NULL
 raydium_i2c_read_fndecl_38332_fields raydium_i2c_read fndecl 4 38332 NULL
 ext_lfb_base_screen_info_38337_fields ext_lfb_base screen_info 0 38337 NULL nohasharray
 iov_len_sg_iovec_38337_fields iov_len sg_iovec 0 38337 &ext_lfb_base_screen_info_38337_fields
@@ -9494,6 +9650,7 @@ xfs_dir3_free_get_buf_fndecl_38355_fields xfs_dir3_free_get_buf fndecl 2 38355 N
 rate_snd_soc_dai_38358_fields rate snd_soc_dai 0 38358 NULL
 pci_sriov_resource_alignment_fndecl_38365_fields pci_sriov_resource_alignment fndecl 0 38365 NULL
 flush_buffer_fndecl_38367_fields flush_buffer fndecl 2 38367 NULL
+ri_length_gfs2_rindex_38375_fields ri_length gfs2_rindex 0 38375 NULL
 wsm_handle_exception_fndecl_38377_fields wsm_handle_exception fndecl 3 38377 NULL
 options_len_ip_tunnel_info_38380_fields options_len ip_tunnel_info 0 38380 NULL nohasharray
 offset_ttm_buffer_object_38380_fields offset ttm_buffer_object 0 38380 &options_len_ip_tunnel_info_38380_fields
@@ -9612,6 +9769,7 @@ vlan_tci_sk_buff_38825_fields vlan_tci sk_buff 0 38825 NULL
 algorithm_r5conf_38831_fields algorithm r5conf 0 38831 NULL
 memblock_alloc_fndecl_38847_fields memblock_alloc fndecl 2-1-0 38847 NULL
 datablob_len_encrypted_key_payload_38850_fields datablob_len encrypted_key_payload 0 38850 NULL
+srs_nslot_sptlrpc_rule_set_38854_fields srs_nslot sptlrpc_rule_set 0 38854 NULL
 srp_map_sg_dma_fndecl_38856_fields srp_map_sg_dma fndecl 0 38856 NULL
 count_ixgbevf_ring_38867_fields count ixgbevf_ring 0 38867 NULL
 sectors_per_track_mspro_devinfo_38870_fields sectors_per_track mspro_devinfo 0 38870 NULL
@@ -9772,6 +9930,7 @@ tx_count_ethtool_channels_39384_fields tx_count ethtool_channels 0 39384 &from_o
 lfb_depth_screen_info_39385_fields lfb_depth screen_info 0 39385 NULL
 read16_ssb_bus_ops_39388_fields read16 ssb_bus_ops 0 39388 NULL
 round_rate_clk_ops_39390_fields round_rate clk_ops 0 39390 NULL
+pf_cids_qed_tm_iids_39393_fields pf_cids qed_tm_iids 0 39393 NULL
 __page_set_anon_rmap_fndecl_39401_fields __page_set_anon_rmap fndecl 3 39401 NULL
 userptr_radeon_ttm_tt_39408_fields userptr radeon_ttm_tt 0 39408 NULL
 total_vfs_fm10k_iov_info_39412_fields total_vfs fm10k_iov_info 0 39412 NULL
@@ -9803,6 +9962,7 @@ max_count_octeon_droq_39475_fields max_count octeon_droq 0 39475 NULL
 address_length_acpi_resource_fixed_memory32_39483_fields address_length acpi_resource_fixed_memory32 0 39483 NULL
 iov_iter_bvec_fndecl_39493_fields iov_iter_bvec fndecl 5 39493 NULL
 network_header_len_dwceqos_tx_39500_fields network_header_len dwceqos_tx 0 39500 NULL
+gb_operation_message_init_fndecl_39512_fields gb_operation_message_init fndecl 4 39512 NULL
 ppp_read_fndecl_39514_fields ppp_read fndecl 3 39514 NULL
 ceph_osdc_call_fndecl_39526_fields ceph_osdc_call fndecl 8 39526 NULL
 txsize_grcan_device_config_39527_fields txsize grcan_device_config 0 39527 NULL nohasharray
@@ -9852,6 +10012,7 @@ rdma_read_chunk_frmr_fndecl_39676_fields rdma_read_chunk_frmr fndecl 7 39676 NUL
 priv_size_Qdisc_ops_39692_fields priv_size Qdisc_ops 0 39692 NULL nohasharray
 fd_block_size_fd_dev_39692_fields fd_block_size fd_dev 0 39692 &priv_size_Qdisc_ops_39692_fields
 length_rvt_swqe_39694_fields length rvt_swqe 0 39694 NULL
+nb_ace_cci_nb_ports_39699_fields nb_ace cci_nb_ports 0 39699 NULL
 badblockpos_nand_chip_39700_fields badblockpos nand_chip 0 39700 NULL
 tid_ieee80211_ra_tid_39703_fields tid ieee80211_ra_tid 0 39703 NULL
 xfs_growfs_get_hdr_buf_fndecl_39706_fields xfs_growfs_get_hdr_buf fndecl 2-3 39706 NULL
@@ -9974,6 +10135,7 @@ pvr2_ctrl_get_min_fndecl_40204_fields pvr2_ctrl_get_min fndecl 0 40204 NULL
 num_amgms_mlx4_caps_40207_fields num_amgms mlx4_caps 0 40207 NULL
 ipwireless_tty_received_fndecl_40209_fields ipwireless_tty_received fndecl 3 40209 NULL
 kbuf_alloc_2_sgl_fndecl_40216_fields kbuf_alloc_2_sgl fndecl 1 40216 NULL
+len_p80211ioctl_req_40220_fields len p80211ioctl_req 0 40220 NULL
 bochs_bo_create_fndecl_40223_fields bochs_bo_create fndecl 2 40223 NULL
 size_fuse_getxattr_out_40231_fields size fuse_getxattr_out 0 40231 NULL
 do_jffs2_getxattr_fndecl_40233_fields do_jffs2_getxattr fndecl 0 40233 NULL
@@ -10004,6 +10166,7 @@ reg_list_format_size_bytes_rlc_firmware_header_v2_0_40357_fields reg_list_format
 cblock_dm_cache_migration_40361_fields cblock dm_cache_migration 0 40361 NULL
 cfpkt_setlen_fndecl_40364_fields cfpkt_setlen fndecl 2 40364 NULL nohasharray
 max_wrs_rds_ib_device_40364_fields max_wrs rds_ib_device 0 40364 &cfpkt_setlen_fndecl_40364_fields
+len_raw_data_40368_fields len raw_data 0 40368 NULL
 align_kmem_cache_40377_fields align kmem_cache 0 40377 NULL
 cfg0_size_pcie_port_40380_fields cfg0_size pcie_port 0 40380 NULL
 ilm_len_mt76_fw_header_40389_fields ilm_len mt76_fw_header 0 40389 NULL
@@ -10012,6 +10175,7 @@ file_secno_bplus_leaf_node_40394_fields file_secno bplus_leaf_node 0 40394 NULL
 sb_root_hpfs_sb_info_40394_fields sb_root hpfs_sb_info 0 40394 &file_secno_bplus_leaf_node_40394_fields
 snd_ak4113_external_rate_fndecl_40404_fields snd_ak4113_external_rate fndecl 0 40404 NULL nohasharray
 max_scaled_height_bttv_crop_40404_fields max_scaled_height bttv_crop 0 40404 &snd_ak4113_external_rate_fndecl_40404_fields
+arm_clear_user_fndecl_40410_fields arm_clear_user fndecl 0 40410 NULL
 level3cnt_capi_register_params_40411_fields level3cnt capi_register_params 0 40411 NULL
 bulk_out_epnum_usb_cardstate_40412_fields bulk_out_epnum usb_cardstate 0 40412 NULL
 vm_end_vm_area_struct_40413_fields vm_end vm_area_struct 0 40413 NULL nohasharray
@@ -10088,7 +10252,8 @@ ctrl_out_pipe_hfcsusb_40706_fields ctrl_out_pipe hfcsusb 0 40706 NULL
 __x86_set_memory_region_fndecl_40708_fields __x86_set_memory_region fndecl 4 40708 NULL nohasharray
 nTxBlock_vardecl_jfs_txnmgr_c_40708_fields nTxBlock vardecl_jfs_txnmgr.c 0 40708 &__x86_set_memory_region_fndecl_40708_fields
 lfb_linelength_screen_info_40728_fields lfb_linelength screen_info 0 40728 NULL
-cryptlen_aead_request_40734_fields cryptlen aead_request 0 40734 NULL
+cryptlen_aead_request_40734_fields cryptlen aead_request 0 40734 NULL nohasharray
+page_order_ring_buffer_40734_fields page_order ring_buffer 0 40734 &cryptlen_aead_request_40734_fields
 NumberOfLogBlock_ms_lib_ctrl_40736_fields NumberOfLogBlock ms_lib_ctrl 0 40736 NULL
 do_splice_to_fndecl_40737_fields do_splice_to fndecl 0 40737 NULL
 sisfb_getheapstart_fndecl_40740_fields sisfb_getheapstart fndecl 0 40740 NULL nohasharray
@@ -10140,6 +10305,7 @@ fuse_send_write_fndecl_40936_fields fuse_send_write fndecl 0-4 40936 NULL
 len_set_config_param_40942_fields len set_config_param 0 40942 NULL
 s_log_groups_per_flex_ext4_sb_info_40945_fields s_log_groups_per_flex ext4_sb_info 0 40945 NULL
 az6007_write_fndecl_40948_fields az6007_write fndecl 6 40948 NULL
+srq_count_qed_cxt_mngr_40961_fields srq_count qed_cxt_mngr 0 40961 NULL
 ext4_fill_fiemap_extents_fndecl_40966_fields ext4_fill_fiemap_extents fndecl 2-3 40966 NULL
 bottom_qxl_urect_40968_fields bottom qxl_urect 0 40968 NULL
 arena_read_bytes_fndecl_40973_fields arena_read_bytes fndecl 0 40973 NULL
@@ -10216,6 +10382,7 @@ block_start_extent_map_41316_fields block_start extent_map 0 41316 &cma_declare_
 pc_len_s_pcon_41324_fields pc_len s_pcon 0 41324 NULL
 max_fcoe_exchanges_cnic_dev_41335_fields max_fcoe_exchanges cnic_dev 0 41335 NULL
 last_alloc_physical_block_ext2_block_alloc_info_41336_fields last_alloc_physical_block ext2_block_alloc_info 0 41336 NULL
+size_gb_loopback_41339_fields size gb_loopback 0 41339 NULL
 sc_max_req_size_svcxprt_rdma_41343_fields sc_max_req_size svcxprt_rdma 0 41343 NULL
 key_len_wmi_vdev_install_key_arg_41347_fields key_len wmi_vdev_install_key_arg 0 41347 NULL
 ocfs2_read_xattr_block_fndecl_41350_fields ocfs2_read_xattr_block fndecl 0-2 41350 NULL nohasharray
@@ -10239,6 +10406,7 @@ l1_size_vardecl_acpi_extlog_c_41440_fields l1_size vardecl_acpi_extlog.c 0 41440
 vram_remap_vardecl_vesafb_c_41441_fields vram_remap vardecl_vesafb.c 0 41441 NULL
 onenand_write_oob_nolock_fndecl_41451_fields onenand_write_oob_nolock fndecl 2 41451 NULL
 rf_blkno_ocfs2_refcount_tree_41452_fields rf_blkno ocfs2_refcount_tree 0 41452 NULL
+dm_wmfw_adsp1_alg_hdr_41454_fields dm wmfw_adsp1_alg_hdr 0 41454 NULL
 s_inodes_per_block_ext4_sb_info_41457_fields s_inodes_per_block ext4_sb_info 0 41457 NULL nohasharray
 mem_lseek_fndecl_41457_fields mem_lseek fndecl 2 41457 &s_inodes_per_block_ext4_sb_info_41457_fields
 cxgbi_ddp_reserve_fndecl_41468_fields cxgbi_ddp_reserve fndecl 4 41468 NULL nohasharray
@@ -10323,6 +10491,7 @@ sisusb_num_columns_sisusb_usb_data_41814_fields sisusb_num_columns sisusb_usb_da
 nports_cxgb4_lld_info_41815_fields nports cxgb4_lld_info 0 41815 NULL
 vmw_cmdbuf_alloc_space_fndecl_41823_fields vmw_cmdbuf_alloc_space fndecl 3 41823 NULL
 n_ssids_wmi_start_scan_arg_41826_fields n_ssids wmi_start_scan_arg 0 41826 NULL
+data_end_flat_hdr_41827_fields data_end flat_hdr 0 41827 NULL
 fcs_del_mlx4_en_rx_ring_41830_fields fcs_del mlx4_en_rx_ring 0 41830 NULL
 convert_initialized_extent_fndecl_41833_fields convert_initialized_extent fndecl 0-5 41833 NULL
 wdt87xx_get_string_fndecl_41835_fields wdt87xx_get_string fndecl 4 41835 NULL
@@ -10347,7 +10516,8 @@ mem_unit_sysinfo_41901_fields mem_unit sysinfo 0 41901 NULL
 length_zoran_sync_41909_fields length zoran_sync 0 41909 NULL
 raw_decoder_line_size_vbi_info_41920_fields raw_decoder_line_size vbi_info 0 41920 NULL
 ext4_xattr_security_set_fndecl_41924_fields ext4_xattr_security_set fndecl 6 41924 NULL nohasharray
-wil_pmc_llseek_fndecl_41924_fields wil_pmc_llseek fndecl 2 41924 &ext4_xattr_security_set_fndecl_41924_fields
+wil_pmc_llseek_fndecl_41924_fields wil_pmc_llseek fndecl 2 41924 &ext4_xattr_security_set_fndecl_41924_fields nohasharray
+num_descriptors_wmi_p2p_noa_info_41924_fields num_descriptors wmi_p2p_noa_info 0 41924 &wil_pmc_llseek_fndecl_41924_fields
 regmap_encx24j600_sfr_read_fndecl_41930_fields regmap_encx24j600_sfr_read fndecl 4 41930 NULL
 whci_n_caps_fndecl_41932_fields whci_n_caps fndecl 0 41932 NULL
 ss_nblocks_nilfs_segment_summary_41935_fields ss_nblocks nilfs_segment_summary 0 41935 NULL
@@ -10428,6 +10598,7 @@ nr_map_efi_memory_map_42232_fields nr_map efi_memory_map 0 42232 NULL
 chunksize_mdp_superblock_1_42236_fields chunksize mdp_superblock_1 0 42236 NULL nohasharray
 max_data_size_irda_sock_42236_fields max_data_size irda_sock 0 42236 &chunksize_mdp_superblock_1_42236_fields
 scrollback_phys_max_vardecl_fbcon_c_42241_fields scrollback_phys_max vardecl_fbcon.c 0 42241 NULL
+buf_write_ptr_comedi_async_42247_fields buf_write_ptr comedi_async 0 42247 NULL
 if_sdio_read_scratch_fndecl_42279_fields if_sdio_read_scratch fndecl 0 42279 NULL
 rx_pending_ethtool_ringparam_42280_fields rx_pending ethtool_ringparam 0 42280 NULL nohasharray
 cfg_sriov_nr_virtfn_lpfc_hba_42280_fields cfg_sriov_nr_virtfn lpfc_hba 0 42280 &rx_pending_ethtool_ringparam_42280_fields
@@ -10451,8 +10622,10 @@ acc_len_rcv_sli3_42370_fields acc_len rcv_sli3 0 42370 NULL
 keyspan_pda_setbaud_fndecl_42374_fields keyspan_pda_setbaud fndecl 0-2 42374 NULL
 ext4_ext_get_access_fndecl_42377_fields ext4_ext_get_access fndecl 0 42377 NULL
 placement_offset_bnx2x_agg_info_42380_fields placement_offset bnx2x_agg_info 0 42380 NULL
+num_srqs_qed_rdma_pf_params_42382_fields num_srqs qed_rdma_pf_params 0 42382 NULL
 __spi_validate_fndecl_42385_fields __spi_validate fndecl 0 42385 NULL
 remote_payload_max_nfc_digital_dev_42391_fields remote_payload_max nfc_digital_dev 0 42391 NULL
+channel_count_gb_lights_get_light_config_response_42395_fields channel_count gb_lights_get_light_config_response 0 42395 NULL
 no_of_vpath_vxgedev_42396_fields no_of_vpath vxgedev 0 42396 NULL
 module_alloc_fndecl_42397_fields module_alloc fndecl 1 42397 NULL
 xen_blkif_max_queues_vardecl_xen_blkfront_c_42404_fields xen_blkif_max_queues vardecl_xen-blkfront.c 0 42404 NULL
@@ -10524,7 +10697,8 @@ dm_set_device_limits_fndecl_42632_fields dm_set_device_limits fndecl 3 42632 NUL
 lbs_cmd_async_fndecl_42634_fields lbs_cmd_async fndecl 4 42634 NULL
 valid_ide_tape_obj_42635_fields valid ide_tape_obj 0 42635 NULL
 find_rsb_dir_fndecl_42636_fields find_rsb_dir fndecl 3 42636 NULL
-snd_emu10k1_create_fndecl_42637_fields snd_emu10k1_create fndecl 5 42637 NULL
+snd_emu10k1_create_fndecl_42637_fields snd_emu10k1_create fndecl 5 42637 NULL nohasharray
+n_algs_wmfw_adsp2_id_hdr_42637_fields n_algs wmfw_adsp2_id_hdr 0 42637 &snd_emu10k1_create_fndecl_42637_fields
 len_ceph_string_42640_fields len ceph_string 0 42640 NULL
 brcmf_sdio_download_nvram_fndecl_42648_fields brcmf_sdio_download_nvram fndecl 3 42648 NULL
 fuse_getxattr_fndecl_42649_fields fuse_getxattr fndecl 0-4 42649 NULL
@@ -10539,7 +10713,8 @@ ext4_trim_extent_fndecl_42684_fields ext4_trim_extent fndecl 3-4-2-0 42684 NULL
 n_sections_pefile_context_42684_fields n_sections pefile_context 0 42684 &ext4_trim_extent_fndecl_42684_fields
 BufferLength_respQ_e_42691_fields BufferLength respQ_e 0 42691 NULL
 base_baud_pciserial_board_42697_fields base_baud pciserial_board 0 42697 NULL
-nvme_submit_user_cmd_fndecl_42701_fields nvme_submit_user_cmd fndecl 4 42701 NULL
+nvme_submit_user_cmd_fndecl_42701_fields nvme_submit_user_cmd fndecl 4 42701 NULL nohasharray
+vm_map_ram_fndecl_42701_fields vm_map_ram fndecl 2 42701 &nvme_submit_user_cmd_fndecl_42701_fields
 nvme_rdma_create_qp_fndecl_42709_fields nvme_rdma_create_qp fndecl 2 42709 NULL
 len_nfs4_layoutdriver_data_42714_fields len nfs4_layoutdriver_data 0 42714 NULL nohasharray
 reordering_tcp_sock_42714_fields reordering tcp_sock 0 42714 &len_nfs4_layoutdriver_data_42714_fields
@@ -10567,6 +10742,7 @@ cmd_idx_rtsx_ucr_42770_fields cmd_idx rtsx_ucr 0 42770 &ie_len_wmi_start_scan_ar
 fw_len_mwifiex_fw_image_42772_fields fw_len mwifiex_fw_image 0 42772 NULL
 sync_maxlen_ipvs_sync_daemon_cfg_42773_fields sync_maxlen ipvs_sync_daemon_cfg 0 42773 NULL
 hsr_get_max_mtu_fndecl_42776_fields hsr_get_max_mtu fndecl 0 42776 NULL
+lov_tgt_size_lov_obd_42782_fields lov_tgt_size lov_obd 0 42782 NULL
 rx_data_length_hso_serial_42783_fields rx_data_length hso_serial 0 42783 NULL
 usbnet_change_mtu_fndecl_42784_fields usbnet_change_mtu fndecl 2 42784 NULL
 offset_fuse_page_desc_42785_fields offset fuse_page_desc 0 42785 NULL
@@ -10596,6 +10772,7 @@ lineevent_read_fndecl_42885_fields lineevent_read fndecl 3 42885 NULL
 snic_req_init_fndecl_42890_fields snic_req_init fndecl 2 42890 NULL
 pixel_overlap_mipi_config_42900_fields pixel_overlap mipi_config 0 42900 NULL
 memblock_find_in_range_node_fndecl_42905_fields memblock_find_in_range_node fndecl 0-2-1-3-4 42905 NULL
+name_length_spar_controlvm_parameters_header_42909_fields name_length spar_controlvm_parameters_header 0 42909 NULL
 vd_vblocknr_nilfs_vdesc_42910_fields vd_vblocknr nilfs_vdesc 0 42910 NULL
 rts51x_bulk_transport_fndecl_42911_fields rts51x_bulk_transport fndecl 6 42911 NULL
 xfs_rmap_alloc_extent_fndecl_42916_fields xfs_rmap_alloc_extent fndecl 4-3-5 42916 NULL
@@ -10616,6 +10793,7 @@ udf_get_block_fndecl_42965_fields udf_get_block fndecl 2 42965 &gpio_count_async
 __pskb_copy_fclone_fndecl_42969_fields __pskb_copy_fclone fndecl 2 42969 NULL
 periods_max_snd_pcm_hardware_42979_fields periods_max snd_pcm_hardware 0 42979 NULL
 brcmf_sdiod_send_buf_fndecl_42982_fields brcmf_sdiod_send_buf fndecl 3 42982 NULL
+max_pfn_amdgpu_vm_manager_42989_fields max_pfn amdgpu_vm_manager 0 42989 NULL
 len_kvaser_msg_42994_fields len kvaser_msg 0 42994 NULL
 num_mappings_nd_region_desc_42998_fields num_mappings nd_region_desc 0 42998 NULL
 buf_size_ivtv_stream_43002_fields buf_size ivtv_stream 0 43002 NULL
@@ -10643,6 +10821,7 @@ s_reserved_gdt_blocks_ext4_super_block_43054_fields s_reserved_gdt_blocks ext4_s
 acpi_dev_get_ioresource_fndecl_43062_fields acpi_dev_get_ioresource fndecl 3-2 43062 NULL
 tcp_tso_segs_fndecl_43064_fields tcp_tso_segs fndecl 0-2 43064 NULL nohasharray
 len_ib_ucm_rep_43064_fields len ib_ucm_rep 0 43064 &tcp_tso_segs_fndecl_43064_fields
+len_srp_direct_buf_43066_fields len srp_direct_buf 0 43066 NULL
 fat_fallocate_fndecl_43080_fields fat_fallocate fndecl 4-3 43080 NULL
 raw_skid_size_pkcs7_parse_context_43081_fields raw_skid_size pkcs7_parse_context 0 43081 NULL
 bttv_prepare_buffer_fndecl_43088_fields bttv_prepare_buffer fndecl 6-5 43088 NULL
@@ -10732,6 +10911,7 @@ XRES_kyrofb_info_43436_fields XRES kyrofb_info 0 43436 NULL
 memblock_alloc_nid_fndecl_43439_fields memblock_alloc_nid fndecl 2-1 43439 NULL
 ems_pcmcia_add_card_fndecl_43440_fields ems_pcmcia_add_card fndecl 2 43440 NULL
 per_txdl_space_vxge_hw_fifo_attr_43441_fields per_txdl_space vxge_hw_fifo_attr 0 43441 NULL
+len_imgchunk_43445_fields len imgchunk 0 43445 NULL
 max_pkt_tipc_sock_43446_fields max_pkt tipc_sock 0 43446 NULL
 wReportDescLength_i2c_hid_desc_43447_fields wReportDescLength i2c_hid_desc 0 43447 NULL
 vfs_fsync_range_fndecl_43448_fields vfs_fsync_range fndecl 0 43448 NULL
@@ -10842,7 +11022,8 @@ unlink1_fndecl_43840_fields unlink1 fndecl 2-3 43840 NULL
 ath6kl_wmi_enable_sched_scan_cmd_fndecl_43841_fields ath6kl_wmi_enable_sched_scan_cmd fndecl 2 43841 NULL
 initrd_start_vardecl_43848_fields initrd_start vardecl 0 43848 NULL
 xen_set_nslabs_fndecl_43849_fields xen_set_nslabs fndecl 0-1 43849 NULL
-wlcore_scan_fndecl_43850_fields wlcore_scan fndecl 4 43850 NULL
+wlcore_scan_fndecl_43850_fields wlcore_scan fndecl 4 43850 NULL nohasharray
+wm_adsp_read_data_block_fndecl_43850_fields wm_adsp_read_data_block fndecl 0 43850 &wlcore_scan_fndecl_43850_fields
 indat_endpoint_keyspan_device_details_43860_fields indat_endpoint keyspan_device_details 0 43860 NULL
 s_l2bsize_jfs_superblock_43870_fields s_l2bsize jfs_superblock 0 43870 NULL
 bulk_in_endpointAddr_hdpvr_device_43874_fields bulk_in_endpointAddr hdpvr_device 0 43874 NULL
@@ -10873,6 +11054,7 @@ dce_pvc_count_frad_state_43946_fields dce_pvc_count frad_state 0 43946 NULL
 sddr09_readX_fndecl_43951_fields sddr09_readX fndecl 5 43951 NULL
 brcmf_fil_cmd_data_set_fndecl_43952_fields brcmf_fil_cmd_data_set fndecl 4 43952 NULL
 size_soundfont_sample_info_43957_fields size soundfont_sample_info 0 43957 NULL
+num_drc_cfgs_wm8904_pdata_43963_fields num_drc_cfgs wm8904_pdata 0 43963 NULL
 rx_ring_count_igb_adapter_43964_fields rx_ring_count igb_adapter 0 43964 NULL
 s_firstdatazone_isofs_sb_info_43968_fields s_firstdatazone isofs_sb_info 0 43968 NULL
 csum_start_virtio_net_hdr_43969_fields csum_start virtio_net_hdr 0 43969 NULL
@@ -10904,6 +11086,7 @@ max_rdma_ctxs_ib_qp_cap_44123_fields max_rdma_ctxs ib_qp_cap 0 44123 NULL
 base_nforce2_smbus_44136_fields base nforce2_smbus 0 44136 NULL
 key_maxval_mcs_platform_data_44139_fields key_maxval mcs_platform_data 0 44139 NULL
 submit_extent_page_fndecl_44155_fields submit_extent_page fndecl 7-8-6 44155 NULL
+gb_operation_sync_timeout_fndecl_44156_fields gb_operation_sync_timeout fndecl 6 44156 NULL
 octeon_setup_droq_fndecl_44160_fields octeon_setup_droq fndecl 4-3 44160 NULL
 recvmsg_proto_ops_44163_fields recvmsg proto_ops 0 44163 NULL
 y_len_ccp_ecc_point_44168_fields y_len ccp_ecc_point 0 44168 NULL
@@ -10944,6 +11127,7 @@ rq_num_entries_c4iw_qp_attributes_44321_fields rq_num_entries c4iw_qp_attributes
 produce_size_qp_entry_44325_fields produce_size qp_entry 0 44325 NULL
 encode_op_hdr_fndecl_44327_fields encode_op_hdr fndecl 3 44327 NULL
 size_drm_radeon_gem_userptr_44334_fields size drm_radeon_gem_userptr 0 44334 NULL
+arm_copy_from_user_fndecl_44337_fields arm_copy_from_user fndecl 0 44337 NULL
 tail_circ_buf_44346_fields tail circ_buf 0 44346 NULL nohasharray
 count_v4l2_ext_controls_44346_fields count v4l2_ext_controls 0 44346 &tail_circ_buf_44346_fields
 brcmf_sdio_txpkt_prep_sg_fndecl_44354_fields brcmf_sdio_txpkt_prep_sg fndecl 4-0 44354 NULL
@@ -11082,6 +11266,7 @@ h4_recv_fndecl_44866_fields h4_recv fndecl 3 44866 &crypt_extent_fndecl_44866_fi
 alloc_rc_map_44870_fields alloc rc_map 0 44870 NULL
 romfs_blk_read_fndecl_44875_fields romfs_blk_read fndecl 4-2 44875 NULL
 ppp_tx_cp_fndecl_44879_fields ppp_tx_cp fndecl 5-2 44879 NULL
+num_resources_platform_device_44886_fields num_resources platform_device 0 44886 NULL
 __cookie_v4_check_fndecl_44887_fields __cookie_v4_check fndecl 0 44887 NULL nohasharray
 jffs2_do_unlink_fndecl_44887_fields jffs2_do_unlink fndecl 4 44887 &__cookie_v4_check_fndecl_44887_fields
 code_length_lirc_driver_44888_fields code_length lirc_driver 0 44888 NULL
@@ -11182,6 +11367,7 @@ base_erst_erange_45255_fields base erst_erange 0 45255 NULL
 rpcrdma_count_chunks_fndecl_45258_fields rpcrdma_count_chunks fndecl 0 45258 NULL
 nameLen_nw_info_struct_45260_fields nameLen nw_info_struct 0 45260 NULL
 check_sectors_in_chain_fndecl_45261_fields check_sectors_in_chain fndecl 2 45261 NULL
+num_rx_ring_sh_eth_private_45262_fields num_rx_ring sh_eth_private 0 45262 NULL
 alloc_buf_fndecl_45267_fields alloc_buf fndecl 2 45267 NULL
 generic_writepages_fndecl_45268_fields generic_writepages fndecl 0 45268 NULL nohasharray
 vmw_dmabuf_init_fndecl_45268_fields vmw_dmabuf_init fndecl 3 45268 &generic_writepages_fndecl_45268_fields
@@ -11194,7 +11380,8 @@ rcvhdrcnt_qib_devdata_45297_fields rcvhdrcnt qib_devdata 0 45297 NULL
 rcvhdrcnt_vardecl_init_c_45302_fields rcvhdrcnt vardecl_init.c 0 45302 NULL
 hugetlbfs_read_actor_fndecl_45304_fields hugetlbfs_read_actor fndecl 0-4-2 45304 NULL
 atl1_change_mtu_fndecl_45313_fields atl1_change_mtu fndecl 2 45313 NULL nohasharray
-rx_count_ethtool_channels_45313_fields rx_count ethtool_channels 0 45313 &atl1_change_mtu_fndecl_45313_fields
+rx_count_ethtool_channels_45313_fields rx_count ethtool_channels 0 45313 &atl1_change_mtu_fndecl_45313_fields nohasharray
+rx_ring_count_xgbe_prv_data_45313_fields rx_ring_count xgbe_prv_data 0 45313 &rx_count_ethtool_channels_45313_fields
 tipc_buf_acquire_fndecl_45318_fields tipc_buf_acquire fndecl 1 45318 NULL
 rx_data_fndecl_45321_fields rx_data fndecl 4 45321 NULL
 fec_decode_bufs_fndecl_45322_fields fec_decode_bufs fndecl 3-5 45322 NULL nohasharray
@@ -11227,6 +11414,7 @@ qcaspi_netdev_change_mtu_fndecl_45450_fields qcaspi_netdev_change_mtu fndecl 2 4
 start_bdi_bd_transfer_45454_fields start_bdi bd_transfer 0 45454 NULL
 wTotalLength_usb_bos_descriptor_45455_fields wTotalLength usb_bos_descriptor 0 45455 NULL
 cfrfml_create_fndecl_45463_fields cfrfml_create fndecl 3 45463 NULL
+nents_sg_splitter_45469_fields nents sg_splitter 0 45469 NULL
 sockaddr_len_audit_context_45471_fields sockaddr_len audit_context 0 45471 NULL
 elf_load_addr_kimage_arch_45472_fields elf_load_addr kimage_arch 0 45472 NULL
 i_pos_fat_slot_info_45481_fields i_pos fat_slot_info 0 45481 NULL
@@ -11268,6 +11456,7 @@ tcfv_push_vid_tcf_vlan_45639_fields tcfv_push_vid tcf_vlan 0 45639 NULL
 ecc_strength_ds_nand_chip_45651_fields ecc_strength_ds nand_chip 0 45651 NULL
 inftl_writeblock_fndecl_45653_fields inftl_writeblock fndecl 2 45653 NULL
 size_core_name_45656_fields size core_name 0 45656 NULL
+b_public_size_kpp_testvec_45660_fields b_public_size kpp_testvec 0 45660 NULL
 blockmask_alauda_media_info_45662_fields blockmask alauda_media_info 0 45662 NULL
 dmi_base_vardecl_dmi_scan_c_45673_fields dmi_base vardecl_dmi_scan.c 0 45673 NULL
 _snd_pcm_hw_param_min_fndecl_45677_fields _snd_pcm_hw_param_min fndecl 3 45677 NULL
@@ -11288,10 +11477,12 @@ width_cx23885_dev_45714_fields width cx23885_dev 0 45714 NULL
 ocfs2_xattr_set_fndecl_45720_fields ocfs2_xattr_set fndecl 5 45720 NULL
 num_cqs_mlx4_caps_45727_fields num_cqs mlx4_caps 0 45727 NULL
 ena_calc_queue_size_fndecl_45731_fields ena_calc_queue_size fndecl 0 45731 NULL
+len_bnx2x_fw_file_section_45732_fields len bnx2x_fw_file_section 0 45732 NULL
 tx_len_mrvl_data_45733_fields tx_len mrvl_data 0 45733 NULL
 sys_ptrace_fndecl_45738_fields sys_ptrace fndecl 3 45738 NULL
 get_args_iw_priv_args_45748_fields get_args iw_priv_args 0 45748 NULL
 vslen_vardecl_matroxfb_base_c_45755_fields vslen vardecl_matroxfb_base.c 0 45755 NULL
+extra_postfix_len_ieee80211_crypto_ops_45763_fields extra_postfix_len ieee80211_crypto_ops 0 45763 NULL
 cc2520_write_txfifo_fndecl_45771_fields cc2520_write_txfifo fndecl 4 45771 NULL nohasharray
 size_entry_mwt_fndecl_45771_fields size_entry_mwt fndecl 0 45771 &cc2520_write_txfifo_fndecl_45771_fields
 len_ch_mem_range_45781_fields len ch_mem_range 0 45781 NULL
@@ -11377,7 +11568,8 @@ wSamplesPerFrame_uac_format_type_ii_ext_descriptor_46084_fields wSamplesPerFrame
 dm_startblk_adfs_discmap_46088_fields dm_startblk adfs_discmap 0 46088 NULL
 num_type_reg_regmap_irq_chip_46090_fields num_type_reg regmap_irq_chip 0 46090 NULL
 len_sfi_table_header_46097_fields len sfi_table_header 0 46097 NULL
-jbd2_journal_write_metadata_buffer_fndecl_46103_fields jbd2_journal_write_metadata_buffer fndecl 4 46103 NULL
+jbd2_journal_write_metadata_buffer_fndecl_46103_fields jbd2_journal_write_metadata_buffer fndecl 4 46103 NULL nohasharray
+ym_wmfw_adsp2_alg_hdr_46103_fields ym wmfw_adsp2_alg_hdr 0 46103 &jbd2_journal_write_metadata_buffer_fndecl_46103_fields
 bs_vardecl_null_blk_c_46104_fields bs vardecl_null_blk.c 0 46104 NULL
 len_eeprom_private_46124_fields len eeprom_private 0 46124 NULL
 height_saa7134_dev_46126_fields height saa7134_dev 0 46126 NULL nohasharray
@@ -11505,6 +11697,7 @@ sc18is602_check_transfer_fndecl_46545_fields sc18is602_check_transfer fndecl 0 4
 erasesize_shift_mtd_info_46565_fields erasesize_shift mtd_info 0 46565 NULL nohasharray
 xt_compat_init_offsets_fndecl_46565_fields xt_compat_init_offsets fndecl 2 46565 &erasesize_shift_mtd_info_46565_fields
 max_msix_vectors_vardecl_mpt3sas_base_c_46566_fields max_msix_vectors vardecl_mpt3sas_base.c 0 46566 NULL
+ndivs_divs_data_46571_fields ndivs divs_data 0 46571 NULL
 xfs_trans_log_finish_rmap_update_fndecl_46574_fields xfs_trans_log_finish_rmap_update fndecl 7 46574 NULL
 sock_sendpage_fndecl_46581_fields sock_sendpage fndecl 4 46581 NULL
 back_xfs_attr3_icleaf_hdr_46595_fields back xfs_attr3_icleaf_hdr 0 46595 NULL
@@ -11571,6 +11764,7 @@ tveeprom_read_fndecl_46846_fields tveeprom_read fndecl 3 46846 NULL nohasharray
 vt596_smba_vardecl_i2c_viapro_c_46846_fields vt596_smba vardecl_i2c-viapro.c 0 46846 &tveeprom_read_fndecl_46846_fields
 __bread_gfp_fndecl_46858_fields __bread_gfp fndecl 3-2 46858 NULL
 xwrite_fndecl_46865_fields xwrite fndecl 3 46865 NULL
+nb_ace_lite_cci_nb_ports_46870_fields nb_ace_lite cci_nb_ports 0 46870 NULL
 sbitmap_queue_resize_fndecl_46887_fields sbitmap_queue_resize fndecl 2 46887 NULL
 len_nfsd3_readlinkres_46888_fields len nfsd3_readlinkres 0 46888 NULL
 cb_break_head_afs_server_46900_fields cb_break_head afs_server 0 46900 NULL
@@ -11597,15 +11791,18 @@ f71882fg_find_fndecl_46975_fields f71882fg_find fndecl 0 46975 NULL
 size_dwc3_trb_46986_fields size dwc3_trb 0 46986 NULL
 gru_alloc_gts_fndecl_46987_fields gru_alloc_gts fndecl 6 46987 NULL nohasharray
 ri_max_frmr_depth_rpcrdma_ia_46987_fields ri_max_frmr_depth rpcrdma_ia 0 46987 &gru_alloc_gts_fndecl_46987_fields
+tx_queue_size_pxa168_eth_platform_data_46988_fields tx_queue_size pxa168_eth_platform_data 0 46988 NULL
 msb_cache_write_fndecl_46992_fields msb_cache_write fndecl 6-2 46992 NULL
 lrg_buffer_len_ql3_adapter_46994_fields lrg_buffer_len ql3_adapter 0 46994 NULL
 buflen_cdrom_generic_command_47000_fields buflen cdrom_generic_command 0 47000 NULL
 no_seek_end_llseek_fndecl_47002_fields no_seek_end_llseek fndecl 2 47002 NULL
 do_ip6t_set_ctl_fndecl_47003_fields do_ip6t_set_ctl fndecl 4 47003 NULL
+n_input_formats_malidp_hw_regmap_47006_fields n_input_formats malidp_hw_regmap 0 47006 NULL
 vmw_kms_update_proxy_fndecl_47016_fields vmw_kms_update_proxy fndecl 3 47016 NULL nohasharray
 va_start_vmap_area_47016_fields va_start vmap_area 0 47016 &vmw_kms_update_proxy_fndecl_47016_fields
 bytesused_uvc_buffer_47017_fields bytesused uvc_buffer 0 47017 NULL
 length_ixgb_rx_desc_47027_fields length ixgb_rx_desc 0 47027 NULL
+desc_size_shdma_dev_47035_fields desc_size shdma_dev 0 47035 NULL
 xfs_fs_map_blocks_fndecl_47038_fields xfs_fs_map_blocks fndecl 2-3 47038 NULL nohasharray
 minor_index_cardstate_47038_fields minor_index cardstate 0 47038 &xfs_fs_map_blocks_fndecl_47038_fields
 ttm_bo_kmap_fndecl_47045_fields ttm_bo_kmap fndecl 3-2 47045 NULL
@@ -11706,6 +11903,7 @@ ufs_frag_map_fndecl_47442_fields ufs_frag_map fndecl 0 47442 &depth_bttv_format_
 __ieee80211_stop_tx_ba_session_fndecl_47449_fields __ieee80211_stop_tx_ba_session fndecl 2 47449 NULL
 __irq_domain_alloc_irqs_fndecl_47462_fields __irq_domain_alloc_irqs fndecl 0-2 47462 NULL nohasharray
 part_bits_mtd_blktrans_ops_47462_fields part_bits mtd_blktrans_ops 0 47462 &__irq_domain_alloc_irqs_fndecl_47462_fields
+len_wmfw_region_47463_fields len wmfw_region 0 47463 NULL
 memblock_alloc_try_nid_fndecl_47470_fields memblock_alloc_try_nid fndecl 2-1 47470 NULL
 compat_do_ipt_set_ctl_fndecl_47473_fields compat_do_ipt_set_ctl fndecl 4 47473 NULL
 maxDataSize__mpt_ioctl_header_47477_fields maxDataSize _mpt_ioctl_header 0 47477 NULL
@@ -11719,6 +11917,7 @@ cifs_write_from_iter_fndecl_47501_fields cifs_write_from_iter fndecl 2-1 47501 N
 gr_ep_init_fndecl_47502_fields gr_ep_init fndecl 4 47502 NULL
 try_unmap_single_bt_fndecl_47503_fields try_unmap_single_bt fndecl 2-3 47503 NULL
 btrfs_cont_expand_fndecl_47505_fields btrfs_cont_expand fndecl 3-2 47505 NULL
+nr_outport_coresight_platform_data_47506_fields nr_outport coresight_platform_data 0 47506 NULL
 romfs_blk_strcmp_fndecl_47510_fields romfs_blk_strcmp fndecl 4-2 47510 NULL nohasharray
 ucNumEntries__ATOM_Tonga_MCLK_Dependency_Table_47510_fields ucNumEntries _ATOM_Tonga_MCLK_Dependency_Table 0 47510 &romfs_blk_strcmp_fndecl_47510_fields
 num_connector_drm_mode_config_47518_fields num_connector drm_mode_config 0 47518 NULL nohasharray
@@ -11851,6 +12050,7 @@ size_nfs_fh_48014_fields size nfs_fh 0 48014 NULL
 temp_end_applesmc_registers_48016_fields temp_end applesmc_registers 0 48016 NULL
 original_mtu_slave_48025_fields original_mtu slave 0 48025 NULL
 hmac_len_sctp_hmac_48030_fields hmac_len sctp_hmac 0 48030 NULL
+aim_write_fndecl_48032_fields aim_write fndecl 3 48032 NULL
 rxkad_verify_packet_2_fndecl_48035_fields rxkad_verify_packet_2 fndecl 4-3 48035 NULL
 rm_namelen_nfsd4_remove_48040_fields rm_namelen nfsd4_remove 0 48040 NULL
 s_reserved_affs_sb_info_48043_fields s_reserved affs_sb_info 0 48043 NULL
@@ -11858,6 +12058,7 @@ sb_size_md_rdev_48046_fields sb_size md_rdev 0 48046 NULL
 num_pages_ttm_buffer_object_48047_fields num_pages ttm_buffer_object 0 48047 NULL
 num_privcmd_mmapbatch_v2_48051_fields num privcmd_mmapbatch_v2 0 48051 NULL
 ioctl_datasize_ips_ha_48058_fields ioctl_datasize ips_ha 0 48058 NULL
+nr_channels_at_dma_platform_data_48060_fields nr_channels at_dma_platform_data 0 48060 NULL
 lso_max_fc_lport_48064_fields lso_max fc_lport 0 48064 NULL
 zonesize_alauda_media_info_48068_fields zonesize alauda_media_info 0 48068 NULL
 sc16is7xx_alloc_line_fndecl_48075_fields sc16is7xx_alloc_line fndecl 0 48075 NULL
@@ -11978,6 +12179,7 @@ max_num_vdevs_ath10k_48584_fields max_num_vdevs ath10k 0 48584 NULL nohasharray
 pagf_freeblks_xfs_perag_48584_fields pagf_freeblks xfs_perag 0 48584 &max_num_vdevs_ath10k_48584_fields nohasharray
 tx_ring_size_bnx2x_48584_fields tx_ring_size bnx2x 0 48584 &pagf_freeblks_xfs_perag_48584_fields
 backup_size_vmw_resource_48590_fields backup_size vmw_resource 0 48590 NULL
+arm_copy_to_user_fndecl_48602_fields arm_copy_to_user fndecl 0 48602 NULL
 datalen_atp_info_48607_fields datalen atp_info 0 48607 NULL
 count_e8390_pkt_hdr_48610_fields count e8390_pkt_hdr 0 48610 NULL
 mmc_test_prepare_mrq_fndecl_48612_fields mmc_test_prepare_mrq fndecl 7-6-4 48612 NULL
@@ -12042,7 +12244,7 @@ sharpness_sd_gl860_48824_fields sharpness sd_gl860 0 48824 NULL
 endpoint_pvr2_stream_48828_fields endpoint pvr2_stream 0 48828 NULL
 xbofs_irda_skb_cb_48831_fields xbofs irda_skb_cb 0 48831 NULL nohasharray
 num_vring_48831_fields num vring 0 48831 &xbofs_irda_skb_cb_48831_fields
-osst_init_aux_fndecl_48837_fields osst_init_aux fndecl 6 48837 NULL
+osst_init_aux_fndecl_48837_fields osst_init_aux fndecl 6-5 48837 NULL
 busnum_usb_bus_48843_fields busnum usb_bus 0 48843 NULL
 pcim_iomap_fndecl_48845_fields pcim_iomap fndecl 3 48845 NULL
 adf7242_read_fbuf_fndecl_48847_fields adf7242_read_fbuf fndecl 3 48847 NULL
@@ -12103,7 +12305,8 @@ optrom_region_size_qla_hw_data_49087_fields optrom_region_size qla_hw_data 0 490
 ocfs2_find_leaf_fndecl_49090_fields ocfs2_find_leaf fndecl 0 49090 NULL nohasharray
 bi_vcnt_bio_49090_fields bi_vcnt bio 0 49090 &ocfs2_find_leaf_fndecl_49090_fields
 ocfs2_mv_xattr_bucket_cross_cluster_fndecl_49091_fields ocfs2_mv_xattr_bucket_cross_cluster fndecl 5-6 49091 NULL
-end_sector_dev_info_49096_fields end_sector dev_info 0 49096 NULL
+end_sector_dev_info_49096_fields end_sector dev_info 0 49096 NULL nohasharray
+misc_sbp_command_block_orb_49096_fields misc sbp_command_block_orb 0 49096 &end_sector_dev_info_49096_fields
 u132_hcd_interrupt_recv_fndecl_49098_fields u132_hcd_interrupt_recv fndecl 4 49098 NULL
 xdr_align_pages_fndecl_49102_fields xdr_align_pages fndecl 0-2 49102 NULL
 n_sz_rsa_key_49103_fields n_sz rsa_key 0 49103 NULL
@@ -12121,8 +12324,10 @@ max_dev_mdp_superblock_1_49148_fields max_dev mdp_superblock_1 0 49148 NULL
 ecryptfs_inode_newsize_ok_fndecl_49153_fields ecryptfs_inode_newsize_ok fndecl 2 49153 NULL
 tx_tr_cfv_info_49171_fields tx_tr cfv_info 0 49171 NULL
 addr_len_pnfs_ff_netaddr_49177_fields addr_len pnfs_ff_netaddr 0 49177 NULL
+page_size_nvme_ctrl_49190_fields page_size nvme_ctrl 0 49190 NULL
 len_fb_cmap_user_49195_fields len fb_cmap_user 0 49195 NULL
-fsl_edma_prep_dma_cyclic_fndecl_49197_fields fsl_edma_prep_dma_cyclic fndecl 4-2 49197 NULL
+fsl_edma_prep_dma_cyclic_fndecl_49197_fields fsl_edma_prep_dma_cyclic fndecl 4-2 49197 NULL nohasharray
+ielen_wps_status_t_49197_fields ielen wps_status_t 0 49197 &fsl_edma_prep_dma_cyclic_fndecl_49197_fields
 offset_page_chunk_49201_fields offset page_chunk 0 49201 NULL
 key_size_dh_49210_fields key_size dh 0 49210 NULL
 osst_read_fndecl_49214_fields osst_read fndecl 3 49214 NULL
@@ -12144,6 +12349,7 @@ rate_floppy_struct_49273_fields rate floppy_struct 0 49273 NULL
 name_len_audit_names_49277_fields name_len audit_names 0 49277 NULL
 of_irq_parse_raw_fndecl_49280_fields of_irq_parse_raw fndecl 0 49280 NULL
 ib_get_mad_data_offset_fndecl_49283_fields ib_get_mad_data_offset fndecl 0 49283 NULL
+header_length_ipr_ucode_image_header_49294_fields header_length ipr_ucode_image_header 0 49294 NULL
 iomap_write_failed_fndecl_49298_fields iomap_write_failed fndecl 2-3 49298 NULL
 bTransferSegment_wa_xfer_result_49303_fields bTransferSegment wa_xfer_result 0 49303 NULL
 splice_direct_to_actor_fndecl_49310_fields splice_direct_to_actor fndecl 0 49310 NULL
@@ -12213,6 +12419,7 @@ num_eps_bdc_49525_fields num_eps bdc 0 49525 NULL
 consume_bytes_snd_fw_async_midi_port_49542_fields consume_bytes snd_fw_async_midi_port 0 49542 NULL
 disk_offset_pnfs_block_dev_map_49546_fields disk_offset pnfs_block_dev_map 0 49546 NULL
 ioremap_wt_fndecl_49562_fields ioremap_wt fndecl 2-1 49562 NULL
+nrs_num_pols_ptlrpc_nrs_49564_fields nrs_num_pols ptlrpc_nrs 0 49564 NULL
 vfs_readv_fndecl_49565_fields vfs_readv fndecl 0 49565 NULL nohasharray
 nilfs_mdt_delete_block_fndecl_49565_fields nilfs_mdt_delete_block fndecl 2 49565 &vfs_readv_fndecl_49565_fields
 max_cm_mtu_ipoib_cm_dev_priv_49566_fields max_cm_mtu ipoib_cm_dev_priv 0 49566 NULL
@@ -12356,6 +12563,7 @@ gbufsize_vardecl_meye_c_50205_fields gbufsize vardecl_meye.c 0 50205 NULL
 s_zmap_blocks_minix_sb_info_50206_fields s_zmap_blocks minix_sb_info 0 50206 NULL
 crtc_x_drm_plane_state_50214_fields crtc_x drm_plane_state 0 50214 NULL
 sched_priority_sched_attr_50220_fields sched_priority sched_attr 0 50220 NULL
+length_dfw_binrec_50222_fields length dfw_binrec 0 50222 NULL
 qla4_82xx_pci_mem_read_direct_fndecl_50235_fields qla4_82xx_pci_mem_read_direct fndecl 2 50235 NULL
 efi_memmap_size_efi_info_50236_fields efi_memmap_size efi_info 0 50236 NULL
 fnic_trace_max_pages_vardecl_50246_fields fnic_trace_max_pages vardecl 0 50246 NULL
@@ -12381,6 +12589,7 @@ ucNumEntries__ATOM_PPLIB_CAC_Leakage_Table_50326_fields ucNumEntries _ATOM_PPLIB
 pos_r5l_recovery_ctx_50328_fields pos r5l_recovery_ctx 0 50328 NULL
 __vmalloc_node_fndecl_50335_fields __vmalloc_node fndecl 1 50335 NULL nohasharray
 size_nand_ecc_ctrl_50335_fields size nand_ecc_ctrl 0 50335 &__vmalloc_node_fndecl_50335_fields
+aim_read_fndecl_50336_fields aim_read fndecl 3 50336 NULL
 __copy_from_user_nocache_fndecl_50340_fields __copy_from_user_nocache fndecl 0 50340 NULL
 nextindex_xtheader_50354_fields nextindex xtheader 0 50354 NULL
 wimax_msg_alloc_fndecl_50364_fields wimax_msg_alloc fndecl 4 50364 NULL
@@ -12484,6 +12693,7 @@ cluster_bits_msdos_sb_info_50763_fields cluster_bits msdos_sb_info 0 50763 NULL
 usb_hcd_map_urb_for_dma_fndecl_50765_fields usb_hcd_map_urb_for_dma fndecl 0 50765 NULL
 cifs_readpages_read_into_pages_fndecl_50770_fields cifs_readpages_read_into_pages fndecl 3 50770 NULL
 hpfs_get_sector_fndecl_50776_fields hpfs_get_sector fndecl 2 50776 NULL
+vmap_fndecl_50778_fields vmap fndecl 2 50778 NULL
 cmd_size_blk_mq_tag_set_50782_fields cmd_size blk_mq_tag_set 0 50782 NULL
 readdir_nfs_rpc_ops_50783_fields readdir nfs_rpc_ops 0 50783 NULL
 remove_pmkid_fndecl_50793_fields remove_pmkid fndecl 4 50793 NULL
@@ -12608,6 +12818,7 @@ size_autofs_dev_ioctl_51298_fields size autofs_dev_ioctl 0 51298 NULL
 iscsi_ping_comp_event_fndecl_51300_fields iscsi_ping_comp_event fndecl 5 51300 NULL
 xfs_qm_dqrepair_fndecl_51301_fields xfs_qm_dqrepair fndecl 0 51301 NULL
 y2_virtio_gpu_framebuffer_51309_fields y2 virtio_gpu_framebuffer 0 51309 NULL
+count_gb_gpio_line_count_response_51314_fields count gb_gpio_line_count_response 0 51314 NULL
 drv_sds_rings_qlcnic_adapter_51319_fields drv_sds_rings qlcnic_adapter 0 51319 NULL
 size_bts_phys_51332_fields size bts_phys 0 51332 NULL
 sync_dma_snd_usb_endpoint_51333_fields sync_dma snd_usb_endpoint 0 51333 NULL
@@ -12633,7 +12844,8 @@ max_header_size_irnet_socket_51423_fields max_header_size irnet_socket 0 51423 N
 base_memblock_region_51424_fields base memblock_region 0 51424 NULL
 num_rx_queues_ixgbevf_adapter_51428_fields num_rx_queues ixgbevf_adapter 0 51428 NULL
 gre_parse_header_fndecl_51433_fields gre_parse_header fndecl 0-5 51433 NULL
-nethctrl_vf_resources_51438_fields nethctrl vf_resources 0 51438 NULL
+nethctrl_vf_resources_51438_fields nethctrl vf_resources 0 51438 NULL nohasharray
+size_omap3isp_ccdc_lsc_config_51438_fields size omap3isp_ccdc_lsc_config 0 51438 &nethctrl_vf_resources_51438_fields
 max_cmds_ipr_ioa_cfg_51439_fields max_cmds ipr_ioa_cfg 0 51439 NULL
 xfs_free_file_space_fndecl_51452_fields xfs_free_file_space fndecl 2-3 51452 NULL
 pcpu_fc_free_fndecl_51456_fields pcpu_fc_free fndecl 2 51456 NULL
@@ -12671,9 +12883,13 @@ va_for_temp_scif_window_51603_fields va_for_temp scif_window 0 51603 NULL
 cur_vfio_pci_fill_info_51616_fields cur vfio_pci_fill_info 0 51616 NULL nohasharray
 data_transfer_length_vmscsi_request_51616_fields data_transfer_length vmscsi_request 0 51616 &cur_vfio_pci_fill_info_51616_fields
 alloc_ltalkdev_fndecl_51620_fields alloc_ltalkdev fndecl 1 51620 NULL
+ioc_plen1_obd_ioctl_data_51625_fields ioc_plen1 obd_ioctl_data 0 51625 NULL
 btuart_write_fndecl_51627_fields btuart_write fndecl 0 51627 NULL
 nodesize_btrfs_root_51633_fields nodesize btrfs_root 0 51633 NULL
+SsidLength_ndis_802_11_ssid_51638_fields SsidLength ndis_802_11_ssid 0 51638 NULL
 remap_cell_to_cache_dirty_fndecl_51640_fields remap_cell_to_cache_dirty fndecl 4 51640 NULL
+imm_count_jit_ctx_51643_fields imm_count jit_ctx 0 51643 NULL
+tx_ring_size_gfar_priv_tx_q_51655_fields tx_ring_size gfar_priv_tx_q 0 51655 NULL
 o2hb_read_slots_fndecl_51658_fields o2hb_read_slots fndecl 2 51658 NULL
 phys_mdio_mux_mmioreg_state_51673_fields phys mdio_mux_mmioreg_state 0 51673 NULL
 tcf_csum_ipv4_udp_fndecl_51674_fields tcf_csum_ipv4_udp fndecl 3 51674 NULL nohasharray
@@ -12772,6 +12988,7 @@ immediate_data_length_iscsi_build_list_52017_fields immediate_data_length iscsi_
 size_fuse_write_out_52017_fields size fuse_write_out 0 52017 &immediate_data_length_iscsi_build_list_52017_fields
 batadv_iv_ogm_aggregate_new_fndecl_52022_fields batadv_iv_ogm_aggregate_new fndecl 2 52022 NULL
 dev_set_mtu_fndecl_52028_fields dev_set_mtu fndecl 2 52028 NULL
+bounce_buf_len_xhci_ring_52035_fields bounce_buf_len xhci_ring 0 52035 NULL
 oobavail_mtd_info_52037_fields oobavail mtd_info 0 52037 NULL
 gfs2_setattr_size_fndecl_52038_fields gfs2_setattr_size fndecl 2 52038 NULL nohasharray
 mapbase_priv_52038_fields mapbase priv 0 52038 &gfs2_setattr_size_fndecl_52038_fields
@@ -12833,7 +13050,8 @@ lpc_sch_get_io_fndecl_52232_fields lpc_sch_get_io fndecl 5 52232 NULL
 nfs3_proc_readlink_fndecl_52235_fields nfs3_proc_readlink fndecl 4-3 52235 NULL
 devm_nvdimm_memremap_fndecl_52240_fields devm_nvdimm_memremap fndecl 3-2 52240 NULL
 num_ports_mthca_limits_52246_fields num_ports mthca_limits 0 52246 NULL
-paddr_drm_gem_cma_object_52250_fields paddr drm_gem_cma_object 0 52250 NULL
+paddr_drm_gem_cma_object_52250_fields paddr drm_gem_cma_object 0 52250 NULL nohasharray
+size_elf_note_info_52250_fields size elf_note_info 0 52250 &paddr_drm_gem_cma_object_52250_fields
 ceph_osdc_alloc_messages_fndecl_52252_fields ceph_osdc_alloc_messages fndecl 0 52252 NULL
 get_count_order_long_fndecl_52255_fields get_count_order_long fndecl 0 52255 NULL
 bufsize_brcmf_console_52266_fields bufsize brcmf_console 0 52266 NULL
@@ -12876,6 +13094,7 @@ rh_string_fndecl_52376_fields rh_string fndecl 0-4 52376 NULL
 bMaxBurst_usb_ss_ep_comp_descriptor_52382_fields bMaxBurst usb_ss_ep_comp_descriptor 0 52382 NULL
 ath6kl_wmi_set_ie_cmd_fndecl_52383_fields ath6kl_wmi_set_ie_cmd fndecl 6-2 52383 NULL nohasharray
 sg_pgoffset_sg_page_iter_52383_fields sg_pgoffset sg_page_iter 0 52383 &ath6kl_wmi_set_ie_cmd_fndecl_52383_fields
+raw_bufsize_edt_ft5x06_ts_data_52390_fields raw_bufsize edt_ft5x06_ts_data 0 52390 NULL
 jffs2_write_dirent_fndecl_52396_fields jffs2_write_dirent fndecl 5 52396 NULL
 u132_hcd_initial_input_recv_fndecl_52397_fields u132_hcd_initial_input_recv fndecl 4 52397 NULL
 srp_map_idb_fndecl_52402_fields srp_map_idb fndecl 0-5 52402 NULL
@@ -12965,6 +13184,7 @@ dd_fcrport_size_fc_function_template_52753_fields dd_fcrport_size fc_function_te
 num_btns_cyttsp4_sysinfo_ofs_52758_fields num_btns cyttsp4_sysinfo_ofs 0 52758 NULL
 dr_blkno_ocfs2_dx_root_block_52759_fields dr_blkno ocfs2_dx_root_block 0 52759 NULL
 playback_frlog_rme96_52763_fields playback_frlog rme96 0 52763 NULL
+iov_iter_fault_in_readable_fndecl_52767_fields iov_iter_fault_in_readable fndecl 2 52767 NULL
 wIDIbytesPerSector_ms_bootblock_idi_52770_fields wIDIbytesPerSector ms_bootblock_idi 0 52770 NULL
 size_drm_i915_gem_create_52771_fields size drm_i915_gem_create 0 52771 NULL
 maxBuf_TCP_Server_Info_52774_fields maxBuf TCP_Server_Info 0 52774 NULL
@@ -12974,6 +13194,7 @@ tcp_mss_split_point_fndecl_52791_fields tcp_mss_split_point fndecl 0 52791 &qxl_
 batadv_get_vid_fndecl_52792_fields batadv_get_vid fndecl 2 52792 NULL
 __wa_seg_calculate_isoc_frame_count_fndecl_52795_fields __wa_seg_calculate_isoc_frame_count fndecl 0 52795 NULL
 buffer_size_vardecl_ethoc_c_52796_fields buffer_size vardecl_ethoc.c 0 52796 NULL
+xhci_ring_alloc_fndecl_52799_fields xhci_ring_alloc fndecl 5 52799 NULL
 payload_len_bfa_bsg_data_52800_fields payload_len bfa_bsg_data 0 52800 NULL
 postcopy_buffers_fndecl_52806_fields postcopy_buffers fndecl 3 52806 NULL
 ule_sndu_type_dvb_net_priv_52811_fields ule_sndu_type dvb_net_priv 0 52811 NULL
@@ -13106,6 +13327,8 @@ sys_send_fndecl_53330_fields sys_send fndecl 3 53330 NULL
 __drm_gem_cma_create_fndecl_53334_fields __drm_gem_cma_create fndecl 2 53334 NULL
 s_inode_readahead_blks_ext4_sb_info_53337_fields s_inode_readahead_blks ext4_sb_info 0 53337 NULL
 v9fs_xattr_set_fndecl_53342_fields v9fs_xattr_set fndecl 4 53342 NULL
+ioc_len_libcfs_ioctl_hdr_53352_fields ioc_len libcfs_ioctl_hdr 0 53352 NULL
+frag_size_hwbm_pool_53355_fields frag_size hwbm_pool 0 53355 NULL
 ali1563_smba_vardecl_i2c_ali1563_c_53362_fields ali1563_smba vardecl_i2c-ali1563.c 0 53362 NULL
 __xdr_inline_decode_fndecl_53363_fields __xdr_inline_decode fndecl 2 53363 NULL
 rsize_hid_device_53365_fields rsize hid_device 0 53365 NULL
@@ -13171,8 +13394,11 @@ btt_flog_write_fndecl_53628_fields btt_flog_write fndecl 0 53628 NULL
 num_channels_mlx5e_params_53632_fields num_channels mlx5e_params 0 53632 NULL
 remote_nentries_xpc_openclose_args_53643_fields remote_nentries xpc_openclose_args 0 53643 NULL
 ticket2_len_rxk5_key_53644_fields ticket2_len rxk5_key 0 53644 NULL
+ioc_plen2_obd_ioctl_data_53648_fields ioc_plen2 obd_ioctl_data 0 53648 NULL
 extra_tx_headroom_rt2x00_dev_53650_fields extra_tx_headroom rt2x00_dev 0 53650 NULL
 ceph_buffer_new_fndecl_53653_fields ceph_buffer_new fndecl 1 53653 NULL
+dlist_count_vc4_plane_state_53658_fields dlist_count vc4_plane_state 0 53658 NULL
+hr_data_len_hsm_request_53666_fields hr_data_len hsm_request 0 53666 NULL
 num_sge_ib_uverbs_send_wr_53667_fields num_sge ib_uverbs_send_wr 0 53667 NULL
 cpu_addr_of_pci_range_53670_fields cpu_addr of_pci_range 0 53670 NULL
 xen_foreach_remap_area_fndecl_53678_fields xen_foreach_remap_area fndecl 0 53678 NULL nohasharray
@@ -13195,6 +13421,7 @@ xdr_inline_decode_fndecl_53721_fields xdr_inline_decode fndecl 2 53721 NULL
 sys_init_module_fndecl_53724_fields sys_init_module fndecl 2 53724 NULL nohasharray
 onenand_write_ops_nolock_fndecl_53724_fields onenand_write_ops_nolock fndecl 2 53724 &sys_init_module_fndecl_53724_fields
 btt_rw_integrity_fndecl_53727_fields btt_rw_integrity fndecl 0 53727 NULL
+xhci_alloc_stream_info_fndecl_53732_fields xhci_alloc_stream_info fndecl 4 53732 NULL
 adp5588_build_gpiomap_fndecl_53733_fields adp5588_build_gpiomap fndecl 0 53733 NULL nohasharray
 dnode_scif_peer_dev_53733_fields dnode scif_peer_dev 0 53733 &adp5588_build_gpiomap_fndecl_53733_fields
 max_data_size_vardecl_hsi_char_c_53736_fields max_data_size vardecl_hsi_char.c 0 53736 NULL
@@ -13251,7 +13478,8 @@ usb_stor_sg_tablesize_fndecl_53929_fields usb_stor_sg_tablesize fndecl 0 53929 N
 osd_req_op_extent_dup_last_fndecl_53929_fields osd_req_op_extent_dup_last fndecl 3 53929 &usb_stor_sg_tablesize_fndecl_53929_fields
 chip_sdma_engines_hfi1_devdata_53934_fields chip_sdma_engines hfi1_devdata 0 53934 NULL
 depth_tm6000_fmt_53938_fields depth tm6000_fmt 0 53938 NULL
-ip4ip6_err_fndecl_53943_fields ip4ip6_err fndecl 5 53943 NULL
+ip4ip6_err_fndecl_53943_fields ip4ip6_err fndecl 5 53943 NULL nohasharray
+_find_first_zero_bit_be_fndecl_53943_fields _find_first_zero_bit_be fndecl 0 53943 &ip4ip6_err_fndecl_53943_fields
 llc_mac_header_len_fndecl_53947_fields llc_mac_header_len fndecl 0 53947 NULL
 buffer_end_nm256_53949_fields buffer_end nm256 0 53949 NULL
 swiotlb_nr_tbl_fndecl_53950_fields swiotlb_nr_tbl fndecl 0 53950 NULL
@@ -13261,6 +13489,7 @@ vmw_sou_backing_alloc_fndecl_53962_fields vmw_sou_backing_alloc fndecl 3 53962 N
 c_srate_f_uac2_opts_53962_fields c_srate f_uac2_opts 0 53962 &vmw_sou_backing_alloc_fndecl_53962_fields
 recover_orphan_inode_fndecl_53969_fields recover_orphan_inode fndecl 2 53969 NULL
 dests_size_fs_fte_53973_fields dests_size fs_fte 0 53973 NULL
+key_len_wpa_key_t_53980_fields key_len wpa_key_t 0 53980 NULL
 rx_buf_sz_cp_private_53982_fields rx_buf_sz cp_private 0 53982 NULL
 assoc_resp_len_wmi_connect_event_53983_fields assoc_resp_len wmi_connect_event 0 53983 NULL
 nfs_proc_mknod_fndecl_53987_fields nfs_proc_mknod fndecl 4 53987 NULL
@@ -13273,6 +13502,7 @@ nonstatic_find_io_fndecl_54015_fields nonstatic_find_io fndecl 4 54015 NULL
 rsi_setblocklength_fndecl_54024_fields rsi_setblocklength fndecl 2 54024 NULL
 xz_dec_lzma2_create_fndecl_54034_fields xz_dec_lzma2_create fndecl 2 54034 NULL
 sum_size_jffs2_summary_54035_fields sum_size jffs2_summary 0 54035 NULL
+gb_operation_create_core_fndecl_54045_fields gb_operation_create_core fndecl 4 54045 NULL
 sierra_write_fndecl_54049_fields sierra_write fndecl 4 54049 NULL
 copy_page_to_iter_pipe_fndecl_54059_fields copy_page_to_iter_pipe fndecl 2-3-0 54059 NULL
 storvsc_ringbuffer_size_vardecl_storvsc_drv_c_54060_fields storvsc_ringbuffer_size vardecl_storvsc_drv.c 0 54060 NULL
@@ -13303,6 +13533,7 @@ carl9170_exec_cmd_fndecl_54141_fields carl9170_exec_cmd fndecl 3 54141 &change_p
 netvsc_change_mtu_fndecl_54142_fields netvsc_change_mtu fndecl 2 54142 NULL
 f2fs_do_collapse_fndecl_54143_fields f2fs_do_collapse fndecl 3-2 54143 NULL
 brcmf_usb_dl_writeimage_fndecl_54144_fields brcmf_usb_dl_writeimage fndecl 3 54144 NULL
+hs_cur_bits_cfs_hash_54147_fields hs_cur_bits cfs_hash 0 54147 NULL
 sp2_write_i2c_fndecl_54157_fields sp2_write_i2c fndecl 4 54157 NULL
 num_qp_mthca_profile_54160_fields num_qp mthca_profile 0 54160 NULL
 buf_len_lpfc_sli_config_mse_54165_fields buf_len lpfc_sli_config_mse 0 54165 NULL
@@ -13405,6 +13636,7 @@ initial_height_vmw_private_54479_fields initial_height vmw_private 0 54479 NULL
 adf7242_write_fbuf_fndecl_54479_fields adf7242_write_fbuf fndecl 3 54479 &initial_height_vmw_private_54479_fields
 ceph_auth_entity_name_encode_fndecl_54483_fields ceph_auth_entity_name_encode fndecl 0 54483 NULL
 spi_write_buf_fndecl_54490_fields spi_write_buf fndecl 2 54490 NULL
+n_chan_comedi_subdevice_54496_fields n_chan comedi_subdevice 0 54496 NULL
 dev_start_strip_zone_54501_fields dev_start strip_zone 0 54501 NULL
 max_fds_fdtable_54502_fields max_fds fdtable 0 54502 NULL
 mwifiex_set_gen_ie_helper_fndecl_54506_fields mwifiex_set_gen_ie_helper fndecl 3 54506 NULL
@@ -13515,6 +13747,7 @@ iscsit_build_pdu_and_seq_lists_fndecl_54916_fields iscsit_build_pdu_and_seq_list
 line_length_fb_fix_screeninfo_54923_fields line_length fb_fix_screeninfo 0 54923 NULL nohasharray
 ipr_copy_ucode_buffer_fndecl_54923_fields ipr_copy_ucode_buffer fndecl 3 54923 &line_length_fb_fix_screeninfo_54923_fields
 sector_dm_io_region_54924_fields sector dm_io_region 0 54924 NULL
+addr_ihex_binrec_54928_fields addr ihex_binrec 0 54928 NULL
 __clone_blkaddrs_fndecl_54943_fields __clone_blkaddrs fndecl 5-6 54943 NULL
 blk_queue_logical_block_size_fndecl_54946_fields blk_queue_logical_block_size fndecl 2 54946 NULL
 page_add_anon_rmap_fndecl_54950_fields page_add_anon_rmap fndecl 3 54950 NULL
@@ -13522,6 +13755,7 @@ encx24j600_cmdn_fndecl_54953_fields encx24j600_cmdn fndecl 4 54953 NULL nohashar
 per_rxd_space_vxge_hw_ring_attr_54953_fields per_rxd_space vxge_hw_ring_attr 0 54953 &encx24j600_cmdn_fndecl_54953_fields
 log_blocks_per_seg_f2fs_super_block_54960_fields log_blocks_per_seg f2fs_super_block 0 54960 NULL
 pci_enable_sriov_fndecl_54962_fields pci_enable_sriov fndecl 2 54962 NULL
+gb_operation_create_flags_fndecl_54976_fields gb_operation_create_flags fndecl 4 54976 NULL
 offset_usb_iso_packet_descriptor_54977_fields offset usb_iso_packet_descriptor 0 54977 NULL
 v4l2_src_w_yuv_playback_info_54979_fields v4l2_src_w yuv_playback_info 0 54979 NULL
 len_cn_msg_54981_fields len cn_msg 0 54981 NULL
@@ -13560,6 +13794,7 @@ scatterwalk_ffwd_fndecl_55110_fields scatterwalk_ffwd fndecl 3 55110 NULL
 y_zoran_overlay_settings_55113_fields y zoran_overlay_settings 0 55113 NULL
 unpack_to_rootfs_fndecl_55124_fields unpack_to_rootfs fndecl 2 55124 NULL
 length_dw_radeon_cs_chunk_55128_fields length_dw radeon_cs_chunk 0 55128 NULL
+ea_data_len_gfs2_ea_header_55134_fields ea_data_len gfs2_ea_header 0 55134 NULL
 ___ieee80211_stop_rx_ba_session_fndecl_55145_fields ___ieee80211_stop_rx_ba_session fndecl 2 55145 NULL
 namelen_dlm_lock_params_55146_fields namelen dlm_lock_params 0 55146 NULL
 gigaset_isowbuf_getbytes_fndecl_55147_fields gigaset_isowbuf_getbytes fndecl 0-2 55147 NULL
@@ -13595,6 +13830,7 @@ sgoffset_cxgbi_task_data_55277_fields sgoffset cxgbi_task_data 0 55277 &bSubfram
 apic_phys_vardecl_apic_c_55279_fields apic_phys vardecl_apic.c 0 55279 NULL nohasharray
 ext2_acl_from_disk_fndecl_55279_fields ext2_acl_from_disk fndecl 2 55279 &apic_phys_vardecl_apic_c_55279_fields
 xfs_refcount_find_left_extents_fndecl_55280_fields xfs_refcount_find_left_extents fndecl 4-5 55280 NULL
+ld_default_stripe_count_lov_desc_55281_fields ld_default_stripe_count lov_desc 0 55281 NULL
 copy_to_urb_fndecl_55284_fields copy_to_urb fndecl 5-4 55284 NULL
 hdrlen_ipv6_rt_hdr_55289_fields hdrlen ipv6_rt_hdr 0 55289 NULL
 c_can_read_msg_object_fndecl_55291_fields c_can_read_msg_object fndecl 3 55291 NULL
@@ -13662,6 +13898,7 @@ blkdev_max_hw_sectors_vardecl_dev_c_55533_fields blkdev_max_hw_sectors vardecl_d
 irq_intel_lpss_platform_info_55538_fields irq intel_lpss_platform_info 0 55538 NULL
 crtcs_psb_ops_55540_fields crtcs psb_ops 0 55540 NULL
 rf_blkno_ocfs2_refcount_block_55545_fields rf_blkno ocfs2_refcount_block 0 55545 NULL
+tmp_afs_call_55554_fields tmp afs_call 0 55554 NULL
 usVSyncOffset__ATOM_DTD_FORMAT_55558_fields usVSyncOffset _ATOM_DTD_FORMAT 0 55558 NULL nohasharray
 max_i2s_channels_hdmi_codec_pdata_55558_fields max_i2s_channels hdmi_codec_pdata 0 55558 &usVSyncOffset__ATOM_DTD_FORMAT_55558_fields
 read_reg_fndecl_55560_fields read_reg fndecl 0 55560 NULL
@@ -13669,6 +13906,7 @@ iv_len_ieee80211_key_conf_55561_fields iv_len ieee80211_key_conf 0 55561 NULL
 io_tlb_overflow_vardecl_swiotlb_c_55570_fields io_tlb_overflow vardecl_swiotlb.c 0 55570 NULL
 if_sdio_read_rx_len_fndecl_55579_fields if_sdio_read_rx_len fndecl 0 55579 NULL
 index_vardecl_pcsp_c_55582_fields index vardecl_pcsp.c 0 55582 NULL
+coh_page_bufsize_cl_object_header_55585_fields coh_page_bufsize cl_object_header 0 55585 NULL
 rcvtid_size_ctxt_eager_bufs_55589_fields rcvtid_size ctxt_eager_bufs 0 55589 NULL
 split_by_ceph_inode_frag_55595_fields split_by ceph_inode_frag 0 55595 NULL
 ext4_punch_hole_fndecl_55604_fields ext4_punch_hole fndecl 3-2 55604 NULL
@@ -13818,6 +14056,7 @@ ath10k_htt_tx_fetch_resp_fndecl_56215_fields ath10k_htt_tx_fetch_resp fndecl 5 5
 sample_stack_user_perf_event_attr_56220_fields sample_stack_user perf_event_attr 0 56220 NULL
 offset_cifs_writedata_56222_fields offset cifs_writedata 0 56222 NULL nohasharray
 reg_cache_size_snd_soc_codec_driver_56222_fields reg_cache_size snd_soc_codec_driver 0 56222 &offset_cifs_writedata_56222_fields
+reg_cache_size_omap_mcbsp_56223_fields reg_cache_size omap_mcbsp 0 56223 NULL
 depth_s2255_fmt_56229_fields depth s2255_fmt 0 56229 NULL
 psn_mask_rvt_driver_params_56230_fields psn_mask rvt_driver_params 0 56230 NULL
 ocfs2_mv_xattr_buckets_fndecl_56231_fields ocfs2_mv_xattr_buckets fndecl 6-3-5-4 56231 NULL
@@ -13862,7 +14101,8 @@ buf_count_drm_device_dma_56399_fields buf_count drm_device_dma 0 56399 NULL
 ccw_clear_fndecl_56408_fields ccw_clear fndecl 3-5-6-4 56408 NULL
 f2fs_llseek_fndecl_56409_fields f2fs_llseek fndecl 2 56409 NULL
 ieee80211_auth_challenge_fndecl_56418_fields ieee80211_auth_challenge fndecl 3 56418 NULL
-notify_change_fndecl_56420_fields notify_change fndecl 0 56420 NULL
+notify_change_fndecl_56420_fields notify_change fndecl 0 56420 NULL nohasharray
+hd_priv_size_gb_hd_driver_56420_fields hd_priv_size gb_hd_driver 0 56420 &notify_change_fndecl_56420_fields
 max_recv_wr_ib_qp_cap_56426_fields max_recv_wr ib_qp_cap 0 56426 NULL
 llc_ui_sendmsg_fndecl_56432_fields llc_ui_sendmsg fndecl 3 56432 NULL
 ath6kl_wmi_cancel_remain_on_chnl_cmd_fndecl_56434_fields ath6kl_wmi_cancel_remain_on_chnl_cmd fndecl 2 56434 NULL nohasharray
@@ -13906,6 +14146,7 @@ sctp_tsnmap_grow_fndecl_56579_fields sctp_tsnmap_grow fndecl 2 56579 NULL
 buf_bytes_mmc_blk_ioc_data_56589_fields buf_bytes mmc_blk_ioc_data 0 56589 NULL
 qt2_write_fndecl_56603_fields qt2_write fndecl 4 56603 NULL
 cb_irq_yenta_socket_56604_fields cb_irq yenta_socket 0 56604 NULL
+q_num_hnae_handle_56609_fields q_num hnae_handle 0 56609 NULL
 security_size_rxrpc_connection_56613_fields security_size rxrpc_connection 0 56613 NULL
 pci_map_size_iadev_priv_56617_fields pci_map_size iadev_priv 0 56617 NULL
 ieee80211_tdls_mgmt_fndecl_56618_fields ieee80211_tdls_mgmt fndecl 10 56618 NULL
@@ -13941,6 +14182,7 @@ ext4_get_group_number_fndecl_56720_fields ext4_get_group_number fndecl 0 56720 N
 rcvegrbuf_size_qib_ctxtdata_56720_fields rcvegrbuf_size qib_ctxtdata 0 56720 &ext4_get_group_number_fndecl_56720_fields
 opcnt_nfsd4_compoundargs_56722_fields opcnt nfsd4_compoundargs 0 56722 NULL
 offset_cw1200_txpriv_56729_fields offset cw1200_txpriv 0 56729 NULL
+tx_ring_size_mvpp2_port_56735_fields tx_ring_size mvpp2_port 0 56735 NULL
 search_empty_fndecl_56737_fields search_empty fndecl 2 56737 NULL
 drm_gem_cma_create_fndecl_56742_fields drm_gem_cma_create fndecl 2 56742 NULL nohasharray
 val_len_ceph_inode_xattr_56742_fields val_len ceph_inode_xattr 0 56742 &drm_gem_cma_create_fndecl_56742_fields
@@ -14072,6 +14314,7 @@ ext4_meta_bg_first_block_no_fndecl_57235_fields ext4_meta_bg_first_block_no fnde
 header_asix_rx_fixup_info_57237_fields header asix_rx_fixup_info 0 57237 NULL nohasharray
 li_namelen_nfsd4_link_57237_fields li_namelen nfsd4_link 0 57237 &header_asix_rx_fixup_info_57237_fields
 iomap_write_end_fndecl_57238_fields iomap_write_end fndecl 0-4-2-3 57238 NULL
+offset_ion_test_rw_data_57241_fields offset ion_test_rw_data 0 57241 NULL
 pkg_size_raydium_data_57243_fields pkg_size raydium_data 0 57243 NULL
 sys_dup3_fndecl_57246_fields sys_dup3 fndecl 2 57246 NULL
 maxlen_xfs_alloc_arg_57260_fields maxlen xfs_alloc_arg 0 57260 NULL
@@ -14202,6 +14445,7 @@ b_io_error_xfs_buf_57771_fields b_io_error xfs_buf 0 57771 NULL
 minor_media_devnode_57774_fields minor media_devnode 0 57774 NULL
 height_fb_copyarea_57780_fields height fb_copyarea 0 57780 NULL nohasharray
 end_numa_memblk_57780_fields end numa_memblk 0 57780 &height_fb_copyarea_57780_fields
+mp_rx_agg_buf_size_sdio_mmc_card_57794_fields mp_rx_agg_buf_size sdio_mmc_card 0 57794 NULL
 pos_lzma_header_57804_fields pos lzma_header 0 57804 NULL
 nic_num_sqs_en_fndecl_57805_fields nic_num_sqs_en fndecl 0-2 57805 NULL
 ri_blockcount_xfs_refcount_intent_57815_fields ri_blockcount xfs_refcount_intent 0 57815 NULL
@@ -14209,7 +14453,8 @@ get_user_pages_remote_fndecl_57819_fields get_user_pages_remote fndecl 0-3 57819
 blocks_mmc_data_57821_fields blocks mmc_data 0 57821 NULL
 force_size_vardecl_pcmciamtd_c_57827_fields force_size vardecl_pcmciamtd.c 0 57827 NULL
 cmd_len_cmd_57830_fields cmd_len cmd 0 57830 NULL nohasharray
-ecc_bits_nand_onfi_params_57830_fields ecc_bits nand_onfi_params 0 57830 &cmd_len_cmd_57830_fields
+ecc_bits_nand_onfi_params_57830_fields ecc_bits nand_onfi_params 0 57830 &cmd_len_cmd_57830_fields nohasharray
+ioc_count_obd_ioctl_data_57830_fields ioc_count obd_ioctl_data 0 57830 &ecc_bits_nand_onfi_params_57830_fields
 vxfs_bmap_ext4_fndecl_57831_fields vxfs_bmap_ext4 fndecl 0-2 57831 NULL nohasharray
 iscsi_complete_pdu_fndecl_57831_fields iscsi_complete_pdu fndecl 4 57831 &vxfs_bmap_ext4_fndecl_57831_fields
 i_pos_hi_fat_fid_57850_fields i_pos_hi fat_fid 0 57850 NULL
@@ -14233,6 +14478,7 @@ mpwqe_log_stride_sz_mlx5e_params_57934_fields mpwqe_log_stride_sz mlx5e_params 0
 memblock_set_current_limit_fndecl_57935_fields memblock_set_current_limit fndecl 1 57935 NULL
 eeprom_size_rt2x00_ops_57953_fields eeprom_size rt2x00_ops 0 57953 NULL
 i2c_read_fndecl_57956_fields i2c_read fndecl 0 57956 NULL
+ticket_len_rxkad_response_57960_fields ticket_len rxkad_response 0 57960 NULL
 filemap_check_errors_fndecl_57965_fields filemap_check_errors fndecl 0 57965 NULL
 init_speed_hci_uart_57987_fields init_speed hci_uart 0 57987 NULL
 hpfs_map_anode_fndecl_57993_fields hpfs_map_anode fndecl 2 57993 NULL
@@ -14343,6 +14589,7 @@ di_anextents_xfs_icdinode_58455_fields di_anextents xfs_icdinode 0 58455 NULL
 caif_seqpkt_sendmsg_fndecl_58458_fields caif_seqpkt_sendmsg fndecl 3 58458 NULL
 NumProtectionFields_cfi_pri_intelext_58461_fields NumProtectionFields cfi_pri_intelext 0 58461 NULL
 btrfs_clone_fndecl_58462_fields btrfs_clone fndecl 5-3-6 58462 NULL
+pgsize_bitmap_iommu_domain_58464_fields pgsize_bitmap iommu_domain 0 58464 NULL
 usermodehelper_read_trylock_fndecl_58469_fields usermodehelper_read_trylock fndecl 0 58469 NULL
 jbd2_journal_inode_add_write_fndecl_58489_fields jbd2_journal_inode_add_write fndecl 0 58489 NULL
 try_lock_extent_fndecl_58490_fields try_lock_extent fndecl 3-2 58490 NULL nohasharray
@@ -14436,6 +14683,7 @@ address_fault_env_58869_fields address fault_env 0 58869 NULL
 hfp_ast_vbios_enhtable_58872_fields hfp ast_vbios_enhtable 0 58872 NULL
 gbuffers_vardecl_bttv_driver_c_58873_fields gbuffers vardecl_bttv-driver.c 0 58873 NULL
 addr_nvme_sgl_desc_58875_fields addr nvme_sgl_desc 0 58875 NULL
+xm_wmfw_adsp2_alg_hdr_58884_fields xm wmfw_adsp2_alg_hdr 0 58884 NULL
 rx_buf_sz_fe_priv_58888_fields rx_buf_sz fe_priv 0 58888 NULL
 max_xfer_nd_cmd_get_config_size_58894_fields max_xfer nd_cmd_get_config_size 0 58894 NULL
 usb_stor_bulk_transfer_sg_fndecl_58896_fields usb_stor_bulk_transfer_sg fndecl 2-4 58896 NULL
@@ -14501,6 +14749,7 @@ rcvidx_hscx_hw_59100_fields rcvidx hscx_hw 0 59100 NULL
 ctrl_dma_ims_pcu_59106_fields ctrl_dma ims_pcu 0 59106 NULL
 remap_and_issue_shared_cell_fndecl_59114_fields remap_and_issue_shared_cell fndecl 3 59114 NULL
 sec_per_clus_fat_floppy_defaults_59119_fields sec_per_clus fat_floppy_defaults 0 59119 NULL
+omapdss_count_strings_fndecl_59120_fields omapdss_count_strings fndecl 0 59120 NULL
 npages_for_summary_flush_fndecl_59124_fields npages_for_summary_flush fndecl 0 59124 NULL
 xfs_read_agi_fndecl_59127_fields xfs_read_agi fndecl 3 59127 NULL nohasharray
 width_em28xx_v4l2_59127_fields width em28xx_v4l2 0 59127 &xfs_read_agi_fndecl_59127_fields
@@ -14540,6 +14789,7 @@ size_vhost_umem_node_59230_fields size vhost_umem_node 0 59230 NULL
 __iptunnel_pull_header_fndecl_59234_fields __iptunnel_pull_header fndecl 2 59234 NULL
 sierra_net_skb_clone_fndecl_59236_fields sierra_net_skb_clone fndecl 3 59236 NULL
 clear_record_extent_bits_fndecl_59239_fields clear_record_extent_bits fndecl 2-3 59239 NULL
+num_mbc_cfgs_wm8994_pdata_59240_fields num_mbc_cfgs wm8994_pdata 0 59240 NULL
 length_acpi_pcct_hw_reduced_59242_fields length acpi_pcct_hw_reduced 0 59242 NULL nohasharray
 nlp_maxframe_lpfc_nodelist_59242_fields nlp_maxframe lpfc_nodelist 0 59242 &length_acpi_pcct_hw_reduced_59242_fields
 save_microcode_fndecl_59254_fields save_microcode fndecl 3 59254 NULL
@@ -14554,6 +14804,7 @@ nentries_afs_dir_pagehdr_59283_fields nentries afs_dir_pagehdr 0 59283 NULL
 used_snd_array_59285_fields used snd_array 0 59285 NULL
 written_coredump_params_59286_fields written coredump_params 0 59286 NULL
 hpfs_write_end_fndecl_59287_fields hpfs_write_end fndecl 5 59287 NULL
+nr_regs_omap_prcm_irq_setup_59292_fields nr_regs omap_prcm_irq_setup 0 59292 NULL
 range_oid_t_59299_fields range oid_t 0 59299 NULL
 jffs2_write_dnode_fndecl_59301_fields jffs2_write_dnode fndecl 5 59301 NULL
 next_segno_curseg_info_59302_fields next_segno curseg_info 0 59302 NULL
@@ -14667,6 +14918,7 @@ ocfs2_read_dx_leaves_fndecl_59744_fields ocfs2_read_dx_leaves fndecl 2 59744 NUL
 fq_resize_fndecl_59744_fields fq_resize fndecl 2 59744 &ocfs2_read_dx_leaves_fndecl_59744_fields
 nx_fw_cmd_set_phy_fndecl_59745_fields nx_fw_cmd_set_phy fndecl 3 59745 NULL
 mt_count_mtop_59746_fields mt_count mtop 0 59746 NULL
+seedsize_rng_alg_59748_fields seedsize rng_alg 0 59748 NULL
 xlog_write_calc_vec_length_fndecl_59749_fields xlog_write_calc_vec_length fndecl 0 59749 NULL
 request_size_afs_call_59750_fields request_size afs_call 0 59750 NULL
 addr_phys_netup_dma_59759_fields addr_phys netup_dma 0 59759 NULL
@@ -14841,6 +15093,7 @@ minimum_cx88_ctrl_60444_fields minimum cx88_ctrl 0 60444 NULL
 digestsize_hash_alg_common_60446_fields digestsize hash_alg_common 0 60446 NULL
 create_kmalloc_cache_usercopy_fndecl_60447_fields create_kmalloc_cache_usercopy fndecl 2 60447 NULL
 count_hscx_hw_60448_fields count hscx_hw 0 60448 NULL
+bss_end_flat_hdr_60449_fields bss_end flat_hdr 0 60449 NULL
 lib80211_tkip_decrypt_fndecl_60450_fields lib80211_tkip_decrypt fndecl 2 60450 NULL
 maxsgentries_ctlr_info_60455_fields maxsgentries ctlr_info 0 60455 NULL
 osd_req_op_cls_request_data_pages_fndecl_60457_fields osd_req_op_cls_request_data_pages fndecl 4 60457 NULL
@@ -15001,6 +15254,7 @@ pvr2_buffer_set_buffer_fndecl_61176_fields pvr2_buffer_set_buffer fndecl 3 61176
 register_sound_mixer_fndecl_61179_fields register_sound_mixer fndecl 2 61179 NULL
 __ocfs2_move_extent_fndecl_61183_fields __ocfs2_move_extent fndecl 4-5-6-3 61183 NULL
 osd_req_op_extent_init_fndecl_61188_fields osd_req_op_extent_init fndecl 5 61188 NULL
+channels_vendor_data_61194_fields channels vendor_data 0 61194 NULL
 pos_dir_context_61195_fields pos dir_context 0 61195 NULL
 port_id_ssp_device_61196_fields port_id ssp_device 0 61196 NULL
 size_bcma_sflash_61197_fields size bcma_sflash 0 61197 NULL
@@ -15045,6 +15299,7 @@ handle_response_icmp_fndecl_61366_fields handle_response_icmp fndecl 7 61366 NUL
 tx_headroom_libipw_device_61370_fields tx_headroom libipw_device 0 61370 NULL
 sync_dirty_buffer_fndecl_61371_fields sync_dirty_buffer fndecl 0 61371 NULL
 data_dma_usb_onetouch_61372_fields data_dma usb_onetouch 0 61372 NULL
+num_of_phy_chans_stedma40_platform_data_61373_fields num_of_phy_chans stedma40_platform_data 0 61373 NULL
 devs_max_btrfs_raid_attr_61376_fields devs_max btrfs_raid_attr 0 61376 NULL
 bfa_cb_ioim_done_fndecl_61381_fields bfa_cb_ioim_done fndecl 7 61381 NULL
 xfs_dir3_data_read_fndecl_61387_fields xfs_dir3_data_read fndecl 3 61387 NULL
@@ -15190,6 +15445,7 @@ hsu_dma_active_desc_size_fndecl_61956_fields hsu_dma_active_desc_size fndecl 0 6
 indirect_size_srp_target_port_61962_fields indirect_size srp_target_port 0 61962 NULL
 s_maxbytes_super_block_61963_fields s_maxbytes super_block 0 61963 NULL
 periods_min_snd_pcm_hardware_61965_fields periods_min snd_pcm_hardware 0 61965 NULL
+wm_adsp_compr_read_fndecl_61972_fields wm_adsp_compr_read fndecl 3 61972 NULL
 nfs_set_pgio_error_fndecl_61975_fields nfs_set_pgio_error fndecl 3 61975 NULL
 physical_for_dev_replace_scrub_page_61977_fields physical_for_dev_replace scrub_page 0 61977 NULL
 x25_pacsize_to_bytes_fndecl_61983_fields x25_pacsize_to_bytes fndecl 0 61983 NULL
@@ -15202,6 +15458,7 @@ sisusb_write_fndecl_62001_fields sisusb_write fndecl 3 62001 NULL
 sc_reader_svcxprt_rdma_62004_fields sc_reader svcxprt_rdma 0 62004 NULL
 __add_discard_entry_fndecl_62006_fields __add_discard_entry fndecl 4-5 62006 NULL
 ext4_ext_convert_to_initialized_fndecl_62009_fields ext4_ext_convert_to_initialized fndecl 0 62009 NULL
+length_snd_efw_transaction_62012_fields length snd_efw_transaction 0 62012 NULL
 memblock_setclr_flag_fndecl_62013_fields memblock_setclr_flag fndecl 2-1 62013 NULL
 srp_map_sg_fr_fndecl_62023_fields srp_map_sg_fr fndecl 0 62023 NULL
 size_mtd_blktrans_dev_62024_fields size mtd_blktrans_dev 0 62024 NULL
@@ -15253,6 +15510,7 @@ max_pkt_size_em28xx_62196_fields max_pkt_size em28xx 0 62196 NULL
 snd_cwnd_clamp_tcp_sock_62197_fields snd_cwnd_clamp tcp_sock 0 62197 NULL
 maxframe_caifsock_62201_fields maxframe caifsock 0 62201 NULL
 at24_eeprom_write_smbus_block_fndecl_62212_fields at24_eeprom_write_smbus_block fndecl 3-4 62212 NULL
+size_max_gb_loopback_device_62219_fields size_max gb_loopback_device 0 62219 NULL
 generic_file_direct_write_fndecl_62226_fields generic_file_direct_write fndecl 0 62226 NULL
 datainterval_snd_usb_endpoint_62227_fields datainterval snd_usb_endpoint 0 62227 NULL
 svm_create_vcpu_fndecl_62239_fields svm_create_vcpu fndecl 2 62239 NULL
@@ -15316,6 +15574,7 @@ npods_cxgbi_task_tag_info_62453_fields npods cxgbi_task_tag_info 0 62453 NULL
 lower_offset_skb_seq_state_62465_fields lower_offset skb_seq_state 0 62465 NULL
 ipx_recvmsg_fndecl_62469_fields ipx_recvmsg fndecl 3 62469 NULL
 ram_alignment_fndecl_62470_fields ram_alignment fndecl 0 62470 NULL
+payload_bytes_controlvm_message_header_62474_fields payload_bytes controlvm_message_header 0 62474 NULL
 page_size_mspro_block_data_62479_fields page_size mspro_block_data 0 62479 NULL
 fw_stats_bus_myri10ge_slice_state_62482_fields fw_stats_bus myri10ge_slice_state 0 62482 NULL
 rx_ring_tail_sc92031_priv_62486_fields rx_ring_tail sc92031_priv 0 62486 NULL
@@ -15354,6 +15613,7 @@ min_pkt_size_pktgen_dev_62629_fields min_pkt_size pktgen_dev 0 62629 NULL
 virtio_gpu_ttm_tt_create_fndecl_62636_fields virtio_gpu_ttm_tt_create fndecl 2 62636 NULL nohasharray
 wil_change_mtu_fndecl_62636_fields wil_change_mtu fndecl 2 62636 &virtio_gpu_ttm_tt_create_fndecl_62636_fields
 ath6kl_wmi_get_stats_cmd_fndecl_62638_fields ath6kl_wmi_get_stats_cmd fndecl 2 62638 NULL
+fts_rtllib_device_62643_fields fts rtllib_device 0 62643 NULL
 cfg_sg_seg_cnt_lpfc_hba_62646_fields cfg_sg_seg_cnt lpfc_hba 0 62646 NULL
 curr_len_max3421_hcd_62658_fields curr_len max3421_hcd 0 62658 NULL
 irq_max_tg3_62664_fields irq_max tg3 0 62664 NULL
@@ -15374,6 +15634,7 @@ curwidth_usb_usbvision_62710_fields curwidth usb_usbvision 0 62710 NULL
 mtu_ring_info_62721_fields mtu ring_info 0 62721 NULL
 jffs2_write_begin_fndecl_62728_fields jffs2_write_begin fndecl 3 62728 NULL nohasharray
 limit_tc_sfq_qopt_62728_fields limit tc_sfq_qopt 0 62728 &jffs2_write_begin_fndecl_62728_fields
+total_len_android_wifi_priv_cmd_62735_fields total_len android_wifi_priv_cmd 0 62735 NULL
 smi_read_eeprom_fndecl_62737_fields smi_read_eeprom fndecl 4 62737 NULL
 xfs_da_read_buf_fndecl_62739_fields xfs_da_read_buf fndecl 3 62739 NULL nohasharray
 mlx5_pci_enable_sriov_fndecl_62739_fields mlx5_pci_enable_sriov fndecl 2 62739 &xfs_da_read_buf_fndecl_62739_fields
@@ -15415,7 +15676,8 @@ midi_in_ports_snd_efw_62902_fields midi_in_ports snd_efw 0 62902 NULL
 xfs_init_local_fork_fndecl_62904_fields xfs_init_local_fork fndecl 4 62904 NULL
 arg2__cdrp_cmd_62906_fields arg2 _cdrp_cmd 0 62906 NULL
 length_uvc_buffer_62907_fields length uvc_buffer 0 62907 NULL
-buflen_xdr_buf_62914_fields buflen xdr_buf 0 62914 NULL
+buflen_xdr_buf_62914_fields buflen xdr_buf 0 62914 NULL nohasharray
+n_subdevices_comedi_device_62914_fields n_subdevices comedi_device 0 62914 &buflen_xdr_buf_62914_fields
 uar_size_mthca_dev_lim_62925_fields uar_size mthca_dev_lim 0 62925 NULL
 teiup_create_fndecl_62930_fields teiup_create fndecl 3 62930 NULL nohasharray
 queue_size_srp_target_port_62930_fields queue_size srp_target_port 0 62930 &teiup_create_fndecl_62930_fields
@@ -15517,6 +15779,7 @@ ep_image_mts_desc_63258_fields ep_image mts_desc 0 63258 NULL
 pdu_write_u_fndecl_63261_fields pdu_write_u fndecl 3 63261 NULL
 sch56xx_device_add_fndecl_63264_fields sch56xx_device_add fndecl 1 63264 NULL
 _fc_frame_alloc_fndecl_63267_fields _fc_frame_alloc fndecl 1 63267 NULL
+version_size_ks_wlan_private_63280_fields version_size ks_wlan_private 0 63280 NULL
 s_mb_last_start_ext4_sb_info_63283_fields s_mb_last_start ext4_sb_info 0 63283 NULL
 num_counters_ebt_replace_63286_fields num_counters ebt_replace 0 63286 NULL
 xprt_rdma_slot_table_entries_vardecl_transport_c_63290_fields xprt_rdma_slot_table_entries vardecl_transport.c 0 63290 NULL
@@ -15530,7 +15793,8 @@ doorbell_start_offset_kgd2kfd_shared_resources_63332_fields doorbell_start_offse
 gf100_vm_create_fndecl_63335_fields gf100_vm_create fndecl 3-2 63335 NULL
 bulk_out_endpointAddress_usb_serial_port_63340_fields bulk_out_endpointAddress usb_serial_port 0 63340 NULL
 clipcount_out_vivid_dev_63343_fields clipcount_out vivid_dev 0 63343 NULL
-len_n_flags_iwl_rx_packet_63345_fields len_n_flags iwl_rx_packet 0 63345 NULL
+len_n_flags_iwl_rx_packet_63345_fields len_n_flags iwl_rx_packet 0 63345 NULL nohasharray
+pf_cids_qed_cdu_iids_63345_fields pf_cids qed_cdu_iids 0 63345 &len_n_flags_iwl_rx_packet_63345_fields
 src_offset_scif_copy_work_63353_fields src_offset scif_copy_work 0 63353 NULL
 x_zoran_overlay_settings_63359_fields x zoran_overlay_settings 0 63359 NULL
 lbq_buf_size_rx_ring_63363_fields lbq_buf_size rx_ring 0 63363 NULL
@@ -15607,7 +15871,8 @@ rx_mtu_p54_common_63619_fields rx_mtu p54_common 0 63619 NULL
 len_fscrypt_str_63626_fields len fscrypt_str 0 63626 NULL
 buf_len_mwifiex_sdio_mpa_rx_63636_fields buf_len mwifiex_sdio_mpa_rx 0 63636 NULL nohasharray
 find_run_fndecl_63636_fields find_run fndecl 0 63636 &buf_len_mwifiex_sdio_mpa_rx_63636_fields
-be_v_offset_pnfs_block_extent_63637_fields be_v_offset pnfs_block_extent 0 63637 NULL
+be_v_offset_pnfs_block_extent_63637_fields be_v_offset pnfs_block_extent 0 63637 NULL nohasharray
+rx_ring_size_gfar_priv_rx_q_63637_fields rx_ring_size gfar_priv_rx_q 0 63637 &be_v_offset_pnfs_block_extent_63637_fields
 snic_queue_wq_desc_fndecl_63639_fields snic_queue_wq_desc fndecl 3 63639 NULL
 nfs_writepage_setup_fndecl_63682_fields nfs_writepage_setup fndecl 3-4 63682 NULL
 height_ssd1307fb_par_63688_fields height ssd1307fb_par 0 63688 NULL
@@ -15696,7 +15961,8 @@ iomap_end_iomap_ops_63997_fields iomap_end iomap_ops 0 63997 NULL
 vram_start_amdgpu_mc_63998_fields vram_start amdgpu_mc 0 63998 NULL
 iscsi_conn_send_pdu_fndecl_64002_fields iscsi_conn_send_pdu fndecl 4 64002 NULL
 pvr2_send_request_ex_fndecl_64004_fields pvr2_send_request_ex fndecl 5-7 64004 NULL
-max_wr_qedr_qp_hwq_info_64005_fields max_wr qedr_qp_hwq_info 0 64005 NULL
+max_wr_qedr_qp_hwq_info_64005_fields max_wr qedr_qp_hwq_info 0 64005 NULL nohasharray
+ndescs_clk_corediv_soc_desc_64005_fields ndescs clk_corediv_soc_desc 0 64005 &max_wr_qedr_qp_hwq_info_64005_fields
 field_count_audit_krule_64007_fields field_count audit_krule 0 64007 NULL
 rx_ring_size_fe_priv_64012_fields rx_ring_size fe_priv 0 64012 NULL
 wBlocks_usb_rpipe_descriptor_64014_fields wBlocks usb_rpipe_descriptor 0 64014 NULL
@@ -15930,6 +16196,7 @@ pci_iov_virtfn_bus_fndecl_64949_fields pci_iov_virtfn_bus fndecl 0-2 64949 NULL
 ieee80211_tdls_add_ies_fndecl_64954_fields ieee80211_tdls_add_ies fndecl 8 64954 NULL
 qed_ll2_acquire_connection_tx_fndecl_64955_fields qed_ll2_acquire_connection_tx fndecl 3 64955 NULL
 status_spi_message_64956_fields status spi_message 0 64956 NULL
+op_max_pages_md_op_data_64968_fields op_max_pages md_op_data 0 64968 NULL
 len_ctrl_queue_64975_fields len ctrl_queue 0 64975 NULL
 print_pkt_fndecl_64981_fields print_pkt fndecl 2 64981 NULL
 rp2_alloc_ports_fndecl_64987_fields rp2_alloc_ports fndecl 0-1 64987 NULL nohasharray
@@ -15956,6 +16223,7 @@ len_scifioctl_reg_65083_fields len scifioctl_reg 0 65083 NULL
 frame_size_pwc_device_65084_fields frame_size pwc_device 0 65084 NULL
 fcoe_len_fcoe_rport_65085_fields fcoe_len fcoe_rport 0 65085 NULL
 width_cx88_core_65086_fields width cx88_core 0 65086 NULL
+size_ion_test_rw_data_65088_fields size ion_test_rw_data 0 65088 NULL
 queue_depth_se_node_acl_65089_fields queue_depth se_node_acl 0 65089 NULL
 sco_send_frame_fndecl_65092_fields sco_send_frame fndecl 3 65092 NULL
 fat_write_end_fndecl_65095_fields fat_write_end fndecl 5 65095 NULL
@@ -16013,6 +16281,7 @@ update_stat_data_fndecl_65289_fields update_stat_data fndecl 3 65289 NULL
 ntfs_bmap_fndecl_65300_fields ntfs_bmap fndecl 2 65300 NULL
 memory_lseek_fndecl_65306_fields memory_lseek fndecl 2 65306 NULL
 ext4_dio_get_block_unwritten_sync_fndecl_65307_fields ext4_dio_get_block_unwritten_sync fndecl 2 65307 NULL
+in_param_mlx4_vhcr_65311_fields in_param mlx4_vhcr 0 65311 NULL
 mt312_read_fndecl_65312_fields mt312_read fndecl 4 65312 NULL
 max_pfn_vardecl_65317_fields max_pfn vardecl 0 65317 NULL
 ExtPageLength__MPI2_CONFIG_REPLY_65319_fields ExtPageLength _MPI2_CONFIG_REPLY 0 65319 NULL
diff --git a/scripts/gcc-plugins/size_overflow_plugin/e_fns.data b/scripts/gcc-plugins/size_overflow_plugin/e_fns.data
index 2798cd6d950d..077b4339b9bc 100644
--- a/scripts/gcc-plugins/size_overflow_plugin/e_fns.data
+++ b/scripts/gcc-plugins/size_overflow_plugin/e_fns.data
@@ -58,6 +58,7 @@ xfs_buf_get_map_fndecl_729_fns xfs_buf_get_map fndecl 3 729 NULL
 sdp1length__SpiCfgData_813_fns sdp1length _SpiCfgData 0 813 NULL
 request_key_auth_read_fndecl_830_fns request_key_auth_read fndecl 3 830 NULL
 pipeline_post_proc_swi_read_fndecl_831_fns pipeline_post_proc_swi_read fndecl 3 831 NULL
+_picolcd_flash_write_fndecl_853_fns _picolcd_flash_write fndecl 4 853 NULL
 irnet_ctrl_write_fndecl_856_fns irnet_ctrl_write fndecl 3 856 NULL
 dvb_register_media_device_fndecl_878_fns dvb_register_media_device fndecl 4 878 NULL
 field_count_audit_rule_data_886_fns field_count audit_rule_data 0 886 NULL
@@ -65,6 +66,7 @@ octeon_read_device_mem64_fndecl_892_fns octeon_read_device_mem64 fndecl 0 892 NU
 tcpprobe_sprint_fndecl_909_fns tcpprobe_sprint fndecl 0 909 NULL
 max_reply_bytes_mpt3_ioctl_command_918_fns max_reply_bytes mpt3_ioctl_command 0 918 NULL
 vmsplice_to_pipe_fndecl_937_fns vmsplice_to_pipe fndecl 3 937 NULL
+icmp_len_batadv_socket_packet_944_fns icmp_len batadv_socket_packet 0 944 NULL
 pcpu_embed_first_chunk_fndecl_947_fns pcpu_embed_first_chunk fndecl 1-2-3 947 NULL
 sel_read_bool_fndecl_959_fns sel_read_bool fndecl 3 959 NULL
 compat_sys_preadv64_fndecl_968_fns compat_sys_preadv64 fndecl 3 968 NULL
@@ -78,8 +80,10 @@ line__mgslpc_info_1070_fns line _mgslpc_info 0 1070 NULL
 b_cnt_mon_reader_bin_1106_fns b_cnt mon_reader_bin 0 1106 NULL
 create_attr_set_fndecl_1118_fns create_attr_set fndecl 1 1118 NULL
 mdc800_device_read_fndecl_1123_fns mdc800_device_read fndecl 3 1123 NULL
+ion_handle_test_kernel_fndecl_1127_fns ion_handle_test_kernel fndecl 3-4 1127 NULL
 xstateregs_set_fndecl_1159_fns xstateregs_set fndecl 4 1159 NULL
 nfs4_acl_bytes_fndecl_1168_fns nfs4_acl_bytes fndecl 0-1 1168 NULL
+vme_get_size_fndecl_1191_fns vme_get_size fndecl 0 1191 NULL
 tx_frag_key_not_found_read_fndecl_1192_fns tx_frag_key_not_found_read fndecl 3 1192 NULL
 pcpu_mem_zalloc_fndecl_1207_fns pcpu_mem_zalloc fndecl 1 1207 NULL
 gtp_hashtable_new_fndecl_1236_fns gtp_hashtable_new fndecl 2 1236 NULL
@@ -91,6 +95,7 @@ viafb_dvp0_proc_write_fndecl_1276_fns viafb_dvp0_proc_write fndecl 3 1276 NULL
 agp_alloc_page_array_fndecl_1289_fns agp_alloc_page_array fndecl 1 1289 NULL
 vd_cbr_au_count_gru_vma_data_1314_fns vd_cbr_au_count gru_vma_data 0 1314 NULL
 ccp_set_dm_area_fndecl_1351_fns ccp_set_dm_area fndecl 4 1351 NULL
+cfs_expr_list_values_fndecl_1371_fns cfs_expr_list_values fndecl 0 1371 NULL
 sctp_setsockopt_connectx_old_fndecl_1396_fns sctp_setsockopt_connectx_old fndecl 3 1396 NULL
 wl1271_rx_filter_get_fields_size_fndecl_1405_fns wl1271_rx_filter_get_fields_size fndecl 0 1405 NULL
 call_netdevice_notifiers_fndecl_1411_fns call_netdevice_notifiers fndecl 0 1411 NULL
@@ -102,21 +107,26 @@ idma64_alloc_desc_fndecl_1433_fns idma64_alloc_desc fndecl 1 1433 NULL
 nr_cpusets_fndecl_1442_fns nr_cpusets fndecl 0 1442 NULL
 memcg_update_list_lru_node_fndecl_1454_fns memcg_update_list_lru_node fndecl 3 1454 NULL
 sys_ppoll_fndecl_1459_fns sys_ppoll fndecl 2 1459 NULL
+iio_debugfs_write_reg_fndecl_1477_fns iio_debugfs_write_reg fndecl 3 1477 NULL
 cx18_copy_buf_to_user_fndecl_1500_fns cx18_copy_buf_to_user fndecl 4 1500 NULL
 qlcnic_sriov_init_fndecl_1529_fns qlcnic_sriov_init fndecl 2 1529 NULL
 i2cdev_write_fndecl_1565_fns i2cdev_write fndecl 3 1565 NULL
+libcfs_kvzalloc_fndecl_1568_fns libcfs_kvzalloc fndecl 1 1568 NULL
 page_readlink_fndecl_1569_fns page_readlink fndecl 3 1569 NULL
 error_error_frame_non_ctrl_read_fndecl_1589_fns error_error_frame_non_ctrl_read fndecl 3 1589 NULL
 size_icp_qat_uof_batch_init_1600_fns size icp_qat_uof_batch_init 0 1600 NULL
 skl_get_module_param_size_fndecl_1615_fns skl_get_module_param_size fndecl 0 1615 NULL
 copied_rpc_pipe_msg_1658_fns copied rpc_pipe_msg 0 1658 NULL
 hidraw_send_report_fndecl_1674_fns hidraw_send_report fndecl 3 1674 NULL
+gb_hid_alloc_buffers_fndecl_1705_fns gb_hid_alloc_buffers fndecl 2 1705 NULL
 linear_conf_fndecl_1710_fns linear_conf fndecl 2 1710 NULL
+aead_edesc_alloc_fndecl_1730_fns aead_edesc_alloc fndecl 2 1730 NULL
 devm_iio_device_alloc_fndecl_1732_fns devm_iio_device_alloc fndecl 2 1732 NULL
 skl_set_module_params_fndecl_1736_fns skl_set_module_params fndecl 3 1736 NULL
 compat_filldir_fndecl_1746_fns compat_filldir fndecl 3 1746 NULL
 it_context_mask_fw_ohci_1753_fns it_context_mask fw_ohci 0 1753 NULL
 ima_show_measurements_count_fndecl_1763_fns ima_show_measurements_count fndecl 3 1763 NULL
+libcfs_kkuc_group_add_fndecl_1809_fns libcfs_kkuc_group_add fndecl 5 1809 NULL
 num_vectors_e1000_adapter_1827_fns num_vectors e1000_adapter 0 1827 NULL
 __add_prelim_ref_fndecl_1828_fns __add_prelim_ref fndecl 2 1828 NULL
 ntfs_ucstonls_fndecl_1834_fns ntfs_ucstonls fndecl 3-5 1834 NULL
@@ -140,13 +150,17 @@ response_length_mlx5_ib_create_rwq_ind_tbl_resp_1977_fns response_length mlx5_ib
 alauda_read_block_fndecl_2008_fns alauda_read_block fndecl 4 2008 NULL
 xlog_recovery_process_trans_fndecl_2013_fns xlog_recovery_process_trans fndecl 4 2013 NULL
 diva_get_trace_filter_fndecl_2021_fns diva_get_trace_filter fndecl 0 2021 NULL
+kmalloc_order_trace_fndecl_2063_fns kmalloc_order_trace fndecl 1 2063 NULL
 dvb_generic_ioctl_fndecl_2081_fns dvb_generic_ioctl fndecl 2 2081 NULL
 min_odd_fndecl_2105_fns min_odd fndecl 0-1-2 2105 NULL
+qsfp1_debugfs_read_fndecl_2107_fns qsfp1_debugfs_read fndecl 3 2107 NULL
 oom_adj_read_fndecl_2116_fns oom_adj_read fndecl 3 2116 NULL
+lmv_mds_md_stripe_count_get_fndecl_2118_fns lmv_mds_md_stripe_count_get fndecl 0 2118 NULL
 gen_unique_name_fndecl_2127_fns gen_unique_name fndecl 0 2127 NULL
 synic_set_msr_fndecl_2149_fns synic_set_msr fndecl 3 2149 NULL
 __kfifo_dma_out_prepare_fndecl_2165_fns __kfifo_dma_out_prepare fndecl 4 2165 NULL
 qsfp_1_read_fndecl_2184_fns qsfp_1_read fndecl 3 2184 NULL
+ldlm_lock_create_fndecl_2195_fns ldlm_lock_create fndecl 7 2195 NULL
 SYSC_prctl_fndecl_2255_fns SYSC_prctl fndecl 4 2255 NULL
 compat_rw_copy_check_uvector_fndecl_2274_fns compat_rw_copy_check_uvector fndecl 3 2274 NULL nohasharray
 rxpipe_descr_host_int_trig_rx_data_read_fndecl_2274_fns rxpipe_descr_host_int_trig_rx_data_read fndecl 3 2274 &compat_rw_copy_check_uvector_fndecl_2274_fns
@@ -160,15 +174,19 @@ smtcfb_write_fndecl_2433_fns smtcfb_write fndecl 3 2433 NULL nohasharray
 qedr_alloc_mr_fndecl_2433_fns qedr_alloc_mr fndecl 3 2433 &smtcfb_write_fndecl_2433_fns
 tomoyo_read_control_fndecl_2465_fns tomoyo_read_control fndecl 3 2465 NULL
 regmap_register_patch_fndecl_2466_fns regmap_register_patch fndecl 3 2466 NULL
-proc_maps_open_fndecl_2468_fns proc_maps_open fndecl 4 2468 NULL
+proc_maps_open_fndecl_2468_fns proc_maps_open fndecl 4 2468 NULL nohasharray
+rtllib_alloc_txb_fndecl_2468_fns rtllib_alloc_txb fndecl 1 2468 &proc_maps_open_fndecl_2468_fns
 evdev_ioctl_handler_fndecl_2522_fns evdev_ioctl_handler fndecl 2 2522 NULL
+lprocfs_wr_import_fndecl_2547_fns lprocfs_wr_import fndecl 3 2547 NULL
 __kmem_cache_alias_fndecl_2551_fns __kmem_cache_alias fndecl 3 2551 NULL
 dma_maxpq_fndecl_2555_fns dma_maxpq fndecl 0 2555 NULL
 __tun_chr_ioctl_fndecl_2575_fns __tun_chr_ioctl fndecl 4 2575 NULL
 of_phandle_iterator_init_fndecl_2614_fns of_phandle_iterator_init fndecl 0 2614 NULL
+crc_size_vardecl_pm_check_c_2624_fns crc_size vardecl_pm-check.c 0 2624 NULL
 alloc_large_system_hash_fndecl_2660_fns alloc_large_system_hash fndecl 2 2660 NULL
 evdev_ioctl_fndecl_2672_fns evdev_ioctl fndecl 2 2672 NULL
 queue_reply_fndecl_2691_fns queue_reply fndecl 3 2691 NULL
+aic_common_of_init_fndecl_2752_fns aic_common_of_init fndecl 4 2752 NULL
 cache_write_procfs_fndecl_2760_fns cache_write_procfs fndecl 3 2760 NULL
 qib_user_sdma_alloc_header_fndecl_2761_fns qib_user_sdma_alloc_header fndecl 2 2761 NULL
 ieee80211_alloc_hw_nm_fndecl_2774_fns ieee80211_alloc_hw_nm fndecl 1 2774 NULL
@@ -186,12 +204,14 @@ bpw_len_pch_spi_data_3026_fns bpw_len pch_spi_data 0 3026 NULL
 fat_compat_ioctl_filldir_fndecl_3037_fns fat_compat_ioctl_filldir fndecl 3 3037 NULL
 add_res_tree_fndecl_3044_fns add_res_tree fndecl 7 3044 NULL
 compat_process_vm_rw_fndecl_3069_fns compat_process_vm_rw fndecl 5-3 3069 NULL
-npages_mthca_db_table_3090_fns npages mthca_db_table 0 3090 NULL
+npages_mthca_db_table_3090_fns npages mthca_db_table 0 3090 NULL nohasharray
+ad7280_write_fndecl_3090_fns ad7280_write fndecl 0 3090 &npages_mthca_db_table_3090_fns
 fb_prepare_logo_fndecl_3092_fns fb_prepare_logo fndecl 0 3092 NULL
 loopstart_soundfont_sample_info_3093_fns loopstart soundfont_sample_info 0 3093 NULL
 rx_pkt_map_sz_tg3_3106_fns rx_pkt_map_sz tg3 0 3106 NULL
 mt76_init_sband_fndecl_3112_fns mt76_init_sband fndecl 6 3112 NULL
 compat_filldir64_fndecl_3119_fns compat_filldir64 fndecl 3 3119 NULL
+ds9490r_write_block_fndecl_3142_fns ds9490r_write_block fndecl 3 3142 NULL
 sys_sendto_fndecl_3162_fns sys_sendto fndecl 6 3162 NULL
 fill_elf_header_fndecl_3182_fns fill_elf_header fndecl 2 3182 NULL
 wl1271_format_buffer_fndecl_3185_fns wl1271_format_buffer fndecl 2 3185 NULL
@@ -199,6 +219,7 @@ uvc_alloc_entity_fndecl_3191_fns uvc_alloc_entity fndecl 4 3191 NULL
 nvme_trans_supported_vpd_pages_fndecl_3196_fns nvme_trans_supported_vpd_pages fndecl 4 3196 NULL
 p9_tag_alloc_fndecl_3198_fns p9_tag_alloc fndecl 3 3198 NULL
 import_iovec_fndecl_3201_fns import_iovec fndecl 3 3201 NULL
+cfs_cpt_table_create_fndecl_3207_fns cfs_cpt_table_create fndecl 1 3207 NULL
 nportcntrs_hfi1_devdata_3218_fns nportcntrs hfi1_devdata 0 3218 NULL
 command_setexposure_fndecl_3231_fns command_setexposure fndecl 0 3231 NULL
 lbs_rdbbp_write_fndecl_3237_fns lbs_rdbbp_write fndecl 3 3237 NULL
@@ -214,6 +235,7 @@ alg_setsockopt_fndecl_3306_fns alg_setsockopt fndecl 5 3306 NULL
 snd_rme9652_playback_copy_fndecl_3321_fns snd_rme9652_playback_copy fndecl 5 3321 NULL
 length_ima_digest_data_3329_fns length ima_digest_data 0 3329 NULL
 hidraw_report_event_fndecl_3332_fns hidraw_report_event fndecl 3 3332 NULL
+add_desc_fndecl_3339_fns add_desc fndecl 3 3339 NULL
 memcg_update_list_lru_fndecl_3349_fns memcg_update_list_lru fndecl 3 3349 NULL
 fast_user_write_fndecl_3357_fns fast_user_write fndecl 5 3357 NULL
 amd_create_gatt_pages_fndecl_3370_fns amd_create_gatt_pages fndecl 1 3370 NULL
@@ -222,9 +244,11 @@ scsi_report_opcode_fndecl_3412_fns scsi_report_opcode fndecl 3 3412 NULL
 udf_getblk_fndecl_3436_fns udf_getblk fndecl 2 3436 NULL
 command_setcolourbalance_fndecl_3441_fns command_setcolourbalance fndecl 0 3441 NULL
 copy_arg_to_user_fndecl_3464_fns copy_arg_to_user fndecl 3 3464 NULL
+stm32_dma_prep_dma_cyclic_fndecl_3466_fns stm32_dma_prep_dma_cyclic fndecl 4-3 3466 NULL
 qib_qsfp_write_fndecl_3477_fns qib_qsfp_write fndecl 2-4-0 3477 NULL
 rx_buf_size__mgslpc_info_3490_fns rx_buf_size _mgslpc_info 0 3490 NULL
 kfifo_copy_to_user_fndecl_3509_fns kfifo_copy_to_user fndecl 3-4 3509 NULL
+fifo_size_qcom_smd_channel_3531_fns fifo_size qcom_smd_channel 0 3531 NULL
 snd_hdsp_playback_copy_fndecl_3543_fns snd_hdsp_playback_copy fndecl 5 3543 NULL
 dvb_dmxdev_buffer_read_fndecl_3545_fns dvb_dmxdev_buffer_read fndecl 4 3545 NULL
 security_context_to_sid_force_fndecl_3559_fns security_context_to_sid_force fndecl 2 3559 NULL
@@ -232,6 +256,7 @@ _snd_pcm_new_fndecl_3575_fns _snd_pcm_new fndecl 4-5 3575 NULL
 len_capiloaddatapart_3577_fns len capiloaddatapart 0 3577 NULL
 pcpu_page_first_chunk_fndecl_3579_fns pcpu_page_first_chunk fndecl 1 3579 NULL
 asq_buf_size_i40e_adminq_info_3582_fns asq_buf_size i40e_adminq_info 0 3582 NULL
+bcm2835_dma_prep_dma_cyclic_fndecl_3588_fns bcm2835_dma_prep_dma_cyclic fndecl 4-3 3588 NULL
 net_rx_queue_update_kobjects_fndecl_3617_fns net_rx_queue_update_kobjects fndecl 0 3617 NULL
 do_msg_fill_fndecl_3624_fns do_msg_fill fndecl 3 3624 NULL
 add_res_range_fndecl_3629_fns add_res_range fndecl 4 3629 NULL
@@ -241,6 +266,8 @@ c_plan_ahead_disk_conf_3660_fns c_plan_ahead disk_conf 0 3660 NULL
 pcpu_chunk_struct_size_vardecl_percpu_c_3673_fns pcpu_chunk_struct_size vardecl_percpu.c 0 3673 NULL
 alloc_orinocodev_fndecl_3688_fns alloc_orinocodev fndecl 1 3688 NULL
 read_file_bool_bmps_fndecl_3699_fns read_file_bool_bmps fndecl 3 3699 NULL
+srp_max_rsp_size_srpt_port_attrib_3700_fns srp_max_rsp_size srpt_port_attrib 0 3700 NULL
+allocate_cmdlines_buffer_fndecl_3704_fns allocate_cmdlines_buffer fndecl 1 3704 NULL
 ip_getsockopt_fndecl_3711_fns ip_getsockopt fndecl 0 3711 NULL
 diva_get_driver_dbg_mask_fndecl_3716_fns diva_get_driver_dbg_mask fndecl 0 3716 NULL
 SYSC_rt_sigpending_fndecl_3728_fns SYSC_rt_sigpending fndecl 2 3728 NULL
@@ -272,6 +299,7 @@ virtio_gpu_get_capsets_fndecl_3928_fns virtio_gpu_get_capsets fndecl 2 3928 NULL
 ath6kl_send_go_probe_resp_fndecl_3946_fns ath6kl_send_go_probe_resp fndecl 3 3946 NULL
 _efx_mcdi_rpc_async_fndecl_3948_fns _efx_mcdi_rpc_async fndecl 4-5 3948 NULL
 make_le_item_head_fndecl_3961_fns make_le_item_head fndecl 5 3961 NULL
+max_ti_iu_len_srp_rdma_ch_3984_fns max_ti_iu_len srp_rdma_ch 0 3984 NULL
 nv50_chan_create_fndecl_3986_fns nv50_chan_create fndecl 6 3986 NULL
 format_supported_num_psb_intel_sdvo_connector_4007_fns format_supported_num psb_intel_sdvo_connector 0 4007 NULL
 bioset_create_nobvec_fndecl_4015_fns bioset_create_nobvec fndecl 1 4015 NULL
@@ -281,6 +309,7 @@ cx18_v4l2_read_fndecl_4063_fns cx18_v4l2_read fndecl 3 4063 NULL
 input_ff_create_fndecl_4075_fns input_ff_create fndecl 2 4075 NULL
 ring_overflow_per_user_data_4076_fns ring_overflow per_user_data 0 4076 NULL
 mlx4_en_get_num_flows_fndecl_4078_fns mlx4_en_get_num_flows fndecl 0 4078 NULL
+read_ftrace_buffer_info_4082_fns read ftrace_buffer_info 0 4082 NULL
 kvm_vcpu_read_guest_page_fndecl_4083_fns kvm_vcpu_read_guest_page fndecl 2-5 4083 NULL
 __rvt_alloc_mr_fndecl_4129_fns __rvt_alloc_mr fndecl 1 4129 NULL
 struct_size_rmi_register_descriptor_4163_fns struct_size rmi_register_descriptor 0 4163 NULL
@@ -291,20 +320,25 @@ irda_setsockopt_fndecl_4195_fns irda_setsockopt fndecl 5 4195 &stm_char_write_fn
 vfs_getxattr_fndecl_4203_fns vfs_getxattr fndecl 0 4203 NULL
 dlm_lock_fndecl_4225_fns dlm_lock fndecl 6 4225 NULL nohasharray
 nilfs_segbuf_map_fndecl_4225_fns nilfs_segbuf_map fndecl 2 4225 &dlm_lock_fndecl_4225_fns
+num_lut_dmm_4228_fns num_lut dmm 0 4228 NULL
 cfg80211_mlme_register_mgmt_fndecl_4255_fns cfg80211_mlme_register_mgmt fndecl 5 4255 NULL
-qlcnic_sysfs_read_pci_config_fndecl_4270_fns qlcnic_sysfs_read_pci_config fndecl 6 4270 NULL
+qlcnic_sysfs_read_pci_config_fndecl_4270_fns qlcnic_sysfs_read_pci_config fndecl 6 4270 NULL nohasharray
+xgbe_init_ring_fndecl_4270_fns xgbe_init_ring fndecl 3 4270 &qlcnic_sysfs_read_pci_config_fndecl_4270_fns
 mangle_name_fndecl_4288_fns mangle_name fndecl 0 4288 NULL
 connector_count_drm_fb_helper_4290_fns connector_count drm_fb_helper 0 4290 NULL
 cgroup_task_count_fndecl_4297_fns cgroup_task_count fndecl 0 4297 NULL
 key_size_pkcs1pad_ctx_4303_fns key_size pkcs1pad_ctx 0 4303 NULL
+raid56_alloc_missing_rbio_fndecl_4316_fns raid56_alloc_missing_rbio fndecl 4 4316 NULL
 ps_upsd_max_apturn_read_fndecl_4317_fns ps_upsd_max_apturn_read fndecl 3 4317 NULL
 ax25_send_frame_fndecl_4335_fns ax25_send_frame fndecl 2 4335 NULL
 stripe_len_btrfs_raid_bio_4340_fns stripe_len btrfs_raid_bio 0 4340 NULL
+pxad_prep_dma_cyclic_fndecl_4411_fns pxad_prep_dma_cyclic fndecl 4-3 4411 NULL
 nfc_llcp_build_tlv_fndecl_4419_fns nfc_llcp_build_tlv fndecl 3 4419 NULL
 batadv_tvlv_container_register_fndecl_4435_fns batadv_tvlv_container_register fndecl 5 4435 NULL
 jfs_fsync_fndecl_4436_fns jfs_fsync fndecl 2-3 4436 NULL
 nfsd_read_fndecl_4451_fns nfsd_read fndecl 5 4451 NULL
 compress_raw_buf_fndecl_4453_fns compress_raw_buf fndecl 0 4453 NULL
+n_comedi_insn_4458_fns n comedi_insn 0 4458 NULL
 bm_status_read_fndecl_4460_fns bm_status_read fndecl 3 4460 NULL
 sftid_base_tid_info_4462_fns sftid_base tid_info 0 4462 NULL
 rx_ring_size_altera_tse_private_4470_fns rx_ring_size altera_tse_private 0 4470 NULL
@@ -316,6 +350,7 @@ nr_chans_solo_dev_4552_fns nr_chans solo_dev 0 4552 NULL
 acpi_read_slow_fndecl_4554_fns acpi_read_slow fndecl 3-2 4554 NULL
 LoadBitmap_fndecl_4569_fns LoadBitmap fndecl 2 4569 NULL
 ptr_ring_resize_multiple_fndecl_4573_fns ptr_ring_resize_multiple fndecl 2-3 4573 NULL
+wilc_spi_tx_fndecl_4583_fns wilc_spi_tx fndecl 3 4583 NULL
 hdr_dwords_verbs_txreq_4608_fns hdr_dwords verbs_txreq 0 4608 NULL
 tm6000_i2c_send_regs_fndecl_4617_fns tm6000_i2c_send_regs fndecl 5 4617 NULL
 mbox_test_message_write_fndecl_4627_fns mbox_test_message_write fndecl 3 4627 NULL
@@ -330,11 +365,13 @@ tx_tx_burst_programmed_read_fndecl_4723_fns tx_tx_burst_programmed_read fndecl 3
 smk_set_cipso_fndecl_4744_fns smk_set_cipso fndecl 3 4744 NULL
 acpi_rs_set_resource_source_fndecl_4776_fns acpi_rs_set_resource_source fndecl 0-2 4776 NULL
 __kfifo_from_user_fndecl_4796_fns __kfifo_from_user fndecl 3 4796 NULL
+axi_dmac_alloc_desc_fndecl_4833_fns axi_dmac_alloc_desc fndecl 1 4833 NULL
 read_buf_fndecl_4838_fns read_buf fndecl 2 4838 NULL
 btrfs_get_32_fndecl_4847_fns btrfs_get_32 fndecl 0 4847 NULL
 max_tgts_snic_fw_info_4861_fns max_tgts snic_fw_info 0 4861 NULL
 attach_hdlc_protocol_fndecl_4865_fns attach_hdlc_protocol fndecl 3 4865 NULL
 gfn_to_hva_memslot_prot_fndecl_4867_fns gfn_to_hva_memslot_prot fndecl 2 4867 NULL
+mlx5_ib_alloc_mr_fndecl_4870_fns mlx5_ib_alloc_mr fndecl 3 4870 NULL
 op_remote_addr_rm_atomic_op_4890_fns op_remote_addr rm_atomic_op 0 4890 NULL
 mlx4_get_eqs_per_port_fndecl_4892_fns mlx4_get_eqs_per_port fndecl 0 4892 NULL
 credits_send_context_info_4894_fns credits send_context_info 0 4894 NULL
@@ -342,19 +379,23 @@ SYSC_fgetxattr_fndecl_4904_fns SYSC_fgetxattr fndecl 4 4904 NULL
 build_verbs_ulp_payload_fndecl_4906_fns build_verbs_ulp_payload fndecl 3 4906 NULL
 diva_um_idi_read_fndecl_4912_fns diva_um_idi_read fndecl 0 4912 NULL
 tree_mod_log_eb_move_fndecl_4920_fns tree_mod_log_eb_move fndecl 5 4920 NULL
+aat2870_reg_write_file_fndecl_4965_fns aat2870_reg_write_file fndecl 3 4965 NULL
 fuse_conn_limit_read_fndecl_4967_fns fuse_conn_limit_read fndecl 3 4967 NULL
 team_options_register_fndecl_4968_fns team_options_register fndecl 3 4968 NULL
 reiserfs_dir_fsync_fndecl_4971_fns reiserfs_dir_fsync fndecl 2-3 4971 NULL
 stripe_unit_ore_layout_4991_fns stripe_unit ore_layout 0 4991 NULL
 tx_tx_retry_per_rate_read_fndecl_5009_fns tx_tx_retry_per_rate_read fndecl 3 5009 NULL
 bulk_in_size_usb_idmouse_5017_fns bulk_in_size usb_idmouse 0 5017 NULL
+ldebugfs_fid_write_common_fndecl_5049_fns ldebugfs_fid_write_common fndecl 2 5049 NULL
 jffs2_fsync_fndecl_5052_fns jffs2_fsync fndecl 2-3 5052 NULL
 offset_SVGAGuestPtr_5056_fns offset SVGAGuestPtr 0 5056 NULL
 kvm_vcpu_gfn_to_pfn_atomic_fndecl_5062_fns kvm_vcpu_gfn_to_pfn_atomic fndecl 2 5062 NULL
 tomoyo_commit_ok_fndecl_5076_fns tomoyo_commit_ok fndecl 2 5076 NULL
+read_flush_pipefs_fndecl_5080_fns read_flush_pipefs fndecl 3 5080 NULL
 ceph_alloc_page_vector_fndecl_5125_fns ceph_alloc_page_vector fndecl 1 5125 NULL
 ccp_init_sg_workarea_fndecl_5128_fns ccp_init_sg_workarea fndecl 4 5128 NULL
 fnic_stats_debugfs_read_fndecl_5139_fns fnic_stats_debugfs_read fndecl 3 5139 NULL
+echo_client_prep_commit_fndecl_5142_fns echo_client_prep_commit fndecl 8 5142 NULL
 lps_per_blk_nvm_dev_5145_fns lps_per_blk nvm_dev 0 5145 NULL
 o2hb_debug_create_fndecl_5163_fns o2hb_debug_create fndecl 4 5163 NULL
 wep_packets_read_fndecl_5164_fns wep_packets_read fndecl 3 5164 NULL
@@ -366,6 +407,7 @@ drm_ht_create_fndecl_5302_fns drm_ht_create fndecl 2 5302 NULL
 sctp_setsockopt_events_fndecl_5309_fns sctp_setsockopt_events fndecl 3 5309 NULL
 thermal_tx_stop_read_fndecl_5310_fns thermal_tx_stop_read fndecl 3 5310 NULL
 devm_mdiobus_alloc_size_fndecl_5317_fns devm_mdiobus_alloc_size fndecl 2 5317 NULL
+comedi_isadma_alloc_fndecl_5342_fns comedi_isadma_alloc fndecl 2 5342 NULL
 read_user_buf_avail_tomoyo_io_buffer_5361_fns read_user_buf_avail tomoyo_io_buffer 0 5361 NULL
 mangle_packet_fndecl_5371_fns mangle_packet fndecl 7-9 5371 NULL
 regset_tls_set_fndecl_5384_fns regset_tls_set fndecl 4 5384 NULL
@@ -374,6 +416,7 @@ snd_hda_get_connections_fndecl_5398_fns snd_hda_get_connections fndecl 0 5398 NU
 rq_size_i40iw_puda_rsrc_info_5413_fns rq_size i40iw_puda_rsrc_info 0 5413 NULL
 value_xen_pci_op_5416_fns value xen_pci_op 0 5416 NULL
 wilc_add_wep_key_bss_sta_fndecl_5436_fns wilc_add_wep_key_bss_sta fndecl 3 5436 NULL
+wiidebug_eeprom_read_fndecl_5523_fns wiidebug_eeprom_read fndecl 3 5523 NULL
 smk_write_rules_list_fndecl_5526_fns smk_write_rules_list fndecl 3 5526 NULL
 debug_output_fndecl_5532_fns debug_output fndecl 3 5532 NULL nohasharray
 tool_dbfn_read_fndecl_5532_fns tool_dbfn_read fndecl 3 5532 &debug_output_fndecl_5532_fns
@@ -389,6 +432,7 @@ xfs_cui_init_fndecl_5632_fns xfs_cui_init fndecl 2 5632 NULL nohasharray
 wbcir_tx_fndecl_5632_fns wbcir_tx fndecl 3 5632 &xfs_cui_init_fndecl_5632_fns
 dev_counters_read_fndecl_5635_fns dev_counters_read fndecl 3 5635 NULL
 tx_ring_size_altera_tse_private_5654_fns tx_ring_size altera_tse_private 0 5654 NULL
+ucma_query_fndecl_5679_fns ucma_query fndecl 4 5679 NULL
 bio_alloc_mddev_fndecl_5685_fns bio_alloc_mddev fndecl 2 5685 NULL
 batadv_tt_save_orig_buffer_fndecl_5707_fns batadv_tt_save_orig_buffer fndecl 4 5707 NULL
 event_tx_stuck_read_fndecl_5754_fns event_tx_stuck_read fndecl 3 5754 NULL
@@ -399,6 +443,7 @@ hid_hw_raw_request_fndecl_5827_fns hid_hw_raw_request fndecl 0 5827 NULL
 dvbdmx_write_fndecl_5836_fns dvbdmx_write fndecl 3 5836 NULL
 interpret_user_input_fndecl_5842_fns interpret_user_input fndecl 2 5842 NULL
 get_n_events_by_type_fndecl_5850_fns get_n_events_by_type fndecl 0 5850 NULL
+iproc_asiu_setup_fndecl_5902_fns iproc_asiu_setup fndecl 4 5902 NULL
 layout_in_gaps_fndecl_5933_fns layout_in_gaps fndecl 2 5933 NULL nohasharray
 sq_size_i40iw_puda_rsrc_info_5933_fns sq_size i40iw_puda_rsrc_info 0 5933 &layout_in_gaps_fndecl_5933_fns
 write_pmem_fndecl_5936_fns write_pmem fndecl 4 5936 NULL
@@ -426,6 +471,7 @@ brcmf_usb_attach_fndecl_6261_fns brcmf_usb_attach fndecl 2-3 6261 NULL
 sb_nextnum_nilfs_segment_buffer_6275_fns sb_nextnum nilfs_segment_buffer 0 6275 NULL
 command_setsensorfps_fndecl_6277_fns command_setsensorfps fndecl 0 6277 NULL
 nrealwriters_stress_lock_torture_cxt_6279_fns nrealwriters_stress lock_torture_cxt 0 6279 NULL
+count_leafs_fndecl_6305_fns count_leafs fndecl 0 6305 NULL
 sn9c2028_command_fndecl_6307_fns sn9c2028_command fndecl 0 6307 NULL
 shadow_fetch_fndecl_6315_fns shadow_fetch fndecl 3 6315 NULL
 len_ethtool_gstrings_6325_fns len ethtool_gstrings 0 6325 NULL
@@ -435,6 +481,7 @@ i40e_align_l2obj_base_fndecl_6341_fns i40e_align_l2obj_base fndecl 1 6341 NULL
 init_per_cpu_fndecl_6347_fns init_per_cpu fndecl 1 6347 NULL
 dev_pm_opp_get_opp_count_fndecl_6372_fns dev_pm_opp_get_opp_count fndecl 0 6372 NULL
 partition_sched_domains_fndecl_6386_fns partition_sched_domains fndecl 1 6386 NULL
+lpfc_debugfs_dif_err_write_fndecl_6403_fns lpfc_debugfs_dif_err_write fndecl 3 6403 NULL
 x509_note_serial_fndecl_6424_fns x509_note_serial fndecl 5 6424 NULL
 parse_dcb20_entry_fndecl_6440_fns parse_dcb20_entry fndecl 3 6440 NULL
 i40iw_qp_roundup_fndecl_6447_fns i40iw_qp_roundup fndecl 1 6447 NULL
@@ -457,6 +504,7 @@ pccard_store_cis_fndecl_6675_fns pccard_store_cis fndecl 6 6675 NULL
 nroots_rs_control_6706_fns nroots rs_control 0 6706 NULL
 qdisc_class_hash_alloc_fndecl_6725_fns qdisc_class_hash_alloc fndecl 1 6725 NULL
 pagesize_sddr09_card_info_6735_fns pagesize sddr09_card_info 0 6735 NULL
+hostif_mib_set_request_fndecl_6736_fns hostif_mib_set_request fndecl 3 6736 NULL
 gnttab_alloc_grant_references_fndecl_6739_fns gnttab_alloc_grant_references fndecl 1 6739 NULL
 _read_and_match_data_map_fndecl_6747_fns _read_and_match_data_map fndecl 2 6747 NULL
 rfcomm_sock_setsockopt_fndecl_6749_fns rfcomm_sock_setsockopt fndecl 5 6749 NULL
@@ -464,6 +512,7 @@ alloc_ring_fndecl_6773_fns alloc_ring fndecl 2-4 6773 NULL
 max_vals_input_dev_6777_fns max_vals input_dev 0 6777 NULL
 mmc_send_bus_test_fndecl_6782_fns mmc_send_bus_test fndecl 4 6782 NULL
 csio_mem_read_fndecl_6812_fns csio_mem_read fndecl 3 6812 NULL
+debugfs_write_file_bool_fndecl_6814_fns debugfs_write_file_bool fndecl 3 6814 NULL
 pwr_power_save_off_read_fndecl_6816_fns pwr_power_save_off_read fndecl 3 6816 NULL
 minor_miscdevice_6818_fns minor miscdevice 0 6818 NULL
 xlbd_reserve_minors_fndecl_6830_fns xlbd_reserve_minors fndecl 2-1 6830 NULL
@@ -477,6 +526,7 @@ pwr_sleep_time_count_read_fndecl_6914_fns pwr_sleep_time_count_read fndecl 3 691
 multi_src_desc_6933_fns multi src_desc 0 6933 NULL
 nvram_pagesize_tg3_6938_fns nvram_pagesize tg3 0 6938 NULL
 tlv_put_u64_fndecl_6968_fns tlv_put_u64 fndecl 0 6968 NULL
+mwifiex_verext_write_fndecl_6972_fns mwifiex_verext_write fndecl 3 6972 NULL
 pvr2_v4l2_read_fndecl_6981_fns pvr2_v4l2_read fndecl 3 6981 NULL
 bits_from_user_fndecl_6996_fns bits_from_user fndecl 2-3 6996 NULL
 fpregs_get_fndecl_7041_fns fpregs_get fndecl 4 7041 NULL
@@ -499,6 +549,7 @@ mfd_add_devices_fndecl_7183_fns mfd_add_devices fndecl 4 7183 NULL
 remote_addr_ib_atomic_wr_7192_fns remote_addr ib_atomic_wr 0 7192 NULL
 ide_init_port_fndecl_7207_fns ide_init_port fndecl 2 7207 NULL
 max_id_Scsi_Host_7217_fns max_id Scsi_Host 0 7217 NULL
+ll_unstable_stats_seq_write_fndecl_7255_fns ll_unstable_stats_seq_write fndecl 3 7255 NULL
 num_asq_entries_i40e_adminq_info_7278_fns num_asq_entries i40e_adminq_info 0 7278 NULL
 __copy_to_user_swizzled_fndecl_7295_fns __copy_to_user_swizzled fndecl 3-4 7295 NULL
 fdir_filter_count_ixgbe_adapter_7322_fns fdir_filter_count ixgbe_adapter 0 7322 NULL
@@ -512,10 +563,12 @@ block_ack_param_set_host_cmd_ds_11n_addba_req_7415_fns block_ack_param_set host_
 alloc_idx_lebs_fndecl_7419_fns alloc_idx_lebs fndecl 2 7419 NULL
 xfs_file_fsync_fndecl_7433_fns xfs_file_fsync fndecl 2-3 7433 NULL
 iio_device_add_event_fndecl_7439_fns iio_device_add_event fndecl 0 7439 NULL
+stat_st_vardecl_drv_c_7451_fns stat_st vardecl_drv.c 0 7451 NULL
 num_present_cpu_lpfc_sli4_hba_7465_fns num_present_cpu lpfc_sli4_hba 0 7465 NULL nohasharray
 cmdline_store_fndecl_7465_fns cmdline_store fndecl 4 7465 &num_present_cpu_lpfc_sli4_hba_7465_fns
 minors_gigaset_driver_7468_fns minors gigaset_driver 0 7468 NULL
 rxrpc_server_keyring_fndecl_7484_fns rxrpc_server_keyring fndecl 3 7484 NULL
+req_capsule_get_size_fndecl_7488_fns req_capsule_get_size fndecl 0 7488 NULL
 calculate_inocache_hashsize_fndecl_7506_fns calculate_inocache_hashsize fndecl 0-1 7506 NULL
 relay_consume_bytes_fndecl_7510_fns relay_consume_bytes fndecl 2 7510 NULL
 alloc_disk_node_fndecl_7513_fns alloc_disk_node fndecl 1 7513 NULL
@@ -557,10 +610,12 @@ sd_start_fndecl_7964_fns sd_start fndecl 0 7964 NULL
 squashfs_read_table_fndecl_7970_fns squashfs_read_table fndecl 3 7970 NULL
 _sp2d_alloc_fndecl_7971_fns _sp2d_alloc fndecl 3-2 7971 NULL
 acpi_tb_install_and_load_table_fndecl_7976_fns acpi_tb_install_and_load_table fndecl 2 7976 NULL
+svcxdr_dupstr_fndecl_8016_fns svcxdr_dupstr fndecl 3 8016 NULL
 keyctl_instantiate_key_iov_fndecl_8026_fns keyctl_instantiate_key_iov fndecl 3 8026 NULL
 pd_handles_sz_MPT3SAS_ADAPTER_8057_fns pd_handles_sz MPT3SAS_ADAPTER 0 8057 NULL
 ceph_read_dir_fndecl_8062_fns ceph_read_dir fndecl 3 8062 NULL
 copy_counters_to_user_fndecl_8080_fns copy_counters_to_user fndecl 5 8080 NULL
+dvb_dvr_read_fndecl_8098_fns dvb_dvr_read fndecl 3 8098 NULL
 error_num_frame_cts_nul_flid_read_fndecl_8099_fns error_num_frame_cts_nul_flid_read fndecl 3 8099 NULL
 simple_transaction_read_fndecl_8103_fns simple_transaction_read fndecl 3 8103 NULL
 acpi_ut_get_resource_header_length_fndecl_8110_fns acpi_ut_get_resource_header_length fndecl 0 8110 NULL
@@ -599,12 +654,14 @@ copy_from_user_toio_fndecl_8653_fns copy_from_user_toio fndecl 3 8653 NULL
 read_mem_fndecl_8661_fns read_mem fndecl 3 8661 NULL
 SYSC_sethostname_fndecl_8663_fns SYSC_sethostname fndecl 2 8663 NULL
 b_out_mon_reader_bin_8691_fns b_out mon_reader_bin 0 8691 NULL
-blk_mq_update_nr_requests_fndecl_8694_fns blk_mq_update_nr_requests fndecl 2 8694 NULL
+blk_mq_update_nr_requests_fndecl_8694_fns blk_mq_update_nr_requests fndecl 2 8694 NULL nohasharray
+data_width_stedma40_half_channel_info_8694_fns data_width stedma40_half_channel_info 0 8694 &blk_mq_update_nr_requests_fndecl_8694_fns
 ebcnt_vardecl_readtest_c_8699_fns ebcnt vardecl_readtest.c 0 8699 NULL
 iblock_execute_rw_fndecl_8701_fns iblock_execute_rw fndecl 3 8701 NULL
 ilo_read_fndecl_8704_fns ilo_read fndecl 3 8704 NULL
 out_ptr_mdc800_data_8709_fns out_ptr mdc800_data 0 8709 NULL
 key_len_host_if_wep_attr_8712_fns key_len host_if_wep_attr 0 8712 NULL
+rockchip_rk3399_efuse_read_fndecl_8717_fns rockchip_rk3399_efuse_read fndecl 4-2 8717 NULL
 qsfp_read_fndecl_8729_fns qsfp_read fndecl 2-4-0 8729 NULL
 ip_set_elem_len_fndecl_8730_fns ip_set_elem_len fndecl 0 8730 NULL
 alloc_state_change_fndecl_8735_fns alloc_state_change fndecl 1-2 8735 NULL
@@ -641,6 +698,7 @@ learn_buffer_len_vardecl_gracl_learn_c_9167_fns learn_buffer_len vardecl_gracl_l
 hid_input_report_fndecl_9177_fns hid_input_report fndecl 4 9177 NULL
 max_pages_ib_fmr_attr_9206_fns max_pages ib_fmr_attr 0 9206 NULL
 ide_driver_proc_write_fndecl_9214_fns ide_driver_proc_write fndecl 3 9214 NULL
+qcom_rpm_smd_write_fndecl_9229_fns qcom_rpm_smd_write fndecl 6 9229 NULL
 call_netdevice_notifiers_info_fndecl_9239_fns call_netdevice_notifiers_info fndecl 0 9239 NULL
 acpi_ns_build_normalized_path_fndecl_9269_fns acpi_ns_build_normalized_path fndecl 0 9269 NULL
 lbs_failcount_read_fndecl_9284_fns lbs_failcount_read fndecl 3 9284 NULL
@@ -660,10 +718,12 @@ maxdev_vardecl_slcan_c_9507_fns maxdev vardecl_slcan.c 0 9507 NULL
 fillonedir_fndecl_9511_fns fillonedir fndecl 3 9511 NULL
 smk_read_doi_fndecl_9550_fns smk_read_doi fndecl 3 9550 NULL
 __bio_alloc_fndecl_9552_fns __bio_alloc fndecl 3 9552 NULL
-pwr_sleep_time_avg_read_fndecl_9572_fns pwr_sleep_time_avg_read fndecl 3 9572 NULL
+pwr_sleep_time_avg_read_fndecl_9572_fns pwr_sleep_time_avg_read fndecl 3 9572 NULL nohasharray
+mvneta_frag_alloc_fndecl_9572_fns mvneta_frag_alloc fndecl 1 9572 &pwr_sleep_time_avg_read_fndecl_9572_fns
 sctp_setsockopt_auth_chunk_fndecl_9576_fns sctp_setsockopt_auth_chunk fndecl 3 9576 NULL
 of_gpio_named_count_fndecl_9578_fns of_gpio_named_count fndecl 0 9578 NULL
 get_kobj_path_length_fndecl_9596_fns get_kobj_path_length fndecl 0 9596 NULL
+frag_size_mvneta_port_9606_fns frag_size mvneta_port 0 9606 NULL
 skd_max_pass_thru_vardecl_skd_main_c_9608_fns skd_max_pass_thru vardecl_skd_main.c 0 9608 NULL
 acpi_copy_property_array_u16_fndecl_9618_fns acpi_copy_property_array_u16 fndecl 0 9618 NULL
 usnic_debugfs_buildinfo_read_fndecl_9667_fns usnic_debugfs_buildinfo_read fndecl 3 9667 NULL
@@ -673,6 +733,7 @@ tty_insert_flip_string_flags_fndecl_9706_fns tty_insert_flip_string_flags fndecl
 tx_ringsz_alx_priv_9722_fns tx_ringsz alx_priv 0 9722 NULL
 vicam_control_msg_fndecl_9727_fns vicam_control_msg fndecl 0 9727 NULL
 sg_cnt_nvmet_req_9742_fns sg_cnt nvmet_req 0 9742 NULL
+samsung_clk_sleep_init_fndecl_9743_fns samsung_clk_sleep_init fndecl 3 9743 NULL
 qsfp_2_read_fndecl_9744_fns qsfp_2_read fndecl 3 9744 NULL
 blkdev_fsync_fndecl_9745_fns blkdev_fsync fndecl 2-3 9745 NULL
 bnx2x_mcast_handle_current_cmd_fndecl_9747_fns bnx2x_mcast_handle_current_cmd fndecl 0 9747 NULL
@@ -709,13 +770,16 @@ outlen_write_fndecl_10093_fns outlen_write fndecl 3 10093 NULL
 msix_num_bnad_10096_fns msix_num bnad 0 10096 NULL
 em28xx_init_usb_xfer_fndecl_10106_fns em28xx_init_usb_xfer fndecl 4 10106 NULL
 _regmap_raw_multi_reg_write_fndecl_10107_fns _regmap_raw_multi_reg_write fndecl 3 10107 NULL
+trace_parser_get_init_fndecl_10112_fns trace_parser_get_init fndecl 2 10112 NULL
 tfms_count_crypt_config_10114_fns tfms_count crypt_config 0 10114 NULL
 sg_segs_osst_buffer_10144_fns sg_segs osst_buffer 0 10144 NULL
 nvme_rdma_alloc_qe_fndecl_10151_fns nvme_rdma_alloc_qe fndecl 3 10151 NULL
+ldebugfs_fid_space_seq_write_fndecl_10152_fns ldebugfs_fid_space_seq_write fndecl 3 10152 NULL
 udp_tun_rx_dst_fndecl_10154_fns udp_tun_rx_dst fndecl 5 10154 NULL
 _sp2d_max_pg_fndecl_10157_fns _sp2d_max_pg fndecl 0 10157 NULL
 substream_count_snd_rawmidi_str_10174_fns substream_count snd_rawmidi_str 0 10174 NULL
 opera1_xilinx_rw_fndecl_10190_fns opera1_xilinx_rw fndecl 5 10190 NULL
+sa_alloc_fndecl_10205_fns sa_alloc fndecl 5 10205 NULL
 old_log_size_persistent_ram_zone_10215_fns old_log_size persistent_ram_zone 0 10215 NULL
 wil_addba_rx_request_fndecl_10219_fns wil_addba_rx_request fndecl 4 10219 NULL
 rds_message_map_pages_fndecl_10220_fns rds_message_map_pages fndecl 2 10220 NULL
@@ -747,22 +811,28 @@ posix_acl_from_xattr_fndecl_10527_fns posix_acl_from_xattr fndecl 3 10527 &sd_al
 touchscreen_set_params_fndecl_10540_fns touchscreen_set_params fndecl 3 10540 NULL
 nfp_net_netdev_alloc_fndecl_10548_fns nfp_net_netdev_alloc fndecl 3-2 10548 NULL nohasharray
 read_cis_cache_fndecl_10548_fns read_cis_cache fndecl 4 10548 &nfp_net_netdev_alloc_fndecl_10548_fns
+wm_adsp_read_algs_fndecl_10552_fns wm_adsp_read_algs fndecl 4 10552 NULL
 lpfc_present_cpu_vardecl_10567_fns lpfc_present_cpu vardecl 0 10567 NULL
 num_send_contexts_hfi1_devdata_10569_fns num_send_contexts hfi1_devdata 0 10569 NULL
 fuse_fsync_fndecl_10582_fns fuse_fsync fndecl 2-3 10582 NULL nohasharray
 sctp_make_control_fndecl_10582_fns sctp_make_control fndecl 2 10582 &fuse_fsync_fndecl_10582_fns
 static_key_count_fndecl_10584_fns static_key_count fndecl 0 10584 NULL
 num_amd_northbridge_info_10604_fns num amd_northbridge_info 0 10604 NULL
-__probe_kernel_write_fndecl_10625_fns __probe_kernel_write fndecl 3 10625 NULL
+__probe_kernel_write_fndecl_10625_fns __probe_kernel_write fndecl 3 10625 NULL nohasharray
+lch_count_omap_dma_dev_attr_10625_fns lch_count omap_dma_dev_attr 0 10625 &__probe_kernel_write_fndecl_10625_fns
 smk_write_relabel_self_fndecl_10657_fns smk_write_relabel_self fndecl 3 10657 NULL
 tlv_put_fndecl_10659_fns tlv_put fndecl 0 10659 NULL
+ipv6_setsockopt_fndecl_10684_fns ipv6_setsockopt fndecl 5 10684 NULL
 write_file_bool_bmps_fndecl_10685_fns write_file_bool_bmps fndecl 3 10685 NULL
+lov_ost_pool_extend_fndecl_10697_fns lov_ost_pool_extend fndecl 2 10697 NULL
 __btrfs_getxattr_fndecl_10728_fns __btrfs_getxattr fndecl 0 10728 NULL
 ntp_fltr_count_bnxt_10734_fns ntp_fltr_count bnxt 0 10734 NULL
 write_file_queue_fndecl_10737_fns write_file_queue fndecl 3 10737 NULL
 setexposure_fndecl_10781_fns setexposure fndecl 0 10781 NULL
+dwc3_testmode_write_fndecl_10791_fns dwc3_testmode_write fndecl 3 10791 NULL
 rndis_add_response_fndecl_10854_fns rndis_add_response fndecl 2 10854 NULL
 disk_expand_part_tbl_fndecl_10866_fns disk_expand_part_tbl fndecl 2 10866 NULL
+__vmalloc_fndecl_10880_fns __vmalloc fndecl 1 10880 NULL
 sgl_map_user_pages_fndecl_10881_fns sgl_map_user_pages fndecl 2 10881 NULL
 compat_sys_msgsnd_fndecl_10918_fns compat_sys_msgsnd fndecl 3 10918 NULL
 compat_raw_setsockopt_fndecl_10937_fns compat_raw_setsockopt fndecl 5 10937 NULL
@@ -780,11 +850,14 @@ snd_pcm_new_internal_fndecl_11091_fns snd_pcm_new_internal fndecl 4-5 11091 NULL
 mbox_alloc_fndecl_11103_fns mbox_alloc fndecl 2 11103 NULL
 acpi_processor_power_verify_fndecl_11105_fns acpi_processor_power_verify fndecl 0 11105 NULL
 __vmalloc_node_flags_fndecl_11139_fns __vmalloc_node_flags fndecl 1 11139 NULL
+resource_from_user_fndecl_11158_fns resource_from_user fndecl 3 11158 NULL
 nvme_fill_device_id_eui64_fndecl_11160_fns nvme_fill_device_id_eui64 fndecl 4 11160 NULL
 max_supported_extcon_dev_11172_fns max_supported extcon_dev 0 11172 NULL
 c4iw_init_resource_fndecl_11178_fns c4iw_init_resource fndecl 2-3 11178 NULL
 sys_get_mempolicy_fndecl_11192_fns sys_get_mempolicy fndecl 3 11192 NULL
 mangle_sdp_packet_fndecl_11198_fns mangle_sdp_packet fndecl 10 11198 NULL
+submit_create_fndecl_11207_fns submit_create fndecl 3-4 11207 NULL
+lstcon_session_info_fndecl_11210_fns lstcon_session_info fndecl 6 11210 NULL
 tx_tx_template_prepared_read_fndecl_11211_fns tx_tx_template_prepared_read fndecl 3 11211 NULL
 enable_write_fndecl_11243_fns enable_write fndecl 3 11243 NULL
 tx_tx_template_programmed_read_fndecl_11246_fns tx_tx_template_programmed_read fndecl 3 11246 NULL
@@ -794,6 +867,7 @@ buffer_length_usbdevfs_urb_11350_fns buffer_length usbdevfs_urb 0 11350 NULL
 nilfs_cpfile_delete_checkpoints_fndecl_11352_fns nilfs_cpfile_delete_checkpoints fndecl 2-3 11352 NULL nohasharray
 fdb_insert_fndecl_11352_fns fdb_insert fndecl 4 11352 &nilfs_cpfile_delete_checkpoints_fndecl_11352_fns
 fd_execute_rw_fndecl_11359_fns fd_execute_rw fndecl 3 11359 NULL
+arpc_sync_fndecl_11389_fns arpc_sync fndecl 4 11389 NULL
 sctp_getsockopt_assoc_stats_fndecl_11393_fns sctp_getsockopt_assoc_stats fndecl 2 11393 NULL
 msix_setup_entries_fndecl_11398_fns msix_setup_entries fndecl 4-0 11398 NULL nohasharray
 txs_vardecl_ambassador_c_11398_fns txs vardecl_ambassador.c 0 11398 &msix_setup_entries_fndecl_11398_fns
@@ -824,14 +898,19 @@ gart_pin_size_radeon_device_11745_fns gart_pin_size radeon_device 0 11745 NULL
 cifs_linux_ext_proc_write_fndecl_11755_fns cifs_linux_ext_proc_write fndecl 3 11755 NULL
 iscsi_sw_tcp_session_create_fndecl_11792_fns iscsi_sw_tcp_session_create fndecl 3 11792 NULL
 __kmalloc_node_fndecl_11804_fns __kmalloc_node fndecl 1 11804 NULL
+size_mvpp2_tx_queue_11816_fns size mvpp2_tx_queue 0 11816 NULL
 pci_enable_msix_fndecl_11847_fns pci_enable_msix fndecl 3 11847 NULL
 num_crtc_mga_device_11851_fns num_crtc mga_device 0 11851 NULL
+btmrvl_pscmd_write_fndecl_11859_fns btmrvl_pscmd_write fndecl 3 11859 NULL
 frame_rate_sd_11862_fns frame_rate sd 0 11862 NULL
 wr_host_buf_pos_xilly_channel_11866_fns wr_host_buf_pos xilly_channel 0 11866 NULL
 alloc_empty_pages_fndecl_11885_fns alloc_empty_pages fndecl 2 11885 NULL
 snd_device_new_fndecl_11911_fns snd_device_new fndecl 0 11911 NULL
 lbs_lowsnr_read_fndecl_11920_fns lbs_lowsnr_read fndecl 3 11920 NULL
 kvm_read_guest_virt_system_fndecl_11922_fns kvm_read_guest_virt_system fndecl 4-2 11922 NULL
+arm_coherent_iommu_alloc_attrs_fndecl_11939_fns arm_coherent_iommu_alloc_attrs fndecl 2 11939 NULL
+osc_cached_mb_seq_write_fndecl_11961_fns osc_cached_mb_seq_write fndecl 3 11961 NULL
+sa11x0_dma_prep_slave_sg_fndecl_11965_fns sa11x0_dma_prep_slave_sg fndecl 3 11965 NULL
 bsg_major_vardecl_bsg_c_11972_fns bsg_major vardecl_bsg.c 0 11972 NULL
 sctp_make_abort_user_fndecl_11973_fns sctp_make_abort_user fndecl 3 11973 NULL nohasharray
 spmi_controller_alloc_fndecl_11973_fns spmi_controller_alloc fndecl 2 11973 &sctp_make_abort_user_fndecl_11973_fns
@@ -842,6 +921,7 @@ ndevcntrs_hfi1_devdata_11997_fns ndevcntrs hfi1_devdata 0 11997 NULL
 alloc_group_attrs_fndecl_12032_fns alloc_group_attrs fndecl 3 12032 NULL nohasharray
 wusb_prf_256_fndecl_12032_fns wusb_prf_256 fndecl 7 12032 &alloc_group_attrs_fndecl_12032_fns
 drm_property_create_enum_fndecl_12034_fns drm_property_create_enum fndecl 5 12034 NULL
+comedi_alloc_subdevices_fndecl_12036_fns comedi_alloc_subdevices fndecl 2 12036 NULL
 evdev_handle_get_val_fndecl_12073_fns evdev_handle_get_val fndecl 5-6 12073 NULL
 nvme_trans_copy_from_user_fndecl_12088_fns nvme_trans_copy_from_user fndecl 3 12088 NULL
 security_context_to_sid_core_fndecl_12115_fns security_context_to_sid_core fndecl 2 12115 NULL
@@ -851,12 +931,14 @@ max_fingers_silead_ts_data_12170_fns max_fingers silead_ts_data 0 12170 NULL
 of_phandle_iterator_next_fndecl_12171_fns of_phandle_iterator_next fndecl 0 12171 NULL
 __fuse_get_req_fndecl_12176_fns __fuse_get_req fndecl 2 12176 NULL
 bulk_in_size_sur40_state_12178_fns bulk_in_size sur40_state 0 12178 NULL
+lprocfs_write_helper_fndecl_12184_fns lprocfs_write_helper fndecl 2 12184 NULL
 l2cap_sock_setsockopt_old_fndecl_12209_fns l2cap_sock_setsockopt_old fndecl 4 12209 NULL
 unique_len_drm_master_12259_fns unique_len drm_master 0 12259 NULL
 zs_size_classes_vardecl_zsmalloc_c_12260_fns zs_size_classes vardecl_zsmalloc.c 0 12260 NULL
 mempool_create_fndecl_12270_fns mempool_create fndecl 1 12270 NULL
 capacity_sddr09_card_info_12286_fns capacity sddr09_card_info 0 12286 NULL
 nb_blocks_NFTLrecord_12306_fns nb_blocks NFTLrecord 0 12306 NULL
+tracing_clock_write_fndecl_12330_fns tracing_clock_write fndecl 3 12330 NULL
 srpt_alloc_rw_ctxs_fndecl_12333_fns srpt_alloc_rw_ctxs fndecl 3 12333 NULL
 snd_hdac_bus_exec_verb_unlocked_fndecl_12335_fns snd_hdac_bus_exec_verb_unlocked fndecl 0 12335 NULL
 bank_size_stub_chip_12338_fns bank_size stub_chip 0 12338 NULL
@@ -865,6 +947,7 @@ mic_rx_pkts_read_fndecl_12375_fns mic_rx_pkts_read fndecl 3 12375 NULL
 pci_enable_device_flags_fndecl_12378_fns pci_enable_device_flags fndecl 0 12378 NULL
 powercap_register_zone_fndecl_12399_fns powercap_register_zone fndecl 6 12399 NULL
 ieee802154_alloc_hw_fndecl_12400_fns ieee802154_alloc_hw fndecl 1 12400 NULL
+edt_ft5x06_debugfs_raw_data_read_fndecl_12401_fns edt_ft5x06_debugfs_raw_data_read fndecl 3 12401 NULL
 snd_rawmidi_write_fndecl_12411_fns snd_rawmidi_write fndecl 3 12411 NULL
 cx231xx_init_vbi_isoc_fndecl_12422_fns cx231xx_init_vbi_isoc fndecl 3 12422 NULL
 init_rs_non_canonical_fndecl_12424_fns init_rs_non_canonical fndecl 1-5 12424 NULL
@@ -891,15 +974,20 @@ kcalloc_fndecl_12649_fns kcalloc fndecl 1-2 12649 NULL
 fdir_pf_active_filters_i40e_pf_12654_fns fdir_pf_active_filters i40e_pf 0 12654 NULL
 num_aces_cifs_acl_12670_fns num_aces cifs_acl 0 12670 NULL
 t2_num_pages_qed_cxt_mngr_12696_fns t2_num_pages qed_cxt_mngr 0 12696 NULL
+gb_loopback_async_sink_fndecl_12706_fns gb_loopback_async_sink fndecl 2 12706 NULL
+fld_debugfs_hash_seq_write_fndecl_12713_fns fld_debugfs_hash_seq_write fndecl 3 12713 NULL
 sys_listxattr_fndecl_12714_fns sys_listxattr fndecl 3 12714 NULL
 rdma_rw_init_mr_wrs_fndecl_12719_fns rdma_rw_init_mr_wrs fndecl 7-5 12719 NULL
 read_profile_fndecl_12736_fns read_profile fndecl 3 12736 NULL
 num_unit_element_struct_12767_fns num unit_element_struct 0 12767 NULL
 driver_add_groups_fndecl_12778_fns driver_add_groups fndecl 0 12778 NULL
+testmode_write_fndecl_12814_fns testmode_write fndecl 3 12814 NULL
 hint_events_per_packet_input_dev_12818_fns hint_events_per_packet input_dev 0 12818 NULL nohasharray
 subdev_ioctl_fndecl_12818_fns subdev_ioctl fndecl 2 12818 &hint_events_per_packet_input_dev_12818_fns
+ksocknal_alloc_tx_fndecl_12825_fns ksocknal_alloc_tx fndecl 2 12825 NULL
 of_n_addr_cells_fndecl_12852_fns of_n_addr_cells fndecl 0 12852 NULL
 max_ddbs_hw_profile_12873_fns max_ddbs hw_profile 0 12873 NULL
+omap_gem_new_dmabuf_fndecl_12877_fns omap_gem_new_dmabuf fndecl 2 12877 NULL
 nilfs_sufile_delete_segment_usage_block_fndecl_12921_fns nilfs_sufile_delete_segment_usage_block fndecl 2 12921 NULL
 run_delalloc_range_fndecl_12946_fns run_delalloc_range fndecl 3-4 12946 NULL nohasharray
 aio_read_events_fndecl_12946_fns aio_read_events fndecl 3 12946 &run_delalloc_range_fndecl_12946_fns nohasharray
@@ -923,6 +1011,7 @@ line6_alloc_sysex_buffer_fndecl_13138_fns line6_alloc_sysex_buffer fndecl 4 1313
 mousedev_reserve_minor_fndecl_13143_fns mousedev_reserve_minor fndecl 0 13143 NULL
 nr_possible_cpus_uv_hub_info_s_13164_fns nr_possible_cpus uv_hub_info_s 0 13164 NULL
 inline_xattr_size_fndecl_13166_fns inline_xattr_size fndecl 0 13166 NULL
+iproc_pll_clk_setup_fndecl_13179_fns iproc_pll_clk_setup fndecl 6 13179 NULL
 nouveau_compat_ioctl_fndecl_13186_fns nouveau_compat_ioctl fndecl 2 13186 NULL
 blocksize_f2fs_sb_info_13191_fns blocksize f2fs_sb_info 0 13191 NULL
 bsg_setup_queue_fndecl_13194_fns bsg_setup_queue fndecl 5 13194 NULL
@@ -946,11 +1035,13 @@ subdevices_count_snd_rawmidi_info_13408_fns subdevices_count snd_rawmidi_info 0
 nrealreaders_stress_lock_torture_cxt_13422_fns nrealreaders_stress lock_torture_cxt 0 13422 NULL
 tb_path_alloc_fndecl_13427_fns tb_path_alloc fndecl 2 13427 NULL
 kvm_read_guest_phys_system_fndecl_13445_fns kvm_read_guest_phys_system fndecl 2-4 13445 NULL
+mmp_clk_init_fndecl_13447_fns mmp_clk_init fndecl 3 13447 NULL
 fill_read_buf_fndecl_13455_fns fill_read_buf fndecl 2 13455 NULL
 snd_ctl_new_fndecl_13472_fns snd_ctl_new fndecl 2 13472 NULL
 __videobuf_alloc_vb_fndecl_13477_fns __videobuf_alloc_vb fndecl 1 13477 NULL
 devfn_slot_13478_fns devfn slot 0 13478 NULL
 iwl_mvm_notify_rx_queue_fndecl_13499_fns iwl_mvm_notify_rx_queue fndecl 4 13499 NULL
+btmrvl_hscmd_write_fndecl_13506_fns btmrvl_hscmd_write fndecl 3 13506 NULL
 max_out_size_ims_pcu_13527_fns max_out_size ims_pcu 0 13527 NULL
 alloc_fdmem_fndecl_13528_fns alloc_fdmem fndecl 1 13528 NULL
 tool_mw_read_fndecl_13537_fns tool_mw_read fndecl 3 13537 NULL
@@ -968,6 +1059,7 @@ sysfs_add_file_fndecl_13647_fns sysfs_add_file fndecl 0 13647 NULL
 __fwnode_property_read_string_array_fndecl_13689_fns __fwnode_property_read_string_array fndecl 0 13689 NULL
 resize_platform_label_table_fndecl_13711_fns resize_platform_label_table fndecl 2 13711 NULL
 wsm_buf_reserve_fndecl_13730_fns wsm_buf_reserve fndecl 2 13730 NULL
+shdma_prep_dma_cyclic_fndecl_13739_fns shdma_prep_dma_cyclic fndecl 4-3 13739 NULL
 pof_write_buffer_fndecl_13741_fns pof_write_buffer fndecl 2-0 13741 NULL
 regmap_ibt_write_fndecl_13743_fns regmap_ibt_write fndecl 3 13743 NULL
 qlcnic_alloc_sds_rings_fndecl_13752_fns qlcnic_alloc_sds_rings fndecl 2 13752 NULL
@@ -982,21 +1074,26 @@ seq_read_fndecl_13824_fns seq_read fndecl 3 13824 NULL
 ib_dma_map_sg_fndecl_13830_fns ib_dma_map_sg fndecl 0 13830 NULL
 init_memory_mapping_fndecl_13840_fns init_memory_mapping fndecl 1-2 13840 NULL
 rlen_cm4000_dev_13899_fns rlen cm4000_dev 0 13899 NULL
-num_vfs_adapter_13918_fns num_vfs adapter 0 13918 NULL
+num_vfs_adapter_13918_fns num_vfs adapter 0 13918 NULL nohasharray
+wm_coeff_parse_int_fndecl_13918_fns wm_coeff_parse_int fndecl 0 13918 &num_vfs_adapter_13918_fns
 trips_thermal_zone_device_13921_fns trips thermal_zone_device 0 13921 NULL
 garmin_read_process_fndecl_13926_fns garmin_read_process fndecl 3 13926 NULL
 hcd_buffer_alloc_fndecl_13940_fns hcd_buffer_alloc fndecl 2 13940 NULL
+img_IMEM_size_fw_hdr_13961_fns img_IMEM_size fw_hdr 0 13961 NULL
 ib_copy_to_udata_fndecl_13974_fns ib_copy_to_udata fndecl 3 13974 NULL
 e_phnum_elf32_hdr_13980_fns e_phnum elf32_hdr 0 13980 NULL
 syslog_partial_vardecl_printk_c_13985_fns syslog_partial vardecl_printk.c 0 13985 NULL
 rd_size_uhid_device_13986_fns rd_size uhid_device 0 13986 NULL
 libipw_alloc_txb_fndecl_13992_fns libipw_alloc_txb fndecl 1 13992 NULL
+batadv_socket_add_packet_fndecl_14011_fns batadv_socket_add_packet fndecl 3 14011 NULL
 sensor_framerate_go7007_14025_fns sensor_framerate go7007 0 14025 NULL
 descriptors_per_page__drm_via_sg_info_14046_fns descriptors_per_page _drm_via_sg_info 0 14046 NULL
 C_SYSC_mbind_fndecl_14055_fns C_SYSC_mbind fndecl 5 14055 NULL
+read_flush_procfs_fndecl_14057_fns read_flush_procfs fndecl 3 14057 NULL
 regmap_ibt_gather_write_fndecl_14087_fns regmap_ibt_gather_write fndecl 5 14087 NULL
 _mv88e6xxx_port_vlan_add_fndecl_14091_fns _mv88e6xxx_port_vlan_add fndecl 3 14091 NULL
 snd_compr_calc_avail_fndecl_14094_fns snd_compr_calc_avail fndecl 0 14094 NULL
+btmrvl_hscfgcmd_write_fndecl_14100_fns btmrvl_hscfgcmd_write fndecl 3 14100 NULL
 wil_write_file_wmi_fndecl_14109_fns wil_write_file_wmi fndecl 3 14109 NULL
 dqi_entry_size_qtree_mem_dqinfo_14150_fns dqi_entry_size qtree_mem_dqinfo 0 14150 NULL
 write_kmem_fndecl_14154_fns write_kmem fndecl 3 14154 NULL nohasharray
@@ -1004,20 +1101,27 @@ svcxdr_tmpalloc_fndecl_14154_fns svcxdr_tmpalloc fndecl 2 14154 &write_kmem_fnde
 vfs_writev_fndecl_14168_fns vfs_writev fndecl 3 14168 NULL
 rxrpc_request_key_fndecl_14192_fns rxrpc_request_key fndecl 3 14192 NULL
 uvc_fraction_to_interval_fndecl_14194_fns uvc_fraction_to_interval fndecl 0-2-1 14194 NULL
+comedi_alloc_devpriv_fndecl_14235_fns comedi_alloc_devpriv fndecl 2 14235 NULL
 write_buf_fndecl_14247_fns write_buf fndecl 0 14247 NULL
 copy_from_buf_fndecl_14271_fns copy_from_buf fndecl 4-2 14271 NULL
 afs_cell_create_fndecl_14273_fns afs_cell_create fndecl 2 14273 NULL
 snd_pcm_oss_write2_fndecl_14295_fns snd_pcm_oss_write2 fndecl 3 14295 NULL
 scif_p2p_setsg_fndecl_14314_fns scif_p2p_setsg fndecl 3 14314 NULL
+size_wpa_suite_t_14321_fns size wpa_suite_t 0 14321 NULL
+pcbit_stat_fndecl_14327_fns pcbit_stat fndecl 2 14327 NULL
+pxad_alloc_desc_fndecl_14330_fns pxad_alloc_desc fndecl 2 14330 NULL
 ath6kl_regread_read_fndecl_14351_fns ath6kl_regread_read fndecl 3 14351 NULL
 nvme_trans_mode_page_create_fndecl_14375_fns nvme_trans_mode_page_create fndecl 7-4 14375 NULL
+lirc_rx51_write_fndecl_14379_fns lirc_rx51_write fndecl 3 14379 NULL
 num_phys__sas_node_14384_fns num_phys _sas_node 0 14384 NULL
 fdb_create_fndecl_14403_fns fdb_create fndecl 4 14403 NULL
 vmcb_iopm_nested_state_14411_fns vmcb_iopm nested_state 0 14411 NULL
+max_ep_fsl_udc_14417_fns max_ep fsl_udc 0 14417 NULL
 snd_es1938_capture_copy_fndecl_14425_fns snd_es1938_capture_copy fndecl 5 14425 NULL
 wrt_pass_cntr_osst_tape_14444_fns wrt_pass_cntr osst_tape 0 14444 NULL
 flush_fndecl_14454_fns flush fndecl 2 14454 NULL
 _regmap_multi_reg_write_fndecl_14460_fns _regmap_multi_reg_write fndecl 3 14460 NULL
+cfs_hash_create_fndecl_14468_fns cfs_hash_create fndecl 4-2 14468 NULL
 user_ucs2_strsize_fndecl_14469_fns user_ucs2_strsize fndecl 0 14469 NULL
 rdmarc_entry_sz_mlx4_dev_cap_14475_fns rdmarc_entry_sz mlx4_dev_cap 0 14475 NULL
 selinux_inode_post_setxattr_fndecl_14502_fns selinux_inode_post_setxattr fndecl 4 14502 NULL
@@ -1031,6 +1135,7 @@ befs_utf2nls_fndecl_14607_fns befs_utf2nls fndecl 3 14607 NULL
 interval_solo_enc_dev_14661_fns interval solo_enc_dev 0 14661 NULL
 tty_copy_to_user_fndecl_14668_fns tty_copy_to_user fndecl 3-4 14668 NULL
 image_size_ls_ucode_img_desc_14672_fns image_size ls_ucode_img_desc 0 14672 NULL
+lpfc_idiag_cmd_get_fndecl_14683_fns lpfc_idiag_cmd_get fndecl 2 14683 NULL
 rx_filter_mc_filter_read_fndecl_14691_fns rx_filter_mc_filter_read fndecl 3 14691 NULL
 smt_fill_path_fndecl_14692_fns smt_fill_path fndecl 0 14692 NULL
 num_sizes_vmw_surface_14695_fns num_sizes vmw_surface 0 14695 NULL
@@ -1069,6 +1174,7 @@ copy_oldmem_page_fndecl_15143_fns copy_oldmem_page fndecl 3 15143 NULL
 elem_size_snd_array_15155_fns elem_size snd_array 0 15155 NULL nohasharray
 chaoskey_read_fndecl_15155_fns chaoskey_read fndecl 3 15155 &elem_size_snd_array_15155_fns
 walk_hugetlb_range_fndecl_15190_fns walk_hugetlb_range fndecl 0 15190 NULL
+get_registers_fndecl_15192_fns get_registers fndecl 3 15192 NULL
 max_clk_sdhci_host_15206_fns max_clk sdhci_host 0 15206 NULL
 nlm_end_grace_read_fndecl_15209_fns nlm_end_grace_read fndecl 3 15209 NULL
 genwqe_ffdc_buff_size_fndecl_15236_fns genwqe_ffdc_buff_size fndecl 0 15236 NULL
@@ -1123,10 +1229,12 @@ rstatus_usblp_15945_fns rstatus usblp 0 15945 NULL
 hw_scan_ies_bufsize_ieee80211_local_15949_fns hw_scan_ies_bufsize ieee80211_local 0 15949 NULL
 mlxsw_sp_port_ets_set_fndecl_15981_fns mlxsw_sp_port_ets_set fndecl 0 15981 NULL
 nilfs_cpfile_get_blkoff_fndecl_15997_fns nilfs_cpfile_get_blkoff fndecl 2-0 15997 NULL
+gb_operation_create_incoming_fndecl_15999_fns gb_operation_create_incoming fndecl 5 15999 NULL
 gk20a_instobj_new_fndecl_16015_fns gk20a_instobj_new fndecl 2 16015 NULL
 num_stripes_map_lookup_16016_fns num_stripes map_lookup 0 16016 NULL
 snd_pcm_plugin_build_fndecl_16050_fns snd_pcm_plugin_build fndecl 5 16050 NULL
 pgsize_vardecl_pagetest_c_16065_fns pgsize vardecl_pagetest.c 0 16065 NULL
+sa_statahead_fndecl_16102_fns sa_statahead fndecl 3 16102 NULL
 snd_rawmidi_kernel_write_fndecl_16129_fns snd_rawmidi_kernel_write fndecl 3 16129 NULL
 fanout_set_data_ebpf_fndecl_16141_fns fanout_set_data_ebpf fndecl 3 16141 NULL
 ib_uverbs_alloc_pd_fndecl_16189_fns ib_uverbs_alloc_pd fndecl 4-5 16189 NULL
@@ -1140,24 +1248,31 @@ f_max_mmc_host_16291_fns f_max mmc_host 0 16291 NULL
 dvbdev_get_free_adapter_num_fndecl_16292_fns dvbdev_get_free_adapter_num fndecl 0 16292 NULL
 crypto_alloc_instance2_fndecl_16302_fns crypto_alloc_instance2 fndecl 3 16302 NULL
 jent_zalloc_fndecl_16331_fns jent_zalloc fndecl 1 16331 NULL
+spi_sync_transfer_fndecl_16337_fns spi_sync_transfer fndecl 0 16337 NULL
 l2tp_session_create_fndecl_16341_fns l2tp_session_create fndecl 1 16341 NULL
 help_fndecl_16375_fns help fndecl 5 16375 NULL
+samsung_clk_init_fndecl_16382_fns samsung_clk_init fndecl 3 16382 NULL
 zd_mac_preinit_hw_fndecl_16386_fns zd_mac_preinit_hw fndecl 0 16386 NULL
 dsize_ip_set_16391_fns dsize ip_set 0 16391 NULL
 ip_options_get_alloc_fndecl_16395_fns ip_options_get_alloc fndecl 1 16395 NULL
 SYSC_setgroups_fndecl_16397_fns SYSC_setgroups fndecl 1 16397 NULL
 sdhci_alloc_host_fndecl_16454_fns sdhci_alloc_host fndecl 2 16454 NULL
+mtk_alloc_clk_data_fndecl_16481_fns mtk_alloc_clk_data fndecl 1 16481 NULL
 ptrace_access_vm_fndecl_16494_fns ptrace_access_vm fndecl 0 16494 NULL
 ttm_page_alloc_init_fndecl_16498_fns ttm_page_alloc_init fndecl 2 16498 NULL
+cfs_cpt_num_estimate_fndecl_16512_fns cfs_cpt_num_estimate fndecl 0 16512 NULL
 smk_read_mapped_fndecl_16537_fns smk_read_mapped fndecl 3 16537 NULL
 groups_alloc_fndecl_16557_fns groups_alloc fndecl 1 16557 NULL nohasharray
 create_dir_fndecl_16557_fns create_dir fndecl 0 16557 &groups_alloc_fndecl_16557_fns
 ceph_fsync_fndecl_16625_fns ceph_fsync fndecl 2-3 16625 NULL
 of_dma_match_channel_fndecl_16675_fns of_dma_match_channel fndecl 3 16675 NULL
 cons_read_buffer_16688_fns cons read_buffer 0 16688 NULL
+i2c1_debugfs_read_fndecl_16712_fns i2c1_debugfs_read fndecl 3 16712 NULL
 rx_rate_rx_frames_per_rates_read_fndecl_16737_fns rx_rate_rx_frames_per_rates_read fndecl 3 16737 NULL
-devlink_alloc_fndecl_16742_fns devlink_alloc fndecl 2 16742 NULL
+devlink_alloc_fndecl_16742_fns devlink_alloc fndecl 2 16742 NULL nohasharray
+fault_disconnect_write_fndecl_16742_fns fault_disconnect_write fndecl 3 16742 &devlink_alloc_fndecl_16742_fns
 num_q_csio_wrm_16770_fns num_q csio_wrm 0 16770 NULL
+max_iu_len_srp_target_port_16784_fns max_iu_len srp_target_port 0 16784 NULL
 ishtp_host_dma_tx_buf_size_ishtp_device_16798_fns ishtp_host_dma_tx_buf_size ishtp_device 0 16798 NULL
 diva_xdi_read_fndecl_16814_fns diva_xdi_read fndecl 0 16814 NULL
 drm_property_create_blob_fndecl_16869_fns drm_property_create_blob fndecl 2 16869 NULL
@@ -1165,6 +1280,7 @@ len_snd_fw_async_midi_port_16875_fns len snd_fw_async_midi_port 0 16875 NULL
 _ore_add_stripe_unit_fndecl_16884_fns _ore_add_stripe_unit fndecl 3-6 16884 NULL
 ncbflooders_vardecl_rcutorture_c_16899_fns ncbflooders vardecl_rcutorture.c 0 16899 NULL
 clk_set_rate_fndecl_16902_fns clk_set_rate fndecl 2 16902 NULL
+n_ai_urbs_usbduxsigma_private_16912_fns n_ai_urbs usbduxsigma_private 0 16912 NULL
 idx_mxser_board_16916_fns idx mxser_board 0 16916 NULL
 sys_mbind_fndecl_16933_fns sys_mbind fndecl 5 16933 NULL
 vidioc_dqbuf_fndecl_16948_fns vidioc_dqbuf fndecl 0 16948 NULL
@@ -1174,6 +1290,7 @@ tt3650_ci_msg_locked_fndecl_16990_fns tt3650_ci_msg_locked fndecl 4 16990 NULL
 cifs_min_rcv_vardecl_17001_fns cifs_min_rcv vardecl 0 17001 NULL
 id_rtc_device_17005_fns id rtc_device 0 17005 NULL
 snd_hdac_bus_exec_verb_fndecl_17009_fns snd_hdac_bus_exec_verb fndecl 0 17009 NULL
+__iommu_dma_alloc_pages_fndecl_17015_fns __iommu_dma_alloc_pages fndecl 1 17015 NULL
 reiserfs_sync_file_fndecl_17045_fns reiserfs_sync_file fndecl 2-3 17045 NULL
 qla4xxx_post_ping_evt_work_fndecl_17049_fns qla4xxx_post_ping_evt_work fndecl 4 17049 NULL
 command_setcompressiontarget_fndecl_17055_fns command_setcompressiontarget fndecl 0 17055 NULL
@@ -1187,8 +1304,10 @@ cx18_queue_get_mdl_fndecl_17103_fns cx18_queue_get_mdl fndecl 3 17103 NULL
 dlm_user_request_fndecl_17104_fns dlm_user_request fndecl 6 17104 NULL
 minors_gendisk_17113_fns minors gendisk 0 17113 NULL
 in___kfifo_17131_fns in __kfifo 0 17131 NULL
+lnet_ipif_enumerate_fndecl_17135_fns lnet_ipif_enumerate fndecl 0 17135 NULL
 acpi_hw_validate_register_fndecl_17141_fns acpi_hw_validate_register fndecl 2 17141 NULL
 blockSize_ms_lib_ctrl_17144_fns blockSize ms_lib_ctrl 0 17144 NULL
+size_buf_image_desc_17151_fns size_buf image_desc 0 17151 NULL
 len_read_buffer_17166_fns len read_buffer 0 17166 NULL
 acpi_ex_allocate_name_string_fndecl_17174_fns acpi_ex_allocate_name_string fndecl 1-2 17174 NULL
 pci_raw_set_power_state_fndecl_17186_fns pci_raw_set_power_state fndecl 0 17186 NULL
@@ -1199,6 +1318,7 @@ dfs_global_file_read_fndecl_17272_fns dfs_global_file_read fndecl 3 17272 NULL n
 offs_nand_bbt_descr_17272_fns offs nand_bbt_descr 0 17272 &dfs_global_file_read_fndecl_17272_fns
 bnx2_nvram_write_fndecl_17277_fns bnx2_nvram_write fndecl 2-4 17277 NULL
 seq_buf_alloc_fndecl_17287_fns seq_buf_alloc fndecl 1 17287 NULL
+cfs_trace_dump_debug_buffer_usrstr_fndecl_17318_fns cfs_trace_dump_debug_buffer_usrstr fndecl 2 17318 NULL
 MaxBuses__MSG_IOC_FACTS_REPLY_17350_fns MaxBuses _MSG_IOC_FACTS_REPLY 0 17350 NULL
 dvb_dmxdev_read_sec_fndecl_17351_fns dvb_dmxdev_read_sec fndecl 4 17351 NULL
 audio_buf_size_f_uac1_opts_17353_fns audio_buf_size f_uac1_opts 0 17353 NULL
@@ -1217,6 +1337,7 @@ offset_icmp_bxm_17531_fns offset icmp_bxm 0 17531 NULL
 rndis_set_oid_fndecl_17536_fns rndis_set_oid fndecl 4 17536 NULL
 fb_alloc_cmap_fndecl_17545_fns fb_alloc_cmap fndecl 2 17545 NULL
 stack_size_ahd_softc_17574_fns stack_size ahd_softc 0 17574 NULL
+sita_init_fndecl_17588_fns sita_init fndecl 2-1 17588 NULL
 skb_array_init_fndecl_17590_fns skb_array_init fndecl 2 17590 NULL
 drbg_init_hash_kernel_fndecl_17617_fns drbg_init_hash_kernel fndecl 0 17617 NULL
 dvb_dmx_init_fndecl_17652_fns dvb_dmx_init fndecl 0 17652 NULL
@@ -1235,6 +1356,7 @@ snd_hda_override_conn_list_fndecl_17817_fns snd_hda_override_conn_list fndecl 3
 xenbus_file_write_fndecl_17817_fns xenbus_file_write fndecl 3 17817 &snd_hda_override_conn_list_fndecl_17817_fns
 tx_tx_start_null_frame_read_fndecl_17818_fns tx_tx_start_null_frame_read fndecl 3 17818 NULL
 qlcnic_sriov_alloc_bc_msg_fndecl_17846_fns qlcnic_sriov_alloc_bc_msg fndecl 2 17846 NULL
+jz4740_dma_prep_dma_cyclic_fndecl_17849_fns jz4740_dma_prep_dma_cyclic fndecl 4-3 17849 NULL
 preferred_minor_md_rdev_17857_fns preferred_minor md_rdev 0 17857 NULL
 host_int_get_assoc_res_info_fndecl_17869_fns host_int_get_assoc_res_info fndecl 3 17869 NULL
 fuse_get_req_for_background_fndecl_17874_fns fuse_get_req_for_background fndecl 2 17874 NULL
@@ -1250,6 +1372,7 @@ nilfs_set_last_segment_fndecl_17983_fns nilfs_set_last_segment fndecl 4 17983 NU
 count_mlxsw_pci_queue_17987_fns count mlxsw_pci_queue 0 17987 NULL
 size_firmware_buf_18003_fns size firmware_buf 0 18003 NULL
 request_key_async_fndecl_18013_fns request_key_async fndecl 4 18013 NULL
+raid56_parity_recover_fndecl_18019_fns raid56_parity_recover fndecl 4 18019 NULL
 condc_tomoyo_condition_18025_fns condc tomoyo_condition 0 18025 NULL
 fip_dl_len_fip_header_18032_fns fip_dl_len fip_header 0 18032 NULL
 copy_items_fndecl_18039_fns copy_items fndecl 7 18039 NULL
@@ -1272,10 +1395,12 @@ posix_acl_xattr_count_fndecl_18262_fns posix_acl_xattr_count fndecl 1-0 18262 NU
 video_proc_write_fndecl_18263_fns video_proc_write fndecl 3 18263 NULL
 rds_rdma_pages_fndecl_18268_fns rds_rdma_pages fndecl 0 18268 NULL
 add_pfn_range_mapped_fndecl_18307_fns add_pfn_range_mapped fndecl 1 18307 NULL
+i2c_read_fndecl_18308_fns i2c_read fndecl 0 18308 NULL
 rpipes_wahc_18323_fns rpipes wahc 0 18323 NULL
 tx_tx_done_data_read_fndecl_18332_fns tx_tx_done_data_read fndecl 3 18332 NULL
 blk_alloc_flush_queue_fndecl_18340_fns blk_alloc_flush_queue fndecl 3 18340 NULL
 calc_pages_for_fndecl_18341_fns calc_pages_for fndecl 0-2-1 18341 NULL
+sg_split_fndecl_18342_fns sg_split fndecl 4 18342 NULL
 mon_bin_read_fndecl_18346_fns mon_bin_read fndecl 3 18346 NULL
 nsm_get_handle_fndecl_18347_fns nsm_get_handle fndecl 5 18347 NULL
 snd_cs4281_BA0_read_fndecl_18348_fns snd_cs4281_BA0_read fndecl 5 18348 NULL
@@ -1286,6 +1411,7 @@ acm_alloc_minor_fndecl_18412_fns acm_alloc_minor fndecl 0 18412 &proc_sessionid_
 raw_seticmpfilter_fndecl_18427_fns raw_seticmpfilter fndecl 3 18427 NULL
 dlmfs_file_write_fndecl_18431_fns dlmfs_file_write fndecl 3 18431 NULL
 error_bar_retry_read_fndecl_18460_fns error_bar_retry_read fndecl 3 18460 NULL
+cpg_div6_register_fndecl_18462_fns cpg_div6_register fndecl 2 18462 NULL
 mddev_find_fndecl_18492_fns mddev_find fndecl 1 18492 NULL
 xfs_efd_init_fndecl_18500_fns xfs_efd_init fndecl 3 18500 NULL
 wil_pmc_read_fndecl_18503_fns wil_pmc_read fndecl 3 18503 NULL
@@ -1312,9 +1438,11 @@ dwc2_hcd_urb_alloc_fndecl_18802_fns dwc2_hcd_urb_alloc fndecl 2 18802 NULL
 ath6kl_debug_roam_tbl_event_fndecl_18811_fns ath6kl_debug_roam_tbl_event fndecl 3 18811 NULL
 gfn_to_hva_memslot_fndecl_18818_fns gfn_to_hva_memslot fndecl 2 18818 NULL
 dvb_ringbuffer_write_user_fndecl_18821_fns dvb_ringbuffer_write_user fndecl 3 18821 NULL
+clk_num_clk_onecell_data_18830_fns clk_num clk_onecell_data 0 18830 NULL
 DriverQueueDepth_DAC960_Controller_18839_fns DriverQueueDepth DAC960_Controller 0 18839 NULL
 private_data_len_ib_cm_req_param_18848_fns private_data_len ib_cm_req_param 0 18848 NULL
 length_acpi_resource_18863_fns length acpi_resource 0 18863 NULL
+uinput_ioctl_fndecl_18893_fns uinput_ioctl fndecl 2 18893 NULL
 pwr_elp_enter_read_fndecl_18911_fns pwr_elp_enter_read fndecl 3 18911 NULL
 ps_pspoll_utilization_read_fndecl_18914_fns ps_pspoll_utilization_read fndecl 3 18914 NULL
 kvm_pin_pages_fndecl_18922_fns kvm_pin_pages fndecl 2 18922 NULL
@@ -1331,12 +1459,14 @@ mei_cl_read_start_fndecl_19077_fns mei_cl_read_start fndecl 2 19077 NULL
 btrfs_qgroup_inherit_fndecl_19103_fns btrfs_qgroup_inherit fndecl 4 19103 NULL
 sctp_setsockopt_connectx_fndecl_19114_fns sctp_setsockopt_connectx fndecl 3 19114 NULL
 alloc_msg_fndecl_19115_fns alloc_msg fndecl 1 19115 NULL
+gb_module_create_fndecl_19119_fns gb_module_create fndecl 3 19119 NULL
 rx_keycache_size_p54_common_19128_fns rx_keycache_size p54_common 0 19128 NULL
 start_vivitar_cam_fndecl_19144_fns start_vivitar_cam fndecl 0 19144 NULL
 ipmi_addr_length_fndecl_19149_fns ipmi_addr_length fndecl 0 19149 NULL
 inftl_write_oob_fndecl_19154_fns inftl_write_oob fndecl 3 19154 NULL
 alloc_indirect_fndecl_19156_fns alloc_indirect fndecl 2 19156 NULL
 len_ntb_queue_entry_19166_fns len ntb_queue_entry 0 19166 NULL
+lprocfs_alloc_stats_fndecl_19181_fns lprocfs_alloc_stats fndecl 1 19181 NULL
 read_packet_fndecl_19183_fns read_packet fndecl 5 19183 NULL
 dfs_global_file_write_fndecl_19187_fns dfs_global_file_write fndecl 3 19187 NULL
 ext4_xattr_get_fndecl_19214_fns ext4_xattr_get fndecl 0 19214 NULL
@@ -1364,9 +1494,12 @@ libfc_vport_create_fndecl_19500_fns libfc_vport_create fndecl 2 19500 NULL
 cxacru_cm_get_array_fndecl_19503_fns cxacru_cm_get_array fndecl 4 19503 NULL
 ecryptfs_write_tag_70_packet_fndecl_19510_fns ecryptfs_write_tag_70_packet fndecl 6 19510 NULL
 do_pages_stat_fndecl_19526_fns do_pages_stat fndecl 2 19526 NULL
-netdev_register_kobject_fndecl_19535_fns netdev_register_kobject fndecl 0 19535 NULL
+netdev_register_kobject_fndecl_19535_fns netdev_register_kobject fndecl 0 19535 NULL nohasharray
+d40_sg_2_dmalen_fndecl_19535_fns d40_sg_2_dmalen fndecl 3-4-0 19535 &netdev_register_kobject_fndecl_19535_fns
+rtw_android_get_rssi_fndecl_19542_fns rtw_android_get_rssi fndecl 0 19542 NULL
 response_length_mlx5_ib_query_device_resp_19546_fns response_length mlx5_ib_query_device_resp 0 19546 NULL
 cmpt_entry_sz_mlx4_dev_cap_19564_fns cmpt_entry_sz mlx4_dev_cap 0 19564 NULL
+buf_size_pxa3xx_nand_info_19573_fns buf_size pxa3xx_nand_info 0 19573 NULL
 snd_seq_expand_var_event_fndecl_19602_fns snd_seq_expand_var_event fndecl 0 19602 NULL
 vmbus_establish_gpadl_fndecl_19612_fns vmbus_establish_gpadl fndecl 3 19612 NULL
 __gfn_to_pfn_memslot_fndecl_19617_fns __gfn_to_pfn_memslot fndecl 2 19617 NULL
@@ -1379,6 +1512,7 @@ bch_alloc_fndecl_19682_fns bch_alloc fndecl 1 19682 NULL
 xfs_buf_get_maps_fndecl_19702_fns xfs_buf_get_maps fndecl 2 19702 NULL
 acpi_read_fast_fndecl_19709_fns acpi_read_fast fndecl 3-2 19709 NULL
 msc_win_to_user_fndecl_19728_fns msc_win_to_user fndecl 3 19728 NULL
+mps_trc_write_fndecl_19736_fns mps_trc_write fndecl 3 19736 NULL
 max_active_conns_bnx2i_hba_19740_fns max_active_conns bnx2i_hba 0 19740 NULL
 nftl_write_oob_fndecl_19745_fns nftl_write_oob fndecl 3 19745 NULL
 mpt_raid_phys_disk_get_num_paths_fndecl_19752_fns mpt_raid_phys_disk_get_num_paths fndecl 0 19752 NULL
@@ -1388,6 +1522,7 @@ ip_send_unicast_reply_fndecl_19820_fns ip_send_unicast_reply fndecl 7 19820 NULL
 _osd_req_list_objects_fndecl_19839_fns _osd_req_list_objects fndecl 6 19839 NULL
 rpos_cm4000_dev_19844_fns rpos cm4000_dev 0 19844 NULL
 ath6kl_force_roam_write_fndecl_19881_fns ath6kl_force_roam_write fndecl 3 19881 NULL
+goldfish_audio_write_fndecl_19887_fns goldfish_audio_write fndecl 3 19887 NULL
 count_strings_fndecl_19912_fns count_strings fndecl 0 19912 NULL
 get_connectors_for_crtc_fndecl_19920_fns get_connectors_for_crtc fndecl 0 19920 NULL
 do_readv_fndecl_19922_fns do_readv fndecl 3 19922 NULL
@@ -1395,6 +1530,7 @@ __usbnet_read_cmd_fndecl_19928_fns __usbnet_read_cmd fndecl 7 19928 NULL
 dvb_ringbuffer_pkt_read_user_fndecl_19932_fns dvb_ringbuffer_pkt_read_user fndecl 2-3-5 19932 NULL
 ima_eventdigest_init_common_fndecl_19937_fns ima_eventdigest_init_common fndecl 2 19937 NULL
 max_buckets_crush_map_19942_fns max_buckets crush_map 0 19942 NULL
+snd_rawmidi_kernel_read_fndecl_19963_fns snd_rawmidi_kernel_read fndecl 3 19963 NULL
 vga_arb_read_fndecl_19973_fns vga_arb_read fndecl 3 19973 NULL
 paravirt_read_msr_fndecl_19974_fns paravirt_read_msr fndecl 0 19974 NULL
 le_max_key_size_read_fndecl_19975_fns le_max_key_size_read fndecl 3 19975 NULL
@@ -1408,21 +1544,27 @@ submit_rtpg_fndecl_20091_fns submit_rtpg fndecl 3 20091 NULL
 do_mincore_fndecl_20105_fns do_mincore fndecl 0-1-2 20105 NULL
 snd_mixart_BA1_read_fndecl_20169_fns snd_mixart_BA1_read fndecl 5 20169 NULL
 __kmalloc_track_caller_fndecl_20188_fns __kmalloc_track_caller fndecl 1 20188 NULL
+num_counters_vardecl_oprofile_perf_c_20189_fns num_counters vardecl_oprofile_perf.c 0 20189 NULL
 qp_attach_mbox_size_fndecl_20191_fns qp_attach_mbox_size fndecl 0 20191 NULL
 max_frame_size__mgslpc_info_20204_fns max_frame_size _mgslpc_info 0 20204 NULL
 sbq_len_rx_ring_20205_fns sbq_len rx_ring 0 20205 NULL
+i40e_dbg_netdev_ops_write_fndecl_20206_fns i40e_dbg_netdev_ops_write fndecl 3 20206 NULL
 kfifo_copy_from_user_fndecl_20208_fns kfifo_copy_from_user fndecl 0-4-3 20208 NULL
 sound_write_fndecl_20221_fns sound_write fndecl 3 20221 NULL
 use_sg_osst_buffer_20225_fns use_sg osst_buffer 0 20225 NULL
+ll_rw_extents_stats_seq_write_fndecl_20234_fns ll_rw_extents_stats_seq_write fndecl 3 20234 NULL
 rx_agg_bmap_size_bnxt_rx_ring_info_20244_fns rx_agg_bmap_size bnxt_rx_ring_info 0 20244 NULL
+arm_setup_iommu_dma_ops_fndecl_20272_fns arm_setup_iommu_dma_ops fndecl 3 20272 NULL
 kone_receive_fndecl_20289_fns kone_receive fndecl 4 20289 NULL
 register_queue_kobjects_fndecl_20291_fns register_queue_kobjects fndecl 0 20291 NULL
 round_pipe_size_fndecl_20302_fns round_pipe_size fndecl 0 20302 NULL
 cx18_read_pos_fndecl_20312_fns cx18_read_pos fndecl 3 20312 NULL
+wilc_spi_rx_fndecl_20314_fns wilc_spi_rx fndecl 3 20314 NULL
 ati_create_gatt_pages_fndecl_20321_fns ati_create_gatt_pages fndecl 1 20321 NULL
 num_cvts_hdmi_spec_20322_fns num_cvts hdmi_spec 0 20322 NULL
 i_ecryptfs_parse_tag_70_packet_silly_stack_20325_fns i ecryptfs_parse_tag_70_packet_silly_stack 0 20325 NULL
 cxgbi_alloc_big_mem_fndecl_20336_fns cxgbi_alloc_big_mem fndecl 1 20336 NULL
+ll_rw_offset_stats_seq_write_fndecl_20371_fns ll_rw_offset_stats_seq_write fndecl 3 20371 NULL
 drm_fb_helper_sys_read_fndecl_20376_fns drm_fb_helper_sys_read fndecl 3 20376 NULL
 sys_pwritev2_fndecl_20390_fns sys_pwritev2 fndecl 3 20390 NULL
 periodic_size_fotg210_hcd_20395_fns periodic_size fotg210_hcd 0 20395 NULL
@@ -1446,7 +1588,8 @@ pci_add_cap_save_buffer_fndecl_20593_fns pci_add_cap_save_buffer fndecl 3 20593
 nilfs_cpfile_set_snapshot_fndecl_20616_fns nilfs_cpfile_set_snapshot fndecl 2 20616 NULL
 snd_pcm_lib_readv_transfer_fndecl_20635_fns snd_pcm_lib_readv_transfer fndecl 5 20635 NULL
 cursor_size_fbcon_ops_20640_fns cursor_size fbcon_ops 0 20640 NULL
-nr_pages_ore_io_state_20648_fns nr_pages ore_io_state 0 20648 NULL
+nr_pages_ore_io_state_20648_fns nr_pages ore_io_state 0 20648 NULL nohasharray
+bcm2835_dma_create_cb_chain_fndecl_20648_fns bcm2835_dma_create_cb_chain fndecl 6 20648 &nr_pages_ore_io_state_20648_fns
 security_context_to_sid_default_fndecl_20663_fns security_context_to_sid_default fndecl 2 20663 NULL
 kvm_handle_bad_page_fndecl_20668_fns kvm_handle_bad_page fndecl 2 20668 NULL
 btrfs_dir_name_len_fndecl_20686_fns btrfs_dir_name_len fndecl 0 20686 NULL
@@ -1471,6 +1614,7 @@ shmem_pread_slow_fndecl_20845_fns shmem_pread_slow fndecl 2-3 20845 NULL nohasha
 udp_sendpage_fndecl_20845_fns udp_sendpage fndecl 3 20845 &shmem_pread_slow_fndecl_20845_fns
 acpi_copy_property_array_u64_fndecl_20846_fns acpi_copy_property_array_u64 fndecl 0 20846 NULL
 uinput_ioctl_handler_fndecl_20862_fns uinput_ioctl_handler fndecl 2 20862 NULL
+codec_reg_write_file_fndecl_20887_fns codec_reg_write_file fndecl 3 20887 NULL
 aggr_size_tx_agg_len_read_fndecl_20910_fns aggr_size_tx_agg_len_read fndecl 3 20910 NULL
 btrfs_next_leaf_fndecl_20915_fns btrfs_next_leaf fndecl 0 20915 NULL
 dbDiscardAG_fndecl_20969_fns dbDiscardAG fndecl 3 20969 NULL
@@ -1478,10 +1622,12 @@ count_cma_20973_fns count cma 0 20973 NULL nohasharray
 compat_sys_setsockopt_fndecl_20973_fns compat_sys_setsockopt fndecl 5 20973 &count_cma_20973_fns
 spidev_compat_ioc_message_fndecl_20986_fns spidev_compat_ioc_message fndecl 2 20986 NULL
 get_fd_set_fndecl_21001_fns get_fd_set fndecl 1 21001 NULL
+nouveau_debugfs_pstate_set_fndecl_21004_fns nouveau_debugfs_pstate_set fndecl 3 21004 NULL
 br_fdb_insert_fndecl_21006_fns br_fdb_insert fndecl 4 21006 NULL
 sst_hsw_module_set_param_fndecl_21007_fns sst_hsw_module_set_param fndecl 5 21007 NULL
 nvram_write_fndecl_21029_fns nvram_write fndecl 3 21029 NULL
 efivarfs_file_read_fndecl_21030_fns efivarfs_file_read fndecl 3 21030 NULL
+comedi_buf_read_n_available_fndecl_21032_fns comedi_buf_read_n_available fndecl 0 21032 NULL
 pipeline_pre_proc_swi_read_fndecl_21033_fns pipeline_pre_proc_swi_read fndecl 3 21033 NULL
 chaoskey_rng_read_fndecl_21064_fns chaoskey_rng_read fndecl 3 21064 NULL
 vcs_write_fndecl_21077_fns vcs_write fndecl 3 21077 NULL
@@ -1505,6 +1651,7 @@ fm10k_alloc_q_vector_fndecl_21285_fns fm10k_alloc_q_vector fndecl 6-4 21285 NULL
 tx_tx_starts_read_fndecl_21298_fns tx_tx_starts_read fndecl 3 21298 NULL
 nvdimm_major_vardecl_21302_fns nvdimm_major vardecl 0 21302 NULL
 aligned_kmalloc_fndecl_21311_fns aligned_kmalloc fndecl 1 21311 NULL
+apb_log_read_fndecl_21318_fns apb_log_read fndecl 3 21318 NULL
 i915_compat_ioctl_fndecl_21339_fns i915_compat_ioctl fndecl 2 21339 NULL
 temp_count_applesmc_registers_21387_fns temp_count applesmc_registers 0 21387 NULL
 ci_ll_write_fndecl_21391_fns ci_ll_write fndecl 4 21391 NULL
@@ -1513,6 +1660,7 @@ v4l2_fh_open_fndecl_21406_fns v4l2_fh_open fndecl 0 21406 NULL
 length_r3964_block_header_21407_fns length r3964_block_header 0 21407 NULL
 sctp_setsockopt_auth_key_fndecl_21442_fns sctp_setsockopt_auth_key fndecl 3 21442 NULL
 fwnode_property_read_u32_array_fndecl_21467_fns fwnode_property_read_u32_array fndecl 0 21467 NULL
+msm_otg_mode_write_fndecl_21471_fns msm_otg_mode_write fndecl 3 21471 NULL
 intel_sdvo_set_value_fndecl_21524_fns intel_sdvo_set_value fndecl 4 21524 NULL
 kvm_clear_guest_page_fndecl_21527_fns kvm_clear_guest_page fndecl 4-2 21527 NULL
 ooblen_mtd_oob_ops_21531_fns ooblen mtd_oob_ops 0 21531 NULL
@@ -1538,6 +1686,7 @@ smk_write_syslog_fndecl_21746_fns smk_write_syslog fndecl 3 21746 NULL
 id_gpio_device_21753_fns id gpio_device 0 21753 NULL
 regmap_get_val_bytes_fndecl_21774_fns regmap_get_val_bytes fndecl 0 21774 NULL
 ath6kl_fwlog_mask_read_fndecl_21777_fns ath6kl_fwlog_mask_read fndecl 3 21777 NULL
+__set_print_fmt_fndecl_21801_fns __set_print_fmt fndecl 0 21801 NULL
 __svc_create_fndecl_21804_fns __svc_create fndecl 3 21804 NULL
 nfs4_copy_file_range_fndecl_21835_fns nfs4_copy_file_range fndecl 2-5 21835 NULL
 check_load_and_stores_fndecl_21836_fns check_load_and_stores fndecl 2 21836 NULL
@@ -1546,10 +1695,12 @@ enable_read_fndecl_21846_fns enable_read fndecl 3 21846 NULL
 btrfs_file_extent_inline_len_fndecl_21847_fns btrfs_file_extent_inline_len fndecl 0 21847 NULL
 _ore_get_io_state_fndecl_21861_fns _ore_get_io_state fndecl 5-4-3 21861 NULL
 mlx4_init_icm_table_fndecl_21876_fns mlx4_init_icm_table fndecl 4-5 21876 NULL
+picolcd_debug_reset_write_fndecl_21888_fns picolcd_debug_reset_write fndecl 3 21888 NULL
 bio_integrity_alloc_fndecl_21889_fns bio_integrity_alloc fndecl 3 21889 NULL
 wilc_network_info_received_fndecl_21936_fns wilc_network_info_received fndecl 3 21936 NULL
 sel_write_avc_cache_threshold_fndecl_21955_fns sel_write_avc_cache_threshold fndecl 3 21955 NULL
 sr_read_cmd_fndecl_21992_fns sr_read_cmd fndecl 5 21992 NULL
+vpdma_alloc_desc_buf_fndecl_22005_fns vpdma_alloc_desc_buf fndecl 2 22005 NULL
 nv50_dmac_create_fndecl_22035_fns nv50_dmac_create fndecl 6 22035 NULL
 roccat_connect_fndecl_22044_fns roccat_connect fndecl 3 22044 NULL
 sel_read_enforce_fndecl_22047_fns sel_read_enforce fndecl 3 22047 NULL
@@ -1569,6 +1720,7 @@ acpi_aml_read_fndecl_22207_fns acpi_aml_read fndecl 3 22207 NULL
 xfrm_dst_alloc_copy_fndecl_22217_fns xfrm_dst_alloc_copy fndecl 3 22217 NULL nohasharray
 s_len_rvt_qp_22217_fns s_len rvt_qp 0 22217 &xfrm_dst_alloc_copy_fndecl_22217_fns
 get_max_acpi_id_fndecl_22220_fns get_max_acpi_id fndecl 0 22220 NULL
+lpfc_idiag_mbxacc_write_fndecl_22221_fns lpfc_idiag_mbxacc_write fndecl 3 22221 NULL
 thermal_adc_source_unexpected_read_fndecl_22235_fns thermal_adc_source_unexpected_read fndecl 3 22235 NULL
 depth_write_fndecl_22238_fns depth_write fndecl 3 22238 NULL
 dac960_user_command_proc_write_fndecl_22252_fns dac960_user_command_proc_write fndecl 3 22252 NULL
@@ -1604,10 +1756,12 @@ rdma_alloc_hw_stats_struct_fndecl_22643_fns rdma_alloc_hw_stats_struct fndecl 2
 sctp_setsockopt_initmsg_fndecl_22644_fns sctp_setsockopt_initmsg fndecl 3 22644 NULL
 md_probe_fndecl_22668_fns md_probe fndecl 1 22668 NULL
 init_rs_internal_fndecl_22671_fns init_rs_internal fndecl 6-1 22671 NULL
+cfs_trace_copyout_string_fndecl_22683_fns cfs_trace_copyout_string fndecl 2 22683 NULL
 tx_queue_len_read_fndecl_22692_fns tx_queue_len_read fndecl 3 22692 NULL
 fpregs_set_fndecl_22730_fns fpregs_set fndecl 4 22730 NULL
 xprt_alloc_fndecl_22736_fns xprt_alloc fndecl 2 22736 NULL
 SYSC_syslog_fndecl_22742_fns SYSC_syslog fndecl 3 22742 NULL
+slave_num_ad7280_state_22755_fns slave_num ad7280_state 0 22755 NULL
 alloc_perm_bits_fndecl_22767_fns alloc_perm_bits fndecl 2 22767 NULL
 tomoyo_round2_fndecl_22781_fns tomoyo_round2 fndecl 0 22781 NULL
 agp_create_memory_fndecl_22816_fns agp_create_memory fndecl 1 22816 NULL
@@ -1615,11 +1769,14 @@ pwr_sleep_cycle_avg_read_fndecl_22826_fns pwr_sleep_cycle_avg_read fndecl 3 2282
 nfs_pgarray_set_fndecl_22830_fns nfs_pgarray_set fndecl 2 22830 NULL
 gigaset_initdriver_fndecl_22839_fns gigaset_initdriver fndecl 2 22839 NULL
 xs_sendpages_fndecl_22864_fns xs_sendpages fndecl 3 22864 NULL
+stm32_dma_alloc_desc_fndecl_22870_fns stm32_dma_alloc_desc fndecl 1 22870 NULL
 max_part_vardecl_brd_c_22873_fns max_part vardecl_brd.c 0 22873 NULL
 __btrfs_cow_block_fndecl_22902_fns __btrfs_cow_block fndecl 0 22902 NULL
+lmd_exclude_count_lustre_mount_data_22915_fns lmd_exclude_count lustre_mount_data 0 22915 NULL
 cifs_xattr_set_fndecl_22930_fns cifs_xattr_set fndecl 6 22930 NULL
 cp210x_read_reg_block_fndecl_22947_fns cp210x_read_reg_block fndecl 4 22947 NULL
 i2cdev_read_fndecl_22949_fns i2cdev_read fndecl 3 22949 NULL
+lov_ost_pool_init_fndecl_22956_fns lov_ost_pool_init fndecl 2 22956 NULL
 ipc_alloc_fndecl_22971_fns ipc_alloc fndecl 1 22971 NULL
 kernfs_file_direct_read_fndecl_22981_fns kernfs_file_direct_read fndecl 3 22981 NULL
 acpi_battery_write_alarm_fndecl_22987_fns acpi_battery_write_alarm fndecl 3 22987 NULL
@@ -1629,6 +1786,7 @@ ioctl_private_iw_point_fndecl_23018_fns ioctl_private_iw_point fndecl 7 23018 NU
 nested_get_page_fndecl_23031_fns nested_get_page fndecl 2 23031 NULL
 gnttab_free_count_vardecl_grant_table_c_23049_fns gnttab_free_count vardecl_grant-table.c 0 23049 NULL
 fcoe_ctlr_device_add_fndecl_23058_fns fcoe_ctlr_device_add fndecl 3 23058 NULL
+usb_dmac_desc_alloc_fndecl_23059_fns usb_dmac_desc_alloc fndecl 2 23059 NULL
 to_clkrc_fndecl_23074_fns to_clkrc fndecl 0-2-3 23074 NULL
 vicam_set_camera_power_fndecl_23091_fns vicam_set_camera_power fndecl 0 23091 NULL
 rproc_state_write_fndecl_23143_fns rproc_state_write fndecl 3 23143 NULL
@@ -1642,6 +1800,7 @@ devm_create_dax_dev_fndecl_23226_fns devm_create_dax_dev fndecl 3 23226 NULL
 ivtv_v4l2_read_fndecl_23231_fns ivtv_v4l2_read fndecl 3 23231 NULL
 rx_rx_defrag_read_fndecl_23241_fns rx_rx_defrag_read fndecl 3 23241 NULL
 __alloc_bootmem_node_fndecl_23259_fns __alloc_bootmem_node fndecl 2 23259 NULL
+write_flush_pipefs_fndecl_23286_fns write_flush_pipefs fndecl 3 23286 NULL
 tail_userio_device_23332_fns tail userio_device 0 23332 NULL
 compat_sys_vmsplice_fndecl_23344_fns compat_sys_vmsplice fndecl 3 23344 NULL
 v9fs_fid_xattr_get_fndecl_23361_fns v9fs_fid_xattr_get fndecl 0 23361 NULL
@@ -1668,6 +1827,7 @@ cosa_write_fndecl_23549_fns cosa_write fndecl 3 23549 NULL
 syslog_print_fndecl_23584_fns syslog_print fndecl 2 23584 NULL
 tail_len_beacon_attr_23587_fns tail_len beacon_attr 0 23587 NULL
 max_cmd_size_ath6kl_bmi_23591_fns max_cmd_size ath6kl_bmi 0 23591 NULL
+dn_setsockopt_fndecl_23593_fns dn_setsockopt fndecl 5 23593 NULL
 read_file_war_stats_fndecl_23607_fns read_file_war_stats fndecl 3 23607 NULL
 nr_grant_frames_vardecl_grant_table_c_23609_fns nr_grant_frames vardecl_grant-table.c 0 23609 NULL
 nr_tags_blk_mq_tags_23638_fns nr_tags blk_mq_tags 0 23638 NULL
@@ -1676,7 +1836,8 @@ lbs_rdmac_read_fndecl_23729_fns lbs_rdmac_read fndecl 3 23729 NULL
 rx_rx_defrag_end_read_fndecl_23786_fns rx_rx_defrag_end_read fndecl 3 23786 NULL
 read_buffer_length_lego_usb_tower_23787_fns read_buffer_length lego_usb_tower 0 23787 NULL
 nvme_trans_modesel_data_fndecl_23803_fns nvme_trans_modesel_data fndecl 4 23803 NULL
-desc_list_len_timb_dma_desc_23804_fns desc_list_len timb_dma_desc 0 23804 NULL
+desc_list_len_timb_dma_desc_23804_fns desc_list_len timb_dma_desc 0 23804 NULL nohasharray
+_find_next_bit_be_fndecl_23804_fns _find_next_bit_be fndecl 0 23804 &desc_list_len_timb_dma_desc_23804_fns
 compat_sock_setsockopt_fndecl_23812_fns compat_sock_setsockopt fndecl 5 23812 NULL
 sctp_init_cause_fndecl_23813_fns sctp_init_cause fndecl 3 23813 NULL
 carl9170_alloc_fndecl_23816_fns carl9170_alloc fndecl 1 23816 NULL
@@ -1686,22 +1847,28 @@ sel_read_policyvers_fndecl_23844_fns sel_read_policyvers fndecl 3 23844 &padzero
 subbufs_consumed_rchan_buf_23869_fns subbufs_consumed rchan_buf 0 23869 NULL
 load_msg_fndecl_23884_fns load_msg fndecl 2 23884 NULL
 snd_korg1212_copy_to_fndecl_23887_fns snd_korg1212_copy_to fndecl 6 23887 NULL
+tracing_trace_options_write_fndecl_23946_fns tracing_trace_options_write fndecl 3 23946 NULL
 init_q_fndecl_23959_fns init_q fndecl 4 23959 NULL
 memstick_alloc_host_fndecl_23965_fns memstick_alloc_host fndecl 1 23965 NULL
 xfs_buf_item_get_format_fndecl_23982_fns xfs_buf_item_get_format fndecl 2 23982 NULL
 pci_request_selected_regions_fndecl_23994_fns pci_request_selected_regions fndecl 0 23994 NULL
 extract_crng_user_fndecl_23995_fns extract_crng_user fndecl 2 23995 NULL
 iscsi_session_setup_fndecl_24023_fns iscsi_session_setup fndecl 4-5-3 24023 NULL
+vpdma_create_desc_list_fndecl_24044_fns vpdma_create_desc_list fndecl 2 24044 NULL
 buf_size_conf_writedata_24046_fns buf_size conf_writedata 0 24046 NULL
 bNumEndpoints_usb_interface_descriptor_24052_fns bNumEndpoints usb_interface_descriptor 0 24052 NULL
+shdma_init_fndecl_24059_fns shdma_init fndecl 3 24059 NULL
 ws_row_winsize_24064_fns ws_row winsize 0 24064 NULL
 ebx_v86_regs_24072_fns ebx v86_regs 0 24072 NULL
 raydium_i2c_send_fndecl_24090_fns raydium_i2c_send fndecl 4 24090 NULL
+cfs_trace_allocate_string_buffer_fndecl_24094_fns cfs_trace_allocate_string_buffer fndecl 2 24094 NULL
 cnt_nfp_net_rx_ring_24099_fns cnt nfp_net_rx_ring 0 24099 NULL
 size_sge_rspq_24120_fns size sge_rspq 0 24120 NULL
 error_state_read_fndecl_24136_fns error_state_read fndecl 6 24136 NULL
+tegra_clk_init_fndecl_24143_fns tegra_clk_init fndecl 3-2 24143 NULL
 o2net_send_message_vec_fndecl_24188_fns o2net_send_message_vec fndecl 4 24188 NULL
 modules_num_mcp_trace_meta_24193_fns modules_num mcp_trace_meta 0 24193 NULL
+raw_write_fndecl_24208_fns raw_write fndecl 3 24208 NULL
 carl9170_cmd_buf_fndecl_24229_fns carl9170_cmd_buf fndecl 3 24229 NULL
 __nodes_weight_fndecl_24239_fns __nodes_weight fndecl 0 24239 NULL
 iio_storage_bytes_for_timestamp_fndecl_24260_fns iio_storage_bytes_for_timestamp fndecl 0 24260 NULL
@@ -1716,8 +1883,10 @@ compat_sys_preadv_fndecl_24404_fns compat_sys_preadv fndecl 3 24404 NULL
 completed_vringh_24407_fns completed vringh 0 24407 NULL
 max_scbs_hw_profile_24409_fns max_scbs hw_profile 0 24409 NULL
 srpt_cm_rej_recv_fndecl_24427_fns srpt_cm_rej_recv fndecl 4 24427 NULL
+ni_gpct_device_construct_fndecl_24433_fns ni_gpct_device_construct fndecl 5 24433 NULL
 size_tty_buffer_24438_fns size tty_buffer 0 24438 NULL
 fuse_request_alloc_nofs_fndecl_24442_fns fuse_request_alloc_nofs fndecl 1 24442 NULL
+ptlrpc_lprocfs_nrs_seq_write_fndecl_24446_fns ptlrpc_lprocfs_nrs_seq_write fndecl 3 24446 NULL
 unlink_queued_fndecl_24470_fns unlink_queued fndecl 3 24470 NULL
 dtim_interval_read_fndecl_24477_fns dtim_interval_read fndecl 3 24477 NULL
 dvb_video_write_fndecl_24545_fns dvb_video_write fndecl 3 24545 NULL
@@ -1741,6 +1910,7 @@ wilc_set_join_req_fndecl_24725_fns wilc_set_join_req fndecl 4-6 24725 NULL
 outlen_ib_udata_24729_fns outlen ib_udata 0 24729 NULL
 HiSax_readstatus_fndecl_24731_fns HiSax_readstatus fndecl 2 24731 NULL
 smk_read_direct_fndecl_24744_fns smk_read_direct fndecl 3 24744 NULL
+n_ao_urbs_usbduxsigma_private_24760_fns n_ao_urbs usbduxsigma_private 0 24760 NULL
 inftl_read_oob_fndecl_24761_fns inftl_read_oob fndecl 3 24761 NULL
 _sdma_txadd_daddr_fndecl_24789_fns _sdma_txadd_daddr fndecl 5 24789 NULL
 gnttab_expand_fndecl_24794_fns gnttab_expand fndecl 1 24794 NULL
@@ -1757,13 +1927,16 @@ zero_the_pointer_fndecl_25003_fns zero_the_pointer fndecl 0 25003 NULL
 default_density_st_modedef_25006_fns default_density st_modedef 0 25006 NULL
 sdp0length__SpiCfgData_25007_fns sdp0length _SpiCfgData 0 25007 NULL
 acpi_gpio_count_fndecl_25052_fns acpi_gpio_count fndecl 0 25052 NULL
-buffer_size_snd_compr_runtime_25072_fns buffer_size snd_compr_runtime 0 25072 NULL
+buffer_size_snd_compr_runtime_25072_fns buffer_size snd_compr_runtime 0 25072 NULL nohasharray
+vme_user_write_fndecl_25072_fns vme_user_write fndecl 3 25072 &buffer_size_snd_compr_runtime_25072_fns
 mlxsw_reg_trans_wait_fndecl_25101_fns mlxsw_reg_trans_wait fndecl 0 25101 NULL
 num_pbls_ocrdma_hw_mr_25102_fns num_pbls ocrdma_hw_mr 0 25102 NULL
 compat_sys_select_fndecl_25104_fns compat_sys_select fndecl 1 25104 NULL
-fsm_init_fndecl_25109_fns fsm_init fndecl 2 25109 NULL
+fsm_init_fndecl_25109_fns fsm_init fndecl 2 25109 NULL nohasharray
+output_fndecl_25109_fns output fndecl 3 25109 &fsm_init_fndecl_25109_fns
 i40e_allocate_virt_mem_d_fndecl_25132_fns i40e_allocate_virt_mem_d fndecl 3 25132 NULL
 create_table_fndecl_25158_fns create_table fndecl 2 25158 NULL
+ux500_regulator_debug_init_fndecl_25207_fns ux500_regulator_debug_init fndecl 3 25207 NULL
 npeers_cm_dev_25216_fns npeers cm_dev 0 25216 NULL
 of_property_read_string_helper_fndecl_25257_fns of_property_read_string_helper fndecl 0-5 25257 NULL
 stk_allocate_buffers_fndecl_25264_fns stk_allocate_buffers fndecl 2 25264 NULL
@@ -1779,6 +1952,7 @@ native_read_msr_fndecl_25394_fns native_read_msr fndecl 0 25394 NULL
 memblock_virt_alloc_try_nid_fndecl_25409_fns memblock_virt_alloc_try_nid fndecl 1 25409 NULL nohasharray
 memsize_t4_cq_25409_fns memsize t4_cq 0 25409 &memblock_virt_alloc_try_nid_fndecl_25409_fns
 snd_pcm_lib_read_transfer_fndecl_25411_fns snd_pcm_lib_read_transfer fndecl 5 25411 NULL
+ptlrpcd_per_cpt_max_vardecl_ptlrpcd_c_25416_fns ptlrpcd_per_cpt_max vardecl_ptlrpcd.c 0 25416 NULL
 smk_read_ptrace_fndecl_25461_fns smk_read_ptrace fndecl 3 25461 NULL
 viafb_vt1636_proc_write_fndecl_25473_fns viafb_vt1636_proc_write fndecl 3 25473 NULL
 max_buckets_out_mpt_lan_priv_25498_fns max_buckets_out mpt_lan_priv 0 25498 NULL
@@ -1790,6 +1964,7 @@ smk_write_unconfined_fndecl_25530_fns smk_write_unconfined fndecl 3 25530 NULL
 wsm_write_mib_fndecl_25575_fns wsm_write_mib fndecl 4 25575 NULL
 cifs_mapchar_fndecl_25586_fns cifs_mapchar fndecl 0 25586 NULL
 isr_tx_exch_complete_read_fndecl_25588_fns isr_tx_exch_complete_read fndecl 3 25588 NULL
+udelay_test_write_fndecl_25596_fns udelay_test_write fndecl 3 25596 NULL
 isr_hw_pm_mode_changes_read_fndecl_25597_fns isr_hw_pm_mode_changes_read fndecl 3 25597 NULL nohasharray
 dma_tx_requested_read_fndecl_25597_fns dma_tx_requested_read fndecl 3 25597 &isr_hw_pm_mode_changes_read_fndecl_25597_fns
 max_cmd_sg_entries_ctlr_info_25601_fns max_cmd_sg_entries ctlr_info 0 25601 NULL
@@ -1815,16 +1990,19 @@ ext4_kvmalloc_fndecl_25823_fns ext4_kvmalloc fndecl 1 25823 NULL
 pages_per_rd_bio_scrub_ctx_25831_fns pages_per_rd_bio scrub_ctx 0 25831 NULL
 rvt_reg_user_mr_fndecl_25852_fns rvt_reg_user_mr fndecl 4 25852 NULL
 ishtp_dma_num_slots_ishtp_device_25858_fns ishtp_dma_num_slots ishtp_device 0 25858 NULL
+alloc_tx_struct_fndecl_25886_fns alloc_tx_struct fndecl 1 25886 NULL
 walk_page_range_fndecl_25894_fns walk_page_range fndecl 0 25894 NULL
 ath6kl_regdump_read_fndecl_25898_fns ath6kl_regdump_read fndecl 3 25898 NULL
 nfp_net_tx_ring_alloc_fndecl_25907_fns nfp_net_tx_ring_alloc fndecl 2 25907 NULL
 kvm_vcpu_gfn_to_hva_prot_fndecl_25911_fns kvm_vcpu_gfn_to_hva_prot fndecl 2 25911 NULL
-mtd_concat_create_fndecl_25923_fns mtd_concat_create fndecl 2 25923 NULL
+mtd_concat_create_fndecl_25923_fns mtd_concat_create fndecl 2 25923 NULL nohasharray
+d40_pool_lli_alloc_fndecl_25923_fns d40_pool_lli_alloc fndecl 3 25923 &mtd_concat_create_fndecl_25923_fns
 get_kcore_size_fndecl_25930_fns get_kcore_size fndecl 0 25930 NULL
 smk_write_onlycap_fndecl_25939_fns smk_write_onlycap fndecl 3 25939 NULL
 kvm_hv_set_msr_common_fndecl_25940_fns kvm_hv_set_msr_common fndecl 3 25940 NULL
 __media_entity_enum_init_fndecl_25953_fns __media_entity_enum_init fndecl 2 25953 NULL
 tx_max_out_mpt_lan_priv_25974_fns tx_max_out mpt_lan_priv 0 25974 NULL
+picolcd_debug_eeprom_read_fndecl_26054_fns picolcd_debug_eeprom_read fndecl 3 26054 NULL
 _pcol_init_fndecl_26056_fns _pcol_init fndecl 2 26056 NULL
 ep0_write_fndecl_26075_fns ep0_write fndecl 3 26075 NULL
 alloc_bitmap_fndecl_26079_fns alloc_bitmap fndecl 1 26079 NULL
@@ -1851,11 +2029,13 @@ ept_prefetch_gpte_fndecl_26343_fns ept_prefetch_gpte fndecl 4 26343 NULL
 kovaplus_sysfs_read_fndecl_26362_fns kovaplus_sysfs_read fndecl 6 26362 NULL
 __krealloc_fndecl_26394_fns __krealloc fndecl 2 26394 NULL
 get_user_cpu_mask_fndecl_26398_fns get_user_cpu_mask fndecl 2 26398 NULL
+omap_hwmod_count_resources_fndecl_26400_fns omap_hwmod_count_resources fndecl 0 26400 NULL
 krealloc_fndecl_26415_fns krealloc fndecl 2 26415 NULL
 acpi_os_allocate_fndecl_26431_fns acpi_os_allocate fndecl 1 26431 NULL
 start_cif_cam_fndecl_26442_fns start_cif_cam fndecl 0 26442 NULL
 usbat_bulk_read_fndecl_26469_fns usbat_bulk_read fndecl 4 26469 NULL
 queue_cnt_fndecl_26484_fns queue_cnt fndecl 0 26484 NULL
+videobuf_read_stream_fndecl_26495_fns videobuf_read_stream fndecl 3 26495 NULL
 setkey_fndecl_26520_fns setkey fndecl 3 26520 NULL nohasharray
 num_tc_mlx5e_params_26520_fns num_tc mlx5e_params 0 26520 &setkey_fndecl_26520_fns
 npages_kvm_memory_slot_26541_fns npages kvm_memory_slot 0 26541 NULL
@@ -1868,6 +2048,7 @@ hdac_hdmi_fill_widget_info_fndecl_26629_fns hdac_hdmi_fill_widget_info fndecl 8
 cache_write_fndecl_26630_fns cache_write fndecl 3 26630 NULL
 read_file_antenna_fndecl_26645_fns read_file_antenna fndecl 3 26645 NULL
 iio_device_add_event_sysfs_fndecl_26664_fns iio_device_add_event_sysfs fndecl 0 26664 NULL
+gb_operation_unidirectional_timeout_fndecl_26694_fns gb_operation_unidirectional_timeout fndecl 4 26694 NULL
 len_tipc_mon_domain_26711_fns len tipc_mon_domain 0 26711 NULL
 wil_read_back_fndecl_26724_fns wil_read_back fndecl 3 26724 NULL
 cache_downcall_fndecl_26737_fns cache_downcall fndecl 3 26737 NULL
@@ -1885,8 +2066,10 @@ hsi_register_board_info_fndecl_26863_fns hsi_register_board_info fndecl 2 26863
 kvm_read_nested_guest_page_fndecl_26890_fns kvm_read_nested_guest_page fndecl 5 26890 NULL
 read_file_phy_err_fndecl_26901_fns read_file_phy_err fndecl 3 26901 NULL
 reexecute_instruction_fndecl_26906_fns reexecute_instruction fndecl 2 26906 NULL
+edma_prep_slave_sg_fndecl_26917_fns edma_prep_slave_sg fndecl 3 26917 NULL
 cache_ctr_fndecl_26919_fns cache_ctr fndecl 2 26919 NULL
 round_event_name_len_fndecl_26935_fns round_event_name_len fndecl 0 26935 NULL
+axi_dmac_prep_dma_cyclic_fndecl_26953_fns axi_dmac_prep_dma_cyclic fndecl 3-4 26953 NULL
 kvm_vcpu_gfn_to_hva_fndecl_26957_fns kvm_vcpu_gfn_to_hva fndecl 2 26957 NULL
 iso_sched_alloc_fndecl_26962_fns iso_sched_alloc fndecl 1 26962 NULL nohasharray
 wep_key_not_found_read_fndecl_26962_fns wep_key_not_found_read fndecl 3 26962 &iso_sched_alloc_fndecl_26962_fns
@@ -1904,6 +2087,7 @@ sys32_fadvise64_fndecl_27136_fns sys32_fadvise64 fndecl 4 27136 NULL
 do_proc_readlink_fndecl_27139_fns do_proc_readlink fndecl 3 27139 NULL
 compat_sys_pselect6_fndecl_27146_fns compat_sys_pselect6 fndecl 1 27146 NULL
 nilfs_attach_checkpoint_fndecl_27152_fns nilfs_attach_checkpoint fndecl 2 27152 NULL
+cfs_hash_rehash_bits_fndecl_27208_fns cfs_hash_rehash_bits fndecl 0 27208 NULL
 mx_sb_len_sg_io_hdr_27261_fns mx_sb_len sg_io_hdr 0 27261 NULL
 alloc_async_fndecl_27283_fns alloc_async fndecl 1 27283 NULL
 ath6kl_connect_event_fndecl_27304_fns ath6kl_connect_event fndecl 8-9 27304 NULL
@@ -1922,12 +2106,15 @@ evdev_ioctl_compat_fndecl_27400_fns evdev_ioctl_compat fndecl 2 27400 NULL
 max_packages_vardecl_uncore_c_27449_fns max_packages vardecl_uncore.c 0 27449 NULL
 tool_peer_mw_read_fndecl_27484_fns tool_peer_mw_read fndecl 3 27484 NULL
 local_nentries_xpc_channel_27489_fns local_nentries xpc_channel 0 27489 NULL
+dvb_demux_read_fndecl_27534_fns dvb_demux_read fndecl 3 27534 NULL
+lov_obd_packmd_fndecl_27573_fns lov_obd_packmd fndecl 0 27573 NULL
 pci_add_ext_cap_save_buffer_fndecl_27587_fns pci_add_ext_cap_save_buffer fndecl 3 27587 NULL
 dvb_usercopy_fndecl_27591_fns dvb_usercopy fndecl 2 27591 NULL
 md_alloc_fndecl_27600_fns md_alloc fndecl 1 27600 NULL
 iscsi_create_flashnode_conn_fndecl_27605_fns iscsi_create_flashnode_conn fndecl 4 27605 NULL
 error_res_proc_context_27648_fns error res_proc_context 0 27648 NULL
 nvkm_event_init_fndecl_27654_fns nvkm_event_init fndecl 2-3 27654 NULL
+gb_operation_create_common_fndecl_27662_fns gb_operation_create_common fndecl 3 27662 NULL
 masq_device_event_fndecl_27665_fns masq_device_event fndecl 0 27665 NULL
 mr_write_fndecl_27670_fns mr_write fndecl 0 27670 NULL
 tlbflush_write_file_fndecl_27685_fns tlbflush_write_file fndecl 3 27685 NULL
@@ -1942,6 +2129,8 @@ ioat_dca_count_dca_slots_fndecl_27732_fns ioat_dca_count_dca_slots fndecl 0 2773
 word_size_e1000_eeprom_info_27741_fns word_size e1000_eeprom_info 0 27741 NULL
 si_blocks_ocfs2_slot_info_27753_fns si_blocks ocfs2_slot_info 0 27753 NULL
 sel_read_class_fndecl_27758_fns sel_read_class fndecl 3 27758 NULL
+dwc3_link_state_write_fndecl_27762_fns dwc3_link_state_write fndecl 3 27762 NULL
+rtw_android_get_link_speed_fndecl_27772_fns rtw_android_get_link_speed fndecl 0 27772 NULL
 nr_ports_solos_card_27804_fns nr_ports solos_card 0 27804 NULL
 roundup_brcmf_sdio_27833_fns roundup brcmf_sdio 0 27833 NULL nohasharray
 type_kqid_27833_fns type kqid 0 27833 &roundup_brcmf_sdio_27833_fns
@@ -1951,10 +2140,14 @@ listxattr_fndecl_27890_fns listxattr fndecl 3 27890 NULL
 lbq_len_rx_ring_27913_fns lbq_len rx_ring 0 27913 NULL
 numchips_lpddr_private_27938_fns numchips lpddr_private 0 27938 NULL
 usbat_hp8200e_rw_block_test_fndecl_27957_fns usbat_hp8200e_rw_block_test fndecl 5-13 27957 NULL
+pcbit_writecmd_fndecl_27967_fns pcbit_writecmd fndecl 2 27967 NULL
+parser_init_byte_stream_fndecl_27973_fns parser_init_byte_stream fndecl 2 27973 NULL
+mptctl_ioctl_fndecl_27984_fns mptctl_ioctl fndecl 2 27984 NULL
 __nf_ct_ext_add_length_fndecl_27999_fns __nf_ct_ext_add_length fndecl 3 27999 NULL
 xfs_iext_inline_to_direct_fndecl_28019_fns xfs_iext_inline_to_direct fndecl 2 28019 NULL
 populate_dir_fndecl_28020_fns populate_dir fndecl 0 28020 NULL nohasharray
 write_file_dump_fndecl_28020_fns write_file_dump fndecl 3 28020 &populate_dir_fndecl_28020_fns
+cfs_array_alloc_fndecl_28042_fns cfs_array_alloc fndecl 2 28042 NULL
 num_intr_mic_intr_info_28048_fns num_intr mic_intr_info 0 28048 NULL
 bio_slab_max_vardecl_bio_c_28087_fns bio_slab_max vardecl_bio.c 0 28087 NULL
 fnic_trace_ctrl_read_fndecl_28098_fns fnic_trace_ctrl_read fndecl 3 28098 NULL
@@ -1969,9 +2162,11 @@ relay_file_read_fndecl_28240_fns relay_file_read fndecl 3 28240 NULL
 pwr_disable_ps_read_fndecl_28267_fns pwr_disable_ps_read fndecl 3 28267 NULL
 pbdma_nr_gk104_fifo_28278_fns pbdma_nr gk104_fifo 0 28278 NULL
 xhci_segment_alloc_fndecl_28310_fns xhci_segment_alloc fndecl 3 28310 NULL
+comedi_read_fndecl_28316_fns comedi_read fndecl 3 28316 NULL
 npages_mlx4_buf_28321_fns npages mlx4_buf 0 28321 NULL
 set_video_mode_Kiara_fndecl_28325_fns set_video_mode_Kiara fndecl 4 28325 NULL
 fnic_trace_ctrl_write_fndecl_28350_fns fnic_trace_ctrl_write fndecl 3 28350 NULL
+dma_lch_count_vardecl_dma_c_28369_fns dma_lch_count vardecl_dma.c 0 28369 NULL
 usbat_multiple_write_fndecl_28375_fns usbat_multiple_write fndecl 4 28375 NULL
 bio_integrity_trim_fndecl_28376_fns bio_integrity_trim fndecl 2-3 28376 NULL
 simple_attr_write_fndecl_28383_fns simple_attr_write fndecl 3 28383 NULL
@@ -1997,15 +2192,19 @@ wil_write_back_fndecl_28568_fns wil_write_back fndecl 3 28568 NULL
 ufx_i2c_wait_busy_fndecl_28574_fns ufx_i2c_wait_busy fndecl 0 28574 NULL
 charcount_console_font_op_28585_fns charcount console_font_op 0 28585 NULL
 i915_gem_gtt_pread_fndecl_28595_fns i915_gem_gtt_pread fndecl 3-4 28595 NULL
+tmc_read_fndecl_28597_fns tmc_read fndecl 3 28597 NULL
 menu_count_uvc_xu_control_mapping_28599_fns menu_count uvc_xu_control_mapping 0 28599 NULL nohasharray
 bm_status_write_fndecl_28599_fns bm_status_write fndecl 3 28599 &menu_count_uvc_xu_control_mapping_28599_fns
+output_async_fndecl_28621_fns output_async fndecl 3 28621 NULL
 hfi1_rcvarr_split_vardecl_init_c_28624_fns hfi1_rcvarr_split vardecl_init.c 0 28624 NULL
 rvt_rkey_ok_fndecl_28649_fns rvt_rkey_ok fndecl 3-4 28649 NULL
 alloc_size_chunk_28657_fns alloc_size chunk 0 28657 NULL
 offset_cache_reader_28697_fns offset cache_reader 0 28697 NULL
 mlx4_init_cmpt_table_fndecl_28706_fns mlx4_init_cmpt_table fndecl 3 28706 NULL
+lpfc_idiag_ctlacc_write_fndecl_28715_fns lpfc_idiag_ctlacc_write fndecl 3 28715 NULL
 oprofilefs_ulong_to_user_fndecl_28717_fns oprofilefs_ulong_to_user fndecl 3 28717 NULL
-note_last_dentry_fndecl_28724_fns note_last_dentry fndecl 3 28724 NULL
+note_last_dentry_fndecl_28724_fns note_last_dentry fndecl 3 28724 NULL nohasharray
+d40_prep_memcpy_fndecl_28724_fns d40_prep_memcpy fndecl 4 28724 &note_last_dentry_fndecl_28724_fns
 skb_cow_data_fndecl_28734_fns skb_cow_data fndecl 0 28734 NULL
 batadv_iv_ogm_orig_del_if_fndecl_28743_fns batadv_iv_ogm_orig_del_if fndecl 2 28743 NULL
 batadv_iv_ogm_orig_add_if_fndecl_28753_fns batadv_iv_ogm_orig_add_if fndecl 2 28753 NULL
@@ -2033,8 +2232,11 @@ devm_mfd_add_devices_fndecl_29043_fns devm_mfd_add_devices fndecl 4 29043 NULL
 qib_get_base_info_fndecl_29050_fns qib_get_base_info fndecl 3 29050 NULL
 str_to_user_fndecl_29056_fns str_to_user fndecl 2 29056 NULL
 ___alloc_bootmem_fndecl_29057_fns ___alloc_bootmem fndecl 1 29057 NULL
+i40e_dbg_command_write_fndecl_29070_fns i40e_dbg_command_write fndecl 3 29070 NULL
 dev_irnet_write_fndecl_29077_fns dev_irnet_write fndecl 3 29077 NULL
-pci_set_power_state_fndecl_29124_fns pci_set_power_state fndecl 0 29124 NULL
+ablkcipher_edesc_alloc_fndecl_29119_fns ablkcipher_edesc_alloc fndecl 2 29119 NULL
+pci_set_power_state_fndecl_29124_fns pci_set_power_state fndecl 0 29124 NULL nohasharray
+sca3000_read_first_n_hw_rb_fndecl_29124_fns sca3000_read_first_n_hw_rb fndecl 2 29124 &pci_set_power_state_fndecl_29124_fns
 tool_peer_mw_write_fndecl_29137_fns tool_peer_mw_write fndecl 3 29137 NULL
 max_dump_cnt_ramoops_context_29141_fns max_dump_cnt ramoops_context 0 29141 NULL
 kmem_zalloc_fndecl_29157_fns kmem_zalloc fndecl 1 29157 NULL
@@ -2045,6 +2247,7 @@ dvb_dmxdev_buffer_write_fndecl_29234_fns dvb_dmxdev_buffer_write fndecl 0 29234
 count_qed_tid_seg_29243_fns count qed_tid_seg 0 29243 NULL
 ptc_proc_write_fndecl_29247_fns ptc_proc_write fndecl 3 29247 NULL
 hfi1_copy_sge_fndecl_29257_fns hfi1_copy_sge fndecl 3 29257 NULL
+rtw_malloc2d_fndecl_29269_fns rtw_malloc2d fndecl 3-2-1 29269 NULL
 ib_uverbs_open_xrcd_fndecl_29276_fns ib_uverbs_open_xrcd fndecl 4-5 29276 NULL
 xfs_handle_to_dentry_fndecl_29300_fns xfs_handle_to_dentry fndecl 3 29300 NULL
 rawv6_seticmpfilter_fndecl_29306_fns rawv6_seticmpfilter fndecl 5 29306 NULL
@@ -2052,6 +2255,7 @@ fnic_reset_stats_write_fndecl_29314_fns fnic_reset_stats_write fndecl 3 29314 NU
 total_size_orangefs_bufmap_29333_fns total_size orangefs_bufmap 0 29333 NULL
 alloced_snd_array_29353_fns alloced snd_array 0 29353 NULL
 fuse_get_req_fndecl_29358_fns fuse_get_req fndecl 2 29358 NULL
+tx_ring_size_pxa168_eth_private_29372_fns tx_ring_size pxa168_eth_private 0 29372 NULL
 ib_uverbs_unmarshall_recv_fndecl_29384_fns ib_uverbs_unmarshall_recv fndecl 5 29384 NULL
 __alloc_bootmem_low_nopanic_fndecl_29400_fns __alloc_bootmem_low_nopanic fndecl 1 29400 NULL nohasharray
 octeon_alloc_recv_info_fndecl_29400_fns octeon_alloc_recv_info fndecl 1 29400 &__alloc_bootmem_low_nopanic_fndecl_29400_fns
@@ -2069,7 +2273,8 @@ acpi_rs_set_resource_header_fndecl_29642_fns acpi_rs_set_resource_header fndecl
 er_extcount_xfs_ext_irec_29646_fns er_extcount xfs_ext_irec 0 29646 NULL
 control_read_fndecl_29649_fns control_read fndecl 6 29649 NULL
 count_vfio_pci_hot_reset_info_29655_fns count vfio_pci_hot_reset_info 0 29655 NULL
-split_node_fndecl_29659_fns split_node fndecl 0 29659 NULL
+split_node_fndecl_29659_fns split_node fndecl 0 29659 NULL nohasharray
+ls_num_lprocfs_stats_29659_fns ls_num lprocfs_stats 0 29659 &split_node_fndecl_29659_fns
 rds_message_alloc_fndecl_29702_fns rds_message_alloc fndecl 1 29702 NULL
 maxframe_vardecl_n_hdlc_c_29719_fns maxframe vardecl_n_hdlc.c 0 29719 NULL
 sel_write_disable_fndecl_29724_fns sel_write_disable fndecl 3 29724 NULL
@@ -2086,6 +2291,7 @@ error_error_frame_ctrl_read_fndecl_29919_fns error_error_frame_ctrl_read fndecl
 sctp_getsockopt_maxseg_fndecl_29922_fns sctp_getsockopt_maxseg fndecl 2 29922 NULL
 sys_syslog_fndecl_29929_fns sys_syslog fndecl 3 29929 NULL
 cciss_proc_write_fndecl_29952_fns cciss_proc_write fndecl 3 29952 NULL
+msc_nfinalizers_lnet_msg_container_30006_fns msc_nfinalizers lnet_msg_container 0 30006 NULL
 __qlcnic_pci_sriov_enable_fndecl_30010_fns __qlcnic_pci_sriov_enable fndecl 2 30010 NULL
 snd_rme9652_capture_copy_fndecl_30012_fns snd_rme9652_capture_copy fndecl 5 30012 NULL
 read_file_spectral_count_fndecl_30019_fns read_file_spectral_count fndecl 3 30019 NULL
@@ -2096,12 +2302,15 @@ do_compat_pselect_fndecl_30093_fns do_compat_pselect fndecl 1 30093 NULL
 ecryptfs_decode_and_decrypt_filename_fndecl_30104_fns ecryptfs_decode_and_decrypt_filename fndecl 5 30104 NULL
 if_real_bytes_xfs_ifork_30126_fns if_real_bytes xfs_ifork 0 30126 NULL
 send_section_size_netvsc_device_30166_fns send_section_size netvsc_device 0 30166 NULL
+rx_ring_size_pxa168_eth_private_30172_fns rx_ring_size pxa168_eth_private 0 30172 NULL
 event_phy_transmit_error_read_fndecl_30196_fns event_phy_transmit_error_read fndecl 3 30196 NULL
+hrp_nthrs_ptlrpc_hr_partition_30214_fns hrp_nthrs ptlrpc_hr_partition 0 30214 NULL
 minor_rbd_device_30216_fns minor rbd_device 0 30216 NULL
 SetLineNumber_fndecl_30236_fns SetLineNumber fndecl 0 30236 NULL
 minor_count_vardecl_30272_fns minor_count vardecl 0 30272 NULL
 count_argc_fndecl_30296_fns count_argc fndecl 0 30296 NULL
 alloc_alien_cache_fndecl_30308_fns alloc_alien_cache fndecl 2 30308 NULL
+tracing_buffers_read_fndecl_30311_fns tracing_buffers_read fndecl 3 30311 NULL
 kvm_write_guest_cached_fndecl_30321_fns kvm_write_guest_cached fndecl 4 30321 NULL
 avc_stream_set_format_fndecl_30322_fns avc_stream_set_format fndecl 5 30322 NULL
 init_mr_info_fndecl_30331_fns init_mr_info fndecl 3 30331 NULL
@@ -2110,9 +2319,11 @@ nr_ops_rdma_rw_ctx_30338_fns nr_ops rdma_rw_ctx 0 30338 NULL
 len_snd_seq_ev_ext_30374_fns len snd_seq_ev_ext 0 30374 NULL
 max_span_mlxsw_resources_30386_fns max_span mlxsw_resources 0 30386 NULL
 hwm_tx_init_fndecl_30411_fns hwm_tx_init fndecl 4 30411 NULL
+get_pages_vram_fndecl_30416_fns get_pages_vram fndecl 2 30416 NULL
 decode_opaque_fixed_fndecl_30421_fns decode_opaque_fixed fndecl 3 30421 NULL
 flat_state_cnt_vardecl_processor_idle_c_30427_fns flat_state_cnt vardecl_processor_idle.c 0 30427 NULL
 of_irq_count_fndecl_30438_fns of_irq_count fndecl 0 30438 NULL
+comedi_alloc_spriv_fndecl_30449_fns comedi_alloc_spriv fndecl 2 30449 NULL
 btrfs_sync_file_fndecl_30480_fns btrfs_sync_file fndecl 3 30480 NULL
 rd_build_prot_space_fndecl_30490_fns rd_build_prot_space fndecl 3-2 30490 NULL
 vhost_add_used_n_fndecl_30491_fns vhost_add_used_n fndecl 3 30491 NULL
@@ -2122,6 +2333,7 @@ nvme_submit_sync_cmd_fndecl_30530_fns nvme_submit_sync_cmd fndecl 4 30530 NULL
 wMaxCommand_wdm_device_30565_fns wMaxCommand wdm_device 0 30565 NULL
 wil_read_led_blink_time_fndecl_30567_fns wil_read_led_blink_time fndecl 3 30567 NULL
 snd_pcm_oss_write1_fndecl_30571_fns snd_pcm_oss_write1 fndecl 3 30571 NULL
+wiidebug_drm_write_fndecl_30572_fns wiidebug_drm_write fndecl 3 30572 NULL
 mbox_test_message_read_fndecl_30588_fns mbox_test_message_read fndecl 3 30588 NULL
 get_scq_fndecl_30594_fns get_scq fndecl 2 30594 NULL
 tifm_alloc_adapter_fndecl_30596_fns tifm_alloc_adapter fndecl 1 30596 NULL
@@ -2132,6 +2344,7 @@ xfrm_hash_alloc_fndecl_30694_fns xfrm_hash_alloc fndecl 1 30694 NULL
 rx_filter_accum_arp_pend_requests_read_fndecl_30696_fns rx_filter_accum_arp_pend_requests_read fndecl 3 30696 NULL
 bm_entry_read_fndecl_30707_fns bm_entry_read fndecl 3 30707 NULL
 sched_autogroup_write_fndecl_30715_fns sched_autogroup_write fndecl 3 30715 NULL
+__alloc_preds_fndecl_30727_fns __alloc_preds fndecl 2 30727 NULL
 lbs_threshold_write_fndecl_30733_fns lbs_threshold_write fndecl 5 30733 NULL
 mlx5_wq_cyc_get_size_fndecl_30741_fns mlx5_wq_cyc_get_size fndecl 0 30741 NULL
 copy_ucs2_to_user_len_fndecl_30743_fns copy_ucs2_to_user_len fndecl 3 30743 NULL
@@ -2144,6 +2357,7 @@ kobj_map_fndecl_30797_fns kobj_map fndecl 3-2 30797 NULL nohasharray
 ogm_buff_len_batadv_priv_bat_v_30797_fns ogm_buff_len batadv_priv_bat_v 0 30797 &kobj_map_fndecl_30797_fns
 shadow_root_level_kvm_mmu_30842_fns shadow_root_level kvm_mmu 0 30842 NULL
 saa7164_buffer_alloc_user_fndecl_30856_fns saa7164_buffer_alloc_user fndecl 2 30856 NULL
+lov_ost_pool_add_fndecl_30857_fns lov_ost_pool_add fndecl 3 30857 NULL
 snd_emu10k1_fx8010_read_fndecl_30870_fns snd_emu10k1_fx8010_read fndecl 5 30870 NULL
 do_sync_fndecl_30871_fns do_sync fndecl 1 30871 NULL
 num_vec_nicpf_30886_fns num_vec nicpf 0 30886 NULL
@@ -2158,7 +2372,9 @@ __list_lru_count_one_fndecl_30962_fns __list_lru_count_one fndecl 0 30962 NULL
 tx_tx_prepared_descs_read_fndecl_30998_fns tx_tx_prepared_descs_read fndecl 3 30998 NULL
 btrfs_search_slot_fndecl_31011_fns btrfs_search_slot fndecl 0 31011 NULL
 max_order_mthca_buddy_31017_fns max_order mthca_buddy 0 31017 NULL
+hisi_clk_init_fndecl_31037_fns hisi_clk_init fndecl 2 31037 NULL
 krb5_nfold_fndecl_31038_fns krb5_nfold fndecl 1-3 31038 NULL
+samsung_clk_alloc_reg_dump_fndecl_31054_fns samsung_clk_alloc_reg_dump fndecl 2 31054 NULL
 le_max_key_size_write_fndecl_31068_fns le_max_key_size_write fndecl 3 31068 NULL
 get_pipes_num_fndecl_31084_fns get_pipes_num fndecl 0 31084 NULL
 nvme_trans_fmt_get_parm_header_fndecl_31087_fns nvme_trans_fmt_get_parm_header fndecl 2 31087 NULL
@@ -2169,6 +2385,7 @@ read_fndecl_31142_fns read fndecl 3 31142 NULL
 size_stp_policy_id_31167_fns size stp_policy_id 0 31167 NULL
 bm_realloc_pages_fndecl_31172_fns bm_realloc_pages fndecl 2 31172 NULL
 ffs_ep0_write_fndecl_31181_fns ffs_ep0_write fndecl 3 31181 NULL
+op_size_ost_pool_31182_fns op_size ost_pool 0 31182 NULL
 nf_nat_sip_expect_fndecl_31193_fns nf_nat_sip_expect fndecl 8 31193 NULL
 max_packet_size_in_snd_line6_pcm_31207_fns max_packet_size_in snd_line6_pcm 0 31207 NULL
 agp_generic_alloc_user_fndecl_31213_fns agp_generic_alloc_user fndecl 1 31213 NULL nohasharray
@@ -2208,6 +2425,7 @@ compat_import_iovec_fndecl_31721_fns compat_import_iovec fndecl 3 31721 NULL
 transport_len_sockaddr_rxrpc_31772_fns transport_len sockaddr_rxrpc 0 31772 NULL
 i40e_init_msix_fndecl_31776_fns i40e_init_msix fndecl 0 31776 NULL
 fore200e_chunk_alloc_fndecl_31782_fns fore200e_chunk_alloc fndecl 4-3 31782 NULL
+dev_config_fndecl_31785_fns dev_config fndecl 3 31785 NULL
 afs_cell_lookup_fndecl_31793_fns afs_cell_lookup fndecl 2 31793 NULL
 target_submit_cmd_map_sgls_fndecl_31806_fns target_submit_cmd_map_sgls fndecl 11 31806 NULL
 snd_malloc_sgbuf_pages_fndecl_31815_fns snd_malloc_sgbuf_pages fndecl 2 31815 NULL
@@ -2220,6 +2438,7 @@ tty_get_baud_rate_fndecl_31871_fns tty_get_baud_rate fndecl 0 31871 &profile_rem
 s_hdrwords_rvt_qp_31882_fns s_hdrwords rvt_qp 0 31882 NULL
 max_tasks_bnx2fc_hba_31893_fns max_tasks bnx2fc_hba 0 31893 NULL
 it821x_firmware_command_fndecl_31911_fns it821x_firmware_command fndecl 3 31911 NULL
+cfs_cpt_number_fndecl_31929_fns cfs_cpt_number fndecl 0 31929 NULL
 mlx5_vzalloc_fndecl_31940_fns mlx5_vzalloc fndecl 1 31940 NULL
 arcfb_write_fndecl_31981_fns arcfb_write fndecl 3 31981 NULL
 record_size_ramoops_context_31989_fns record_size ramoops_context 0 31989 NULL nohasharray
@@ -2233,8 +2452,12 @@ kvm_mmu_page_set_gfn_fndecl_32050_fns kvm_mmu_page_set_gfn fndecl 2 32050 NULL
 g_num_of_iommus_vardecl_intel_iommu_c_32059_fns g_num_of_iommus vardecl_intel-iommu.c 0 32059 NULL
 assoc_sta_del_all_sta_32069_fns assoc_sta del_all_sta 0 32069 NULL
 rproc_recovery_write_fndecl_32074_fns rproc_recovery_write fndecl 3 32074 NULL
+ahash_edesc_alloc_fndecl_32097_fns ahash_edesc_alloc fndecl 2 32097 NULL
 pci_scan_slot_fndecl_32102_fns pci_scan_slot fndecl 2 32102 NULL
+lpfc_debugfs_max_slow_ring_trc_vardecl_lpfc_debugfs_c_32130_fns lpfc_debugfs_max_slow_ring_trc vardecl_lpfc_debugfs.c 0 32130 NULL
+pwm_buf_sz_usbduxsigma_private_32156_fns pwm_buf_sz usbduxsigma_private 0 32156 NULL
 ioat_alloc_ring_fndecl_32201_fns ioat_alloc_ring fndecl 2 32201 NULL
+nr_spis_v2m_data_32203_fns nr_spis v2m_data 0 32203 NULL
 xdi_copy_from_user_fndecl_32216_fns xdi_copy_from_user fndecl 4 32216 NULL
 generic_bin_search_fndecl_32235_fns generic_bin_search fndecl 0 32235 NULL
 roccat_common2_sysfs_read_fndecl_32252_fns roccat_common2_sysfs_read fndecl 6 32252 NULL
@@ -2270,6 +2493,7 @@ ev_next_dev_data_32542_fns ev_next dev_data 0 32542 NULL
 yurex_write_fndecl_32554_fns yurex_write fndecl 3 32554 NULL
 sys_prctl_fndecl_32557_fns sys_prctl fndecl 4 32557 NULL
 joydev_compat_ioctl_fndecl_32558_fns joydev_compat_ioctl fndecl 2 32558 NULL
+gb_loopback_sync_transfer_fndecl_32561_fns gb_loopback_sync_transfer fndecl 2 32561 NULL
 tx_tx_exch_expiry_read_fndecl_32574_fns tx_tx_exch_expiry_read fndecl 3 32574 NULL
 msg_print_ext_header_fndecl_32580_fns msg_print_ext_header fndecl 0 32580 NULL
 mlx5_modify_nic_vport_vlans_fndecl_32595_fns mlx5_modify_nic_vport_vlans fndecl 3 32595 NULL
@@ -2279,6 +2503,7 @@ wa_nep_queue_fndecl_32649_fns wa_nep_queue fndecl 2 32649 NULL
 dvb_ringbuffer_pkt_next_fndecl_32657_fns dvb_ringbuffer_pkt_next fndecl 0-2 32657 NULL
 nrof_flowrings_brcmf_msgbuf_32666_fns nrof_flowrings brcmf_msgbuf 0 32666 NULL
 compressed_bio_size_fndecl_32676_fns compressed_bio_size fndecl 0-2 32676 NULL
+ab3100_get_set_reg_fndecl_32681_fns ab3100_get_set_reg fndecl 3 32681 NULL
 radeon_drm_ioctl_fndecl_32696_fns radeon_drm_ioctl fndecl 2 32696 NULL
 write_file_ani_fndecl_32709_fns write_file_ani fndecl 3 32709 NULL
 sysfs_merge_group_fndecl_32710_fns sysfs_merge_group fndecl 0 32710 NULL
@@ -2297,14 +2522,17 @@ size_mem_cgroup_threshold_ary_32855_fns size mem_cgroup_threshold_ary 0 32855 NU
 uvc_debugfs_stats_read_fndecl_32856_fns uvc_debugfs_stats_read fndecl 3 32856 NULL
 dvb_ringbuffer_read_user_fndecl_32877_fns dvb_ringbuffer_read_user fndecl 3-0 32877 NULL nohasharray
 dz_divisor_dn_zone_32877_fns dz_divisor dn_zone 0 32877 &dvb_ringbuffer_read_user_fndecl_32877_fns
-btrfs_cow_block_fndecl_32885_fns btrfs_cow_block fndecl 0 32885 NULL
+btrfs_cow_block_fndecl_32885_fns btrfs_cow_block fndecl 0 32885 NULL nohasharray
+wilc_spi_write_fndecl_32885_fns wilc_spi_write fndecl 4 32885 &btrfs_cow_block_fndecl_32885_fns
 snoop_table_size_ib_mad_qp_info_32891_fns snoop_table_size ib_mad_qp_info 0 32891 NULL
 snd_gus_dram_read_fndecl_32893_fns snd_gus_dram_read fndecl 4 32893 NULL
 num_vfs_qlcnic_sriov_32913_fns num_vfs qlcnic_sriov 0 32913 NULL
 ipv6_getsockopt_sticky_fndecl_32916_fns ipv6_getsockopt_sticky fndecl 5 32916 NULL
 ttm_alloc_new_pages_fndecl_32971_fns ttm_alloc_new_pages fndecl 5 32971 NULL
 mtdchar_write_fndecl_33004_fns mtdchar_write fndecl 3 33004 NULL
+ion_ioctl_fndecl_33013_fns ion_ioctl fndecl 2 33013 NULL
 mlxsw_sp_port_ets_maxrate_set_fndecl_33018_fns mlxsw_sp_port_ets_maxrate_set fndecl 0 33018 NULL
+snd_rawmidi_read_fndecl_33026_fns snd_rawmidi_read fndecl 3 33026 NULL
 pipeline_pre_to_defrag_swi_read_fndecl_33042_fns pipeline_pre_to_defrag_swi_read fndecl 3 33042 NULL
 dev_read_fndecl_33058_fns dev_read fndecl 3 33058 NULL
 iov_iter_copy_from_user_atomic_fndecl_33059_fns iov_iter_copy_from_user_atomic fndecl 4 33059 NULL
@@ -2314,6 +2542,7 @@ ocfs2_control_read_fndecl_33094_fns ocfs2_control_read fndecl 3 33094 NULL
 write_gssp_fndecl_33095_fns write_gssp fndecl 3 33095 NULL
 length_rvt_sge_33107_fns length rvt_sge 0 33107 NULL
 fl_create_fndecl_33120_fns fl_create fndecl 5 33120 NULL
+__iommu_alloc_buffer_fndecl_33122_fns __iommu_alloc_buffer fndecl 2 33122 NULL
 drm_atomic_helper_legacy_gamma_set_fndecl_33124_fns drm_atomic_helper_legacy_gamma_set fndecl 5 33124 NULL nohasharray
 gnttab_map_fndecl_33124_fns gnttab_map fndecl 2 33124 &drm_atomic_helper_legacy_gamma_set_fndecl_33124_fns
 ib_uverbs_alloc_mw_fndecl_33131_fns ib_uverbs_alloc_mw fndecl 4-5 33131 NULL
@@ -2331,6 +2560,7 @@ alloc_apertures_fndecl_33250_fns alloc_apertures fndecl 1 33250 NULL
 mem_size_ramoops_platform_data_33263_fns mem_size ramoops_platform_data 0 33263 NULL
 drv_file_st_partstat_33277_fns drv_file st_partstat 0 33277 NULL
 ecryptfs_encrypt_and_encode_filename_fndecl_33297_fns ecryptfs_encrypt_and_encode_filename fndecl 5 33297 NULL
+tracing_set_trace_write_fndecl_33307_fns tracing_set_trace_write fndecl 3 33307 NULL
 ima_show_htable_value_fndecl_33315_fns ima_show_htable_value fndecl 2 33315 NULL
 acpi_gsb_i2c_read_bytes_fndecl_33322_fns acpi_gsb_i2c_read_bytes fndecl 4 33322 NULL
 stk_prepare_sio_buffers_fndecl_33347_fns stk_prepare_sio_buffers fndecl 2 33347 NULL
@@ -2360,6 +2590,7 @@ __kfifo_out_fndecl_33612_fns __kfifo_out fndecl 3-0 33612 NULL
 nf_getsockopt_fndecl_33630_fns nf_getsockopt fndecl 0 33630 NULL nohasharray
 scif_setup_qp_accept_fndecl_33630_fns scif_setup_qp_accept fndecl 4 33630 &nf_getsockopt_fndecl_33630_fns
 memblock_size_vxge_hw_mempool_33647_fns memblock_size vxge_hw_mempool 0 33647 NULL
+rxe_mem_init_fast_fndecl_33682_fns rxe_mem_init_fast fndecl 3 33682 NULL
 diva_get_driver_info_fndecl_33684_fns diva_get_driver_info fndecl 0 33684 NULL
 vlsi_alloc_ring_fndecl_33720_fns vlsi_alloc_ring fndecl 3-4 33720 NULL
 stub_chips_nr_vardecl_i2c_stub_c_33739_fns stub_chips_nr vardecl_i2c-stub.c 0 33739 NULL
@@ -2367,6 +2598,8 @@ xfs_buf_read_map_fndecl_33742_fns xfs_buf_read_map fndecl 3 33742 NULL nohasharr
 do_pwritev_fndecl_33742_fns do_pwritev fndecl 3 33742 &xfs_buf_read_map_fndecl_33742_fns
 cx2341x_ctrl_new_std_fndecl_33782_fns cx2341x_ctrl_new_std fndecl 4 33782 NULL
 pcmcia_replace_cis_fndecl_33785_fns pcmcia_replace_cis fndecl 3 33785 NULL
+sca3000_read_data_fndecl_33787_fns sca3000_read_data fndecl 4 33787 NULL
+gicv2m_init_one_fndecl_33791_fns gicv2m_init_one fndecl 3 33791 NULL
 snd_find_free_minor_fndecl_33820_fns snd_find_free_minor fndecl 0 33820 NULL
 dn_ide_drive_s_33823_fns dn ide_drive_s 0 33823 NULL
 add_partition_fndecl_33847_fns add_partition fndecl 2 33847 NULL
@@ -2383,6 +2616,7 @@ pm8001_store_update_fw_fndecl_33975_fns pm8001_store_update_fw fndecl 4 33975 NU
 mwifiex_create_custom_regdomain_fndecl_33978_fns mwifiex_create_custom_regdomain fndecl 3 33978 NULL nohasharray
 cwarn_cm4000_dev_33978_fns cwarn cm4000_dev 0 33978 &mwifiex_create_custom_regdomain_fndecl_33978_fns
 usbat_bulk_write_fndecl_33983_fns usbat_bulk_write fndecl 4 33983 NULL
+spi_data_write_fndecl_33987_fns spi_data_write fndecl 3 33987 NULL
 ethtool_copy_validate_indir_fndecl_33994_fns ethtool_copy_validate_indir fndecl 4 33994 NULL
 count_xfs_attr_sf_hdr_33996_fns count xfs_attr_sf_hdr 0 33996 NULL
 of_n_size_cells_fndecl_34009_fns of_n_size_cells fndecl 0 34009 NULL
@@ -2393,9 +2627,12 @@ __kvm_write_guest_page_fndecl_34021_fns __kvm_write_guest_page fndecl 5-2 34021
 wil_addba_tx_request_fndecl_34039_fns wil_addba_tx_request fndecl 3 34039 NULL
 conf_read_fndecl_34041_fns conf_read fndecl 3 34041 NULL
 ide_do_setfeature_fndecl_34050_fns ide_do_setfeature fndecl 3 34050 NULL
+lov_get_stripecnt_fndecl_34066_fns lov_get_stripecnt fndecl 3 34066 NULL
+vme_user_read_fndecl_34105_fns vme_user_read fndecl 3 34105 NULL
 vb2_dvb_register_adapter_fndecl_34122_fns vb2_dvb_register_adapter fndecl 0 34122 NULL
 do_command_fndecl_34128_fns do_command fndecl 0 34128 NULL
 switchdev_port_fdb_add_fndecl_34145_fns switchdev_port_fdb_add fndecl 5 34145 NULL
+arm_iommu_alloc_attrs_fndecl_34147_fns arm_iommu_alloc_attrs fndecl 2 34147 NULL
 substream_count_snd_pcm_str_34149_fns substream_count snd_pcm_str 0 34149 NULL
 si476x_radio_read_rds_blckcnt_blob_fndecl_34192_fns si476x_radio_read_rds_blckcnt_blob fndecl 3 34192 NULL
 xen_evtchn_max_channels_fndecl_34213_fns xen_evtchn_max_channels fndecl 0 34213 NULL
@@ -2408,6 +2645,7 @@ tty_port_register_device_fndecl_34276_fns tty_port_register_device fndecl 3 3427
 vb2_core_queue_init_fndecl_34278_fns vb2_core_queue_init fndecl 0 34278 NULL
 write_file_frameerrors_fndecl_34370_fns write_file_frameerrors fndecl 3 34370 NULL
 sel_read_handle_status_fndecl_34392_fns sel_read_handle_status fndecl 3 34392 NULL
+rawv6_setsockopt_fndecl_34422_fns rawv6_setsockopt fndecl 5 34422 NULL
 offsets_size_binder_transaction_data_34461_fns offsets_size binder_transaction_data 0 34461 NULL
 fd_copyin_fndecl_34468_fns fd_copyin fndecl 3 34468 NULL
 num_rx_queues_net_device_34480_fns num_rx_queues net_device 0 34480 NULL
@@ -2416,6 +2654,7 @@ acpi_ex_get_serial_access_length_fndecl_34496_fns acpi_ex_get_serial_access_leng
 count_res_proc_context_34514_fns count res_proc_context 0 34514 NULL
 __add_keyed_refs_fndecl_34517_fns __add_keyed_refs fndecl 3 34517 NULL
 ogm_buff_len_batadv_hard_iface_bat_iv_34532_fns ogm_buff_len batadv_hard_iface_bat_iv 0 34532 NULL
+speakup_file_write_fndecl_34533_fns speakup_file_write fndecl 3 34533 NULL
 dvb_aplay_fndecl_34555_fns dvb_aplay fndecl 3 34555 NULL
 rx_ring_num_config_param_34571_fns rx_ring_num config_param 0 34571 NULL
 sb16_copy_from_user_fndecl_34575_fns sb16_copy_from_user fndecl 10-7-6 34575 NULL
@@ -2456,8 +2695,10 @@ bus_add_device_fndecl_34970_fns bus_add_device fndecl 0 34970 NULL
 rfkill_fop_read_fndecl_34980_fns rfkill_fop_read fndecl 3 34980 NULL
 kfd_gtt_sa_init_fndecl_34996_fns kfd_gtt_sa_init fndecl 3-2 34996 NULL
 error_elp_while_tx_read_fndecl_35002_fns error_elp_while_tx_read fndecl 3 35002 NULL
+arpc_alloc_fndecl_35008_fns arpc_alloc fndecl 2 35008 NULL
 ocfs2_control_write_fndecl_35010_fns ocfs2_control_write fndecl 3 35010 NULL
 kzalloc_fndecl_35015_fns kzalloc fndecl 1 35015 NULL
+lpfc_idiag_pcicfg_write_fndecl_35022_fns lpfc_idiag_pcicfg_write fndecl 3 35022 NULL
 set_video_mode_Timon_fndecl_35074_fns set_video_mode_Timon fndecl 4 35074 NULL
 number_scales_vardecl_powernow_k7_c_35080_fns number_scales vardecl_powernow-k7.c 0 35080 NULL
 sys_kexec_file_load_fndecl_35083_fns sys_kexec_file_load fndecl 3 35083 NULL nohasharray
@@ -2496,7 +2737,8 @@ btrfs_fdatawrite_range_fndecl_35427_fns btrfs_fdatawrite_range fndecl 3 35427 NU
 major_gendisk_35443_fns major gendisk 0 35443 NULL
 sel_write_relabel_fndecl_35464_fns sel_write_relabel fndecl 3 35464 NULL
 kmem_realloc_fndecl_35475_fns kmem_realloc fndecl 2 35475 NULL
-qxl_alloc_client_monitors_config_fndecl_35491_fns qxl_alloc_client_monitors_config fndecl 2 35491 NULL
+qxl_alloc_client_monitors_config_fndecl_35491_fns qxl_alloc_client_monitors_config fndecl 2 35491 NULL nohasharray
+ptlrpcd_partner_group_size_vardecl_ptlrpcd_c_35491_fns ptlrpcd_partner_group_size vardecl_ptlrpcd.c 0 35491 &qxl_alloc_client_monitors_config_fndecl_35491_fns
 sched_feat_write_fndecl_35505_fns sched_feat_write fndecl 3 35505 NULL
 spi_res_alloc_fndecl_35507_fns spi_res_alloc fndecl 3 35507 NULL
 dlci_change_mtu_fndecl_35513_fns dlci_change_mtu fndecl 2 35513 NULL
@@ -2525,6 +2767,7 @@ iscsi_pool_init_fndecl_35730_fns iscsi_pool_init fndecl 2-4 35730 &kobject_set_n
 c4_add_card_fndecl_35755_fns c4_add_card fndecl 3 35755 NULL
 used_tty_buffer_35815_fns used tty_buffer 0 35815 NULL
 paging32_get_level1_sp_gpa_fndecl_35837_fns paging32_get_level1_sp_gpa fndecl 0 35837 NULL
+size_mvneta_tx_queue_35842_fns size mvneta_tx_queue 0 35842 NULL
 start_vga_cam_fndecl_35860_fns start_vga_cam fndecl 0 35860 NULL
 cifs_utf16_bytes_fndecl_35914_fns cifs_utf16_bytes fndecl 0 35914 NULL
 max_packet_size_out_snd_line6_pcm_35915_fns max_packet_size_out snd_line6_pcm 0 35915 NULL
@@ -2539,11 +2782,13 @@ ccid_getsockopt_builtin_ccids_fndecl_35985_fns ccid_getsockopt_builtin_ccids fnd
 v4l2_event_subscribe_fndecl_36004_fns v4l2_event_subscribe fndecl 3 36004 NULL
 igb_alloc_q_vector_fndecl_36009_fns igb_alloc_q_vector fndecl 6-4 36009 NULL nohasharray
 bdev_logical_block_size_fndecl_36009_fns bdev_logical_block_size fndecl 0 36009 &igb_alloc_q_vector_fndecl_36009_fns
+num_of_memcpy_chans_stedma40_platform_data_36011_fns num_of_memcpy_chans stedma40_platform_data 0 36011 NULL
 n_sg_vscsibk_pend_36028_fns n_sg vscsibk_pend 0 36028 NULL
 count_sgentry64_36033_fns count sgentry64 0 36033 NULL
 wdm_write_fndecl_36084_fns wdm_write fndecl 3 36084 NULL
 xfs_trans_read_buf_map_fndecl_36121_fns xfs_trans_read_buf_map fndecl 5 36121 NULL
 sock_setbindtodevice_fndecl_36202_fns sock_setbindtodevice fndecl 3 36202 NULL
+qsfp1_debugfs_write_fndecl_36216_fns qsfp1_debugfs_write fndecl 3 36216 NULL
 MaxDevHandle_mpt3sas_facts_36227_fns MaxDevHandle mpt3sas_facts 0 36227 NULL
 data_queues_rt2x00_dev_36241_fns data_queues rt2x00_dev 0 36241 NULL
 vhost_kvzalloc_fndecl_36242_fns vhost_kvzalloc fndecl 1 36242 NULL
@@ -2554,9 +2799,11 @@ iwl_pcie_txq_alloc_fndecl_36278_fns iwl_pcie_txq_alloc fndecl 3 36278 NULL
 collection_size_hid_device_36289_fns collection_size hid_device 0 36289 NULL
 ssl_next_nilfs_snapshot_list_36302_fns ssl_next nilfs_snapshot_list 0 36302 NULL
 paging64_prefetch_gpte_fndecl_36303_fns paging64_prefetch_gpte fndecl 4 36303 NULL
+tegra_fb_alloc_fndecl_36306_fns tegra_fb_alloc fndecl 4 36306 NULL
 move_buffer_data_fndecl_36318_fns move_buffer_data fndecl 2 36318 NULL
 apei_exec_run_optional_fndecl_36319_fns apei_exec_run_optional fndecl 0 36319 NULL
-ima_write_template_field_data_fndecl_36336_fns ima_write_template_field_data fndecl 2 36336 NULL
+ima_write_template_field_data_fndecl_36336_fns ima_write_template_field_data fndecl 2 36336 NULL nohasharray
+create_trace_kprobe_fndecl_36336_fns create_trace_kprobe fndecl 1 36336 &ima_write_template_field_data_fndecl_36336_fns
 pset_prop_read_u32_array_fndecl_36338_fns pset_prop_read_u32_array fndecl 0 36338 NULL
 iowarrior_read_fndecl_36344_fns iowarrior_read fndecl 3 36344 NULL
 osd_req_write_kern_fndecl_36349_fns osd_req_write_kern fndecl 5 36349 NULL
@@ -2578,6 +2825,7 @@ capture_chips_pcxhr_mgr_36555_fns capture_chips pcxhr_mgr 0 36555 NULL
 __register_chrdev_fndecl_36572_fns __register_chrdev fndecl 2-3 36572 NULL
 do_sys_poll_fndecl_36574_fns do_sys_poll fndecl 2 36574 NULL
 audio_write_fndecl_36582_fns audio_write fndecl 4 36582 NULL
+scan_cnt_ad7280_state_36592_fns scan_cnt ad7280_state 0 36592 NULL
 alloc_fw_event_work_fndecl_36593_fns alloc_fw_event_work fndecl 1 36593 NULL
 __br_fdb_add_fndecl_36596_fns __br_fdb_add fndecl 6 36596 NULL
 write_file_spec_scan_ctl_fndecl_36603_fns write_file_spec_scan_ctl fndecl 3 36603 NULL
@@ -2612,7 +2860,9 @@ gpe_count_acpi_gpe_block_info_37173_fns gpe_count acpi_gpe_block_info 0 37173 NU
 fdb_add_entry_fndecl_37182_fns fdb_add_entry fndecl 6 37182 NULL
 of_address_to_resource_fndecl_37191_fns of_address_to_resource fndecl 2 37191 NULL
 ssd1307fb_write_fndecl_37192_fns ssd1307fb_write fndecl 3 37192 NULL
+hur_len_fndecl_37216_fns hur_len fndecl 0 37216 NULL
 tw686x_real_fps_fndecl_37230_fns tw686x_real_fps fndecl 0-2 37230 NULL
+bt_bmc_read_fndecl_37232_fns bt_bmc_read fndecl 3 37232 NULL
 copy_entries_to_user_fndecl_37276_fns copy_entries_to_user fndecl 1 37276 NULL
 cyz_load_fw_fndecl_37290_fns cyz_load_fw fndecl 0 37290 NULL
 num_bna_mem_info_37294_fns num bna_mem_info 0 37294 NULL
@@ -2622,6 +2872,7 @@ kstrtobool_from_user_fndecl_37318_fns kstrtobool_from_user fndecl 2 37318 NULL
 line6_midibuf_init_fndecl_37338_fns line6_midibuf_init fndecl 2 37338 NULL
 mdio_mii_ioctl_fndecl_37342_fns mdio_mii_ioctl fndecl 0 37342 NULL
 dlen_pg_read_hdr_37352_fns dlen pg_read_hdr 0 37352 NULL
+ieee80211_alloc_txb_fndecl_37358_fns ieee80211_alloc_txb fndecl 1 37358 NULL
 orig_bi_size_usb_idmouse_37372_fns orig_bi_size usb_idmouse 0 37372 NULL
 tx_tx_exch_pending_read_fndecl_37385_fns tx_tx_exch_pending_read fndecl 3 37385 NULL
 hsc_msg_len_set_fndecl_37398_fns hsc_msg_len_set fndecl 2 37398 NULL
@@ -2629,6 +2880,7 @@ ath6kl_wmi_implicit_create_pstream_fndecl_37407_fns ath6kl_wmi_implicit_create_p
 nice_workqueue_attrs_37437_fns nice workqueue_attrs 0 37437 NULL
 devnum_mtd_blktrans_dev_37465_fns devnum mtd_blktrans_dev 0 37465 NULL nohasharray
 cfi_read_query_fndecl_37465_fns cfi_read_query fndecl 0 37465 &devnum_mtd_blktrans_dev_37465_fns
+omap_dma_reserve_channels_vardecl_dma_c_37479_fns omap_dma_reserve_channels vardecl_dma.c 0 37479 NULL
 do_compat_preadv64_fndecl_37482_fns do_compat_preadv64 fndecl 3 37482 NULL
 ath10k_mac_create_fndecl_37485_fns ath10k_mac_create fndecl 1 37485 NULL
 max_virtual_routers_mlxsw_resources_37525_fns max_virtual_routers mlxsw_resources 0 37525 NULL
@@ -2636,6 +2888,7 @@ dwords_qib_verbs_txreq_37537_fns dwords qib_verbs_txreq 0 37537 NULL
 fuse_fsync_common_fndecl_37543_fns fuse_fsync_common fndecl 2-3 37543 NULL
 btrfs_io_bio_alloc_fndecl_37544_fns btrfs_io_bio_alloc fndecl 2 37544 NULL
 num_rand_bytes_ecryptfs_write_tag_70_packet_silly_stack_37548_fns num_rand_bytes ecryptfs_write_tag_70_packet_silly_stack 0 37548 NULL
+n_ai_urbs_usbdux_private_37595_fns n_ai_urbs usbdux_private 0 37595 NULL
 tx_tx_start_data_read_fndecl_37616_fns tx_tx_start_data_read fndecl 3 37616 NULL
 usb_stor_bulk_srb_fndecl_37641_fns usb_stor_bulk_srb fndecl 2 37641 NULL
 copy_ctr_args_fndecl_37642_fns copy_ctr_args fndecl 2 37642 NULL
@@ -2644,7 +2897,10 @@ nvme_trans_ext_inq_page_fndecl_37691_fns nvme_trans_ext_inq_page fndecl 3 37691
 run_start_commands_fndecl_37723_fns run_start_commands fndecl 0 37723 NULL
 mon_bin_get_event_fndecl_37740_fns mon_bin_get_event fndecl 4-6 37740 NULL
 pwr_rcvd_beacons_read_fndecl_37751_fns pwr_rcvd_beacons_read fndecl 3 37751 NULL
+cache_read_procfs_fndecl_37761_fns cache_read_procfs fndecl 3 37761 NULL
 kvm_kvzalloc_fndecl_37773_fns kvm_kvzalloc fndecl 1 37773 NULL
+ds9490r_read_block_fndecl_37799_fns ds9490r_read_block fndecl 3 37799 NULL
+ifc_len_ifconf_37839_fns ifc_len ifconf 0 37839 NULL
 __kfifo_skip_r_fndecl_37849_fns __kfifo_skip_r fndecl 2 37849 NULL
 sctp_init_cause_fixed_fndecl_37853_fns sctp_init_cause_fixed fndecl 3 37853 NULL
 ioread16be_fndecl_37854_fns ioread16be fndecl 0 37854 NULL
@@ -2654,9 +2910,11 @@ num_node_state_fndecl_37870_fns num_node_state fndecl 0 37870 NULL
 dm_bufio_client_create_fndecl_37889_fns dm_bufio_client_create fndecl 4 37889 NULL
 logi_dj_hidpp_event_fndecl_37899_fns logi_dj_hidpp_event fndecl 4 37899 NULL
 pvr2_i2c_basic_op_fndecl_37917_fns pvr2_i2c_basic_op fndecl 4-6 37917 NULL
+spk_ye_vardecl_37920_fns spk_ye vardecl 0 37920 NULL
 num_escbs_asd_seq_data_37938_fns num_escbs asd_seq_data 0 37938 NULL
 kvm_fetch_guest_virt_fndecl_37942_fns kvm_fetch_guest_virt fndecl 2-4 37942 NULL
 seq_write_fndecl_37946_fns seq_write fndecl 3 37946 NULL
+mbox_write_fndecl_37967_fns mbox_write fndecl 3 37967 NULL
 vortex_core_init_fndecl_37980_fns vortex_core_init fndecl 0 37980 NULL
 key_search_fndecl_37982_fns key_search fndecl 0 37982 NULL
 nlmsvc_lookup_host_fndecl_37992_fns nlmsvc_lookup_host fndecl 3 37992 NULL
@@ -2673,8 +2931,10 @@ nf_ct_ext_create_fndecl_38195_fns nf_ct_ext_create fndecl 3 38195 NULL
 drm_property_create_fndecl_38196_fns drm_property_create fndecl 4 38196 NULL
 nilfs_cpfile_checkpoints_in_block_fndecl_38197_fns nilfs_cpfile_checkpoints_in_block fndecl 0-2-3 38197 NULL
 goto_high_power_fndecl_38198_fns goto_high_power fndecl 0 38198 NULL
+rx_offset_tg3_38201_fns rx_offset tg3 0 38201 NULL
 dvb_audio_write_fndecl_38232_fns dvb_audio_write fndecl 3 38232 NULL
 mwifiex_11n_delba_fndecl_38254_fns mwifiex_11n_delba fndecl 2 38254 NULL
+i2c2_debugfs_read_fndecl_38270_fns i2c2_debugfs_read fndecl 3 38270 NULL
 max_read_sge_ib_qp_38275_fns max_read_sge ib_qp 0 38275 NULL
 header_length_fw_iso_packet_38284_fns header_length fw_iso_packet 0 38284 NULL
 cacheless_memcpy_fndecl_38293_fns cacheless_memcpy fndecl 3 38293 NULL
@@ -2693,15 +2953,19 @@ chrdev_setup_rx_fndecl_38384_fns chrdev_setup_rx fndecl 2 38384 NULL
 blk_register_region_fndecl_38387_fns blk_register_region fndecl 1-2 38387 NULL
 size_vfio_info_cap_38398_fns size vfio_info_cap 0 38398 NULL
 ath6kl_sdio_alloc_prep_scat_req_fndecl_38401_fns ath6kl_sdio_alloc_prep_scat_req fndecl 2 38401 NULL
+dwc3_mode_write_fndecl_38414_fns dwc3_mode_write fndecl 3 38414 NULL
 read_page_fndecl_38423_fns read_page fndecl 2 38423 NULL
 dvb_ringbuffer_avail_fndecl_38474_fns dvb_ringbuffer_avail fndecl 0 38474 NULL
 __fuse_request_alloc_fndecl_38479_fns __fuse_request_alloc fndecl 1 38479 NULL
 dma_rx_errors_read_fndecl_38494_fns dma_rx_errors_read fndecl 3 38494 NULL
+bt_bmc_write_fndecl_38538_fns bt_bmc_write fndecl 3 38538 NULL
 tx_win_size_mwifiex_add_ba_param_38553_fns tx_win_size mwifiex_add_ba_param 0 38553 NULL
 hysdn_conf_write_fndecl_38562_fns hysdn_conf_write fndecl 3 38562 NULL
 retry_count_read_fndecl_38578_fns retry_count_read fndecl 3 38578 NULL
+gdm_usb_hci_send_fndecl_38585_fns gdm_usb_hci_send fndecl 3 38585 NULL
 print_prefix_fndecl_38595_fns print_prefix fndecl 0 38595 NULL
 proc_pid_readlink_fndecl_38601_fns proc_pid_readlink fndecl 3 38601 NULL
+perf_num_counters_fndecl_38605_fns perf_num_counters fndecl 0 38605 NULL
 mga_compat_ioctl_fndecl_38617_fns mga_compat_ioctl fndecl 2 38617 NULL
 vmci_qp_broker_alloc_fndecl_38635_fns vmci_qp_broker_alloc fndecl 6-5 38635 NULL
 str_read_fndecl_38656_fns str_read fndecl 4 38656 NULL
@@ -2718,6 +2982,7 @@ get_user_pages_fast_fndecl_38708_fns get_user_pages_fast fndecl 0 38708 NULL
 acpi_table_parse_entries_fndecl_38730_fns acpi_table_parse_entries fndecl 0 38730 NULL
 last_error_boot_data_38741_fns last_error boot_data 0 38741 NULL
 ssd1307fb_alloc_array_fndecl_38751_fns ssd1307fb_alloc_array fndecl 1 38751 NULL
+buffer_from_user_fndecl_38753_fns buffer_from_user fndecl 3 38753 NULL
 t4_max_iq_size_c4iw_hw_queue_38756_fns t4_max_iq_size c4iw_hw_queue 0 38756 NULL
 egr_start_sge_38761_fns egr_start sge 0 38761 NULL
 write_packet_fndecl_38765_fns write_packet fndecl 5 38765 NULL
@@ -2741,6 +3006,7 @@ xillybus_write_fndecl_39102_fns xillybus_write fndecl 3 39102 NULL
 audio_ins_vx_core_39112_fns audio_ins vx_core 0 39112 NULL
 acpi_data_get_property_array_fndecl_39128_fns acpi_data_get_property_array fndecl 0 39128 NULL
 simple_transaction_get_fndecl_39130_fns simple_transaction_get fndecl 3 39130 NULL
+raid56_parity_alloc_scrub_rbio_fndecl_39153_fns raid56_parity_alloc_scrub_rbio fndecl 4 39153 NULL
 sys_readv_fndecl_39163_fns sys_readv fndecl 3 39163 NULL
 cfg80211_roamed_bss_fndecl_39173_fns cfg80211_roamed_bss fndecl 6-4 39173 NULL
 cyttsp4_probe_fndecl_39178_fns cyttsp4_probe fndecl 4 39178 NULL
@@ -2748,12 +3014,14 @@ l2cap_sock_setsockopt_fndecl_39180_fns l2cap_sock_setsockopt fndecl 5 39180 NULL
 mthca_buddy_init_fndecl_39181_fns mthca_buddy_init fndecl 2 39181 NULL
 rvt_map_phys_fmr_fndecl_39197_fns rvt_map_phys_fmr fndecl 4 39197 NULL
 sg_kmalloc_fndecl_39251_fns sg_kmalloc fndecl 1 39251 NULL
+soc_codec_reg_show_fndecl_39277_fns soc_codec_reg_show fndecl 3-0 39277 NULL
 size_tomoyo_condition_39281_fns size tomoyo_condition 0 39281 NULL
 rxrpc_setsockopt_fndecl_39293_fns rxrpc_setsockopt fndecl 5 39293 NULL
 SYSC_flistxattr_fndecl_39312_fns SYSC_flistxattr fndecl 3 39312 NULL
 SYSC_sched_setaffinity_fndecl_39317_fns SYSC_sched_setaffinity fndecl 2 39317 NULL
 isdn_ppp_read_fndecl_39335_fns isdn_ppp_read fndecl 4 39335 NULL
-fscrypt_fname_alloc_buffer_fndecl_39339_fns fscrypt_fname_alloc_buffer fndecl 2 39339 NULL
+fscrypt_fname_alloc_buffer_fndecl_39339_fns fscrypt_fname_alloc_buffer fndecl 2 39339 NULL nohasharray
+musb_softconnect_write_fndecl_39339_fns musb_softconnect_write fndecl 3 39339 &fscrypt_fname_alloc_buffer_fndecl_39339_fns
 setbrightness_fndecl_39342_fns setbrightness fndecl 0 39342 NULL
 tpm_read_fndecl_39355_fns tpm_read fndecl 3 39355 NULL
 max_skl_algo_data_39368_fns max skl_algo_data 0 39368 NULL
@@ -2763,9 +3031,11 @@ sl_alloc_bufs_fndecl_39391_fns sl_alloc_bufs fndecl 2 39391 NULL
 iscsi_create_conn_fndecl_39402_fns iscsi_create_conn fndecl 2 39402 NULL
 show_device_status_fndecl_39440_fns show_device_status fndecl 0 39440 NULL
 virtio_cread16_fndecl_39444_fns virtio_cread16 fndecl 0 39444 NULL
+tp_la_write_fndecl_39445_fns tp_la_write fndecl 3 39445 NULL
 proc_write_fndecl_39464_fns proc_write fndecl 3 39464 NULL
 qib_verbs_send_pio_fndecl_39482_fns qib_verbs_send_pio fndecl 5 39482 NULL
-lbs_dev_info_fndecl_39516_fns lbs_dev_info fndecl 3 39516 NULL
+lbs_dev_info_fndecl_39516_fns lbs_dev_info fndecl 3 39516 NULL nohasharray
+mwifiex_timeshare_coex_write_fndecl_39516_fns mwifiex_timeshare_coex_write fndecl 3 39516 &lbs_dev_info_fndecl_39516_fns
 error_tx_resume_failure_read_fndecl_39521_fns error_tx_resume_failure_read fndecl 3 39521 NULL
 rsc_mgr_init_fndecl_39528_fns rsc_mgr_init fndecl 3 39528 NULL
 wusb_prf_64_fndecl_39530_fns wusb_prf_64 fndecl 7 39530 NULL
@@ -2803,6 +3073,7 @@ compat_do_msg_fill_fndecl_39987_fns compat_do_msg_fill fndecl 3 39987 NULL
 start_sram_reserve_39999_fns start sram_reserve 0 39999 NULL
 isr_decrypt_done_read_fndecl_40001_fns isr_decrypt_done_read fndecl 3 40001 NULL
 emulator_write_phys_fndecl_40035_fns emulator_write_phys fndecl 2-4 40035 NULL
+stm32_dma_prep_dma_memcpy_fndecl_40057_fns stm32_dma_prep_dma_memcpy fndecl 4 40057 NULL
 rx_queue_add_kobject_fndecl_40068_fns rx_queue_add_kobject fndecl 0 40068 NULL
 x25_asy_maxdev_vardecl_x25_asy_c_40074_fns x25_asy_maxdev vardecl_x25_asy.c 0 40074 NULL
 num_parents_clk_core_40091_fns num_parents clk_core 0 40091 NULL
@@ -2819,17 +3090,21 @@ ipw_queue_tx_init_fndecl_40218_fns ipw_queue_tx_init fndecl 3 40218 NULL
 skl_get_module_params_fndecl_40234_fns skl_get_module_params fndecl 3 40234 NULL
 digest_size_public_key_signature_40282_fns digest_size public_key_signature 0 40282 NULL
 rx_filter_beacon_filter_read_fndecl_40300_fns rx_filter_beacon_filter_read fndecl 3 40300 NULL
+num_engines_dmm_40301_fns num_engines dmm 0 40301 NULL
 uio_read_fndecl_40327_fns uio_read fndecl 3 40327 NULL
 nvif_notify_init_fndecl_40342_fns nvif_notify_init fndecl 7-6 40342 NULL
-srpt_alloc_ioctx_ring_fndecl_40353_fns srpt_alloc_ioctx_ring fndecl 2 40353 NULL
+srpt_alloc_ioctx_ring_fndecl_40353_fns srpt_alloc_ioctx_ring fndecl 2-3-4 40353 NULL
 tool_link_event_write_fndecl_40366_fns tool_link_event_write fndecl 3 40366 NULL
 SYSC_mincore_fndecl_40372_fns SYSC_mincore fndecl 2-1 40372 NULL
 pages_per_wr_bio_scrub_wr_ctx_40374_fns pages_per_wr_bio scrub_wr_ctx 0 40374 NULL
+__vmalloc_node_fndecl_40382_fns __vmalloc_node fndecl 1 40382 NULL
+qsfp_read_fndecl_40391_fns qsfp_read fndecl 0 40391 NULL
 px_raw_event_fndecl_40392_fns px_raw_event fndecl 4 40392 NULL
 joydev_ioctl_common_fndecl_40412_fns joydev_ioctl_common fndecl 2 40412 NULL
 applesmc_create_nodes_fndecl_40419_fns applesmc_create_nodes fndecl 2 40419 NULL
 rx_streaming_always_read_fndecl_40426_fns rx_streaming_always_read fndecl 3 40426 NULL
 iscsi_alloc_session_fndecl_40445_fns iscsi_alloc_session fndecl 3 40445 NULL
+submit_create_fndecl_40462_fns submit_create fndecl 3 40462 NULL
 __copy_from_user_inatomic_nocache_fndecl_40466_fns __copy_from_user_inatomic_nocache fndecl 3 40466 NULL
 xfs_rmap_update_create_intent_fndecl_40493_fns xfs_rmap_update_create_intent fndecl 2 40493 NULL
 num_substreams_snd_m3_40528_fns num_substreams snd_m3 0 40528 NULL
@@ -2837,6 +3112,7 @@ nf_sockopt_fndecl_40555_fns nf_sockopt fndecl 0 40555 NULL
 alloc_ebda_hpc_fndecl_40557_fns alloc_ebda_hpc fndecl 1-2 40557 NULL
 security_context_to_sid_fndecl_40560_fns security_context_to_sid fndecl 2 40560 NULL
 compat_sys_preadv2_fndecl_40579_fns compat_sys_preadv2 fndecl 3 40579 NULL
+android_set_cntry_fndecl_40615_fns android_set_cntry fndecl 0 40615 NULL
 __kfifo_dma_in_prepare_fndecl_40626_fns __kfifo_dma_in_prepare fndecl 4 40626 NULL
 pcpu_get_vm_areas_fndecl_40630_fns pcpu_get_vm_areas fndecl 3 40630 NULL
 dev_set_alias_fndecl_40631_fns dev_set_alias fndecl 3 40631 NULL
@@ -2868,6 +3144,7 @@ pci_add_dynid_fndecl_40893_fns pci_add_dynid fndecl 8 40893 NULL
 build_verbs_tx_desc_fndecl_40917_fns build_verbs_tx_desc fndecl 3 40917 NULL
 sctp_setsockopt_bindx_fndecl_40925_fns sctp_setsockopt_bindx fndecl 3 40925 NULL
 ecryptfs_filldir_fndecl_40939_fns ecryptfs_filldir fndecl 3 40939 NULL
+sg_nents_for_len_fndecl_40942_fns sg_nents_for_len fndecl 0 40942 NULL
 size_v4l2_ext_control_40952_fns size v4l2_ext_control 0 40952 NULL
 ns_segnum_the_nilfs_40959_fns ns_segnum the_nilfs 0 40959 NULL
 isr_low_rssi_read_fndecl_40966_fns isr_low_rssi_read fndecl 3 40966 NULL
@@ -2880,6 +3157,7 @@ nfsctl_transaction_write_fndecl_41011_fns nfsctl_transaction_write fndecl 3 4101
 proc_projid_map_write_fndecl_41017_fns proc_projid_map_write fndecl 3 41017 NULL
 rfkill_fop_write_fndecl_41019_fns rfkill_fop_write fndecl 3 41019 NULL
 num_qps_qed_rdma_info_41030_fns num_qps qed_rdma_info 0 41030 NULL
+lprocfs_write_u64_helper_fndecl_41059_fns lprocfs_write_u64_helper fndecl 2 41059 NULL
 userio_char_read_fndecl_41065_fns userio_char_read fndecl 3 41065 NULL
 qp_table_size_rvt_qp_ibdev_41075_fns qp_table_size rvt_qp_ibdev 0 41075 NULL
 gfn_to_pfn_fndecl_41077_fns gfn_to_pfn fndecl 2 41077 NULL
@@ -2895,6 +3173,7 @@ hidp_process_report_fndecl_41140_fns hidp_process_report fndecl 4 41140 NULL
 usb_reset_and_verify_device_fndecl_41142_fns usb_reset_and_verify_device fndecl 0 41142 NULL
 calib_fail_count_read_fndecl_41171_fns calib_fail_count_read fndecl 3 41171 NULL
 suspend_dtim_interval_read_fndecl_41176_fns suspend_dtim_interval_read fndecl 3 41176 NULL
+traceprobe_probes_write_fndecl_41178_fns traceprobe_probes_write fndecl 3 41178 NULL
 nr_pages_page_collect_41197_fns nr_pages page_collect 0 41197 NULL
 sq905_command_fndecl_41201_fns sq905_command fndecl 0 41201 NULL
 nr_acpi_bits_vardecl_xen_acpi_processor_c_41210_fns nr_acpi_bits vardecl_xen-acpi-processor.c 0 41210 NULL
@@ -2910,13 +3189,17 @@ num_threads_acpi_db_method_info_41261_fns num_threads acpi_db_method_info 0 4126
 frame_interval_tw5864_input_41274_fns frame_interval tw5864_input 0 41274 NULL
 vb2_queue_init_fndecl_41292_fns vb2_queue_init fndecl 0 41292 NULL
 kfd_set_pasid_limit_fndecl_41300_fns kfd_set_pasid_limit fndecl 1 41300 NULL
+img_SRAM_size_fw_hdr_41311_fns img_SRAM_size fw_hdr 0 41311 NULL nohasharray
+d40_size_2_dmalen_fndecl_41311_fns d40_size_2_dmalen fndecl 0-3-2-1 41311 &img_SRAM_size_fw_hdr_41311_fns
 cma_declare_contiguous_fndecl_41316_fns cma_declare_contiguous fndecl 5 41316 NULL
+gb_loopback_sync_sink_fndecl_41337_fns gb_loopback_sync_sink fndecl 2 41337 NULL
 fanotify_write_fndecl_41340_fns fanotify_write fndecl 3 41340 NULL
 regmap_read_debugfs_fndecl_41345_fns regmap_read_debugfs fndecl 5 41345 NULL
 tlbflush_read_file_fndecl_41350_fns tlbflush_read_file fndecl 3 41350 NULL
 efx_tsoh_get_buffer_fndecl_41355_fns efx_tsoh_get_buffer fndecl 3 41355 NULL
 usb_stor_probe1_fndecl_41357_fns usb_stor_probe1 fndecl 0 41357 NULL
 rx_rx_out_of_mpdu_nodes_read_fndecl_41359_fns rx_rx_out_of_mpdu_nodes_read fndecl 3 41359 NULL
+gb_loopback_async_transfer_fndecl_41372_fns gb_loopback_async_transfer fndecl 2 41372 NULL
 max_frame_size_mgsl_struct_41374_fns max_frame_size mgsl_struct 0 41374 NULL
 TupleDataMax_tuple_t_41376_fns TupleDataMax tuple_t 0 41376 NULL
 l_tree_depth_ocfs2_extent_list_41398_fns l_tree_depth ocfs2_extent_list 0 41398 NULL
@@ -2933,6 +3216,7 @@ unpack_array_fndecl_41525_fns unpack_array fndecl 0 41525 NULL
 pci_vpd_find_tag_fndecl_41534_fns pci_vpd_find_tag fndecl 0-2 41534 NULL
 alloc_cpu_rmap_fndecl_41536_fns alloc_cpu_rmap fndecl 1 41536 NULL
 max_nr_ports_virtio_console_config_41559_fns max_nr_ports virtio_console_config 0 41559 NULL
+fpa_set_fndecl_41560_fns fpa_set fndecl 3-4 41560 NULL
 dma_rx_requested_read_fndecl_41561_fns dma_rx_requested_read fndecl 3 41561 NULL
 stv0680_handle_error_fndecl_41563_fns stv0680_handle_error fndecl 0-2 41563 NULL
 __alloc_bootmem_nopanic_fndecl_41574_fns __alloc_bootmem_nopanic fndecl 1 41574 NULL
@@ -2954,6 +3238,7 @@ v4l2_ctrl_handler_init_class_fndecl_41742_fns v4l2_ctrl_handler_init_class fndec
 insert_dent_fndecl_41753_fns insert_dent fndecl 7 41753 NULL
 vop_virtio_copy_to_user_fndecl_41756_fns vop_virtio_copy_to_user fndecl 4-3 41756 NULL
 __alloc_bootmem_node_high_fndecl_41767_fns __alloc_bootmem_node_high fndecl 2 41767 NULL
+batadv_socket_write_fndecl_41768_fns batadv_socket_write fndecl 3 41768 NULL
 tc_action_net_init_fndecl_41775_fns tc_action_net_init fndecl 3 41775 NULL
 pcibios_enable_device_fndecl_41776_fns pcibios_enable_device fndecl 0 41776 NULL
 outlen_mlx5_cmd_debug_41806_fns outlen mlx5_cmd_debug 0 41806 NULL
@@ -2993,6 +3278,8 @@ snd_compr_write_fndecl_42144_fns snd_compr_write fndecl 3 42144 NULL
 __team_options_register_fndecl_42198_fns __team_options_register fndecl 3 42198 NULL
 reg_count_cpia2_command_42201_fns reg_count cpia2_command 0 42201 NULL
 construct_key_and_link_fndecl_42210_fns construct_key_and_link fndecl 3 42210 NULL
+num_q_vectors_igb_adapter_42232_fns num_q_vectors igb_adapter 0 42232 NULL
+cur_count_of_phandle_iterator_42243_fns cur_count of_phandle_iterator 0 42243 NULL
 len_wmi_tlv_42244_fns len wmi_tlv 0 42244 NULL
 nchunks_radeon_cs_parser_42251_fns nchunks radeon_cs_parser 0 42251 NULL
 read_kcore_fndecl_42259_fns read_kcore fndecl 3 42259 NULL
@@ -3016,6 +3303,7 @@ max_allowed_qxl_monitors_config_42481_fns max_allowed qxl_monitors_config 0 4248
 hid_sensor_client_cnt_sensor_hub_data_42488_fns hid_sensor_client_cnt sensor_hub_data 0 42488 NULL
 bpf_check_classic_fndecl_42501_fns bpf_check_classic fndecl 2 42501 NULL
 __mic_dma_alloc_fndecl_42540_fns __mic_dma_alloc fndecl 2 42540 NULL
+info_debugfs_read_fndecl_42544_fns info_debugfs_read fndecl 3 42544 NULL
 qla8044_write_optrom_data_fndecl_42561_fns qla8044_write_optrom_data fndecl 4 42561 NULL
 ts_write_fndecl_42563_fns ts_write fndecl 3 42563 NULL
 usbtmc_write_fndecl_42567_fns usbtmc_write fndecl 3 42567 NULL
@@ -3041,6 +3329,7 @@ oom_adj_write_fndecl_42687_fns oom_adj_write fndecl 3 42687 NULL
 ccp_update_sg_workarea_fndecl_42688_fns ccp_update_sg_workarea fndecl 2 42688 NULL
 data_size_dm_ioctl_42701_fns data_size dm_ioctl 0 42701 NULL
 handle_abnormal_pfn_fndecl_42730_fns handle_abnormal_pfn fndecl 3 42730 NULL
+gb_control_get_manifest_size_operation_fndecl_42744_fns gb_control_get_manifest_size_operation fndecl 0 42744 NULL
 mlx5_fc_stats_query_fndecl_42750_fns mlx5_fc_stats_query fndecl 3 42750 NULL
 read_file_frameerrors_fndecl_42770_fns read_file_frameerrors fndecl 3 42770 NULL
 ssid_len_ath6kl_vif_42784_fns ssid_len ath6kl_vif 0 42784 NULL
@@ -3052,8 +3341,11 @@ init_bch_fndecl_42897_fns init_bch fndecl 1-2 42897 NULL
 length_drm_property_blob_42912_fns length drm_property_blob 0 42912 NULL
 do_command_extended_fndecl_42913_fns do_command_extended fndecl 0 42913 NULL
 bnx2x_vf_mcast_fndecl_42933_fns bnx2x_vf_mcast fndecl 4 42933 NULL
+wm_coeff_tlv_get_fndecl_42961_fns wm_coeff_tlv_get fndecl 3 42961 NULL
 pof_reclen_boot_data_42966_fns pof_reclen boot_data 0 42966 NULL
 ea_len_fndecl_42998_fns ea_len fndecl 0 42998 NULL
+obd_ioctl_popdata_fndecl_43014_fns obd_ioctl_popdata fndecl 3 43014 NULL
+quirk_simultaneous_discovery_write_fndecl_43076_fns quirk_simultaneous_discovery_write fndecl 3 43076 NULL
 rx_fcs_err_read_fndecl_43119_fns rx_fcs_err_read fndecl 3 43119 NULL
 ndev_init_isr_fndecl_43138_fns ndev_init_isr fndecl 3 43138 NULL
 kvm_vcpu_gfn_to_pfn_fndecl_43158_fns kvm_vcpu_gfn_to_pfn fndecl 2 43158 NULL
@@ -3068,6 +3360,7 @@ send_write_fndecl_43242_fns send_write fndecl 2-0 43242 NULL
 agp_create_user_memory_fndecl_43256_fns agp_create_user_memory fndecl 1 43256 NULL
 persistent_ram_new_fndecl_43278_fns persistent_ram_new fndecl 1-2 43278 NULL
 of_property_read_string_array_fndecl_43294_fns of_property_read_string_array fndecl 0 43294 NULL
+__netdev_adjacent_dev_insert_fndecl_43317_fns __netdev_adjacent_dev_insert fndecl 0 43317 NULL
 qib_refresh_qsfp_cache_fndecl_43328_fns qib_refresh_qsfp_cache fndecl 0 43328 NULL
 debugfs_read_fndecl_43348_fns debugfs_read fndecl 3 43348 NULL
 __kmalloc_node_track_caller_fndecl_43349_fns __kmalloc_node_track_caller fndecl 1 43349 NULL
@@ -3097,16 +3390,19 @@ rxpipe_missed_beacon_host_int_trig_rx_data_read_fndecl_43710_fns rxpipe_missed_b
 in_size_xz_buf_43724_fns in_size xz_buf 0 43724 NULL
 gfn_to_hva_many_fndecl_43742_fns gfn_to_hva_many fndecl 2 43742 NULL
 acpi_rs_strcpy_fndecl_43746_fns acpi_rs_strcpy fndecl 0 43746 NULL
+stat_end_vardecl_drv_c_43748_fns stat_end vardecl_drv.c 0 43748 NULL
 tipc_connect_fndecl_43766_fns tipc_connect fndecl 3 43766 NULL
 hwdep_read_fndecl_43779_fns hwdep_read fndecl 3 43779 NULL
 generic_file_fsync_fndecl_43780_fns generic_file_fsync fndecl 2-3 43780 NULL
 len_nft_set_ext_tmpl_43815_fns len nft_set_ext_tmpl 0 43815 NULL
+omap_dma_prep_slave_sg_fndecl_43825_fns omap_dma_prep_slave_sg fndecl 3 43825 NULL
 br_fdb_external_learn_add_fndecl_43850_fns br_fdb_external_learn_add fndecl 4 43850 NULL
 scsi_host_alloc_fndecl_43858_fns scsi_host_alloc fndecl 2 43858 NULL
 Xdsdt_acpi_table_fadt_43871_fns Xdsdt acpi_table_fadt 0 43871 NULL
 sddr09_readX_fndecl_43951_fns sddr09_readX fndecl 7 43951 NULL
 hfsplus_file_fsync_fndecl_43969_fns hfsplus_file_fsync fndecl 2-3 43969 NULL
 smk_write_revoke_subj_fndecl_43990_fns smk_write_revoke_subj fndecl 3 43990 NULL
+vme_master_read_fndecl_44006_fns vme_master_read fndecl 0 44006 NULL
 nr_chnls_nvm_dev_44026_fns nr_chnls nvm_dev 0 44026 NULL
 response_length_ib_uverbs_ex_create_qp_resp_44030_fns response_length ib_uverbs_ex_create_qp_resp 0 44030 NULL
 wilc_gnrl_async_info_received_fndecl_44034_fns wilc_gnrl_async_info_received fndecl 3 44034 NULL
@@ -3117,6 +3413,7 @@ prog_page_fndecl_44060_fns prog_page fndecl 2 44060 NULL
 mb_cache_create_fndecl_44082_fns mb_cache_create fndecl 1 44082 NULL
 udp_sendmsg_fndecl_44135_fns udp_sendmsg fndecl 3 44135 NULL nohasharray
 mls_compute_context_len_fndecl_44135_fns mls_compute_context_len fndecl 0 44135 &udp_sendmsg_fndecl_44135_fns
+gb_operation_sync_timeout_fndecl_44156_fns gb_operation_sync_timeout fndecl 4 44156 NULL
 bfad_debugfs_write_regwr_fndecl_44162_fns bfad_debugfs_write_regwr fndecl 3 44162 NULL
 error_tx_abort_failure_read_fndecl_44184_fns error_tx_abort_failure_read fndecl 3 44184 NULL
 evdev_compute_buffer_size_fndecl_44212_fns evdev_compute_buffer_size fndecl 0 44212 NULL
@@ -3125,6 +3422,8 @@ it_context_support_fw_ohci_44232_fns it_context_support fw_ohci 0 44232 NULL
 rx_filter_arp_filter_read_fndecl_44233_fns rx_filter_arp_filter_read fndecl 3 44233 NULL nohasharray
 ima_store_measurement_fndecl_44233_fns ima_store_measurement fndecl 5 44233 &rx_filter_arp_filter_read_fndecl_44233_fns
 au0828_init_isoc_fndecl_44238_fns au0828_init_isoc fndecl 3 44238 NULL
+spk_xs_vardecl_44242_fns spk_xs vardecl 0 44242 NULL
+lprocfs_write_frac_u64_helper_fndecl_44250_fns lprocfs_write_frac_u64_helper fndecl 2 44250 NULL
 roundup_ring_size_fndecl_44254_fns roundup_ring_size fndecl 0 44254 NULL
 gfn_to_pfn_memslot_atomic_fndecl_44264_fns gfn_to_pfn_memslot_atomic fndecl 2 44264 NULL
 NumberOfPorts_mpt3sas_facts_44306_fns NumberOfPorts mpt3sas_facts 0 44306 NULL nohasharray
@@ -3132,6 +3431,7 @@ mlxsw_core_reg_access_fndecl_44306_fns mlxsw_core_reg_access fndecl 0 44306 &Num
 bytesused_cx18_buffer_44339_fns bytesused cx18_buffer 0 44339 NULL
 snd_pcm_lib_writev_transfer_fndecl_44344_fns snd_pcm_lib_writev_transfer fndecl 5 44344 NULL
 btrfs_item_size_fndecl_44350_fns btrfs_item_size fndecl 0 44350 NULL
+pwm_buf_sz_usbdux_private_44375_fns pwm_buf_sz usbdux_private 0 44375 NULL
 dvb_net_ioctl_fndecl_44388_fns dvb_net_ioctl fndecl 2 44388 NULL
 hidpp_prefix_name_fndecl_44393_fns hidpp_prefix_name fndecl 2 44393 NULL
 num_rx_rings_nfp_net_44395_fns num_rx_rings nfp_net 0 44395 NULL
@@ -3154,6 +3454,7 @@ filter_read_fndecl_44527_fns filter_read fndecl 3 44527 NULL
 smk_read_syslog_fndecl_44544_fns smk_read_syslog fndecl 3 44544 NULL
 numps_powernow_k8_data_44546_fns numps powernow_k8_data 0 44546 NULL
 hv_tsc_page_kvm_hv_44561_fns hv_tsc_page kvm_hv 0 44561 NULL
+ion_handle_test_dma_fndecl_44581_fns ion_handle_test_dma fndecl 4-5 44581 NULL
 maxcontacts_pm_44593_fns maxcontacts pm 0 44593 NULL
 len_poll_list_44603_fns len poll_list 0 44603 NULL
 of_io_request_and_map_fndecl_44605_fns of_io_request_and_map fndecl 2 44605 NULL
@@ -3164,6 +3465,7 @@ num_desc_pages__drm_via_sg_info_44666_fns num_desc_pages _drm_via_sg_info 0 4466
 flash_write_fndecl_44673_fns flash_write fndecl 3 44673 NULL
 xfpregs_set_fndecl_44680_fns xfpregs_set fndecl 4 44680 NULL
 length_ore_striping_info_44681_fns length ore_striping_info 0 44681 NULL
+asic_flags_write_fndecl_44717_fns asic_flags_write fndecl 3 44717 NULL
 altera_irscan_fndecl_44719_fns altera_irscan fndecl 2 44719 NULL
 register_netdevice_fndecl_44725_fns register_netdevice fndecl 0 44725 NULL
 kmalloc_order_fndecl_44727_fns kmalloc_order fndecl 1 44727 NULL
@@ -3198,7 +3500,8 @@ head_timestamp_event_queue_45105_fns head timestamp_event_queue 0 45105 &pitch_t
 dma_map_mr_pas_fndecl_45126_fns dma_map_mr_pas fndecl 3 45126 NULL
 copyout_from_xsaves_fndecl_45153_fns copyout_from_xsaves fndecl 2 45153 NULL
 pwc_get_fps_Nala_fndecl_45162_fns pwc_get_fps_Nala fndecl 0 45162 NULL
-num_mrs_qed_rdma_info_45171_fns num_mrs qed_rdma_info 0 45171 NULL
+num_mrs_qed_rdma_info_45171_fns num_mrs qed_rdma_info 0 45171 NULL nohasharray
+n_ao_urbs_usbdux_private_45171_fns n_ao_urbs usbdux_private 0 45171 &num_mrs_qed_rdma_info_45171_fns
 sel_write_checkreqprot_fndecl_45173_fns sel_write_checkreqprot fndecl 3 45173 NULL
 acl_alloc_num_fndecl_45177_fns acl_alloc_num fndecl 2-1 45177 NULL
 pwr_tx_with_ps_read_fndecl_45216_fns pwr_tx_with_ps_read fndecl 3 45216 NULL
@@ -3210,6 +3513,7 @@ mgt_set_varlen_fndecl_45287_fns mgt_set_varlen fndecl 4 45287 NULL
 tstats_write_fndecl_45315_fns tstats_write fndecl 3 45315 NULL
 of_property_count_elems_of_size_fndecl_45337_fns of_property_count_elems_of_size fndecl 0-3 45337 NULL
 excessive_retries_read_fndecl_45338_fns excessive_retries_read fndecl 3 45338 NULL
+ablkcipher_giv_edesc_alloc_fndecl_45340_fns ablkcipher_giv_edesc_alloc fndecl 2 45340 NULL
 ebcnt_vardecl_speedtest_c_45398_fns ebcnt vardecl_speedtest.c 0 45398 NULL
 brcmf_init_nvram_parser_fndecl_45415_fns brcmf_init_nvram_parser fndecl 3 45415 NULL
 pos_c4iw_debugfs_data_45424_fns pos c4iw_debugfs_data 0 45424 NULL
@@ -3224,6 +3528,7 @@ acl_alloc_stack_init_fndecl_45509_fns acl_alloc_stack_init fndecl 1 45509 NULL
 ptr_ring_init_fndecl_45512_fns ptr_ring_init fndecl 2 45512 NULL
 count_scpi_dvfs_info_45519_fns count scpi_dvfs_info 0 45519 NULL
 wl1273_fm_fops_write_fndecl_45534_fns wl1273_fm_fops_write fndecl 3 45534 NULL
+arch_setup_dma_ops_fndecl_45543_fns arch_setup_dma_ops fndecl 3 45543 NULL
 srp_create_fr_pool_fndecl_45572_fns srp_create_fr_pool fndecl 3 45572 NULL
 f2fs_sync_file_fndecl_45585_fns f2fs_sync_file fndecl 2-3 45585 NULL
 wpan_phy_new_fndecl_45593_fns wpan_phy_new fndecl 2 45593 NULL
@@ -3256,6 +3561,7 @@ smbase_kvm_vcpu_arch_45895_fns smbase kvm_vcpu_arch 0 45895 NULL
 ath6kl_lrssi_roam_read_fndecl_45901_fns ath6kl_lrssi_roam_read fndecl 3 45901 NULL
 dfs_num_of_radar_detections_read_fndecl_45903_fns dfs_num_of_radar_detections_read fndecl 3 45903 NULL
 alloc_sglist_fndecl_45919_fns alloc_sglist fndecl 1 45919 NULL
+lpfc_idiag_queacc_write_fndecl_45920_fns lpfc_idiag_queacc_write fndecl 3 45920 NULL
 sdhci_pltfm_register_fndecl_45940_fns sdhci_pltfm_register fndecl 3 45940 NULL
 sigma_fw_load_samplerates_fndecl_45951_fns sigma_fw_load_samplerates fndecl 3 45951 NULL
 i40e_calculate_l2fpm_size_fndecl_45987_fns i40e_calculate_l2fpm_size fndecl 1-2-3-4 45987 NULL
@@ -3265,6 +3571,7 @@ rx_size_qed_cb_ll2_info_46006_fns rx_size qed_cb_ll2_info 0 46006 NULL
 add_del_listener_fndecl_46013_fns add_del_listener fndecl 0 46013 NULL
 get_derived_key_fndecl_46015_fns get_derived_key fndecl 4 46015 NULL
 afs_proc_cells_write_fndecl_46016_fns afs_proc_cells_write fndecl 3 46016 NULL
+p9_client_prepare_req_fndecl_46048_fns p9_client_prepare_req fndecl 3 46048 NULL
 event_oom_late_read_fndecl_46052_fns event_oom_late_read fndecl 3 46052 NULL nohasharray
 num_wsm_mib_beacon_filter_table_46052_fns num wsm_mib_beacon_filter_table 0 46052 &event_oom_late_read_fndecl_46052_fns
 sys_lsetxattr_fndecl_46058_fns sys_lsetxattr fndecl 4 46058 NULL
@@ -3282,6 +3589,7 @@ __irq_alloc_domain_generic_chips_fndecl_46285_fns __irq_alloc_domain_generic_chi
 ffs_prepare_buffer_fndecl_46311_fns ffs_prepare_buffer fndecl 2 46311 NULL
 biovec_create_pool_fndecl_46325_fns biovec_create_pool fndecl 1 46325 NULL
 max_vnic_func_qlcnic_hardware_context_46334_fns max_vnic_func qlcnic_hardware_context 0 46334 NULL
+__qsfp_debugfs_write_fndecl_46356_fns __qsfp_debugfs_write fndecl 3 46356 NULL
 shadow_image_fndecl_46361_fns shadow_image fndecl 3 46361 NULL
 ring_cons_per_user_data_46365_fns ring_cons per_user_data 0 46365 NULL
 device_create_with_groups_fndecl_46371_fns device_create_with_groups fndecl 3 46371 NULL
@@ -3312,6 +3620,8 @@ transfer_buffer_length_usbip_header_cmd_submit_46658_fns transfer_buffer_length
 display_crc_ctl_write_fndecl_46690_fns display_crc_ctl_write fndecl 3 46690 NULL
 printer_write_fndecl_46695_fns printer_write fndecl 3 46695 NULL
 __kfifo_from_user_r_fndecl_46762_fns __kfifo_from_user_r fndecl 3-5 46762 NULL
+bytes_remaining_parser_context_46791_fns bytes_remaining parser_context 0 46791 NULL
+dccp_setsockopt_fndecl_46812_fns dccp_setsockopt fndecl 5 46812 NULL
 buffer_size_snd_rawmidi_params_46813_fns buffer_size snd_rawmidi_params 0 46813 NULL
 kvm_mmu_get_page_fndecl_46824_fns kvm_mmu_get_page fndecl 2 46824 NULL nohasharray
 numberoflines_tmHWStreamParameters_46824_fns numberoflines tmHWStreamParameters 0 46824 &kvm_mmu_get_page_fndecl_46824_fns
@@ -3319,6 +3629,7 @@ mthca_alloc_resize_buf_fndecl_46841_fns mthca_alloc_resize_buf fndecl 3 46841 NU
 n_channels_wmi_scan_chan_list_arg_46842_fns n_channels wmi_scan_chan_list_arg 0 46842 NULL
 len_wl12xx_rx_filter_field_46843_fns len wl12xx_rx_filter_field 0 46843 NULL
 driver_names_read_fndecl_46844_fns driver_names_read fndecl 3 46844 NULL
+ksi_nthreads_max_ksock_sched_info_46891_fns ksi_nthreads_max ksock_sched_info 0 46891 NULL
 buffer_size_snd_urb_ctx_46897_fns buffer_size snd_urb_ctx 0 46897 NULL
 osd_req_read_kern_fndecl_46917_fns osd_req_read_kern fndecl 5 46917 NULL
 squashfs_max_decompressors_fndecl_46937_fns squashfs_max_decompressors fndecl 0 46937 NULL
@@ -3405,10 +3716,13 @@ setgain_fndecl_48010_fns setgain fndecl 0 48010 &init_pci_cap_msi_perm_fndecl_48
 size_netlbl_unlhsh_tbl_48011_fns size netlbl_unlhsh_tbl 0 48011 NULL
 selinux_transaction_write_fndecl_48013_fns selinux_transaction_write fndecl 3 48013 NULL
 drm_malloc_gfp_fndecl_48018_fns drm_malloc_gfp fndecl 1-2 48018 NULL
+lpfc_idiag_baracc_write_fndecl_48021_fns lpfc_idiag_baracc_write fndecl 3 48021 NULL
+_find_next_bit_le_fndecl_48027_fns _find_next_bit_le fndecl 0 48027 NULL
 __cvmx_bootmem_desc_get_fndecl_48105_fns __cvmx_bootmem_desc_get fndecl 0 48105 NULL
 namelen_xensyms_48117_fns namelen xensyms 0 48117 NULL
 vma_kernel_pagesize_fndecl_48131_fns vma_kernel_pagesize fndecl 0 48131 NULL
 tx_tx_retry_template_read_fndecl_48132_fns tx_tx_retry_template_read fndecl 3 48132 NULL
+rsa_edesc_alloc_fndecl_48134_fns rsa_edesc_alloc fndecl 2 48134 NULL
 hpi_cobranet_hmi_write_fndecl_48158_fns hpi_cobranet_hmi_write fndecl 3 48158 NULL
 r3964_write_fndecl_48173_fns r3964_write fndecl 4 48173 NULL
 mr_read_fndecl_48180_fns mr_read fndecl 0 48180 NULL
@@ -3419,6 +3733,7 @@ b_map_count_xfs_buf_48228_fns b_map_count xfs_buf 0 48228 NULL
 qib_make_grh_fndecl_48250_fns qib_make_grh fndecl 0 48250 NULL
 ib_uverbs_create_xsrq_fndecl_48257_fns ib_uverbs_create_xsrq fndecl 4-5 48257 NULL
 compat_sys_set_mempolicy_fndecl_48285_fns compat_sys_set_mempolicy fndecl 3 48285 NULL
+ion_test_ioctl_fndecl_48340_fns ion_test_ioctl fndecl 2 48340 NULL
 ivtv_read_fndecl_48343_fns ivtv_read fndecl 3 48343 NULL
 flash_read_fndecl_48352_fns flash_read fndecl 3 48352 NULL
 qib_make_rc_ack_fndecl_48361_fns qib_make_rc_ack fndecl 4 48361 NULL
@@ -3436,6 +3751,7 @@ copy_to_user_fromio_fndecl_48459_fns copy_to_user_fromio fndecl 3 48459 NULL
 num_msix_irqs_octeon_device_48465_fns num_msix_irqs octeon_device 0 48465 NULL
 enclosure_register_fndecl_48471_fns enclosure_register fndecl 3 48471 NULL
 __origin_write_fndecl_48487_fns __origin_write fndecl 2 48487 NULL
+rss_key_write_fndecl_48498_fns rss_key_write fndecl 3 48498 NULL
 sys_pselect6_fndecl_48506_fns sys_pselect6 fndecl 1 48506 NULL
 octeon_read_device_mem32_fndecl_48520_fns octeon_read_device_mem32 fndecl 0 48520 NULL
 copy_in_user_fndecl_48525_fns copy_in_user fndecl 3 48525 NULL
@@ -3456,8 +3772,10 @@ aggr_size_tx_agg_rate_read_fndecl_48607_fns aggr_size_tx_agg_rate_read fndecl 3
 read_file_spectral_fft_period_fndecl_48618_fns read_file_spectral_fft_period fndecl 3 48618 NULL
 get_bridge_ifindices_fndecl_48632_fns get_bridge_ifindices fndecl 0 48632 NULL
 nsymbols_dsp_symbol_desc_48638_fns nsymbols dsp_symbol_desc 0 48638 NULL
+savemem_fndecl_48642_fns savemem fndecl 3 48642 NULL
 ipv6_flowlabel_opt_fndecl_48644_fns ipv6_flowlabel_opt fndecl 3 48644 NULL nohasharray
 slhc_init_fndecl_48644_fns slhc_init fndecl 1-2 48644 &ipv6_flowlabel_opt_fndecl_48644_fns
+libcfs_kvzalloc_cpt_fndecl_48651_fns libcfs_kvzalloc_cpt fndecl 3 48651 NULL
 length_fw_cdev_send_request_48658_fns length fw_cdev_send_request 0 48658 NULL
 nn_rs_control_48667_fns nn rs_control 0 48667 NULL
 max_rds_rings_netxen_adapter_48699_fns max_rds_rings netxen_adapter 0 48699 NULL
@@ -3470,20 +3788,24 @@ profile_load_fndecl_48776_fns profile_load fndecl 3 48776 NULL
 acpi_ds_build_internal_package_obj_fndecl_48780_fns acpi_ds_build_internal_package_obj fndecl 3 48780 NULL
 iscsi_decode_text_input_fndecl_48807_fns iscsi_decode_text_input fndecl 4 48807 NULL
 r100_mm_rreg_fndecl_48823_fns r100_mm_rreg fndecl 0 48823 NULL
+omap_device_count_resources_fndecl_48829_fns omap_device_count_resources fndecl 0 48829 NULL
 __generic_file_fsync_fndecl_48835_fns __generic_file_fsync fndecl 2-3 48835 NULL
 tx_tx_start_int_templates_read_fndecl_48839_fns tx_tx_start_int_templates_read fndecl 3 48839 NULL
 vmalloc_to_sg_fndecl_48865_fns vmalloc_to_sg fndecl 2 48865 NULL
 mpls_count_nexthops_fndecl_48869_fns mpls_count_nexthops fndecl 0 48869 NULL
 __copy_from_user_swizzled_fndecl_48882_fns __copy_from_user_swizzled fndecl 2-4 48882 NULL
 bylength_atto_vda_ae_hdr_48890_fns bylength atto_vda_ae_hdr 0 48890 NULL
+radeon_ttm_gtt_read_fndecl_48900_fns radeon_ttm_gtt_read fndecl 3 48900 NULL
 xt_alloc_table_info_fndecl_48956_fns xt_alloc_table_info fndecl 1 48956 NULL
 user_dlm_lock_fndecl_48959_fns user_dlm_lock fndecl 6 48959 NULL
 xfs_mru_cache_create_fndecl_48964_fns xfs_mru_cache_create fndecl 3 48964 NULL
 vtpm_proxy_fops_write_fndecl_48972_fns vtpm_proxy_fops_write fndecl 3 48972 NULL
+dma40_prep_dma_cyclic_fndecl_48976_fns dma40_prep_dma_cyclic fndecl 4-3 48976 NULL
 sel_read_handle_unknown_fndecl_48990_fns sel_read_handle_unknown fndecl 3 48990 NULL
 ip_set_alloc_fndecl_49010_fns ip_set_alloc fndecl 1 49010 NULL
 compat_writev_fndecl_49017_fns compat_writev fndecl 3 49017 NULL
 rx_reset_counter_read_fndecl_49026_fns rx_reset_counter_read fndecl 3 49026 NULL
+usb_dmac_prep_slave_sg_fndecl_49027_fns usb_dmac_prep_slave_sg fndecl 3 49027 NULL
 devno_skd_device_49051_fns devno skd_device 0 49051 NULL
 do_writepage_fndecl_49068_fns do_writepage fndecl 2 49068 NULL
 dev_priv_size_drm_buf_49086_fns dev_priv_size drm_buf 0 49086 NULL
@@ -3493,6 +3815,7 @@ alloc_rbio_fndecl_49128_fns alloc_rbio fndecl 3 49128 NULL
 mad_seg_size_ib_mad_recv_wc_49134_fns mad_seg_size ib_mad_recv_wc 0 49134 NULL
 ufx_reg_clear_and_set_bits_fndecl_49150_fns ufx_reg_clear_and_set_bits fndecl 0 49150 NULL
 ipr_alloc_ucode_buffer_fndecl_49172_fns ipr_alloc_ucode_buffer fndecl 1 49172 NULL
+allocate_probes_fndecl_49183_fns allocate_probes fndecl 1 49183 NULL
 fsl_edma_prep_dma_cyclic_fndecl_49197_fns fsl_edma_prep_dma_cyclic fndecl 3 49197 NULL nohasharray
 of_get_child_count_fndecl_49197_fns of_get_child_count fndecl 0 49197 &fsl_edma_prep_dma_cyclic_fndecl_49197_fns
 ocrdma_dbgfs_ops_read_fndecl_49211_fns ocrdma_dbgfs_ops_read fndecl 3 49211 NULL
@@ -3514,6 +3837,7 @@ x509_akid_note_serial_fndecl_49380_fns x509_akid_note_serial fndecl 5 49380 NULL
 pe_data_len_ip_vs_conn_49384_fns pe_data_len ip_vs_conn 0 49384 NULL
 tty_prepare_flip_string_fndecl_49408_fns tty_prepare_flip_string fndecl 3 49408 NULL
 next_bio_fndecl_49410_fns next_bio fndecl 2 49410 NULL
+lstcon_group_list_fndecl_49413_fns lstcon_group_list fndecl 2 49413 NULL
 mthca_array_init_fndecl_49440_fns mthca_array_init fndecl 2 49440 NULL
 fw_device_op_read_fndecl_49445_fns fw_device_op_read fndecl 3 49445 NULL
 broadsheetfb_write_fndecl_49467_fns broadsheetfb_write fndecl 3 49467 NULL
@@ -3567,9 +3891,12 @@ size_ubifs_data_node_50154_fns size ubifs_data_node 0 50154 NULL
 max_inbound_iu_length_pqi_ctrl_info_50155_fns max_inbound_iu_length pqi_ctrl_info 0 50155 NULL
 fops_read_fndecl_50163_fns fops_read fndecl 3 50163 NULL
 pci_enable_resources_fndecl_50171_fns pci_enable_resources fndecl 0 50171 NULL
+ubi_more_update_data_fndecl_50182_fns ubi_more_update_data fndecl 4 50182 NULL
 nested_cr3_nested_state_50183_fns nested_cr3 nested_state 0 50183 NULL
+echo_client_kbrw_fndecl_50193_fns echo_client_kbrw fndecl 6 50193 NULL
 pwr_cont_miss_bcns_spread_read_fndecl_50241_fns pwr_cont_miss_bcns_spread_read fndecl 3 50241 NULL nohasharray
 r128_compat_ioctl_fndecl_50241_fns r128_compat_ioctl fndecl 2 50241 &pwr_cont_miss_bcns_spread_read_fndecl_50241_fns
+lprocfs_wr_root_squash_fndecl_50252_fns lprocfs_wr_root_squash fndecl 2 50252 NULL
 posix_acl_to_xattr_fndecl_50262_fns posix_acl_to_xattr fndecl 0 50262 NULL
 buf_struct_size_vb2_queue_50266_fns buf_struct_size vb2_queue 0 50266 NULL
 rx_filter_protection_filter_read_fndecl_50273_fns rx_filter_protection_filter_read fndecl 3 50273 NULL
@@ -3584,14 +3911,17 @@ sbp_count_se_tpg_luns_fndecl_50444_fns sbp_count_se_tpg_luns fndecl 0 50444 NULL
 nfsd_drc_mem_used_vardecl_50456_fns nfsd_drc_mem_used vardecl 0 50456 NULL
 __ath6kl_wmi_send_mgmt_cmd_fndecl_50472_fns __ath6kl_wmi_send_mgmt_cmd fndecl 7 50472 NULL
 buf_size_dmatest_params_50477_fns buf_size dmatest_params 0 50477 NULL
+lpfc_idiag_extacc_write_fndecl_50501_fns lpfc_idiag_extacc_write fndecl 3 50501 NULL
 OSDSetBlock_fndecl_50521_fns OSDSetBlock fndecl 2-4 50521 NULL
 get_nodes_fndecl_50551_fns get_nodes fndecl 3 50551 NULL
 do_write_kmem_fndecl_50584_fns do_write_kmem fndecl 0-1-3 50584 NULL
 pwrite_dvb_ringbuffer_50594_fns pwrite dvb_ringbuffer 0 50594 NULL
-__kfifo_to_user_r_fndecl_50624_fns __kfifo_to_user_r fndecl 3-5 50624 NULL
+__kfifo_to_user_r_fndecl_50624_fns __kfifo_to_user_r fndecl 3-5 50624 NULL nohasharray
+buffer_depth_etb_drvdata_50624_fns buffer_depth etb_drvdata 0 50624 &__kfifo_to_user_r_fndecl_50624_fns
 keymap_size_dell_dmi_results_50640_fns keymap_size dell_dmi_results 0 50640 NULL
 tomoyo_truncate_fndecl_50642_fns tomoyo_truncate fndecl 0 50642 NULL
 xor_sources_dmatest_params_50653_fns xor_sources dmatest_params 0 50653 NULL
+qsfp2_debugfs_write_fndecl_50656_fns qsfp2_debugfs_write fndecl 3 50656 NULL
 proc_coredump_filter_read_fndecl_50658_fns proc_coredump_filter_read fndecl 3 50658 NULL
 da9150_i2c_write_device_fndecl_50670_fns da9150_i2c_write_device fndecl 3 50670 NULL
 nclips_bttv_overlay_50673_fns nclips bttv_overlay 0 50673 NULL
@@ -3599,6 +3929,7 @@ alloc_ring_fndecl_50684_fns alloc_ring fndecl 4-2 50684 NULL
 get_device_info_fndecl_50718_fns get_device_info fndecl 0 50718 NULL
 dm_create_fndecl_50754_fns dm_create fndecl 1 50754 NULL
 ip_vs_sync_buff_create_fndecl_50787_fns ip_vs_sync_buff_create fndecl 2 50787 NULL
+xhci_alloc_segments_for_ring_fndecl_50793_fns xhci_alloc_segments_for_ring fndecl 7 50793 NULL
 ib_uverbs_get_context_fndecl_50799_fns ib_uverbs_get_context fndecl 4-5 50799 NULL
 persistent_ram_buffer_map_fndecl_50803_fns persistent_ram_buffer_map fndecl 1-2 50803 NULL
 malloc_size__BIG_IOCTL_Command_struct_50805_fns malloc_size _BIG_IOCTL_Command_struct 0 50805 NULL
@@ -3616,6 +3947,7 @@ pkt_add_fndecl_50890_fns pkt_add fndecl 3 50890 &ie_len_ieee80211_if_ibss_50890_
 req_len_proxy_dev_50912_fns req_len proxy_dev 0 50912 NULL
 exofs_read_kern_fndecl_50914_fns exofs_read_kern fndecl 6 50914 NULL nohasharray
 oom_score_adj_read_fndecl_50914_fns oom_score_adj_read fndecl 3 50914 &exofs_read_kern_fndecl_50914_fns
+sa11x0_dma_prep_dma_cyclic_fndecl_50916_fns sa11x0_dma_prep_dma_cyclic fndecl 3-4 50916 NULL
 init_sc_pools_and_sizes_fndecl_50922_fns init_sc_pools_and_sizes fndecl 0 50922 NULL
 first_minor_gendisk_50925_fns first_minor gendisk 0 50925 NULL
 read_file_modal_eeprom_fndecl_50934_fns read_file_modal_eeprom fndecl 3 50934 NULL
@@ -3631,6 +3963,7 @@ usif_ioctl_fndecl_50986_fns usif_ioctl fndecl 3 50986 NULL
 ib_uverbs_create_srq_fndecl_51025_fns ib_uverbs_create_srq fndecl 4-5 51025 NULL
 int_proc_write_fndecl_51045_fns int_proc_write fndecl 3 51045 NULL
 mlxsw_sp_port_prio_tc_set_fndecl_51047_fns mlxsw_sp_port_prio_tc_set fndecl 0 51047 NULL
+cl_req_alloc_fndecl_51056_fns cl_req_alloc fndecl 4 51056 NULL
 datablob_format_fndecl_51072_fns datablob_format fndecl 2 51072 NULL
 pp_write_fndecl_51089_fns pp_write fndecl 3 51089 NULL
 copy_chunked_from_user_fndecl_51106_fns copy_chunked_from_user fndecl 3 51106 NULL
@@ -3651,6 +3984,7 @@ max_num_vringh_kiov_51202_fns max_num vringh_kiov 0 51202 NULL
 kvm_clear_guest_fndecl_51207_fns kvm_clear_guest fndecl 3-2 51207 NULL
 get_ucode_user_fndecl_51241_fns get_ucode_user fndecl 3 51241 NULL
 cdev_add_fndecl_51251_fns cdev_add fndecl 3 51251 NULL
+imxdma_prep_dma_cyclic_fndecl_51257_fns imxdma_prep_dma_cyclic fndecl 4-3 51257 NULL
 osd_req_list_partition_collections_fndecl_51292_fns osd_req_list_partition_collections fndecl 5 51292 NULL
 ramoops_read_kmsg_hdr_fndecl_51300_fns ramoops_read_kmsg_hdr fndecl 0 51300 NULL
 mthca_alloc_icm_table_fndecl_51311_fns mthca_alloc_icm_table fndecl 3-4 51311 NULL
@@ -3661,6 +3995,7 @@ xfs_bmbt_to_bmdr_fndecl_51344_fns xfs_bmbt_to_bmdr fndecl 3 51344 NULL nohasharr
 xfs_bmdr_to_bmbt_fndecl_51344_fns xfs_bmdr_to_bmbt fndecl 5 51344 &xfs_bmbt_to_bmdr_fndecl_51344_fns
 dev_change_flags_fndecl_51349_fns dev_change_flags fndecl 0 51349 NULL
 isr_rx_headers_read_fndecl_51366_fns isr_rx_headers_read fndecl 3 51366 NULL
+lprocfs_wr_nosquash_nids_fndecl_51370_fns lprocfs_wr_nosquash_nids fndecl 2 51370 NULL
 uvc_try_frame_interval_fndecl_51372_fns uvc_try_frame_interval fndecl 0-2 51372 NULL
 ucma_query_path_fndecl_51378_fns ucma_query_path fndecl 3 51378 NULL
 num_queues_virtio_scsi_51387_fns num_queues virtio_scsi 0 51387 NULL nohasharray
@@ -3671,7 +4006,8 @@ nr_segments_blkif_request_indirect_51457_fns nr_segments blkif_request_indirect
 compat_sys_rt_sigpending_fndecl_51480_fns compat_sys_rt_sigpending fndecl 2 51480 NULL
 num_vectors_mic_irq_info_51485_fns num_vectors mic_irq_info 0 51485 NULL
 end_soundfont_sample_info_51497_fns end soundfont_sample_info 0 51497 NULL
-pkt_alloc_packet_data_fndecl_51515_fns pkt_alloc_packet_data fndecl 1 51515 NULL
+pkt_alloc_packet_data_fndecl_51515_fns pkt_alloc_packet_data fndecl 1 51515 NULL nohasharray
+_rtw_malloc_fndecl_51515_fns _rtw_malloc fndecl 1 51515 &pkt_alloc_packet_data_fndecl_51515_fns
 nfp_net_rx_ring_alloc_fndecl_51524_fns nfp_net_rx_ring_alloc fndecl 3 51524 NULL
 fifo_alloc_fndecl_51546_fns fifo_alloc fndecl 1 51546 NULL nohasharray
 scan_bytes_iio_dev_51546_fns scan_bytes iio_dev 0 51546 &fifo_alloc_fndecl_51546_fns
@@ -3680,6 +4016,8 @@ rds_rdma_extra_size_fndecl_51573_fns rds_rdma_extra_size fndecl 0 51573 NULL
 persistent_ram_old_size_fndecl_51582_fns persistent_ram_old_size fndecl 0 51582 NULL
 aggr_recv_addba_req_evt_fndecl_51590_fns aggr_recv_addba_req_evt fndecl 4 51590 NULL
 wilc_add_beacon_fndecl_51601_fns wilc_add_beacon fndecl 6-4 51601 NULL
+vfp_get_fndecl_51605_fns vfp_get fndecl 3-4 51605 NULL
+etb_get_buffer_depth_fndecl_51607_fns etb_get_buffer_depth fndecl 0 51607 NULL
 cifs_send_async_read_fndecl_51630_fns cifs_send_async_read fndecl 2 51630 NULL
 sysfs_do_create_link_fndecl_51632_fns sysfs_do_create_link fndecl 0 51632 NULL
 wil_vring_init_bcast_fndecl_51633_fns wil_vring_init_bcast fndecl 3 51633 NULL
@@ -3699,6 +4037,7 @@ num_req_context_skd_device_51707_fns num_req_context skd_device 0 51707 NULL
 f2fs_kmalloc_fndecl_51712_fns f2fs_kmalloc fndecl 2 51712 NULL
 nlimbs_gcry_mpi_51721_fns nlimbs gcry_mpi 0 51721 NULL nohasharray
 ib_uverbs_modify_qp_fndecl_51721_fns ib_uverbs_modify_qp fndecl 4-5 51721 &nlimbs_gcry_mpi_51721_fns
+output_sync_fndecl_51729_fns output_sync fndecl 3 51729 NULL
 acpi_copy_property_array_u32_fndecl_51744_fns acpi_copy_property_array_u32 fndecl 0 51744 NULL
 rbio_add_io_page_fndecl_51775_fns rbio_add_io_page fndecl 6 51775 NULL
 btusb_qca_send_vendor_req_fndecl_51785_fns btusb_qca_send_vendor_req fndecl 4 51785 NULL
@@ -3729,7 +4068,9 @@ rd_allocate_sgl_table_fndecl_52188_fns rd_allocate_sgl_table fndecl 3 52188 NULL
 regmap_calc_reg_len_fndecl_52195_fns regmap_calc_reg_len fndecl 0 52195 NULL
 qp_broker_alloc_fndecl_52197_fns qp_broker_alloc fndecl 6-5 52197 NULL
 audit_init_entry_fndecl_52199_fns audit_init_entry fndecl 1 52199 NULL
+write_enabled_file_bool_fndecl_52213_fns write_enabled_file_bool fndecl 3 52213 NULL
 snd_hda_get_conn_list_fndecl_52255_fns snd_hda_get_conn_list fndecl 0 52255 NULL
+channels_count_gb_light_52264_fns channels_count gb_light 0 52264 NULL
 num_alt_cx231xx_audio_52283_fns num_alt cx231xx_audio 0 52283 NULL
 rts51x_get_max_lun_fndecl_52294_fns rts51x_get_max_lun fndecl 0 52294 NULL
 cmd_len_c2h_evt_hdr_52322_fns cmd_len c2h_evt_hdr 0 52322 NULL
@@ -3780,17 +4121,22 @@ rx_decrypt_key_not_found_read_fndecl_52911_fns rx_decrypt_key_not_found_read fnd
 cqc_entry_sz_mlx4_dev_cap_52916_fns cqc_entry_sz mlx4_dev_cap 0 52916 NULL
 smk_read_logging_fndecl_52927_fns smk_read_logging fndecl 3 52927 NULL
 minor_drbd_genlmsghdr_52949_fns minor drbd_genlmsghdr 0 52949 NULL
+__arm_iommu_alloc_attrs_fndecl_52955_fns __arm_iommu_alloc_attrs fndecl 2 52955 NULL
 sys_setxattr_fndecl_52971_fns sys_setxattr fndecl 4 52971 NULL
 tty_insert_flip_string_fixed_flag_fndecl_53031_fns tty_insert_flip_string_fixed_flag fndecl 4 53031 NULL
 sys_getxattr_fndecl_53049_fns sys_getxattr fndecl 4 53049 NULL
 acpi_os_allocate_zeroed_fndecl_53053_fns acpi_os_allocate_zeroed fndecl 1 53053 NULL
+pxad_prep_memcpy_fndecl_53065_fns pxad_prep_memcpy fndecl 4 53065 NULL
 kvm_vcpu_write_guest_page_fndecl_53070_fns kvm_vcpu_write_guest_page fndecl 5-2 53070 NULL
+omap_hwmod_mux_init_fndecl_53072_fns omap_hwmod_mux_init fndecl 2 53072 NULL
 fru_alloc_fndecl_53073_fns fru_alloc fndecl 1 53073 NULL
 ntfs_dir_fsync_fndecl_53093_fns ntfs_dir_fsync fndecl 2-3 53093 NULL
+wilc_spi_read_fndecl_53099_fns wilc_spi_read fndecl 4 53099 NULL
 brcmf_fw_nvram_strip_fndecl_53102_fns brcmf_fw_nvram_strip fndecl 2 53102 NULL
 logi_dj_recv_forward_hidpp_fndecl_53117_fns logi_dj_recv_forward_hidpp fndecl 3 53117 NULL
 xz_dec_test_write_fndecl_53124_fns xz_dec_test_write fndecl 3 53124 NULL
 private_data_len_ib_cm_sidr_req_param_53150_fns private_data_len ib_cm_sidr_req_param 0 53150 NULL
+lpfc_debugfs_max_disc_trc_vardecl_lpfc_debugfs_c_53169_fns lpfc_debugfs_max_disc_trc vardecl_lpfc_debugfs.c 0 53169 NULL
 num_tx_rings_nfp_net_53170_fns num_tx_rings nfp_net 0 53170 NULL
 xhci_alloc_streams_fndecl_53185_fns xhci_alloc_streams fndecl 5 53185 NULL
 SYSC_mbind_fndecl_53221_fns SYSC_mbind fndecl 5 53221 NULL
@@ -3810,11 +4156,14 @@ SYSC_getxattr_fndecl_53377_fns SYSC_getxattr fndecl 4 53377 NULL
 viafb_iga1_odev_proc_write_fndecl_53378_fns viafb_iga1_odev_proc_write fndecl 3 53378 NULL
 vmsplice_to_user_fndecl_53382_fns vmsplice_to_user fndecl 3 53382 NULL nohasharray
 rproc_recovery_read_fndecl_53382_fns rproc_recovery_read fndecl 3 53382 &vmsplice_to_user_fndecl_53382_fns
+jz4740_dma_prep_slave_sg_fndecl_53383_fns jz4740_dma_prep_slave_sg fndecl 3 53383 NULL
 command_setformat_fndecl_53392_fns command_setformat fndecl 0 53392 NULL
 wil_agg_size_fndecl_53398_fns wil_agg_size fndecl 0-2 53398 NULL
 num_entries_s2io_nic_53404_fns num_entries s2io_nic 0 53404 NULL
 set_rcvarray_entry_fndecl_53410_fns set_rcvarray_entry fndecl 6 53410 NULL
+cfs_hash_buckets_realloc_fndecl_53415_fns cfs_hash_buckets_realloc fndecl 4 53415 NULL
 rxHeader3_edgeport_serial_53418_fns rxHeader3 edgeport_serial 0 53418 NULL
+codec_reg_read_file_fndecl_53419_fns codec_reg_read_file fndecl 3 53419 NULL
 compat_sys_mbind_fndecl_53427_fns compat_sys_mbind fndecl 5 53427 NULL
 ad7879_spi_xfer_fndecl_53444_fns ad7879_spi_xfer fndecl 3 53444 NULL
 nouveau_cli_create_fndecl_53462_fns nouveau_cli_create fndecl 3 53462 NULL
@@ -3839,6 +4188,7 @@ device_add_class_symlinks_fndecl_53634_fns device_add_class_symlinks fndecl 0 53
 write_file_antenna_fndecl_53645_fns write_file_antenna fndecl 3 53645 NULL
 generic_ocp_read_fndecl_53653_fns generic_ocp_read fndecl 3 53653 NULL
 acl_alloc_fndecl_53656_fns acl_alloc fndecl 1 53656 NULL
+__videobuf_alloc_fndecl_53676_fns __videobuf_alloc fndecl 1 53676 NULL
 list_lru_count_one_fndecl_53682_fns list_lru_count_one fndecl 0 53682 NULL
 gpio_power_read_fndecl_53704_fns gpio_power_read fndecl 3 53704 NULL
 mtip_hw_read_device_status_fndecl_53729_fns mtip_hw_read_device_status fndecl 3 53729 NULL
@@ -3862,6 +4212,7 @@ of_iomap_fndecl_53930_fns of_iomap fndecl 2 53930 NULL
 i40e_init_lan_hmc_fndecl_53935_fns i40e_init_lan_hmc fndecl 2-3-4-5 53935 NULL
 hiddev_ioctl_fndecl_53955_fns hiddev_ioctl fndecl 2 53955 NULL
 proc_fault_inject_read_fndecl_53969_fns proc_fault_inject_read fndecl 3 53969 NULL
+gb_operation_create_core_fndecl_54045_fns gb_operation_create_core fndecl 3 54045 NULL
 tunables_read_fndecl_54066_fns tunables_read fndecl 3 54066 NULL
 sctp_tsnmap_init_fndecl_54093_fns sctp_tsnmap_init fndecl 3 54093 NULL
 bytes_read_usbvision_frame_54101_fns bytes_read usbvision_frame 0 54101 NULL
@@ -3870,6 +4221,7 @@ gfs2_inode_ra_len_fndecl_54141_fns gfs2_inode_ra_len fndecl 0 54141 NULL
 __hwahc_op_set_ptk_fndecl_54157_fns __hwahc_op_set_ptk fndecl 5 54157 NULL
 b43_nphy_load_samples_fndecl_54162_fns b43_nphy_load_samples fndecl 3 54162 NULL
 cpu_type_read_fndecl_54191_fns cpu_type_read fndecl 3 54191 NULL
+smsusb_sendrequest_fndecl_54196_fns smsusb_sendrequest fndecl 3 54196 NULL
 p_filesz_elf32_phdr_54204_fns p_filesz elf32_phdr 0 54204 NULL
 numeraseregions_mtd_info_54223_fns numeraseregions mtd_info 0 54223 NULL
 __kfifo_to_user_fndecl_54232_fns __kfifo_to_user fndecl 3 54232 NULL
@@ -3899,6 +4251,7 @@ do_preadv_fndecl_54493_fns do_preadv fndecl 3 54493 NULL
 sys_setsockopt_fndecl_54507_fns sys_setsockopt fndecl 5 54507 NULL
 bio_segments_fndecl_54531_fns bio_segments fndecl 0 54531 NULL
 b43_debugfs_write_fndecl_54533_fns b43_debugfs_write fndecl 3 54533 NULL
+__i2c_debugfs_read_fndecl_54556_fns __i2c_debugfs_read fndecl 3 54556 NULL
 cp_nr_rings_bnxt_54565_fns cp_nr_rings bnxt 0 54565 NULL
 acpi_system_write_wakeup_device_fndecl_54582_fns acpi_system_write_wakeup_device fndecl 3 54582 NULL
 mipi_dsi_dcs_write_fndecl_54605_fns mipi_dsi_dcs_write fndecl 4 54605 NULL
@@ -3913,16 +4266,20 @@ proc_setgroups_write_fndecl_54732_fns proc_setgroups_write fndecl 3 54732 NULL
 hwdep_read_locked_fndecl_54734_fns hwdep_read_locked fndecl 3 54734 NULL
 pwr_connection_out_of_sync_read_fndecl_54758_fns pwr_connection_out_of_sync_read fndecl 3 54758 NULL
 cqm_max_rmid_vardecl_cqm_c_54798_fns cqm_max_rmid vardecl_cqm.c 0 54798 NULL
+spk_msg_set_fndecl_54801_fns spk_msg_set fndecl 3 54801 NULL
 buf_size__BIG_IOCTL_Command_struct_54806_fns buf_size _BIG_IOCTL_Command_struct 0 54806 NULL
 persistent_ram_update_user_fndecl_54807_fns persistent_ram_update_user fndecl 4 54807 NULL
 pci_request_regions_fndecl_54816_fns pci_request_regions fndecl 0 54816 NULL
 kernel_readv_fndecl_54834_fns kernel_readv fndecl 3 54834 NULL
+i2c1_debugfs_write_fndecl_54837_fns i2c1_debugfs_write fndecl 3 54837 NULL
 spi_register_board_info_fndecl_54864_fns spi_register_board_info fndecl 2 54864 NULL
+usb_dmac_desc_get_fndecl_54869_fns usb_dmac_desc_get fndecl 2 54869 NULL
 compress_sliced_buf_fndecl_54891_fns compress_sliced_buf fndecl 0 54891 NULL
 num_uars_mlx5_uuar_info_54898_fns num_uars mlx5_uuar_info 0 54898 NULL
 buffer_size_qcaspi_54902_fns buffer_size qcaspi 0 54902 NULL
 rds_page_copy_user_fndecl_54904_fns rds_page_copy_user fndecl 4 54904 NULL
 sd_start_ov361x_fndecl_54922_fns sd_start_ov361x fndecl 0 54922 NULL
+gb_operation_create_flags_fndecl_54976_fns gb_operation_create_flags fndecl 3 54976 NULL
 fence_wait_any_timeout_fndecl_54982_fns fence_wait_any_timeout fndecl 2 54982 NULL
 alloc_netdev_mqs_fndecl_54989_fns alloc_netdev_mqs fndecl 5-6-1 54989 NULL
 udf_alloc_i_data_fndecl_55001_fns udf_alloc_i_data fndecl 2 55001 NULL
@@ -3931,9 +4288,11 @@ pvr2_hdw_cpufw_get_fndecl_55011_fns pvr2_hdw_cpufw_get fndecl 0-2-4 55011 NULL
 command_setcompressionparams_fndecl_55026_fns command_setcompressionparams fndecl 0 55026 NULL
 hpi_alloc_control_cache_fndecl_55044_fns hpi_alloc_control_cache fndecl 1 55044 NULL
 restart_sge_fndecl_55067_fns restart_sge fndecl 0-4-3 55067 NULL
+stm32_dma_prep_slave_sg_fndecl_55074_fns stm32_dma_prep_slave_sg fndecl 3 55074 NULL
 read_kmem_fndecl_55103_fns read_kmem fndecl 3 55103 NULL
 fake_alloc_consistent_fndecl_55132_fns fake_alloc_consistent fndecl 2 55132 NULL
 btrfs_search_old_slot_fndecl_55133_fns btrfs_search_old_slot fndecl 0 55133 NULL
+buffer_to_user_fndecl_55164_fns buffer_to_user fndecl 3 55164 NULL
 virtqueue_get_vring_size_fndecl_55188_fns virtqueue_get_vring_size fndecl 0 55188 NULL
 efx_mcdi_rpc_async_quiet_fndecl_55191_fns efx_mcdi_rpc_async_quiet fndecl 4-5 55191 NULL
 rxpipe_tx_xfr_host_int_trig_rx_data_read_fndecl_55233_fns rxpipe_tx_xfr_host_int_trig_rx_data_read fndecl 3 55233 NULL
@@ -3958,6 +4317,7 @@ find_phys_blocks_fndecl_55388_fns find_phys_blocks fndecl 0 55388 NULL
 nprim_symtab_55398_fns nprim symtab 0 55398 NULL
 periodic_size_oxu_hcd_55401_fns periodic_size oxu_hcd 0 55401 NULL
 shmem_pread_fast_fndecl_55408_fns shmem_pread_fast fndecl 3 55408 NULL
+len_wm_coeff_parsed_coeff_55454_fns len wm_coeff_parsed_coeff 0 55454 NULL
 start_genius_cam_fndecl_55469_fns start_genius_cam fndecl 0 55469 NULL
 bl_pipe_downcall_fndecl_55499_fns bl_pipe_downcall fndecl 3 55499 NULL
 setup_nodes_for_search_fndecl_55515_fns setup_nodes_for_search fndecl 0 55515 NULL
@@ -3975,6 +4335,7 @@ kvm_vcpu_gfn_to_page_fndecl_55725_fns kvm_vcpu_gfn_to_page fndecl 2 55725 NULL
 mpi_from_key_fndecl_55729_fns mpi_from_key fndecl 0 55729 NULL
 cnt_mon_text_ptr_55741_fns cnt mon_text_ptr 0 55741 NULL
 vga_switcheroo_debugfs_write_fndecl_55763_fns vga_switcheroo_debugfs_write fndecl 3 55763 NULL
+cmd_read_size_wiimote_state_55772_fns cmd_read_size wiimote_state 0 55772 NULL
 rx_rx_xfr_read_fndecl_55779_fns rx_rx_xfr_read fndecl 3 55779 NULL
 qed_cxt_get_proto_tid_count_fndecl_55797_fns qed_cxt_get_proto_tid_count fndecl 0 55797 NULL
 lbs_lowrssi_write_fndecl_55802_fns lbs_lowrssi_write fndecl 3 55802 NULL
@@ -3987,6 +4348,7 @@ cw1200_queue_init_fndecl_55860_fns cw1200_queue_init fndecl 4 55860 &ceph_msgpoo
 do_raw_getsockopt_fndecl_55863_fns do_raw_getsockopt fndecl 0 55863 NULL
 nports_cyclades_card_55865_fns nports cyclades_card 0 55865 NULL
 cnic_alloc_dma_fndecl_55874_fns cnic_alloc_dma fndecl 3 55874 NULL
+ad7280_chain_setup_fndecl_55912_fns ad7280_chain_setup fndecl 0 55912 NULL
 isr_fiqs_read_fndecl_55916_fns isr_fiqs_read fndecl 3 55916 NULL
 response_length_mlx5_ib_create_wq_resp_55932_fns response_length mlx5_ib_create_wq_resp 0 55932 NULL
 do_readv_writev_fndecl_55934_fns do_readv_writev fndecl 4 55934 NULL
@@ -4003,6 +4365,7 @@ proc_thread_self_readlink_fndecl_56102_fns proc_thread_self_readlink fndecl 3 56
 maximum_input_absinfo_56108_fns maximum input_absinfo 0 56108 NULL
 block_size_ecryptfs_write_tag_70_packet_silly_stack_56117_fns block_size ecryptfs_write_tag_70_packet_silly_stack 0 56117 NULL
 ssl_prev_nilfs_snapshot_list_56120_fns ssl_prev nilfs_snapshot_list 0 56120 NULL
+usbvision_v4l2_read_fndecl_56129_fns usbvision_v4l2_read fndecl 3 56129 NULL
 av7110_vbi_write_fndecl_56131_fns av7110_vbi_write fndecl 3 56131 NULL
 iwl_calib_set_fndecl_56179_fns iwl_calib_set fndecl 3 56179 NULL nohasharray
 ivtv_read_pos_fndecl_56179_fns ivtv_read_pos fndecl 3 56179 &iwl_calib_set_fndecl_56179_fns
@@ -4026,6 +4389,7 @@ alloc_gid_table_fndecl_56444_fns alloc_gid_table fndecl 1 56444 NULL
 _pci_add_cap_save_buffer_fndecl_56466_fns _pci_add_cap_save_buffer fndecl 4 56466 NULL
 banks_mca_config_56472_fns banks mca_config 0 56472 NULL
 pp_read_fndecl_56489_fns pp_read fndecl 3 56489 NULL
+batadv_socket_receive_packet_fndecl_56509_fns batadv_socket_receive_packet fndecl 2 56509 NULL
 __vb2_wait_for_done_vb_fndecl_56525_fns __vb2_wait_for_done_vb fndecl 0 56525 NULL
 vp_modern_find_vqs_fndecl_56530_fns vp_modern_find_vqs fndecl 2 56530 NULL
 cachefiles_cook_key_fndecl_56553_fns cachefiles_cook_key fndecl 2 56553 NULL
@@ -4052,6 +4416,7 @@ count_subheaders_fndecl_56868_fns count_subheaders fndecl 0 56868 NULL
 scsi_execute_fndecl_56879_fns scsi_execute fndecl 5 56879 NULL
 ack_gen_tipc_mon_domain_56881_fns ack_gen tipc_mon_domain 0 56881 NULL
 cifs_fsync_fndecl_56917_fns cifs_fsync fndecl 2-3 56917 NULL
+comedi_buf_write_n_allocated_fndecl_56919_fns comedi_buf_write_n_allocated fndecl 0 56919 NULL
 usb_gstrings_attach_fndecl_56924_fns usb_gstrings_attach fndecl 3 56924 NULL
 nrealreaders_vardecl_rcuperf_c_56929_fns nrealreaders vardecl_rcuperf.c 0 56929 NULL
 csize_jffs2_tmp_dnode_info_56933_fns csize jffs2_tmp_dnode_info 0 56933 NULL
@@ -4065,6 +4430,7 @@ i2c_hack_wm8775_fndecl_57014_fns i2c_hack_wm8775 fndecl 4-6 57014 NULL
 expand_corename_fndecl_57021_fns expand_corename fndecl 2 57021 NULL
 sys_keyctl_fndecl_57023_fns sys_keyctl fndecl 4 57023 NULL nohasharray
 xs_send_kvec_fndecl_57023_fns xs_send_kvec fndecl 3 57023 &sys_keyctl_fndecl_57023_fns
+__qcom_scm_hdcp_req_fndecl_57026_fns __qcom_scm_hdcp_req fndecl 3 57026 NULL
 vifs_state_read_fndecl_57073_fns vifs_state_read fndecl 3 57073 NULL
 mcs7830_get_reg_fndecl_57103_fns mcs7830_get_reg fndecl 3 57103 NULL
 bgx_cnt_hw_info_57124_fns bgx_cnt hw_info 0 57124 NULL
@@ -4072,17 +4438,20 @@ size_nvif_notify_57130_fns size nvif_notify 0 57130 NULL
 joydev_ioctl_fndecl_57132_fns joydev_ioctl fndecl 2 57132 NULL
 msg_controllen_msghdr_57136_fns msg_controllen msghdr 0 57136 NULL
 iblock_get_bio_fndecl_57139_fns iblock_get_bio fndecl 3 57139 NULL
+qcom_scm_call_fndecl_57160_fns qcom_scm_call fndecl 5-7 57160 NULL
 pd_points_ath5k_pdgain_info_57180_fns pd_points ath5k_pdgain_info 0 57180 NULL
 irq_pkt_threshold_read_fndecl_57183_fns irq_pkt_threshold_read fndecl 3 57183 NULL
+cfs_trace_copyin_string_fndecl_57191_fns cfs_trace_copyin_string fndecl 4 57191 NULL
 mon_buff_area_free_fndecl_57212_fns mon_buff_area_free fndecl 2 57212 NULL
 le_min_key_size_read_fndecl_57214_fns le_min_key_size_read fndecl 3 57214 NULL
 ovs_vport_alloc_fndecl_57296_fns ovs_vport_alloc fndecl 1 57296 NULL
 create_entry_fndecl_57300_fns create_entry fndecl 2 57300 NULL
 tcp_off_tso_state_57305_fns tcp_off tso_state 0 57305 NULL
-ip_setsockopt_fndecl_57308_fns ip_setsockopt fndecl 0 57308 NULL
+ip_setsockopt_fndecl_57308_fns ip_setsockopt fndecl 0-5 57308 NULL
 aggr_size_rx_size_read_fndecl_57317_fns aggr_size_rx_size_read fndecl 3 57317 NULL
 fb_read_fndecl_57329_fns fb_read fndecl 3 57329 NULL
 page_bytes_remain_capsule_info_57335_fns page_bytes_remain capsule_info 0 57335 NULL
+musb_test_mode_write_fndecl_57341_fns musb_test_mode_write fndecl 3 57341 NULL
 setup_glists_fndecl_57343_fns setup_glists fndecl 3 57343 NULL
 lbs_debugfs_write_fndecl_57358_fns lbs_debugfs_write fndecl 3 57358 NULL
 asix_read_cmd_fndecl_57362_fns asix_read_cmd fndecl 5 57362 NULL
@@ -4095,6 +4464,8 @@ nfs4_alloc_pages_fndecl_57401_fns nfs4_alloc_pages fndecl 1 57401 NULL
 key_size_ecryptfs_crypt_stat_57436_fns key_size ecryptfs_crypt_stat 0 57436 NULL
 send_control_msg_fndecl_57441_fns send_control_msg fndecl 6 57441 NULL
 diva_os_copy_to_user_fndecl_57455_fns diva_os_copy_to_user fndecl 4 57455 NULL
+wm_coeff_tlv_put_fndecl_57463_fns wm_coeff_tlv_put fndecl 3 57463 NULL
+r8712_usbctrl_vendorreq_fndecl_57466_fns r8712_usbctrl_vendorreq fndecl 6 57466 NULL
 command_resume_fndecl_57510_fns command_resume fndecl 0 57510 NULL
 igb_rd32_fndecl_57524_fns igb_rd32 fndecl 0 57524 NULL
 nvbios_extend_fndecl_57525_fns nvbios_extend fndecl 2 57525 NULL
@@ -4108,18 +4479,22 @@ nfsctl_transaction_read_fndecl_57705_fns nfsctl_transaction_read fndecl 3 57705
 read_file_recv_fndecl_57723_fns read_file_recv fndecl 3 57723 NULL
 x509_akid_note_kid_fndecl_57725_fns x509_akid_note_kid fndecl 5 57725 NULL
 partition_sched_domains_fndecl_57727_fns partition_sched_domains fndecl 1 57727 NULL
+hi6220_register_clkdiv_fndecl_57729_fns hi6220_register_clkdiv fndecl 7 57729 NULL
 max_devs_vardecl_aic94xx_hwi_c_57731_fns max_devs vardecl_aic94xx_hwi.c 0 57731 NULL
 compat_sys_io_getevents_fndecl_57736_fns compat_sys_io_getevents fndecl 3 57736 NULL
+batadv_socket_read_fndecl_57746_fns batadv_socket_read fndecl 3 57746 NULL
 raydium_i2c_send_message_fndecl_57747_fns raydium_i2c_send_message fndecl 4 57747 NULL
 acpi_ex_convert_to_ascii_fndecl_57750_fns acpi_ex_convert_to_ascii fndecl 0 57750 NULL
 cache_write_pipefs_fndecl_57757_fns cache_write_pipefs fndecl 3 57757 NULL
 tidcnt_hfi1_tid_info_57758_fns tidcnt hfi1_tid_info 0 57758 NULL
 send_set_info_fndecl_57779_fns send_set_info fndecl 7 57779 NULL
 fp_array_size_bnx2x_57781_fns fp_array_size bnx2x 0 57781 NULL
+spk_xe_vardecl_57804_fns spk_xe vardecl 0 57804 NULL
 tx_frag_init_called_read_fndecl_57834_fns tx_frag_init_called_read fndecl 3 57834 NULL
 vd_dsr_au_count_gru_vma_data_57855_fns vd_dsr_au_count gru_vma_data 0 57855 NULL
 joydev_handle_JSIOCSAXMAP_fndecl_57873_fns joydev_handle_JSIOCSAXMAP fndecl 3 57873 NULL
 xdi_copy_to_user_fndecl_57879_fns xdi_copy_to_user fndecl 4 57879 NULL
+exynos_srom_alloc_reg_dump_fndecl_57914_fns exynos_srom_alloc_reg_dump fndecl 2 57914 NULL
 ntb_transport_rx_enqueue_fndecl_57929_fns ntb_transport_rx_enqueue fndecl 4 57929 NULL
 event_heart_beat_read_fndecl_57938_fns event_heart_beat_read fndecl 3 57938 NULL
 nand_ecc_test_run_fndecl_57941_fns nand_ecc_test_run fndecl 1 57941 NULL
@@ -4136,6 +4511,7 @@ num_sqsets_csio_hw_58048_fns num_sqsets csio_hw 0 58048 NULL
 scsi_register_fndecl_58069_fns scsi_register fndecl 2 58069 NULL
 pt_read_fndecl_58083_fns pt_read fndecl 3 58083 NULL
 nentries_xpc_registration_58085_fns nentries xpc_registration 0 58085 NULL
+ll_max_cached_mb_seq_write_fndecl_58097_fns ll_max_cached_mb_seq_write fndecl 3 58097 NULL
 walk_pmd_range_fndecl_58100_fns walk_pmd_range fndecl 0 58100 NULL
 ore_get_rw_state_fndecl_58120_fns ore_get_rw_state fndecl 4-5 58120 NULL
 nvkm_disp_new__fndecl_58125_fns nvkm_disp_new_ fndecl 4 58125 NULL
@@ -4143,13 +4519,16 @@ sys_setgroups_fndecl_58127_fns sys_setgroups fndecl 1 58127 NULL nohasharray
 sm501_create_subdev_fndecl_58127_fns sm501_create_subdev fndecl 4-3 58127 &sys_setgroups_fndecl_58127_fns
 bufsize_vardecl_subpagetest_c_58128_fns bufsize vardecl_subpagetest.c 0 58128 NULL
 do_ip_vs_set_ctl_fndecl_58130_fns do_ip_vs_set_ctl fndecl 4 58130 NULL
-n_bitrates_ieee80211_supported_band_58136_fns n_bitrates ieee80211_supported_band 0 58136 NULL
+n_bitrates_ieee80211_supported_band_58136_fns n_bitrates ieee80211_supported_band 0 58136 NULL nohasharray
+ll_rw_extents_stats_pp_seq_write_fndecl_58136_fns ll_rw_extents_stats_pp_seq_write fndecl 3 58136 &n_bitrates_ieee80211_supported_band_58136_fns
 nvif_object_init_fndecl_58137_fns nvif_object_init fndecl 5 58137 NULL
+qsfp2_debugfs_read_fndecl_58142_fns qsfp2_debugfs_read fndecl 3 58142 NULL
 altera_drscan_fndecl_58153_fns altera_drscan fndecl 2 58153 NULL
 cui_nextents_xfs_cui_log_format_58174_fns cui_nextents xfs_cui_log_format 0 58174 NULL
 total_num_uuars_mlx5_ib_alloc_ucontext_req_v2_58191_fns total_num_uuars mlx5_ib_alloc_ucontext_req_v2 0 58191 NULL
 npages_ttm_page_pool_58200_fns npages ttm_page_pool 0 58200 NULL nohasharray
 nvmet_rdma_alloc_cmds_fndecl_58200_fns nvmet_rdma_alloc_cmds fndecl 2 58200 &npages_ttm_page_pool_58200_fns
+lpfc_idiag_drbacc_write_fndecl_58203_fns lpfc_idiag_drbacc_write fndecl 3 58203 NULL
 __pci_enable_msix_range_fndecl_58224_fns __pci_enable_msix_range fndecl 4 58224 NULL
 ubifs_jnl_write_data_fndecl_58229_fns ubifs_jnl_write_data fndecl 5 58229 NULL
 spi_replace_transfers_fndecl_58231_fns spi_replace_transfers fndecl 6-4 58231 NULL
@@ -4157,6 +4536,7 @@ ath6kl_regwrite_read_fndecl_58232_fns ath6kl_regwrite_read fndecl 3 58232 NULL
 ath6kl_usb_bmi_read_fndecl_58234_fns ath6kl_usb_bmi_read fndecl 3 58234 NULL
 i915_displayport_test_active_write_fndecl_58241_fns i915_displayport_test_active_write fndecl 3 58241 NULL
 gpiod_count_fndecl_58262_fns gpiod_count fndecl 0 58262 NULL
+mvneta_check_mtu_valid_fndecl_58264_fns mvneta_check_mtu_valid fndecl 0-2 58264 NULL
 viafb_dvp1_proc_write_fndecl_58355_fns viafb_dvp1_proc_write fndecl 3 58355 NULL
 __ffs_ep0_read_events_fndecl_58359_fns __ffs_ep0_read_events fndecl 3 58359 NULL
 ingr_start_sge_58376_fns ingr_start sge 0 58376 NULL
@@ -4187,6 +4567,7 @@ qib_copy_from_sge_fndecl_58565_fns qib_copy_from_sge fndecl 3 58565 NULL
 acpi_gpio_package_count_fndecl_58585_fns acpi_gpio_package_count fndecl 0 58585 NULL
 ext4_kvzalloc_fndecl_58598_fns ext4_kvzalloc fndecl 1 58598 NULL
 sctp_ssnmap_new_fndecl_58603_fns sctp_ssnmap_new fndecl 2-1 58603 NULL
+cache_read_pipefs_fndecl_58604_fns cache_read_pipefs fndecl 3 58604 NULL
 thermal_tx_resume_read_fndecl_58616_fns thermal_tx_resume_read fndecl 3 58616 NULL
 mousedev_read_fndecl_58624_fns mousedev_read fndecl 3 58624 NULL
 ath10k_wmi_alloc_host_mem_fndecl_58627_fns ath10k_wmi_alloc_host_mem fndecl 4-3 58627 NULL
@@ -4207,11 +4588,14 @@ tx_internal_desc_overflow_read_fndecl_58839_fns tx_internal_desc_overflow_read f
 kvm_debugfs_num_entries_vardecl_kvm_main_c_58842_fns kvm_debugfs_num_entries vardecl_kvm_main.c 0 58842 NULL
 nr_scratch_dwc3_58852_fns nr_scratch dwc3 0 58852 NULL
 ucs2_utf8size_fndecl_58859_fns ucs2_utf8size fndecl 0 58859 NULL
+pd_groupsize_ptlrpcd_58864_fns pd_groupsize ptlrpcd 0 58864 NULL
 usb_stor_bulk_transfer_sg_fndecl_58896_fns usb_stor_bulk_transfer_sg fndecl 5 58896 NULL
 v9fs_file_fsync_fndecl_58898_fns v9fs_file_fsync fndecl 2-3 58898 NULL
 vhci_read_fndecl_58901_fns vhci_read fndecl 3 58901 NULL
+comedi_write_fndecl_58917_fns comedi_write fndecl 3 58917 NULL
 fore200e_pca_dma_chunk_alloc_fndecl_58927_fns fore200e_pca_dma_chunk_alloc fndecl 4-3 58927 NULL
 sync_file_set_fence_fndecl_58938_fns sync_file_set_fence fndecl 3 58938 NULL
+cfs_percpt_alloc_fndecl_58941_fns cfs_percpt_alloc fndecl 2 58941 NULL
 drm_simple_display_pipe_init_fndecl_58972_fns drm_simple_display_pipe_init fndecl 5 58972 NULL
 mpi_read_raw_from_sgl_fndecl_58990_fns mpi_read_raw_from_sgl fndecl 2 58990 NULL
 __kvm_read_guest_atomic_fndecl_59011_fns __kvm_read_guest_atomic fndecl 5-2 59011 NULL
@@ -4219,7 +4603,9 @@ nclips_saa7146_overlay_59032_fns nclips saa7146_overlay 0 59032 NULL
 len_nand_bbt_descr_59045_fns len nand_bbt_descr 0 59045 NULL
 posix_acl_alloc_fndecl_59052_fns posix_acl_alloc fndecl 1 59052 NULL nohasharray
 nr_strip_zones_r0conf_59052_fns nr_strip_zones r0conf 0 59052 &posix_acl_alloc_fndecl_59052_fns
+axi_dmac_prep_slave_sg_fndecl_59073_fns axi_dmac_prep_slave_sg fndecl 3 59073 NULL
 buffer_mousedev_client_59098_fns buffer mousedev_client 0 59098 NULL
+wm_latency_write_fndecl_59118_fns wm_latency_write fndecl 3 59118 NULL
 mmc_alloc_host_fndecl_59122_fns mmc_alloc_host fndecl 1 59122 NULL
 tas571x_reg_write_multiword_fndecl_59156_fns tas571x_reg_write_multiword fndecl 4 59156 NULL
 copy_ucs2_from_user_len_fndecl_59162_fns copy_ucs2_from_user_len fndecl 3 59162 NULL
@@ -4232,6 +4618,7 @@ mvumi_alloc_mem_resource_fndecl_59285_fns mvumi_alloc_mem_resource fndecl 3 5928
 alloc_sched_domains_fndecl_59295_fns alloc_sched_domains fndecl 1 59295 NULL
 posix_acl_fix_xattr_from_user_fndecl_59298_fns posix_acl_fix_xattr_from_user fndecl 2 59298 NULL
 qib_copy_sge_fndecl_59314_fns qib_copy_sge fndecl 3 59314 NULL
+pinconf_dbg_config_write_fndecl_59336_fns pinconf_dbg_config_write fndecl 3 59336 NULL
 tree_mod_log_insert_move_fndecl_59356_fns tree_mod_log_insert_move fndecl 5 59356 NULL
 base_tsn_sctp_tsnmap_59358_fns base_tsn sctp_tsnmap 0 59358 NULL
 buf_len_i40e_arq_event_info_59370_fns buf_len i40e_arq_event_info 0 59370 NULL
@@ -4243,11 +4630,12 @@ desc_elems_timb_dma_chan_59416_fns desc_elems timb_dma_chan 0 59416 NULL
 nilfs_cpfile_block_get_checkpoint_fndecl_59441_fns nilfs_cpfile_block_get_checkpoint fndecl 2 59441 NULL
 rng_get_data_fndecl_59453_fns rng_get_data fndecl 0 59453 NULL
 platform_gpio_count_fndecl_59459_fns platform_gpio_count fndecl 0 59459 NULL
-ttm_page_pool_get_pages_fndecl_59468_fns ttm_page_pool_get_pages fndecl 5 59468 NULL
+ttm_page_pool_get_pages_fndecl_59468_fns ttm_page_pool_get_pages fndecl 5-0 59468 NULL
 rx_ringsz_alx_priv_59496_fns rx_ringsz alx_priv 0 59496 NULL
 pci_frontend_enable_msix_fndecl_59501_fns pci_frontend_enable_msix fndecl 3 59501 NULL
 wdata_alloc_and_fillpages_fndecl_59510_fns wdata_alloc_and_fillpages fndecl 1 59510 NULL
 qlcnic_get_vnic_func_count_fndecl_59521_fns qlcnic_get_vnic_func_count fndecl 0 59521 NULL
+gb_connection_recv_request_fndecl_59544_fns gb_connection_recv_request fndecl 4 59544 NULL
 kmsg_read_fndecl_59553_fns kmsg_read fndecl 3 59553 NULL nohasharray
 nouveau_drm_ioctl_fndecl_59553_fns nouveau_drm_ioctl fndecl 2 59553 &kmsg_read_fndecl_59553_fns
 mthca_alloc_cq_buf_fndecl_59555_fns mthca_alloc_cq_buf fndecl 3 59555 NULL
@@ -4260,6 +4648,7 @@ vringh_complete_multi_user_fndecl_59569_fns vringh_complete_multi_user fndecl 3
 key_count_applesmc_registers_59587_fns key_count applesmc_registers 0 59587 NULL
 serverworks_create_gatt_pages_fndecl_59621_fns serverworks_create_gatt_pages fndecl 1 59621 NULL
 amdgpu_kms_compat_ioctl_fndecl_59667_fns amdgpu_kms_compat_ioctl fndecl 2 59667 NULL
+rtw_buf_update_fndecl_59689_fns rtw_buf_update fndecl 4 59689 NULL
 aux_entry_sz_mlx4_dev_cap_59718_fns aux_entry_sz mlx4_dev_cap 0 59718 NULL
 __walk_page_range_fndecl_59729_fns __walk_page_range fndecl 0 59729 NULL
 __netlink_change_ngroups_fndecl_59743_fns __netlink_change_ngroups fndecl 2 59743 NULL
@@ -4279,6 +4668,7 @@ acpi_rs_decode_bitmask_fndecl_59851_fns acpi_rs_decode_bitmask fndecl 0 59851 NU
 length_pm8001_ioctl_payload_59866_fns length pm8001_ioctl_payload 0 59866 NULL
 qlcnic_83xx_sysfs_flash_bulk_write_fndecl_59875_fns qlcnic_83xx_sysfs_flash_bulk_write fndecl 4 59875 NULL
 __hwahc_dev_set_key_fndecl_59883_fns __hwahc_dev_set_key fndecl 5 59883 NULL
+lov_iocontrol_fndecl_59919_fns lov_iocontrol fndecl 3 59919 NULL
 size_wid_59965_fns size wid 0 59965 NULL
 configfs_read_bin_file_fndecl_59987_fns configfs_read_bin_file fndecl 3 59987 NULL
 wlcore_alloc_hw_fndecl_59990_fns wlcore_alloc_hw fndecl 1-3 59990 NULL
@@ -4295,6 +4685,7 @@ cx231xx_init_bulk_fndecl_60067_fns cx231xx_init_bulk fndecl 3 60067 NULL
 level_ubifs_znode_60069_fns level ubifs_znode 0 60069 NULL
 debugfs_create_u32_array_fndecl_60082_fns debugfs_create_u32_array fndecl 5 60082 NULL
 udpv6_sendmsg_fndecl_60103_fns udpv6_sendmsg fndecl 3 60103 NULL
+vfp_set_fndecl_60145_fns vfp_set fndecl 3-4 60145 NULL
 orangefs_dirent_outcount_orangefs_readdir_response_s_60150_fns orangefs_dirent_outcount orangefs_readdir_response_s 0 60150 NULL
 pipeline_dec_packet_in_read_fndecl_60151_fns pipeline_dec_packet_in_read fndecl 3 60151 NULL
 stream_start_fndecl_60166_fns stream_start fndecl 0 60166 NULL
@@ -4303,6 +4694,7 @@ ec_device_read_fndecl_60177_fns ec_device_read fndecl 3 60177 NULL
 snd_compr_write_data_fndecl_60179_fns snd_compr_write_data fndecl 3 60179 NULL
 pci_enable_device_fndecl_60193_fns pci_enable_device fndecl 0 60193 NULL
 request_key_async_with_auxdata_fndecl_60211_fns request_key_async_with_auxdata fndecl 4 60211 NULL
+bo_count_vc4_exec_info_60236_fns bo_count vc4_exec_info 0 60236 NULL
 ah_rf_banks_size_ath5k_hw_60250_fns ah_rf_banks_size ath5k_hw 0 60250 NULL
 erst_dbg_write_fndecl_60264_fns erst_dbg_write fndecl 3 60264 NULL
 wl1271_rx_filter_alloc_field_fndecl_60306_fns wl1271_rx_filter_alloc_field fndecl 5 60306 NULL
@@ -4312,7 +4704,10 @@ hest_ghes_dev_register_fndecl_60349_fns hest_ghes_dev_register fndecl 1 60349 NU
 string_escape_str_fndecl_60365_fns string_escape_str fndecl 0 60365 NULL
 num_counters_vardecl_sysfs_c_60371_fns num_counters vardecl_sysfs.c 0 60371 NULL
 shmem_pwrite_fast_fndecl_60393_fns shmem_pwrite_fast fndecl 3 60393 NULL
+quirk_strict_duplicate_filter_write_fndecl_60446_fns quirk_strict_duplicate_filter_write fndecl 3 60446 NULL
 sd_quota_slots_gfs2_sbd_60466_fns sd_quota_slots gfs2_sbd 0 60466 NULL
+ll_iocontrol_register_fndecl_60517_fns ll_iocontrol_register fndecl 2 60517 NULL
+iommu_dma_alloc_fndecl_60521_fns iommu_dma_alloc fndecl 2 60521 NULL
 pcf2127_i2c_gather_write_fndecl_60523_fns pcf2127_i2c_gather_write fndecl 5 60523 NULL
 tty_buffer_alloc_fndecl_60526_fns tty_buffer_alloc fndecl 2 60526 NULL
 qib_sdma_verbs_send_fndecl_60539_fns qib_sdma_verbs_send fndecl 3 60539 NULL
@@ -4341,6 +4736,7 @@ usbdev_read_fndecl_60713_fns usbdev_read fndecl 3 60713 NULL
 pwr_missing_bcns_cnt_read_fndecl_60714_fns pwr_missing_bcns_cnt_read fndecl 3 60714 NULL
 HighPriorityCredit_mpt3sas_facts_60721_fns HighPriorityCredit mpt3sas_facts 0 60721 NULL
 command_setapcor_fndecl_60740_fns command_setapcor fndecl 0 60740 NULL
+cfs_trace_daemon_command_usrstr_fndecl_60744_fns cfs_trace_daemon_command_usrstr fndecl 2 60744 NULL
 num_cnq_qedr_dev_60757_fns num_cnq qedr_dev 0 60757 NULL
 device_write_fndecl_60791_fns device_write fndecl 3 60791 NULL
 tomoyo_write_self_fndecl_60794_fns tomoyo_write_self fndecl 3 60794 NULL
@@ -4354,6 +4750,8 @@ mlxsw_cmd_mbox_query_aq_cap_max_num_sdqs_get_fndecl_60914_fns mlxsw_cmd_mbox_que
 x509_process_extension_fndecl_60941_fns x509_process_extension fndecl 5 60941 NULL
 posix_acl_xattr_set_fndecl_60952_fns posix_acl_xattr_set fndecl 6 60952 NULL
 get_rdac_req_fndecl_60969_fns get_rdac_req fndecl 3 60969 NULL
+cfs_cpt_weight_fndecl_61020_fns cfs_cpt_weight fndecl 0 61020 NULL
+etnaviv_gpu_cmdbuf_new_fndecl_61036_fns etnaviv_gpu_cmdbuf_new fndecl 3 61036 NULL
 nf_nat_ftp_fmt_cmd_fndecl_61045_fns nf_nat_ftp_fmt_cmd fndecl 0 61045 NULL
 kobject_init_and_add_fndecl_61088_fns kobject_init_and_add fndecl 0 61088 NULL nohasharray
 reply_len_fc_bsg_job_61088_fns reply_len fc_bsg_job 0 61088 &kobject_init_and_add_fndecl_61088_fns
@@ -4365,11 +4763,15 @@ get_free_entries_fndecl_61149_fns get_free_entries fndecl 1 61149 NULL nohasharr
 fnic_reset_stats_read_fndecl_61149_fns fnic_reset_stats_read fndecl 3 61149 &get_free_entries_fndecl_61149_fns
 __vmalloc_node_range_fndecl_61157_fns __vmalloc_node_range fndecl 2 61157 NULL
 sel_commit_bools_write_fndecl_61166_fns sel_commit_bools_write fndecl 3 61166 NULL
+host1x_job_alloc_fndecl_61171_fns host1x_job_alloc fndecl 4-3-2 61171 NULL
 dma_tx_errors_read_fndecl_61183_fns dma_tx_errors_read fndecl 3 61183 NULL
 rdma_set_ib_paths_fndecl_61195_fns rdma_set_ib_paths fndecl 3 61195 NULL
+spk_ys_vardecl_61196_fns spk_ys vardecl 0 61196 NULL
 add_qgroup_rb_fndecl_61197_fns add_qgroup_rb fndecl 2 61197 NULL
 radar_debug_mode_read_fndecl_61223_fns radar_debug_mode_read fndecl 3 61223 NULL
 hidraw_get_report_fndecl_61242_fns hidraw_get_report fndecl 3 61242 NULL
+rcar_dmac_prep_dma_cyclic_fndecl_61249_fns rcar_dmac_prep_dma_cyclic fndecl 4-3 61249 NULL nohasharray
+i2c2_debugfs_write_fndecl_61249_fns i2c2_debugfs_write fndecl 3 61249 &rcar_dmac_prep_dma_cyclic_fndecl_61249_fns
 CombinedStatusBufferLength_DAC960_Controller_61253_fns CombinedStatusBufferLength DAC960_Controller 0 61253 NULL
 smk_write_ambient_fndecl_61288_fns smk_write_ambient fndecl 3 61288 NULL
 ufx_i2c_configure_fndecl_61311_fns ufx_i2c_configure fndecl 0 61311 NULL
@@ -4377,9 +4779,11 @@ dvb_ca_en50221_init_fndecl_61317_fns dvb_ca_en50221_init fndecl 4 61317 NULL
 rw_copy_check_uvector_fndecl_61351_fns rw_copy_check_uvector fndecl 3 61351 NULL nohasharray
 v4l2_ctrl_new_std_fndecl_61351_fns v4l2_ctrl_new_std fndecl 5 61351 &rw_copy_check_uvector_fndecl_61351_fns
 snd_cs46xx_io_read_fndecl_61365_fns snd_cs46xx_io_read fndecl 5 61365 NULL
+osc_checksum_type_seq_write_fndecl_61386_fns osc_checksum_type_seq_write fndecl 3 61386 NULL
 npages_nfs_page_array_61390_fns npages nfs_page_array 0 61390 NULL
 __pci_register_driver_fndecl_61400_fns __pci_register_driver fndecl 0 61400 NULL
 alloc_ts_config_fndecl_61404_fns alloc_ts_config fndecl 1 61404 NULL
+rx_ring_size_rx_queue_61409_fns rx_ring_size rx_queue 0 61409 NULL
 amdgpu_fence_driver_init_ring_fndecl_61431_fns amdgpu_fence_driver_init_ring fndecl 2 61431 NULL
 lbs_rdbbp_read_fndecl_61438_fns lbs_rdbbp_read fndecl 3 61438 NULL
 ocfs2_zero_range_for_truncate_fndecl_61461_fns ocfs2_zero_range_for_truncate fndecl 4 61461 NULL
@@ -4411,6 +4815,9 @@ smt_add_frame_len_fndecl_61748_fns smt_add_frame_len fndecl 2 61748 NULL
 nr_fingers_f11_2d_sensor_queries_61756_fns nr_fingers f11_2d_sensor_queries 0 61756 NULL nohasharray
 SYSC_add_key_fndecl_61756_fns SYSC_add_key fndecl 4 61756 &nr_fingers_f11_2d_sensor_queries_61756_fns
 len_s_skfp_ioctl_61764_fns len s_skfp_ioctl 0 61764 NULL
+__qsfp_debugfs_read_fndecl_61803_fns __qsfp_debugfs_read fndecl 3 61803 NULL
+ttm_get_pages_fndecl_61821_fns ttm_get_pages fndecl 2 61821 NULL
+tracing_resize_saved_cmdlines_fndecl_61823_fns tracing_resize_saved_cmdlines fndecl 1 61823 NULL
 SYSC_set_mempolicy_fndecl_61827_fns SYSC_set_mempolicy fndecl 3 61827 NULL
 num_virt_counters_op_x86_model_spec_61835_fns num_virt_counters op_x86_model_spec 0 61835 NULL
 size_rocker_dma_ring_info_61839_fns size rocker_dma_ring_info 0 61839 NULL
@@ -4433,12 +4840,14 @@ cfg80211_inform_bss_data_fndecl_62065_fns cfg80211_inform_bss_data fndecl 9 6206
 do_tty_write_fndecl_62067_fns do_tty_write fndecl 5 62067 NULL
 max_xid_bnx2fc_hba_62096_fns max_xid bnx2fc_hba 0 62096 NULL
 ofdpa_group_l2_flood_fndecl_62112_fns ofdpa_group_l2_flood fndecl 5 62112 NULL
-tx_queue_status_read_fndecl_62113_fns tx_queue_status_read fndecl 3 62113 NULL
+tx_queue_status_read_fndecl_62113_fns tx_queue_status_read fndecl 3 62113 NULL nohasharray
+__i2c_debugfs_write_fndecl_62113_fns __i2c_debugfs_write fndecl 3 62113 &tx_queue_status_read_fndecl_62113_fns
 bo_offset_vmw_surface_offset_62116_fns bo_offset vmw_surface_offset 0 62116 NULL
 sched_read_attr_fndecl_62123_fns sched_read_attr fndecl 3 62123 NULL
 ofdpa_port_vlan_to_vid_fndecl_62138_fns ofdpa_port_vlan_to_vid fndecl 0 62138 NULL
 free_space_bitmap_size_fndecl_62144_fns free_space_bitmap_size fndecl 0 62144 NULL
 dm_kvzalloc_fndecl_62194_fns dm_kvzalloc fndecl 1 62194 NULL
+wm_adsp_create_control_fndecl_62201_fns wm_adsp_create_control fndecl 4 62201 NULL
 param_count_acpi_evaluate_info_62202_fns param_count acpi_evaluate_info 0 62202 NULL
 sense_len_request_62229_fns sense_len request 0 62229 NULL
 soc_tplg_dapm_widget_dmixer_create_fndecl_62241_fns soc_tplg_dapm_widget_dmixer_create fndecl 2 62241 NULL
@@ -4446,9 +4855,11 @@ mlxsw_reg_write_fndecl_62290_fns mlxsw_reg_write fndecl 0 62290 NULL
 __kvm_read_guest_page_fndecl_62291_fns __kvm_read_guest_page fndecl 2-5 62291 NULL
 num_arq_entries_i40e_adminq_info_62293_fns num_arq_entries i40e_adminq_info 0 62293 NULL
 erst_writer_fndecl_62318_fns erst_writer fndecl 7 62318 NULL
+lov_emerg_alloc_fndecl_62345_fns lov_emerg_alloc fndecl 1 62345 NULL
 switchdev_obj_size_fndecl_62346_fns switchdev_obj_size fndecl 0 62346 NULL
 C_SYSC_select_fndecl_62350_fns C_SYSC_select fndecl 1 62350 NULL
 mpi_resize_fndecl_62353_fns mpi_resize fndecl 2 62353 NULL
+raid56_parity_write_fndecl_62355_fns raid56_parity_write fndecl 4 62355 NULL
 reglen_bfad_s_62360_fns reglen bfad_s 0 62360 NULL
 ts_read_fndecl_62364_fns ts_read fndecl 3 62364 NULL
 sysfs_create_link_fndecl_62366_fns sysfs_create_link fndecl 0 62366 NULL
@@ -4458,6 +4869,7 @@ xfer_to_user_fndecl_62394_fns xfer_to_user fndecl 3 62394 NULL
 WIL_GET_BITS_fndecl_62424_fns WIL_GET_BITS fndecl 0-3-2-1 62424 NULL
 sctp_setsockopt_fndecl_62439_fns sctp_setsockopt fndecl 5 62439 NULL
 rx_dropped_read_fndecl_62444_fns rx_dropped_read fndecl 3 62444 NULL
+__videobuf_copy_stream_fndecl_62450_fns __videobuf_copy_stream fndecl 4 62450 NULL
 symsize_persistent_ram_ecc_info_62489_fns symsize persistent_ram_ecc_info 0 62489 NULL
 filemap_write_and_wait_range_fndecl_62492_fns filemap_write_and_wait_range fndecl 3 62492 NULL
 evtchn_write_fndecl_62493_fns evtchn_write fndecl 3 62493 NULL
@@ -4473,6 +4885,7 @@ get_vm_area_size_fndecl_62631_fns get_vm_area_size fndecl 0 62631 NULL
 fs_path_prepare_for_add_fndecl_62638_fns fs_path_prepare_for_add fndecl 2-0 62638 NULL
 usb_alloc_urb_fndecl_62655_fns usb_alloc_urb fndecl 1 62655 NULL
 nvme_trans_device_id_page_fndecl_62681_fns nvme_trans_device_id_page fndecl 4 62681 NULL
+mvneta_change_mtu_fndecl_62689_fns mvneta_change_mtu fndecl 2 62689 NULL
 tx_tx_data_prepared_read_fndecl_62714_fns tx_tx_data_prepared_read fndecl 3 62714 NULL
 isr_rx_mem_overflow_read_fndecl_62722_fns isr_rx_mem_overflow_read fndecl 3 62722 NULL
 wep_default_key_count_read_fndecl_62728_fns wep_default_key_count_read fndecl 3 62728 NULL
@@ -4484,6 +4897,7 @@ sysfs_create_file_ns_fndecl_62796_fns sysfs_create_file_ns fndecl 0 62796 NULL
 xattr_len_ima_event_data_62811_fns xattr_len ima_event_data 0 62811 NULL
 pof_recoffset_boot_data_62824_fns pof_recoffset boot_data 0 62824 NULL
 wq_len_tx_ring_62826_fns wq_len tx_ring 0 62826 NULL
+cfs_cpt_table_alloc_fndecl_62852_fns cfs_cpt_table_alloc fndecl 1 62852 NULL
 func_num_vardecl_g_ffs_c_62856_fns func_num vardecl_g_ffs.c 0 62856 NULL
 ath6kl_set_assoc_req_ies_fndecl_62882_fns ath6kl_set_assoc_req_ies fndecl 3 62882 NULL
 send_cmd_fndecl_62899_fns send_cmd fndecl 0 62899 NULL
@@ -4496,6 +4910,7 @@ batadv_tt_tvlv_unicast_handler_v1_fndecl_62964_fns batadv_tt_tvlv_unicast_handle
 max_size_mlx5_rl_table_62968_fns max_size mlx5_rl_table 0 62968 NULL
 tool_mw_write_fndecl_62998_fns tool_mw_write fndecl 3 62998 NULL
 cache_size_raw_regmap_63010_fns cache_size_raw regmap 0 63010 NULL
+gpr_get_fndecl_63026_fns gpr_get fndecl 3-4 63026 NULL
 arch_memcpy_to_pmem_fndecl_63041_fns arch_memcpy_to_pmem fndecl 3 63041 NULL
 reset_psn_fndecl_63045_fns reset_psn fndecl 2 63045 NULL
 read_flush_fndecl_63064_fns read_flush fndecl 3 63064 NULL
@@ -4512,18 +4927,21 @@ cache_request_fndecl_63187_fns cache_request fndecl 0 63187 NULL
 squashfs_xz_uncompress_fndecl_63193_fns squashfs_xz_uncompress fndecl 6-5 63193 NULL
 nvm_submit_ppa_list_fndecl_63209_fns nvm_submit_ppa_list fndecl 7 63209 NULL
 map_nr_sbitmap_63216_fns map_nr sbitmap 0 63216 NULL
+write_flush_procfs_fndecl_63224_fns write_flush_procfs fndecl 3 63224 NULL
 tx_frag_failed_read_fndecl_63239_fns tx_frag_failed_read fndecl 3 63239 NULL
 acpi_ut_get_resource_length_fndecl_63256_fns acpi_ut_get_resource_length fndecl 0 63256 NULL
 nvme_init_iod_fndecl_63258_fns nvme_init_iod fndecl 2 63258 NULL
 cachefiles_daemon_write_fndecl_63260_fns cachefiles_daemon_write fndecl 3 63260 NULL
 read_events_fndecl_63261_fns read_events fndecl 3 63261 NULL
 dvb_ca_en50221_io_write_fndecl_63262_fns dvb_ca_en50221_io_write fndecl 3 63262 NULL
+__cyz_load_fw_fndecl_63264_fns __cyz_load_fw fndecl 0 63264 NULL
 proc_read_fndecl_63309_fns proc_read fndecl 3 63309 NULL
 alloc_thread_groups_fndecl_63354_fns alloc_thread_groups fndecl 2 63354 NULL
 start_ms350_cam_fndecl_63372_fns start_ms350_cam fndecl 0 63372 NULL
 max_lun_rts51x_chip_63381_fns max_lun rts51x_chip 0 63381 NULL
 __alloc_alien_cache_fndecl_63429_fns __alloc_alien_cache fndecl 2 63429 NULL
 snd_rme32_playback_copy_fndecl_63431_fns snd_rme32_playback_copy fndecl 5 63431 NULL
+bo_count_drm_vc4_get_hang_state_63455_fns bo_count drm_vc4_get_hang_state 0 63455 NULL
 sctp_setsockopt_active_key_fndecl_63480_fns sctp_setsockopt_active_key fndecl 3 63480 NULL
 _gr_table_len_vardecl_x2apic_uv_x_c_63497_fns _gr_table_len vardecl_x2apic_uv_x.c 0 63497 NULL
 num_usb2_ports_xhci_hcd_63514_fns num_usb2_ports xhci_hcd 0 63514 NULL
@@ -4540,6 +4958,7 @@ sctp_setsockopt_del_key_fndecl_63571_fns sctp_setsockopt_del_key fndecl 3 63571
 xfs_rui_init_fndecl_63573_fns xfs_rui_init fndecl 2 63573 NULL
 ide_raw_taskfile_fndecl_63584_fns ide_raw_taskfile fndecl 4 63584 NULL
 cit_get_packet_size_fndecl_63585_fns cit_get_packet_size fndecl 0 63585 NULL
+jz4740_dma_alloc_desc_fndecl_63644_fns jz4740_dma_alloc_desc fndecl 1 63644 NULL
 mlxsw_pci_fw_area_init_fndecl_63657_fns mlxsw_pci_fw_area_init fndecl 3 63657 NULL
 id_nvdimm_63666_fns id nvdimm 0 63666 NULL
 msnd_fifo_read_fndecl_63669_fns msnd_fifo_read fndecl 0 63669 NULL
@@ -4553,7 +4972,9 @@ spidev_sync_read_fndecl_63757_fns spidev_sync_read fndecl 0 63757 NULL
 pool_allocate_fndecl_63759_fns pool_allocate fndecl 3 63759 NULL
 msix_count_skd_device_63760_fns msix_count skd_device 0 63760 NULL
 index_isi_board_63762_fns index isi_board 0 63762 NULL
+insn_size_kprobe_insn_cache_63777_fns insn_size kprobe_insn_cache 0 63777 NULL
 __hwahc_op_set_gtk_fndecl_63781_fns __hwahc_op_set_gtk fndecl 4 63781 NULL
+alloc_trace_kprobe_fndecl_63786_fns alloc_trace_kprobe fndecl 6 63786 NULL
 ioaccel_maxsg_ctlr_info_63798_fns ioaccel_maxsg ctlr_info 0 63798 NULL
 acpi_ut_create_buffer_object_fndecl_63805_fns acpi_ut_create_buffer_object fndecl 1 63805 NULL
 iwl_mvm_scan_size_fndecl_63834_fns iwl_mvm_scan_size fndecl 0 63834 NULL
@@ -4572,6 +4993,7 @@ vhost_copy_to_user_fndecl_63952_fns vhost_copy_to_user fndecl 4 63952 NULL
 oprofilefs_str_to_user_fndecl_63957_fns oprofilefs_str_to_user fndecl 3 63957 NULL
 pvr2_send_request_fndecl_63959_fns pvr2_send_request fndecl 3-5 63959 NULL
 write_file_beacon_fndecl_63962_fns write_file_beacon fndecl 3 63962 NULL
+len_wm_coeff_ctl_63967_fns len wm_coeff_ctl 0 63967 NULL
 pla_ocp_read_fndecl_63976_fns pla_ocp_read fndecl 3 63976 NULL
 snd_midi_event_decode_fndecl_64015_fns snd_midi_event_decode fndecl 0 64015 NULL
 dpm_sysfs_add_fndecl_64023_fns dpm_sysfs_add fndecl 0 64023 NULL
@@ -4583,6 +5005,7 @@ set_arg_fndecl_64091_fns set_arg fndecl 3 64091 NULL
 cxgbi_hbas_add_fndecl_64102_fns cxgbi_hbas_add fndecl 3 64102 NULL
 rx_mini_pending_ethtool_ringparam_64104_fns rx_mini_pending ethtool_ringparam 0 64104 NULL
 nvme_trans_unit_serial_page_fndecl_64108_fns nvme_trans_unit_serial_page fndecl 4 64108 NULL
+btmrvl_fwdump_write_fndecl_64113_fns btmrvl_fwdump_write fndecl 3 64113 NULL
 of_property_count_strings_fndecl_64124_fns of_property_count_strings fndecl 0 64124 NULL
 xpc_kmalloc_cacheline_aligned_fndecl_64156_fns xpc_kmalloc_cacheline_aligned fndecl 1 64156 NULL
 sctp_getsockopt_maxburst_fndecl_64174_fns sctp_getsockopt_maxburst fndecl 2 64174 NULL
@@ -4592,7 +5015,8 @@ sys_sethostname_fndecl_64193_fns sys_sethostname fndecl 2 64193 NULL
 f2fs_move_file_range_fndecl_64227_fns f2fs_move_file_range fndecl 4 64227 NULL
 compat_udpv6_setsockopt_fndecl_64246_fns compat_udpv6_setsockopt fndecl 5 64246 NULL
 pwr_ap_sleep_counter_read_fndecl_64248_fns pwr_ap_sleep_counter_read fndecl 3 64248 NULL
-nfs_idmap_get_desc_fndecl_64253_fns nfs_idmap_get_desc fndecl 2-4 64253 NULL
+nfs_idmap_get_desc_fndecl_64253_fns nfs_idmap_get_desc fndecl 2-4 64253 NULL nohasharray
+rtw_os_xmit_resource_alloc_fndecl_64253_fns rtw_os_xmit_resource_alloc fndecl 3 64253 &nfs_idmap_get_desc_fndecl_64253_fns
 denominator_v4l2_fract_64280_fns denominator v4l2_fract 0 64280 NULL
 sys_vmsplice_fndecl_64310_fns sys_vmsplice fndecl 3 64310 NULL nohasharray
 snd_emux_create_port_fndecl_64310_fns snd_emux_create_port fndecl 3 64310 &sys_vmsplice_fndecl_64310_fns
@@ -4611,13 +5035,16 @@ switchdev_deferred_enqueue_fndecl_64474_fns switchdev_deferred_enqueue fndecl 3
 set_aoe_iflist_fndecl_64482_fns set_aoe_iflist fndecl 2 64482 NULL
 ax25_setsockopt_fndecl_64487_fns ax25_setsockopt fndecl 5 64487 NULL
 dvb_demux_ioctl_fndecl_64510_fns dvb_demux_ioctl fndecl 2 64510 NULL
+partition_create_desc_fndecl_64535_fns partition_create_desc fndecl 3 64535 NULL
 ath10k_p2p_noa_ie_len_compute_fndecl_64548_fns ath10k_p2p_noa_ie_len_compute fndecl 0 64548 NULL
+num_channels_sh_tmu_device_64556_fns num_channels sh_tmu_device 0 64556 NULL
 hiddev_compat_ioctl_fndecl_64564_fns hiddev_compat_ioctl fndecl 2 64564 NULL
 rq_enc_pages_num_rpc_rqst_64573_fns rq_enc_pages_num rpc_rqst 0 64573 NULL
 erst_read_fndecl_64575_fns erst_read fndecl 0 64575 NULL
 vtpm_proxy_tpm_op_send_fndecl_64582_fns vtpm_proxy_tpm_op_send fndecl 3 64582 NULL
 alloc_context_fndecl_64592_fns alloc_context fndecl 1 64592 NULL
 of_count_phandle_with_args_fndecl_64600_fns of_count_phandle_with_args fndecl 0 64600 NULL
+gpr_set_fndecl_64611_fns gpr_set fndecl 3-4 64611 NULL
 objio_alloc_io_state_fndecl_64631_fns objio_alloc_io_state fndecl 6-7 64631 NULL
 kmp_init_fndecl_64654_fns kmp_init fndecl 2 64654 NULL
 num_allowed_vlans_qlcnic_sriov_64661_fns num_allowed_vlans qlcnic_sriov 0 64661 NULL
@@ -4637,7 +5064,10 @@ iio_device_alloc_fndecl_64755_fns iio_device_alloc fndecl 1 64755 NULL
 smtcfb_read_fndecl_64764_fns smtcfb_read fndecl 3 64764 NULL
 pmsg_size_ramoops_context_64804_fns pmsg_size ramoops_context 0 64804 NULL
 alloc_align_snd_array_64806_fns alloc_align snd_array 0 64806 NULL
+fpa_get_fndecl_64809_fns fpa_get fndecl 3-4 64809 NULL
 atr_csum_cm4000_dev_64828_fns atr_csum cm4000_dev 0 64828 NULL
+lprocfs_write_frac_helper_fndecl_64841_fns lprocfs_write_frac_helper fndecl 2 64841 NULL
+edma_prep_dma_cyclic_fndecl_64842_fns edma_prep_dma_cyclic fndecl 4-3 64842 NULL
 tool_dbfn_write_fndecl_64852_fns tool_dbfn_write fndecl 3 64852 NULL nohasharray
 _req_append_segment_fndecl_64852_fns _req_append_segment fndecl 2 64852 &tool_dbfn_write_fndecl_64852_fns
 rh_inc_fndecl_64864_fns rh_inc fndecl 2 64864 NULL
@@ -4647,6 +5077,7 @@ f_audio_buffer_alloc_fndecl_64901_fns f_audio_buffer_alloc fndecl 1 64901 NULL
 ubi_eba_create_table_fndecl_64916_fns ubi_eba_create_table fndecl 2 64916 NULL
 dma_attach_fndecl_64917_fns dma_attach fndecl 5-6 64917 NULL
 roccat_read_fndecl_64918_fns roccat_read fndecl 3 64918 NULL
+dvb_ca_write_fndecl_64960_fns dvb_ca_write fndecl 3 64960 NULL
 count_acpi_processor_power_64969_fns count acpi_processor_power 0 64969 NULL
 tx_frag_mpdu_alloc_failed_read_fndecl_64988_fns tx_frag_mpdu_alloc_failed_read fndecl 3 64988 NULL
 __mlxsw_item_get32_fndecl_64999_fns __mlxsw_item_get32 fndecl 0 64999 NULL
@@ -4657,6 +5088,7 @@ bus_add_driver_fndecl_65060_fns bus_add_driver fndecl 0 65060 NULL
 flag_node_footer_65063_fns flag node_footer 0 65063 NULL
 capi_ttyminors_vardecl_capi_c_65086_fns capi_ttyminors vardecl_capi.c 0 65086 NULL
 num_tx_bds_bcmgenet_priv_65087_fns num_tx_bds bcmgenet_priv 0 65087 NULL
+rtw_android_get_macaddr_fndecl_65095_fns rtw_android_get_macaddr fndecl 0 65095 NULL
 ntb_mw_count_fndecl_65108_fns ntb_mw_count fndecl 0 65108 NULL
 nilfs_cpfile_is_snapshot_fndecl_65110_fns nilfs_cpfile_is_snapshot fndecl 2 65110 NULL
 hsi_alloc_controller_fndecl_65113_fns hsi_alloc_controller fndecl 1 65113 NULL
@@ -4669,20 +5101,27 @@ nilfs_palloc_entry_blkoff_fndecl_65206_fns nilfs_palloc_entry_blkoff fndecl 0 65
 read_gssp_fndecl_65224_fns read_gssp fndecl 3 65224 NULL
 ssid_len_connect_attr_65228_fns ssid_len connect_attr 0 65228 NULL
 range_end_writeback_control_65245_fns range_end writeback_control 0 65245 NULL
+etb_read_fndecl_65249_fns etb_read fndecl 3 65249 NULL
 portnames_read_fndecl_65269_fns portnames_read fndecl 3 65269 NULL
 hpfs_translate_name_fndecl_65290_fns hpfs_translate_name fndecl 3 65290 NULL
 usb_stor_probe2_fndecl_65298_fns usb_stor_probe2 fndecl 0 65298 NULL
+rockchip_clk_init_fndecl_65312_fns rockchip_clk_init fndecl 3 65312 NULL
 dm_get_reserved_rq_based_ios_fndecl_65322_fns dm_get_reserved_rq_based_ios fndecl 0 65322 NULL
 brcmf_flowring_attach_fndecl_65325_fns brcmf_flowring_attach fndecl 2 65325 NULL
 ath6kl_endpoint_stats_read_fndecl_65345_fns ath6kl_endpoint_stats_read fndecl 3 65345 NULL
+wm_coeff_read_control_fndecl_65358_fns wm_coeff_read_control fndecl 3 65358 NULL
 fbucket_size_qlcnic_filter_hash_65369_fns fbucket_size qlcnic_filter_hash 0 65369 NULL
 nfsd_readv_fndecl_65378_fns nfsd_readv fndecl 4 65378 NULL
 batadv_tvlv_container_ogm_append_fndecl_65383_fns batadv_tvlv_container_ogm_append fndecl 4 65383 NULL
 rng_dev_read_fndecl_65406_fns rng_dev_read fndecl 3 65406 NULL
+lstcon_batch_list_fndecl_65416_fns lstcon_batch_list fndecl 2 65416 NULL
 tcp_hdrlen_fndecl_65433_fns tcp_hdrlen fndecl 0 65433 NULL
 data_in_size_mpt3_ioctl_command_65434_fns data_in_size mpt3_ioctl_command 0 65434 NULL
 lbs_bcnmiss_write_fndecl_65438_fns lbs_bcnmiss_write fndecl 3 65438 NULL
+spi_cmd_complete_fndecl_65442_fns spi_cmd_complete fndecl 5 65442 NULL
 rx_rx_pre_complt_read_fndecl_65446_fns rx_rx_pre_complt_read fndecl 3 65446 NULL
 squashfs_cache_init_fndecl_65451_fns squashfs_cache_init fndecl 3-2 65451 NULL
 raw_notifier_call_chain_fndecl_65500_fns raw_notifier_call_chain fndecl 0 65500 NULL
 sys_pwritev_fndecl_65513_fns sys_pwritev fndecl 3 65513 NULL
+bcm2835_dma_prep_dma_memcpy_fndecl_65534_fns bcm2835_dma_prep_dma_memcpy fndecl 4 65534 NULL nohasharray
+connector_write_fndecl_65534_fns connector_write fndecl 3 65534 &bcm2835_dma_prep_dma_memcpy_fndecl_65534_fns
diff --git a/scripts/gcc-plugins/size_overflow_plugin/e_vars.data b/scripts/gcc-plugins/size_overflow_plugin/e_vars.data
index a825f18145be..8f86ad7350a4 100644
--- a/scripts/gcc-plugins/size_overflow_plugin/e_vars.data
+++ b/scripts/gcc-plugins/size_overflow_plugin/e_vars.data
@@ -16,12 +16,14 @@ rx_buf_sz_vardecl_r8169_c_9136_vars rx_buf_sz vardecl_r8169.c 0 9136 NULL
 _max_socket_vardecl_x2apic_uv_x_c_9456_vars _max_socket vardecl_x2apic_uv_x.c 0 9456 NULL
 kdb_max_commands_vardecl_kdb_main_c_9529_vars kdb_max_commands vardecl_kdb_main.c 0 9529 NULL
 legacy_count_vardecl_pty_c_9908_vars legacy_count vardecl_pty.c 0 9908 NULL
+max_ptlrpcds_vardecl_ptlrpcd_c_9939_vars max_ptlrpcds vardecl_ptlrpcd.c 0 9939 NULL
 read_buffer_size_vardecl_legousbtower_c_10184_vars read_buffer_size vardecl_legousbtower.c 0 10184 NULL
 iio_devt_vardecl_industrialio_core_c_10237_vars iio_devt vardecl_industrialio-core.c 0 10237 NULL
 dma_rx_num_vardecl_altera_tse_main_c_10728_vars dma_rx_num vardecl_altera_tse_main.c 0 10728 NULL
 default_rds_buf_vardecl_fmdrv_common_c_11072_vars default_rds_buf vardecl_fmdrv_common.c 0 11072 NULL
 snd_efw_resp_buf_size_vardecl_11291_vars snd_efw_resp_buf_size vardecl 0 11291 NULL
 _max_pnode_vardecl_x2apic_uv_x_c_11492_vars _max_pnode vardecl_x2apic_uv_x.c 0 11492 NULL
+slave_num_vardecl_shdma_base_c_11603_vars slave_num vardecl_shdma-base.c 0 11603 NULL
 c4iw_wr_log_size_order_vardecl_device_c_13134_vars c4iw_wr_log_size_order vardecl_device.c 0 13134 NULL
 vhci_num_controllers_vardecl_13178_vars vhci_num_controllers vardecl 0 13178 NULL
 max_sets_vardecl_ip_set_core_c_13393_vars max_sets vardecl_ip_set_core.c 0 13393 NULL
@@ -41,6 +43,7 @@ nwriters_vardecl_rcuperf_c_20234_vars nwriters vardecl_rcuperf.c 0 20234 NULL
 mpegbufs_vardecl_cx231xx_417_c_20303_vars mpegbufs vardecl_cx231xx-417.c 0 20303 NULL
 major_vardecl_dm_c_21185_vars major vardecl_dm.c 0 21185 NULL
 acpi_current_gpe_count_vardecl_21469_vars acpi_current_gpe_count vardecl 0 21469 NULL
+max_nr_vardecl_exynos_combiner_c_21761_vars max_nr vardecl_exynos-combiner.c 0 21761 NULL
 xprt_max_tcp_slot_table_entries_vardecl_xprtsock_c_21949_vars xprt_max_tcp_slot_table_entries vardecl_xprtsock.c 0 21949 NULL
 ch_count_vardecl_ib_srp_c_22190_vars ch_count vardecl_ib_srp.c 0 22190 NULL
 nreaders_stress_vardecl_locktorture_c_22217_vars nreaders_stress vardecl_locktorture.c 0 22217 NULL
@@ -62,6 +65,8 @@ num_rcv_urbs_vardecl_usbatm_c_32830_vars num_rcv_urbs vardecl_usbatm.c 0 32830 N
 _min_socket_vardecl_x2apic_uv_x_c_33176_vars _min_socket vardecl_x2apic_uv_x.c 0 33176 NULL
 num_ae_requests_vardecl_33594_vars num_ae_requests vardecl 0 33594 NULL
 blkdev_minors_vardecl_dev_c_34365_vars blkdev_minors vardecl_dev.c 0 34365 NULL
+cpu_npartitions_vardecl_linux_cpu_c_34622_vars cpu_npartitions vardecl_linux-cpu.c 0 34622 NULL
+at_max_vardecl_35692_vars at_max vardecl 0 35692 NULL
 nwriters_stress_vardecl_locktorture_c_36080_vars nwriters_stress vardecl_locktorture.c 0 36080 NULL
 max_sg_segs_vardecl_st_c_36551_vars max_sg_segs vardecl_st.c 0 36551 NULL
 null_major_vardecl_null_blk_c_36718_vars null_major vardecl_null_blk.c 0 36718 NULL
diff --git a/scripts/package/Makefile b/scripts/package/Makefile
index 71b4a8af9d4d..dcb89c580691 100644
--- a/scripts/package/Makefile
+++ b/scripts/package/Makefile
@@ -40,7 +40,7 @@ if test "$(objtree)" != "$(srctree)"; then \
 fi ; \
 $(srctree)/scripts/setlocalversion --save-scmversion; \
 ln -sf $(srctree) $(2); \
-tar -cz $(RCS_TAR_IGNORE) -f $(2).tar.gz \
+tar --owner=root --group=root -cz $(RCS_TAR_IGNORE) -f $(2).tar.gz \
 	$(addprefix $(2)/,$(TAR_CONTENT) $(3)); \
 rm -f $(2) $(objtree)/.scmversion
 
diff --git a/scripts/package/mkspec b/scripts/package/mkspec
index 57673bae5597..c722dc460008 100755
--- a/scripts/package/mkspec
+++ b/scripts/package/mkspec
@@ -120,22 +120,33 @@ echo 'rm -f $RPM_BUILD_ROOT'"/lib/modules/$KERNELRELEASE/{build,source}"
 echo "mkdir -p "'$RPM_BUILD_ROOT'"/usr/src/kernels/$KERNELRELEASE"
 echo "EXCLUDES=\"$RCS_TAR_IGNORE --exclude .tmp_versions --exclude=*vmlinux* --exclude=*.o --exclude=*.ko --exclude=*.cmd --exclude=Documentation --exclude=firmware --exclude .config.old --exclude .missing-syscalls.d\""
 echo "tar "'$EXCLUDES'" -cf- . | (cd "'$RPM_BUILD_ROOT'"/usr/src/kernels/$KERNELRELEASE;tar xvf -)"
-echo 'cd $RPM_BUILD_ROOT'"/lib/modules/$KERNELRELEASE"
-echo "ln -sf /usr/src/kernels/$KERNELRELEASE build"
-echo "ln -sf /usr/src/kernels/$KERNELRELEASE source"
 fi
 
 echo ""
 echo "%clean"
 echo 'rm -rf $RPM_BUILD_ROOT'
 echo ""
+echo "%pre"
+echo 'chmod -f 0500 /boot'
+echo 'if [ -d /lib/modules ]; then'
+echo 'chmod -f 0500 /lib/modules'
+echo 'fi'
+echo 'if [ -d /lib32/modules ]; then'
+echo 'chmod -f 0500 /lib32/modules'
+echo 'fi'
+echo 'if [ -d /lib64/modules ]; then'
+echo 'chmod -f 0500 /lib64/modules'
+echo 'fi'
+echo ""
+echo "%post devel"
+echo "ln -sf /usr/src/kernels/$KERNELRELEASE /lib/modules/$KERNELRELEASE/build"
+echo "ln -sf /usr/src/kernels/$KERNELRELEASE /lib/modules/$KERNELRELEASE/source"
+echo ""
 echo "%post"
-echo "if [ -x /sbin/installkernel -a -r /boot/vmlinuz-$KERNELRELEASE -a -r /boot/System.map-$KERNELRELEASE ]; then"
-echo "cp /boot/vmlinuz-$KERNELRELEASE /boot/.vmlinuz-$KERNELRELEASE-rpm"
-echo "cp /boot/System.map-$KERNELRELEASE /boot/.System.map-$KERNELRELEASE-rpm"
-echo "rm -f /boot/vmlinuz-$KERNELRELEASE /boot/System.map-$KERNELRELEASE"
-echo "/sbin/installkernel $KERNELRELEASE /boot/.vmlinuz-$KERNELRELEASE-rpm /boot/.System.map-$KERNELRELEASE-rpm"
-echo "rm -f /boot/.vmlinuz-$KERNELRELEASE-rpm /boot/.System.map-$KERNELRELEASE-rpm"
+echo "if [ -x /sbin/dracut ]; then"
+echo '/sbin/new-kernel-pkg --dracut --mkinitrd --depmod --install --make-default '"$KERNELRELEASE"' || exit $?'
+echo "else"
+echo '/sbin/new-kernel-pkg --mkinitrd --depmod --install --make-default '"$KERNELRELEASE"' || exit $?'
 echo "fi"
 echo ""
 echo "%preun"
@@ -149,10 +160,10 @@ echo "/sbin/update-bootloader --remove $KERNELRELEASE"
 echo "fi"
 echo ""
 echo "%files"
-echo '%defattr (-, root, root)'
-echo "/lib/modules/$KERNELRELEASE"
+echo '%defattr (400, root, root, 500)'
 echo "%exclude /lib/modules/$KERNELRELEASE/build"
 echo "%exclude /lib/modules/$KERNELRELEASE/source"
+echo "/lib/modules/$KERNELRELEASE"
 echo "/lib/firmware/$KERNELRELEASE"
 echo "/boot/*"
 echo ""
@@ -162,9 +173,11 @@ echo "/usr/include"
 echo ""
 if ! $PREBUILT; then
 echo "%files devel"
-echo '%defattr (-, root, root)'
+echo '%defattr (400, root, root, 500)'
+echo "%dir /lib/modules/$KERNELRELEASE"
 echo "/usr/src/kernels/$KERNELRELEASE"
-echo "/lib/modules/$KERNELRELEASE/build"
-echo "/lib/modules/$KERNELRELEASE/source"
+echo "%attr (500, root, root) /usr/src/kernels/$KERNELRELEASE/scripts/recordmcount"
+echo "%attr (500, root, root) /usr/src/kernels/$KERNELRELEASE/scripts/basic/fixdep"
+echo "%attr (500, root, root) /usr/src/kernels/$KERNELRELEASE/scripts/mod/modpost"
 echo ""
 fi
diff --git a/security/Kconfig b/security/Kconfig
index edbc0fd9486a..3312d822f7c9 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -4,7 +4,7 @@
 
 menu "Security options"
 
-menu "PaX"
+menu "Grsecurity"
 
 config ARCH_TRACK_EXEC_LIMIT
 	bool
@@ -18,9 +18,240 @@ config TASK_SIZE_MAX_SHIFT
 	default 47 if !PAX_PER_CPU_PGD
 	default 42 if PAX_PER_CPU_PGD
 
+config PAX_ENABLE_PAE
+	bool
+	default y if (X86_32 && (MPENTIUM4 || MK8 || MPSC || MCORE2 || MATOM))
+
+config GRKERNSEC
+	bool "Grsecurity"
+	select CRYPTO
+	select CRYPTO_SHA256
+	select PROC_FS
+	select STOP_MACHINE
+	select TTY
+	select DEBUG_KERNEL
+	select DEBUG_LIST
+	select MULTIUSER
+	select BUG
+	help
+	  If you say Y here, you will be able to configure many features
+	  that will enhance the security of your system.  It is highly
+	  recommended that you say Y here and read through the help
+	  for each option so that you fully understand the features and
+	  can evaluate their usefulness for your machine.
+
+choice
+	prompt "Configuration Method"
+	depends on GRKERNSEC
+	default GRKERNSEC_CONFIG_CUSTOM
+	help
+
+config GRKERNSEC_CONFIG_AUTO
+	bool "Automatic"
+	help
+	  If you choose this configuration method, you'll be able to answer a small
+	  number of simple questions about how you plan to use this kernel.
+	  The settings of grsecurity and PaX will be automatically configured for
+	  the highest commonly-used settings within the provided constraints.
+
+	  If you require additional configuration, custom changes can still be made
+	  from the "custom configuration" menu.
+
+config GRKERNSEC_CONFIG_CUSTOM
+	bool "Custom"
+	help
+	  If you choose this configuration method, you'll be able to configure all
+	  grsecurity and PaX settings manually.  Via this method, no options are
+	  automatically enabled.
+
+	  Take note that if menuconfig is exited with this configuration method
+	  chosen, you will not be able to use the automatic configuration methods
+	  without starting again with a kernel configuration with no grsecurity
+	  or PaX options specified inside.
+
+endchoice
+
+choice
+	prompt "Usage Type"
+	depends on (GRKERNSEC && GRKERNSEC_CONFIG_AUTO)
+	default GRKERNSEC_CONFIG_SERVER
+	help
+
+config GRKERNSEC_CONFIG_SERVER
+	bool "Server"
+	help
+	  Choose this option if you plan to use this kernel on a server.
+
+config GRKERNSEC_CONFIG_DESKTOP
+	bool "Desktop"
+	help
+	  Choose this option if you plan to use this kernel on a desktop.
+
+endchoice
+
+choice
+	prompt "Virtualization Type"
+	depends on (GRKERNSEC && X86 && GRKERNSEC_CONFIG_AUTO)
+	default GRKERNSEC_CONFIG_VIRT_NONE
+	help
+
+config GRKERNSEC_CONFIG_VIRT_NONE
+	bool "None"
+	help
+	  Choose this option if this kernel will be run on bare metal.
+
+config GRKERNSEC_CONFIG_VIRT_GUEST
+	bool "Guest"
+	help
+	  Choose this option if this kernel will be run as a VM guest.
+
+config GRKERNSEC_CONFIG_VIRT_HOST
+	bool "Host"
+	help
+	  Choose this option if this kernel will be run as a VM host.
+
+endchoice
+
+choice
+	prompt "Virtualization Hardware"
+	depends on (GRKERNSEC && X86 && GRKERNSEC_CONFIG_AUTO && (GRKERNSEC_CONFIG_VIRT_GUEST || GRKERNSEC_CONFIG_VIRT_HOST))
+	help
+
+config GRKERNSEC_CONFIG_VIRT_EPT
+	bool "EPT/RVI Processor Support"
+	depends on X86
+	help
+	  Choose this option if your CPU supports the EPT or RVI features of 2nd-gen
+	  hardware virtualization.  This allows for additional kernel hardening protections
+	  to operate without additional performance impact.
+
+	  To see if your Intel processor supports EPT, see:
+	  http://ark.intel.com/Products/VirtualizationTechnology
+	  (Most Core i3/5/7 support EPT)
+
+	  To see if your AMD processor supports RVI, see:
+	  http://support.amd.com/us/kbarticles/Pages/GPU120AMDRVICPUsHyperVWin8.aspx
+
+config GRKERNSEC_CONFIG_VIRT_SOFT
+	bool "First-gen/No Hardware Virtualization"
+	help
+	  Choose this option if you use an Atom/Pentium/Core 2 processor that either doesn't
+	  support hardware virtualization or doesn't support the EPT/RVI extensions.
+
+endchoice
+
+choice
+	prompt "Virtualization Software"
+	depends on (GRKERNSEC && GRKERNSEC_CONFIG_AUTO && (GRKERNSEC_CONFIG_VIRT_GUEST || GRKERNSEC_CONFIG_VIRT_HOST))
+	help
+
+config GRKERNSEC_CONFIG_VIRT_XEN
+	bool "Xen"
+	help
+	  Choose this option if this kernel is running as a Xen guest or host.
+
+config GRKERNSEC_CONFIG_VIRT_VMWARE
+	bool "VMWare"
+	help
+	  Choose this option if this kernel is running as a VMWare guest or host.
+
+config GRKERNSEC_CONFIG_VIRT_KVM
+	bool "KVM"
+	help
+	  Choose this option if this kernel is running as a KVM guest or host.
+
+config GRKERNSEC_CONFIG_VIRT_VIRTUALBOX
+	bool "VirtualBox"
+	help
+	  Choose this option if this kernel is running as a VirtualBox guest or host.
+
+config GRKERNSEC_CONFIG_VIRT_HYPERV
+	bool "Hyper-V"
+	help
+	  Choose this option if this kernel is running as a Hyper-V guest.
+
+endchoice
+
+choice
+	prompt "Required Priorities"
+	depends on (GRKERNSEC && GRKERNSEC_CONFIG_AUTO)
+	default GRKERNSEC_CONFIG_PRIORITY_PERF
+	help
+
+config GRKERNSEC_CONFIG_PRIORITY_PERF
+	bool "Performance"
+	help
+	  Choose this option if performance is of highest priority for this deployment
+	  of grsecurity.  Features like UDEREF on a 64bit kernel, kernel stack clearing,
+	  clearing of structures intended for userland, and freed memory sanitizing will
+	  be disabled.
+
+config GRKERNSEC_CONFIG_PRIORITY_SECURITY
+	bool "Security"
+	help
+	  Choose this option if security is of highest priority for this deployment of
+	  grsecurity.  UDEREF, kernel stack clearing, clearing of structures intended
+	  for userland, and freed memory sanitizing will be enabled for this kernel.
+	  In a worst-case scenario, these features can introduce a 20% performance hit
+	  (UDEREF on x64 contributing half of this hit).
+
+endchoice
+
+menu "Default Special Groups"
+depends on (GRKERNSEC && GRKERNSEC_CONFIG_AUTO)
+
+config GRKERNSEC_PROC_GID
+	int "GID exempted from /proc restrictions"
+	default 1001
+	help
+	  Setting this GID determines which group will be exempted from
+	  grsecurity's /proc restrictions, allowing users of the specified
+	  group  to view network statistics and the existence of other users'
+	  processes on the system.  This GID may also be chosen at boot time
+	  via "grsec_proc_gid=" on the kernel commandline.
+
+config GRKERNSEC_TPE_UNTRUSTED_GID
+        int "GID for TPE-untrusted users"
+        depends on GRKERNSEC_CONFIG_SERVER && GRKERNSEC_TPE && !GRKERNSEC_TPE_INVERT
+        default 1005
+        help
+	  Setting this GID determines which group untrusted users should
+	  be added to.  These users will be placed under grsecurity's Trusted Path
+	  Execution mechanism, preventing them from executing their own binaries.
+	  The users will only be able to execute binaries in directories owned and
+	  writable only by the root user.  If the sysctl option is enabled, a sysctl
+	  option with name "tpe_gid" is created.
+
+config GRKERNSEC_TPE_TRUSTED_GID
+        int "GID for TPE-trusted users"
+        depends on GRKERNSEC_CONFIG_SERVER && GRKERNSEC_TPE && GRKERNSEC_TPE_INVERT
+        default 1005
+        help
+          Setting this GID determines what group TPE restrictions will be
+          *disabled* for.  If the sysctl option is enabled, a sysctl option
+          with name "tpe_gid" is created.
+
+config GRKERNSEC_SYMLINKOWN_GID
+        int "GID for users with kernel-enforced SymlinksIfOwnerMatch"
+        depends on GRKERNSEC_CONFIG_SERVER
+        default 1006
+        help
+          Setting this GID determines what group kernel-enforced
+          SymlinksIfOwnerMatch will be enabled for.  If the sysctl option
+          is enabled, a sysctl option with name "symlinkown_gid" is created.
+
+
+endmenu
+
+menu "Customize Configuration"
+depends on GRKERNSEC
+
+menu "PaX"
+
 config PAX
 	bool "Enable various PaX features"
-	depends on ALPHA || ARM || AVR32 || IA64 || MIPS || PARISC || PPC || SPARC || X86
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC && (ALPHA || ARM || AVR32 || IA64 || MIPS || PARISC || PPC || SPARC || X86)
 	help
 	  This allows you to enable various PaX features.  PaX adds
 	  intrusion prevention mechanisms to the kernel that reduce
@@ -42,7 +273,8 @@ config PAX_SOFTMODE
 	  at runtime via the entries in /proc/sys/kernel/pax.
 
 config PAX_EI_PAX
-	bool 'Use legacy ELF header marking' if EXPERT
+	bool 'Use legacy ELF header marking'
+	default y if GRKERNSEC_CONFIG_AUTO
 	help
 	  Enabling this option will allow you to control PaX features on
 	  a per executable basis via the 'chpax' utility available at
@@ -61,6 +293,7 @@ config PAX_EI_PAX
 
 config PAX_PT_PAX_FLAGS
 	bool 'Use ELF program header marking'
+	default y if GRKERNSEC_CONFIG_AUTO
 	help
 	  Enabling this option will allow you to control PaX features on
 	  a per executable basis via the 'paxctl' utility available at
@@ -81,6 +314,7 @@ config PAX_PT_PAX_FLAGS
 
 config PAX_XATTR_PAX_FLAGS
 	bool 'Use filesystem extended attributes marking'
+	default y if GRKERNSEC_CONFIG_AUTO
 	select CIFS_XATTR if CIFS
 	select EXT2_FS_XATTR if EXT2_FS
 	select EXT3_FS_XATTR if EXT3_FS
@@ -111,7 +345,7 @@ config PAX_XATTR_PAX_FLAGS
 
 choice
 	prompt 'MAC system integration'
-	default PAX_NO_ACL_FLAGS
+	default PAX_HAVE_ACL_FLAGS
 	help
 	  Mandatory Access Control systems have the option of controlling
 	  PaX flags on a per executable basis, choose the method supported
@@ -140,6 +374,7 @@ menu "Non-executable pages"
 
 config PAX_NOEXEC
 	bool "Enforce non-executable pages"
+	default y if GRKERNSEC_CONFIG_AUTO
 	depends on ALPHA || (ARM && (CPU_V6 || CPU_V6K || CPU_V7)) || IA64 || MIPS || PARISC || PPC || S390 || SPARC || X86
 	help
 	  By design some architectures do not allow for protecting memory
@@ -168,8 +403,8 @@ config PAX_NOEXEC
 
 config PAX_PAGEEXEC
 	bool "Paging based non-executable pages"
-	depends on PAX_NOEXEC && (!X86_32 || M586 || M586TSC || M586MMX || M686 || MPENTIUMII || MPENTIUMIII || MPENTIUMM || MCORE2 || MPENTIUM4 || MPSC || MATOM || MK7 || MK8 || MWINCHIPC6 || MWINCHIP2 || MWINCHIP3D || MVIAC3_2 || MVIAC7)
-	select X86_PAE if X86_32 && !HIGHMEM4G && (MCORE2 || MPSC || MATOM || MK8)
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on PAX_NOEXEC && (!X86_32 || M586 || M586TSC || M586MMX || M686 || MPENTIUMII || MPENTIUMIII || MPENTIUMM || MCORE2 || MATOM || MPENTIUM4 || MPSC || MK7 || MK8 || MWINCHIPC6 || MWINCHIP2 || MWINCHIP3D || MVIAC3_2 || MVIAC7)
 	select ARCH_TRACK_EXEC_LIMIT if X86_32
 	help
 	  This implementation is based on the paging feature of the CPU.
@@ -189,6 +424,7 @@ config PAX_PAGEEXEC
 
 config PAX_SEGMEXEC
 	bool "Segmentation based non-executable pages"
+	default y if GRKERNSEC_CONFIG_AUTO
 	depends on PAX_NOEXEC && X86_32
 	help
 	  This implementation is based on the segmentation feature of the
@@ -197,8 +433,9 @@ config PAX_SEGMEXEC
 	  3 GB.
 
 config PAX_EMUTRAMP
-	bool "Emulate trampolines" if (PAX_PAGEEXEC || PAX_SEGMEXEC) && (PARISC || X86)
-	default y if PARISC
+	bool "Emulate trampolines"
+	default y if PARISC || GRKERNSEC_CONFIG_AUTO
+	depends on (PAX_PAGEEXEC || PAX_SEGMEXEC) && (PARISC || X86)
 	help
 	  There are some programs and libraries that for one reason or
 	  another attempt to execute special small code snippets from
@@ -255,6 +492,7 @@ config PAX_EMUSIGRT
 
 config PAX_MPROTECT
 	bool "Restrict mprotect()"
+	default y if GRKERNSEC_CONFIG_AUTO
 	depends on (PAX_PAGEEXEC || PAX_SEGMEXEC)
 	help
 	  Enabling this option will prevent programs from
@@ -270,8 +508,20 @@ config PAX_MPROTECT
 	  NOTE: you can use the 'chpax' or 'paxctl' utilities to control
 	  this feature on a per file basis.
 
+config PAX_MPROTECT_COMPAT
+	bool "Use legacy/compat protection demoting (read help)"
+	depends on PAX_MPROTECT
+	default n
+	help
+	  The current implementation of PAX_MPROTECT denies RWX allocations/mprotects
+	  by sending the proper error code to the application.  For some older
+	  userland, this can cause problems with applications that assume such
+	  allocations will not be prevented by PaX or SELinux and other access
+	  control systems and have no fallback mechanisms.  For modern distros,
+	  this option should generally be set to 'N'.
+
 config PAX_ELFRELOCS
-	bool "Allow ELF text relocations"
+	bool "Allow ELF text relocations (read help)"
 	depends on PAX_MPROTECT
 	default n
 	help
@@ -330,6 +580,7 @@ config PAX_DLRESOLVE
 
 config PAX_KERNEXEC
 	bool "Enforce non-executable kernel pages"
+	default y if GRKERNSEC_CONFIG_AUTO && (!X86 || GRKERNSEC_CONFIG_VIRT_NONE || (GRKERNSEC_CONFIG_VIRT_EPT && GRKERNSEC_CONFIG_VIRT_GUEST) || (GRKERNSEC_CONFIG_VIRT_EPT && GRKERNSEC_CONFIG_VIRT_KVM))
 	depends on (X86 || (ARM && (CPU_V6 || CPU_V6K || CPU_V7) && !(ARM_LPAE && MODULES))) && !XEN
 	select PAX_PER_CPU_PGD if X86_64 || (X86_32 && X86_PAE)
 	select ARM_KERNMEM_PERMS if ARM
@@ -338,6 +589,14 @@ config PAX_KERNEXEC
 	  that is, enabling this option will make it harder to inject
 	  and execute 'foreign' code in kernel memory itself.
 
+	  Note that on amd64, CONFIG_EFI enabled with "efi=old_map" on
+	  the kernel command-line will result in an RWX physical map.
+
+	  Likewise, the EFI runtime services are necessarily mapped as
+	  RWX.  If CONFIG_EFI is enabled on an EFI-capable system, it
+	  is recommended that you boot with "noefi" on the kernel
+	  command-line if possible to eliminate the mapping.
+
 config PAX_KERNEXEC_PLUGIN
 	bool
 	depends on GCC_PLUGINS && X86_64
@@ -398,7 +657,8 @@ endchoice
 
 config PAX_KERNEXEC_MODULE_TEXT
 	int "Minimum amount of memory reserved for module code"
-	default "4"
+	default "8" if (!GRKERNSEC_CONFIG_AUTO || GRKERNSEC_CONFIG_SERVER)
+	default "12" if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_DESKTOP)
 	depends on PAX_KERNEXEC && X86_32
 	help
 	  Due to implementation details the kernel must reserve a fixed
@@ -424,6 +684,7 @@ menu "Address Space Layout Randomization"
 
 config PAX_ASLR
 	bool "Address Space Layout Randomization"
+	default y if GRKERNSEC_CONFIG_AUTO
 	help
 	  Many if not most exploit techniques rely on the knowledge of
 	  certain addresses in the attacked program.  The following options
@@ -452,6 +713,7 @@ config PAX_ASLR
 
 config PAX_RANDKSTACK
 	bool "Randomize kernel stack base"
+	default y if GRKERNSEC_CONFIG_AUTO && !(GRKERNSEC_CONFIG_VIRT_HOST && GRKERNSEC_CONFIG_VIRT_VIRTUALBOX)
 	depends on X86_TSC && X86
 	help
 	  By saying Y here the kernel will randomize every task's kernel
@@ -469,6 +731,7 @@ config PAX_RANDUSTACK
 
 config PAX_RANDMMAP
 	bool "Randomize user stack and mmap() bases"
+	default y if GRKERNSEC_CONFIG_AUTO
 	depends on PAX_ASLR
 	select PAX_RANDUSTACK
 	help
@@ -503,7 +766,7 @@ menu "Miscellaneous hardening features"
 
 config PAX_MEMORY_SANITIZE
 	bool "Sanitize all freed memory"
-	depends on !DEBUG_PAGEALLOC
+	default y if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_PRIORITY_SECURITY)
 	help
 	  By saying Y here the kernel will erase memory pages and slab objects
 	  as soon as they are freed.  This in turn reduces the lifetime of data
@@ -540,6 +803,7 @@ config PAX_MEMORY_SANITIZE
 
 config PAX_MEMORY_STACKLEAK
 	bool "Sanitize kernel stack"
+	default y if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_PRIORITY_SECURITY)
 	depends on X86 && GCC_PLUGINS
 	help
 	  By saying Y here the kernel will erase the kernel stack before it
@@ -565,6 +829,7 @@ config PAX_MEMORY_STACKLEAK
 
 config PAX_MEMORY_STRUCTLEAK
 	bool "Forcibly initialize local variables copied to userland"
+	default y if (GRKERNSEC_CONFIG_AUTO && GRKERNSEC_CONFIG_PRIORITY_SECURITY)
 	depends on GCC_PLUGINS
 	help
 	  By saying Y here the kernel will zero initialize some local
@@ -582,6 +847,7 @@ config PAX_MEMORY_STRUCTLEAK
 
 config PAX_MEMORY_UDEREF
 	bool "Prevent invalid userland pointer dereference"
+	default y if GRKERNSEC_CONFIG_AUTO && !(X86_64 && GRKERNSEC_CONFIG_PRIORITY_PERF) && !(X86_64 && GRKERNSEC_CONFIG_VIRT_HOST && GRKERNSEC_CONFIG_VIRT_VIRTUALBOX) && (!X86 || GRKERNSEC_CONFIG_VIRT_NONE || GRKERNSEC_CONFIG_VIRT_EPT)
 	depends on (X86 || (ARM && (CPU_V6 || CPU_V6K || CPU_V7) && !ARM_LPAE)) && !UML_X86 && !XEN
 	select PAX_PER_CPU_PGD if X86_64
 	help
@@ -606,7 +872,8 @@ config PAX_MEMORY_UDEREF
 
 config PAX_REFCOUNT
 	bool "Prevent various kernel object reference counter overflows"
-	depends on (ARM && (CPU_V6 || CPU_V6K || CPU_V7)) || MIPS || PPC || SPARC64 || X86
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC && ((ARM && (CPU_V6 || CPU_V6K || CPU_V7)) || MIPS || PPC || SPARC64 || X86)
 	help
 	  By saying Y here the kernel will detect and prevent overflowing
 	  various (but not all) kinds of object reference counters.  Such
@@ -625,7 +892,8 @@ config PAX_REFCOUNT
 
 config PAX_USERCOPY
 	bool "Harden memory copies between kernel and userland"
-	depends on HAVE_ARCH_HARDENED_USERCOPY
+	default y if GRKERNSEC_CONFIG_AUTO
+	depends on GRKERNSEC && HAVE_ARCH_HARDENED_USERCOPY
 	select HARDENED_USERCOPY
 	help
 	  By saying Y here the kernel will enforce the size of heap objects
@@ -654,6 +922,7 @@ config PAX_USERCOPY
 
 config PAX_CONSTIFY_PLUGIN
 	bool "Automatically constify eligible structures"
+	default y
 	depends on !UML && PAX_KERNEXEC && GCC_PLUGINS
 	help
 	  By saying Y here the compiler will automatically constify a class
@@ -669,9 +938,17 @@ config PAX_CONSTIFY_PLUGIN
 	  can be found in PaX itself (the no_const attribute) and for some
 	  out-of-tree modules at http://www.grsecurity.net/~paxguy1/ .
 
+
+config PAX_USERCOPY_DEBUG
+	bool
+	depends on X86 && PAX_USERCOPY
+	default n
+
 config PAX_SIZE_OVERFLOW
 	bool "Prevent various integer overflows in function size parameters"
+	default y if GRKERNSEC_CONFIG_AUTO
 	depends on GCC_PLUGINS
+	depends on !SPARC64 && !ARM64
 	help
 	  By saying Y here the kernel recomputes expressions of function
 	  arguments marked by a size_overflow attribute with double integer
@@ -691,6 +968,7 @@ config PAX_SIZE_OVERFLOW
 
 config PAX_SIZE_OVERFLOW_EXTRA
 	bool "Increase coverage of size overflow checking"
+	default y if GRKERNSEC_CONFIG_AUTO
 	depends on PAX_SIZE_OVERFLOW
 	help
 	  By saying Y here the kernel will instrument more size argument
@@ -734,6 +1012,7 @@ config PAX_INITIFY_VERBOSE
 
 config PAX_LATENT_ENTROPY
 	bool "Generate some entropy during boot and runtime"
+	default y if GRKERNSEC_CONFIG_AUTO
 	depends on GCC_PLUGINS
 	select GCC_PLUGIN_LATENT_ENTROPY
 	help
@@ -759,6 +1038,7 @@ config PAX_LATENT_ENTROPY
 config PAX_RAP
 	bool "Prevent code reuse attacks"
 	depends on X86_64 && GCC_PLUGINS
+	default y if GRKERNSEC_CONFIG_AUTO
 	help
 	  By saying Y here the kernel will check indirect control transfers
 	  in order to detect and prevent attacks that try to hijack control
@@ -778,6 +1058,12 @@ endmenu
 
 endmenu
 
+source grsecurity/Kconfig
+
+endmenu
+
+endmenu
+
 source security/keys/Kconfig
 
 config SECURITY_DMESG_RESTRICT
@@ -963,4 +1249,3 @@ config DEFAULT_SECURITY
 	default "" if DEFAULT_SECURITY_DAC
 
 endmenu
-
diff --git a/security/apparmor/file.c b/security/apparmor/file.c
index 4d2af4b01033..608971ac6781 100644
--- a/security/apparmor/file.c
+++ b/security/apparmor/file.c
@@ -349,8 +349,8 @@ static inline bool xindex_is_subset(u32 link, u32 target)
 int aa_path_link(struct aa_profile *profile, struct dentry *old_dentry,
 		 const struct path *new_dir, struct dentry *new_dentry)
 {
-	struct path link = { new_dir->mnt, new_dentry };
-	struct path target = { new_dir->mnt, old_dentry };
+	struct path link = { .mnt = new_dir->mnt, .dentry = new_dentry };
+	struct path target = { .mnt = new_dir->mnt, .dentry = old_dentry };
 	struct path_cond cond = {
 		d_backing_inode(old_dentry)->i_uid,
 		d_backing_inode(old_dentry)->i_mode
diff --git a/security/apparmor/lsm.c b/security/apparmor/lsm.c
index 06670d3b39ab..411695cdc9f0 100644
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -176,7 +176,7 @@ static int common_perm_dir_dentry(int op, const struct path *dir,
 				  struct dentry *dentry, u32 mask,
 				  struct path_cond *cond)
 {
-	struct path path = { dir->mnt, dentry };
+	struct path path = { .mnt = dir->mnt, .dentry = dentry };
 
 	return common_perm(op, &path, mask, cond);
 }
@@ -306,8 +306,8 @@ static int apparmor_path_rename(const struct path *old_dir, struct dentry *old_d
 
 	profile = aa_current_profile();
 	if (!unconfined(profile)) {
-		struct path old_path = { old_dir->mnt, old_dentry };
-		struct path new_path = { new_dir->mnt, new_dentry };
+		struct path old_path = { .mnt = old_dir->mnt, .dentry = old_dentry };
+		struct path new_path = { .mnt = new_dir->mnt, .dentry = new_dentry };
 		struct path_cond cond = { d_backing_inode(old_dentry)->i_uid,
 					  d_backing_inode(old_dentry)->i_mode
 		};
diff --git a/security/commoncap.c b/security/commoncap.c
index 8df676fbd393..77e2cb5f351a 100644
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -433,6 +433,32 @@ int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data
 	return 0;
 }
 
+/* returns:
+	1 for suid privilege
+	2 for sgid privilege
+	3 for fscap privilege
+*/
+int is_privileged_binary(const struct dentry *dentry)
+{
+	struct cpu_vfs_cap_data capdata;
+	struct inode *inode = dentry->d_inode;
+
+	if (!inode || S_ISDIR(inode->i_mode))
+		return 0;
+
+	if (inode->i_mode & S_ISUID)
+		return 1;
+	if ((inode->i_mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP))
+		return 2;
+
+	if (!get_vfs_caps_from_disk(dentry, &capdata)) {
+		if (!cap_isclear(capdata.inheritable) || !cap_isclear(capdata.permitted))
+			return 3;
+	}
+
+	return 0;
+}
+
 /*
  * Attempt to get the on-exec apply capability sets for an executable file from
  * its xattrs and, if present, apply them to the proposed credentials being
@@ -631,6 +657,9 @@ int cap_bprm_secureexec(struct linux_binprm *bprm)
 	const struct cred *cred = current_cred();
 	kuid_t root_uid = make_kuid(cred->user_ns, 0);
 
+	if (gr_acl_enable_at_secure())
+		return 1;
+
 	if (!uid_eq(cred->uid, root_uid)) {
 		if (bprm->cap_effective)
 			return 1;
diff --git a/security/keys/internal.h b/security/keys/internal.h
index 68555bb294f9..898c675f11b0 100644
--- a/security/keys/internal.h
+++ b/security/keys/internal.h
@@ -196,7 +196,7 @@ struct request_key_auth {
 	void			*callout_info;
 	size_t			callout_len;
 	pid_t			pid;
-};
+} __randomize_layout;
 
 extern struct key_type key_type_request_key_auth;
 extern struct key *request_key_auth_new(struct key *target,
diff --git a/security/keys/keyctl.c b/security/keys/keyctl.c
index d580ad06b792..283a3ed6c45a 100644
--- a/security/keys/keyctl.c
+++ b/security/keys/keyctl.c
@@ -99,7 +99,7 @@ SYSCALL_DEFINE5(add_key, const char __user *, _type,
 
 	if (_payload) {
 		ret = -ENOMEM;
-		payload = kmalloc(plen, GFP_KERNEL | __GFP_NOWARN);
+		payload = kmalloc(plen, GFP_KERNEL | GFP_USERCOPY | __GFP_NOWARN);
 		if (!payload) {
 			if (plen <= PAGE_SIZE)
 				goto error2;
@@ -324,7 +324,7 @@ long keyctl_update_key(key_serial_t id,
 	payload = NULL;
 	if (_payload) {
 		ret = -ENOMEM;
-		payload = kmalloc(plen, GFP_KERNEL);
+		payload = kmalloc(plen, GFP_KERNEL | GFP_USERCOPY);
 		if (!payload)
 			goto error;
 
@@ -616,7 +616,7 @@ long keyctl_describe_key(key_serial_t keyid,
 
 	/* calculate how much information we're going to return */
 	ret = -ENOMEM;
-	infobuf = kasprintf(GFP_KERNEL,
+	infobuf = kasprintf(GFP_KERNEL | GFP_USERCOPY,
 			    "%s;%d;%d;%08x;",
 			    key->type->name,
 			    from_kuid_munged(current_user_ns(), key->uid),
@@ -1064,7 +1064,7 @@ long keyctl_instantiate_key_common(key_serial_t id,
 
 	if (from) {
 		ret = -ENOMEM;
-		payload = kmalloc(plen, GFP_KERNEL);
+		payload = kmalloc(plen, GFP_KERNEL | GFP_USERCOPY);
 		if (!payload) {
 			if (plen <= PAGE_SIZE)
 				goto error;
diff --git a/security/tomoyo/file.c b/security/tomoyo/file.c
index 7041a580019e..223f21ffa632 100644
--- a/security/tomoyo/file.c
+++ b/security/tomoyo/file.c
@@ -692,7 +692,7 @@ int tomoyo_path_number_perm(const u8 type, const struct path *path,
 {
 	struct tomoyo_request_info r;
 	struct tomoyo_obj_info obj = {
-		.path1 = *path,
+		.path1 = { .mnt = path->mnt, .dentry = path->dentry },
 	};
 	int error = -ENOMEM;
 	struct tomoyo_path_info buf;
@@ -740,7 +740,7 @@ int tomoyo_check_open_permission(struct tomoyo_domain_info *domain,
 	struct tomoyo_path_info buf;
 	struct tomoyo_request_info r;
 	struct tomoyo_obj_info obj = {
-		.path1 = *path,
+		.path1 = { .mnt = path->mnt, .dentry = path->dentry },
 	};
 	int idx;
 
@@ -786,7 +786,7 @@ int tomoyo_path_perm(const u8 operation, const struct path *path, const char *ta
 {
 	struct tomoyo_request_info r;
 	struct tomoyo_obj_info obj = {
-		.path1 = *path,
+		.path1 = { .mnt = path->mnt, .dentry = path->dentry },
 	};
 	int error;
 	struct tomoyo_path_info buf;
@@ -843,7 +843,7 @@ int tomoyo_mkdev_perm(const u8 operation, const struct path *path,
 {
 	struct tomoyo_request_info r;
 	struct tomoyo_obj_info obj = {
-		.path1 = *path,
+		.path1 = { .mnt = path->mnt, .dentry = path->dentry },
 	};
 	int error = -ENOMEM;
 	struct tomoyo_path_info buf;
@@ -890,8 +890,8 @@ int tomoyo_path2_perm(const u8 operation, const struct path *path1,
 	struct tomoyo_path_info buf2;
 	struct tomoyo_request_info r;
 	struct tomoyo_obj_info obj = {
-		.path1 = *path1,
-		.path2 = *path2,
+		.path1 = { .mnt = path1->mnt, .dentry = path1->dentry },
+		.path2 = { .mnt = path2->mnt, .dentry = path2->dentry }
 	};
 	int idx;
 
diff --git a/security/tomoyo/mount.c b/security/tomoyo/mount.c
index 14b53fb2a0cf..8829296de5e6 100644
--- a/security/tomoyo/mount.c
+++ b/security/tomoyo/mount.c
@@ -118,6 +118,10 @@ static int tomoyo_mount_acl(struct tomoyo_request_info *r,
 		   type == tomoyo_mounts[TOMOYO_MOUNT_MOVE]) {
 		need_dev = -1; /* dev_name is a directory */
 	} else {
+		if (!capable(CAP_SYS_ADMIN)) {
+			error = -EPERM;
+			goto out;
+		}
 		fstype = get_fs_type(type);
 		if (!fstype) {
 			error = -ENODEV;
diff --git a/security/tomoyo/tomoyo.c b/security/tomoyo/tomoyo.c
index 75c998700190..b9569d497df2 100644
--- a/security/tomoyo/tomoyo.c
+++ b/security/tomoyo/tomoyo.c
@@ -165,7 +165,7 @@ static int tomoyo_path_truncate(const struct path *path)
  */
 static int tomoyo_path_unlink(const struct path *parent, struct dentry *dentry)
 {
-	struct path path = { parent->mnt, dentry };
+	struct path path = { .mnt = parent->mnt, .dentry = dentry };
 	return tomoyo_path_perm(TOMOYO_TYPE_UNLINK, &path, NULL);
 }
 
@@ -181,7 +181,7 @@ static int tomoyo_path_unlink(const struct path *parent, struct dentry *dentry)
 static int tomoyo_path_mkdir(const struct path *parent, struct dentry *dentry,
 			     umode_t mode)
 {
-	struct path path = { parent->mnt, dentry };
+	struct path path = { .mnt = parent->mnt, .dentry = dentry };
 	return tomoyo_path_number_perm(TOMOYO_TYPE_MKDIR, &path,
 				       mode & S_IALLUGO);
 }
@@ -196,7 +196,7 @@ static int tomoyo_path_mkdir(const struct path *parent, struct dentry *dentry,
  */
 static int tomoyo_path_rmdir(const struct path *parent, struct dentry *dentry)
 {
-	struct path path = { parent->mnt, dentry };
+	struct path path = { .mnt = parent->mnt, .dentry = dentry };
 	return tomoyo_path_perm(TOMOYO_TYPE_RMDIR, &path, NULL);
 }
 
@@ -212,7 +212,7 @@ static int tomoyo_path_rmdir(const struct path *parent, struct dentry *dentry)
 static int tomoyo_path_symlink(const struct path *parent, struct dentry *dentry,
 			       const char *old_name)
 {
-	struct path path = { parent->mnt, dentry };
+	struct path path = { .mnt = parent->mnt, .dentry = dentry };
 	return tomoyo_path_perm(TOMOYO_TYPE_SYMLINK, &path, old_name);
 }
 
@@ -229,7 +229,7 @@ static int tomoyo_path_symlink(const struct path *parent, struct dentry *dentry,
 static int tomoyo_path_mknod(const struct path *parent, struct dentry *dentry,
 			     umode_t mode, unsigned int dev)
 {
-	struct path path = { parent->mnt, dentry };
+	struct path path = { .mnt = parent->mnt, .dentry = dentry };
 	int type = TOMOYO_TYPE_CREATE;
 	const unsigned int perm = mode & S_IALLUGO;
 
@@ -268,8 +268,8 @@ static int tomoyo_path_mknod(const struct path *parent, struct dentry *dentry,
 static int tomoyo_path_link(struct dentry *old_dentry, const struct path *new_dir,
 			    struct dentry *new_dentry)
 {
-	struct path path1 = { new_dir->mnt, old_dentry };
-	struct path path2 = { new_dir->mnt, new_dentry };
+	struct path path1 = { .mnt = new_dir->mnt, .dentry = old_dentry };
+	struct path path2 = { .mnt = new_dir->mnt, .dentry = new_dentry };
 	return tomoyo_path2_perm(TOMOYO_TYPE_LINK, &path1, &path2);
 }
 
@@ -288,8 +288,8 @@ static int tomoyo_path_rename(const struct path *old_parent,
 			      const struct path *new_parent,
 			      struct dentry *new_dentry)
 {
-	struct path path1 = { old_parent->mnt, old_dentry };
-	struct path path2 = { new_parent->mnt, new_dentry };
+	struct path path1 = { .mnt = old_parent->mnt, .dentry = old_dentry };
+	struct path path2 = { .mnt = new_parent->mnt, .dentry = new_dentry };
 	return tomoyo_path2_perm(TOMOYO_TYPE_RENAME, &path1, &path2);
 }
 
@@ -417,7 +417,7 @@ static int tomoyo_sb_mount(const char *dev_name, const struct path *path,
  */
 static int tomoyo_sb_umount(struct vfsmount *mnt, int flags)
 {
-	struct path path = { mnt, mnt->mnt_root };
+	struct path path = { .mnt = mnt, .dentry = mnt->mnt_root };
 	return tomoyo_path_perm(TOMOYO_TYPE_UMOUNT, &path, NULL);
 }
 
diff --git a/security/yama/Kconfig b/security/yama/Kconfig
index 90c605eea892..bf3a29ae1f49 100644
--- a/security/yama/Kconfig
+++ b/security/yama/Kconfig
@@ -1,6 +1,6 @@
 config SECURITY_YAMA
 	bool "Yama support"
-	depends on SECURITY
+	depends on SECURITY && !GRKERNSEC
 	default n
 	help
 	  This selects Yama, which extends DAC support with additional
diff --git a/sound/synth/emux/emux_seq.c b/sound/synth/emux/emux_seq.c
index a0209204ae48..55579f6b8cb2 100644
--- a/sound/synth/emux/emux_seq.c
+++ b/sound/synth/emux/emux_seq.c
@@ -33,13 +33,13 @@ static int snd_emux_unuse(void *private_data, struct snd_seq_port_subscribe *inf
  * MIDI emulation operators
  */
 static struct snd_midi_op emux_ops = {
-	snd_emux_note_on,
-	snd_emux_note_off,
-	snd_emux_key_press,
-	snd_emux_terminate_note,
-	snd_emux_control,
-	snd_emux_nrpn,
-	snd_emux_sysex,
+	.note_on = snd_emux_note_on,
+	.note_off = snd_emux_note_off,
+	.key_press = snd_emux_key_press,
+	.note_terminate = snd_emux_terminate_note,
+	.control = snd_emux_control,
+	.nrpn = snd_emux_nrpn,
+	.sysex = snd_emux_sysex,
 };
 
 
diff --git a/sound/usb/line6/driver.c b/sound/usb/line6/driver.c
index ab3c280a23d1..e5cb2929a835 100644
--- a/sound/usb/line6/driver.c
+++ b/sound/usb/line6/driver.c
@@ -337,7 +337,7 @@ int line6_read_data(struct usb_line6 *line6, unsigned address, void *data,
 {
 	struct usb_device *usbdev = line6->usbdev;
 	int ret;
-	unsigned char len;
+	unsigned char *plen;
 	unsigned count;
 
 	if (address > 0xffff || datalen > 0xff)
@@ -354,6 +354,10 @@ int line6_read_data(struct usb_line6 *line6, unsigned address, void *data,
 		return ret;
 	}
 
+	plen = kmalloc(1, GFP_KERNEL);
+	if (plen == NULL)
+		return -ENOMEM;
+
 	/* Wait for data length. We'll get 0xff until length arrives. */
 	for (count = 0; count < LINE6_READ_WRITE_MAX_RETRIES; count++) {
 		mdelay(LINE6_READ_WRITE_STATUS_DELAY);
@@ -361,30 +365,35 @@ int line6_read_data(struct usb_line6 *line6, unsigned address, void *data,
 		ret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0), 0x67,
 				      USB_TYPE_VENDOR | USB_RECIP_DEVICE |
 				      USB_DIR_IN,
-				      0x0012, 0x0000, &len, 1,
+				      0x0012, 0x0000, plen, 1,
 				      LINE6_TIMEOUT * HZ);
 		if (ret < 0) {
 			dev_err(line6->ifcdev,
 				"receive length failed (error %d)\n", ret);
+			kfree(plen);
 			return ret;
 		}
 
-		if (len != 0xff)
+		if (*plen != 0xff)
 			break;
 	}
 
-	if (len == 0xff) {
+	if (*plen == 0xff) {
 		dev_err(line6->ifcdev, "read failed after %d retries\n",
 			count);
+		kfree(plen);
 		return -EIO;
-	} else if (len != datalen) {
+	} else if (*plen != datalen) {
 		/* should be equal or something went wrong */
 		dev_err(line6->ifcdev,
 			"length mismatch (expected %d, got %d)\n",
-			(int)datalen, (int)len);
+			(int)datalen, (int)*plen);
+		kfree(plen);
 		return -EIO;
 	}
 
+	kfree(plen);
+
 	/* receive the result: */
 	ret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0), 0x67,
 			      USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_IN,
@@ -408,7 +417,7 @@ int line6_write_data(struct usb_line6 *line6, unsigned address, void *data,
 {
 	struct usb_device *usbdev = line6->usbdev;
 	int ret;
-	unsigned char status;
+	unsigned char *status;
 	int count;
 
 	if (address > 0xffff || datalen > 0xffff)
@@ -425,6 +434,10 @@ int line6_write_data(struct usb_line6 *line6, unsigned address, void *data,
 		return ret;
 	}
 
+	status = kmalloc(1, GFP_KERNEL);
+	if (status == NULL)
+		return -ENOMEM;
+
 	for (count = 0; count < LINE6_READ_WRITE_MAX_RETRIES; count++) {
 		mdelay(LINE6_READ_WRITE_STATUS_DELAY);
 
@@ -433,27 +446,32 @@ int line6_write_data(struct usb_line6 *line6, unsigned address, void *data,
 				      USB_TYPE_VENDOR | USB_RECIP_DEVICE |
 				      USB_DIR_IN,
 				      0x0012, 0x0000,
-				      &status, 1, LINE6_TIMEOUT * HZ);
+				      status, 1, LINE6_TIMEOUT * HZ);
 
 		if (ret < 0) {
 			dev_err(line6->ifcdev,
 				"receiving status failed (error %d)\n", ret);
+			kfree(status);
 			return ret;
 		}
 
-		if (status != 0xff)
+		if (*status != 0xff)
 			break;
 	}
 
-	if (status == 0xff) {
+	if (*status == 0xff) {
 		dev_err(line6->ifcdev, "write failed after %d retries\n",
 			count);
+		kfree(status);
 		return -EIO;
-	} else if (status != 0) {
+	} else if (*status != 0) {
 		dev_err(line6->ifcdev, "write failed (error %d)\n", ret);
+		kfree(status);
 		return -EIO;
 	}
 
+	kfree(status);
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(line6_write_data);
diff --git a/sound/usb/line6/toneport.c b/sound/usb/line6/toneport.c
index 8e22f430d700..2f5e18c3c138 100644
--- a/sound/usb/line6/toneport.c
+++ b/sound/usb/line6/toneport.c
@@ -367,13 +367,19 @@ static bool toneport_has_source_select(struct usb_line6_toneport *toneport)
 */
 static void toneport_setup(struct usb_line6_toneport *toneport)
 {
-	int ticks;
+	int *ticks;
 	struct usb_line6 *line6 = &toneport->line6;
 	struct usb_device *usbdev = line6->usbdev;
 
+	ticks = kmalloc(sizeof(int), GFP_KERNEL);
+	if (ticks == NULL)
+		return;
+
 	/* sync time on device with host: */
-	ticks = (int)get_seconds();
-	line6_write_data(line6, 0x80c6, &ticks, 4);
+	*ticks = (int)get_seconds();
+	line6_write_data(line6, 0x80c6, ticks, sizeof(int));
+
+	kfree(ticks);
 
 	/* enable device: */
 	toneport_send_cmd(usbdev, 0x0301, 0x0000);
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index f144f1518629..07aea886e77d 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -577,6 +577,10 @@ static int kvm_create_vm_debugfs(struct kvm *kvm, int fd)
 	struct kvm_stat_data *stat_data;
 	struct kvm_stats_debugfs_item *p;
 
+#ifdef CONFIG_GRKERNSEC_SYSFS_RESTRICT
+	return 0;
+#endif
+
 	if (!debugfs_initialized())
 		return 0;
 
