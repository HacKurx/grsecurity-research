diff --git a/arch/Kconfig b/arch/Kconfig
index 659bdd0..4179181 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -164,6 +164,7 @@ config ARCH_USE_BUILTIN_BSWAP
 config KRETPROBES
 	def_bool y
 	depends on KPROBES && HAVE_KRETPROBES
+	depends on !PAX_RAP
 
 config USER_RETURN_NOTIFIER
 	bool
diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index ef766a3..d3f0e59 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -747,11 +1194,15 @@ apicinterrupt IRQ_WORK_VECTOR			irq_work_interrupt		smp_irq_work_interrupt
 
-.macro idtentry sym do_sym has_error_code:req paranoid=0 shift_ist=-1
+.macro idtentry sym do_sym has_error_code:req paranoid=0 shift_ist=-1 rap_hash=0
 ENTRY(\sym)
 	/* Sanity check */
 	.if \shift_ist != -1 && \paranoid == 0
 	.error "using shift_ist requires paranoid=1"
 	.endif
 
+	.if \paranoid != 0 && \rap_hash==tailcall
+	.error "tail called idt entry cannot be paranoid"
+	.endif
+
 	ASM_CLAC
 	PARAVIRT_ADJUST_EXCEPTION_FRAME
 
@@ -795,7 +1246,14 @@ ENTRY(\sym)
 	subq	$EXCEPTION_STKSZ, CPU_TSS_IST(\shift_ist)
 	.endif
 
-	call	\do_sym
+	.ifc \rap_hash,tailcall
+	jmp \do_sym
+	.exitm
+	.elseif \rap_hash == 0
+	pax_direct_call \do_sym
+	.else
+	pax_indirect_call \do_sym, \rap_hash
+	.endif
 
 	.if \shift_ist != -1
 	addq	$EXCEPTION_STKSZ, CPU_TSS_IST(\shift_ist)
@@ -828,11 +1292,15 @@ ENTRY(\sym)
 	xorl	%esi, %esi			/* no error code */
 	.endif
 
-	call	\do_sym
+	.if \rap_hash == 0
+	pax_direct_call \do_sym
+	.else
+	pax_indirect_call \do_sym, \rap_hash
+	.endif
 
 	jmp	error_exit			/* %ebx: no swapgs flag */
 	.endif
-END(\sym)
+ENDPROC(\sym)
 .endm
 
 #ifdef CONFIG_TRACING
