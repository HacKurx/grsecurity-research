diff --git a/arch/x86/include/asm/alternative.h b/arch/x86/include/asm/alternative.h
index 1b02038..d42eaf6 100644
--- a/arch/x86/include/asm/alternative.h
+++ b/arch/x86/include/asm/alternative.h
@@ -7,6 +7,7 @@
 #include <linux/stddef.h>
 #include <linux/stringify.h>
 #include <asm/asm.h>
+#include <asm/irq_vectors.h>
 
 /*
  * Alternative inline assembly for SMP.
@@ -84,6 +85,18 @@ static inline int alternatives_text_reserved(void *start, void *end)
 }
 #endif	/* CONFIG_SMP */
 
+#ifdef CONFIG_PAX_RAP
+#define PAX_DIRECT_CALL(target) "rap_direct_call " target
+#define PAX_DIRECT_CALL_HASH(target, hash) "rap_direct_call " target " " hash
+#define PAX_INDIRECT_CALL(target, extra) "rap_indirect_call " target " " extra
+#define PAX_RET(extra) "rap_ret " extra
+#else
+#define PAX_DIRECT_CALL(target) "call " target
+#define PAX_DIRECT_CALL_HASH(target, hash) "call " target
+#define PAX_INDIRECT_CALL(target, extra) "call " target
+#define PAX_RET(extra) "ret"
+#endif
+
 #define b_replacement(num)	"664"#num
 #define e_replacement(num)	"665"#num
 
@@ -206,7 +219,7 @@ static inline int alternatives_text_reserved(void *start, void *end)
 
 /* Like alternative_io, but for replacing a direct call with another one. */
 #define alternative_call(oldfunc, newfunc, feature, output, input...)	\
-	asm volatile (ALTERNATIVE("call %P[old]", "call %P[new]", feature) \
+	asm volatile (ALTERNATIVE(PAX_DIRECT_CALL("%P[old]"), PAX_DIRECT_CALL("%P[new]"), feature) \
 		: output : [old] "i" (oldfunc), [new] "i" (newfunc), ## input)
 
 /*
@@ -219,8 +232,8 @@ static inline int alternatives_text_reserved(void *start, void *end)
 			   output, input...)				      \
 {									      \
 	register void *__sp asm(_ASM_SP);				      \
-	asm volatile (ALTERNATIVE_2("call %P[old]", "call %P[new1]", feature1,\
-		"call %P[new2]", feature2)				      \
+	asm volatile (ALTERNATIVE_2(PAX_DIRECT_CALL("%P[old]"), PAX_DIRECT_CALL("%P[new1]"), feature1,\
+		PAX_DIRECT_CALL("%P[new2]"), feature2)				      \
 		: output, "+r" (__sp)					      \
 		: [old] "i" (oldfunc), [new1] "i" (newfunc1),		      \
 		  [new2] "i" (newfunc2), ## input);			      \
diff --git a/arch/x86/include/asm/atomic64_32.h b/arch/x86/include/asm/atomic64_32.h
index 71d7705..02bb244 100644
--- a/arch/x86/include/asm/atomic64_32.h
+++ b/arch/x86/include/asm/atomic64_32.h
@@ -23,7 +31,7 @@ typedef struct {
 
 #ifdef CONFIG_X86_CMPXCHG64
 #define __alternative_atomic64(f, g, out, in...) \
-	asm volatile("call %P[func]" \
+	asm volatile(PAX_DIRECT_CALL("%P[func]") \
 		     : out : [func] "i" (atomic64_##g##_cx8), ## in)
 
 #define ATOMIC64_DECL(sym) ATOMIC64_DECL_ONE(sym##_cx8)
